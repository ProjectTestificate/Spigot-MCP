--- decompiled\net\minecraft\nbt\NBTTagList.java
+++ src\main\java\net\minecraft\nbt\NBTTagList.java
@@ -1,18 +1,21 @@
 package net.minecraft.nbt;
 
-import com.google.common.collect.Lists;
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
 import java.util.Iterator;
 import java.util.List;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import com.google.common.collect.Lists;
+
 public class NBTTagList extends NBTBase
 {
+
     private static final Logger LOGGER = LogManager.getLogger();
     private List tagList = Lists.newArrayList();
     private byte tagType = 0;
     private static final String __OBFID = "CL_00001224";
 
@@ -25,39 +28,46 @@
         else
         {
             this.tagType = 0;
         }
 
+        // try { // CraftBukkit // SpigotMCP -- Remove unnecessary try
         output.writeByte(this.tagType);
         output.writeInt(this.tagList.size());
 
         for (int i = 0; i < this.tagList.size(); ++i)
         {
             ((NBTBase)this.tagList.get(i)).write(output);
         }
+
+        // } catch (Throwable t) { sneakyThrow(t); } // CraftBukkit // SpigotMCP -- Remove unnecessary catch
     }
 
     void read(DataInput input, int depth, NBTSizeTracker sizeTracker) throws IOException
     {
+        // try { // CraftBukkit // SpigotMCP -- Remove unnecessary try
         if (depth > 512)
         {
             throw new RuntimeException("Tried to read NBT tag with too high complexity, depth > 512");
         }
         else
         {
             sizeTracker.read(8L);
             this.tagType = input.readByte();
             int j = input.readInt();
+            sizeTracker.read(j * 8); // CraftBukkit
             this.tagList = Lists.newArrayList();
 
             for (int k = 0; k < j; ++k)
             {
                 NBTBase nbtbase = NBTBase.createNewByType(this.tagType);
                 nbtbase.read(input, depth + 1, sizeTracker);
                 this.tagList.add(nbtbase);
             }
         }
+
+        // } catch (Throwable t) { sneakyThrow(t); } // CraftBukkit // SpigotMCP -- Remove unnecessary catch
     }
 
     public byte getId()
     {
         return (byte)9;
@@ -237,6 +247,20 @@
 
     public int getTagType()
     {
         return this.tagType;
     }
+
+    // SpigotMCP Start - Remove unneded code
+    /*
+    // CraftBukkit start
+    public static void sneakyThrow(Throwable ex) {
+        NBTTagList.<RuntimeException>sneakyThrowInner(ex);
+    }
+
+    public static <T extends Throwable> java.lang.Throwable sneakyThrowInner(Throwable ex) throws T {
+        throw (T) ex;
+    }
+    // CraftBukkit end
+    */
+    // SpigotMCP end
 }
