---a/net/minecraft/nbt/NBTTagIntArray.java
+++b/net/minecraft/nbt/NBTTagIntArray.java
@@ -5,53 +5,47 @@
 import java.io.IOException;
 import java.util.Arrays;
 
-public class NBTTagIntArray extends NBTBase
-{
+public class NBTTagIntArray extends NBTBase {
+
     private int[] intArray;
     private static final String __OBFID = "CL_00001221";
 
-    NBTTagIntArray() {}
+    NBTTagIntArray() {
+    }
 
-    public NBTTagIntArray(int[] p_i45132_1_)
-    {
+    public NBTTagIntArray(int[] p_i45132_1_) {
         this.intArray = p_i45132_1_;
     }
 
-    void write(DataOutput output) throws IOException
-    {
+    void write(DataOutput output) throws IOException {
         output.writeInt(this.intArray.length);
 
-        for (int i = 0; i < this.intArray.length; ++i)
-        {
+        for (int i = 0; i < this.intArray.length; ++i) {
             output.writeInt(this.intArray[i]);
         }
     }
 
-    void read(DataInput input, int depth, NBTSizeTracker sizeTracker) throws IOException
-    {
+    void read(DataInput input, int depth, NBTSizeTracker sizeTracker) throws IOException {
         int j = input.readInt();
-        sizeTracker.read((long)(32 * j));
+        sizeTracker.read((long) (32 * j));
         this.intArray = new int[j];
 
-        for (int k = 0; k < j; ++k)
-        {
+        for (int k = 0; k < j; ++k) {
             this.intArray[k] = input.readInt();
         }
     }
 
-    public byte getId()
-    {
-        return (byte)11;
+    public byte getId() {
+        return (byte) 11;
     }
 
-    public String toString()
-    {
+    public String toString() {
         String s = "[";
         int[] aint = this.intArray;
         int i = aint.length;
 
-        for (int j = 0; j < i; ++j)
-        {
+        for (int j = 0; j < i; ++j) {
             int k = aint[j];
             s = s + k + ",";
         }
@@ -59,26 +59,21 @@
         return s + "]";
     }
 
-    public NBTBase copy()
-    {
+    public NBTBase copy() {
         int[] aint = new int[this.intArray.length];
         System.arraycopy(this.intArray, 0, aint, 0, this.intArray.length);
         return new NBTTagIntArray(aint);
     }
 
-    public boolean equals(Object p_equals_1_)
-    {
-        return super.equals(p_equals_1_) ? Arrays.equals(this.intArray, ((NBTTagIntArray)p_equals_1_).intArray) : false;
+    public boolean equals(Object p_equals_1_) {
+        return super.equals(p_equals_1_) ? Arrays.equals(this.intArray, ((NBTTagIntArray) p_equals_1_).intArray) : false;
     }
 
-    public int hashCode()
-    {
+    public int hashCode() {
         return super.hashCode() ^ Arrays.hashCode(this.intArray);
     }
 
-    public int[] getIntArray()
-    {
+    public int[] getIntArray() {
         return this.intArray;
     }
-}
+}
