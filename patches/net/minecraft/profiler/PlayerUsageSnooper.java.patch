--- decompiled\net\minecraft\profiler\PlayerUsageSnooper.java
+++ src\main\java\net\minecraft\profiler\PlayerUsageSnooper.java
@@ -1,27 +1,26 @@
 package net.minecraft.profiler;
 
-import com.google.common.collect.Maps;
 import java.lang.management.ManagementFactory;
 import java.lang.management.RuntimeMXBean;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.HashMap;
 import java.util.Iterator;
-import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Timer;
 import java.util.TimerTask;
 import java.util.UUID;
-import java.util.Map.Entry;
+
 import net.minecraft.util.HttpUtil;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import com.google.common.collect.Maps;
+
 public class PlayerUsageSnooper
 {
+
     private final Map field_152773_a = Maps.newHashMap();
     private final Map field_152774_b = Maps.newHashMap();
     private final String uniqueID = UUID.randomUUID().toString();
     private final URL serverUrl;
     private final IPlayerUsage playerStatsCollector;
@@ -142,56 +141,20 @@
         {
             this.field_152773_a.put(p_152767_1_, p_152767_2_);
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public Map getCurrentStats()
-    {
-        LinkedHashMap linkedhashmap = Maps.newLinkedHashMap();
-        Object object = this.syncLock;
-
-        synchronized (this.syncLock)
-        {
-            this.addMemoryStatsToSnooper();
-            Iterator iterator = this.field_152773_a.entrySet().iterator();
-            Entry entry;
-
-            while (iterator.hasNext())
-            {
-                entry = (Entry)iterator.next();
-                linkedhashmap.put(entry.getKey(), entry.getValue().toString());
-            }
-
-            iterator = this.field_152774_b.entrySet().iterator();
-
-            while (iterator.hasNext())
-            {
-                entry = (Entry)iterator.next();
-                linkedhashmap.put(entry.getKey(), entry.getValue().toString());
-            }
-
-            return linkedhashmap;
-        }
-    }
-
     public boolean isSnooperRunning()
     {
         return this.isRunning;
     }
 
     public void stopSnooper()
     {
         this.threadTrigger.cancel();
     }
 
-    @SideOnly(Side.CLIENT)
-    public String getUniqueID()
-    {
-        return this.uniqueID;
-    }
-
     public long getMinecraftStartTimeMillis()
     {
         return this.minecraftStartTimeMilis;
     }
 
