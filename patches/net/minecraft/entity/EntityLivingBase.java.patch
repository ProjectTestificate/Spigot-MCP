--- decompiled\net\minecraft\entity\EntityLivingBase.java
+++ src\main\java\net\minecraft\entity\EntityLivingBase.java
@@ -1,14 +1,15 @@
 package net.minecraft.entity;
 
-import com.google.common.collect.Maps;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
 import java.util.UUID;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.enchantment.EnchantmentHelper;
 import net.minecraft.entity.ai.attributes.AttributeModifier;
@@ -16,10 +17,12 @@
 import net.minecraft.entity.ai.attributes.IAttribute;
 import net.minecraft.entity.ai.attributes.IAttributeInstance;
 import net.minecraft.entity.ai.attributes.ServersideAttributeMap;
 import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.item.EntityXPOrb;
+import net.minecraft.entity.passive.EntityAnimal;
+import net.minecraft.entity.passive.EntityTameable;
 import net.minecraft.entity.passive.EntityWolf;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.entity.projectile.EntityArrow;
 import net.minecraft.init.Blocks;
@@ -27,10 +30,11 @@
 import net.minecraft.item.ItemArmor;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTBase;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagFloat;
+import net.minecraft.nbt.NBTTagInt;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.nbt.NBTTagShort;
 import net.minecraft.network.play.server.S04PacketEntityEquipment;
 import net.minecraft.network.play.server.S0BPacketAnimation;
 import net.minecraft.network.play.server.S0DPacketCollectItem;
@@ -45,20 +49,35 @@
 import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import org.bukkit.craftbukkit.SpigotTimings;
+import org.bukkit.craftbukkit.TrigMath;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.EntityDamageEvent.DamageModifier;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason;
+import org.bukkit.event.vehicle.VehicleExitEvent;
+
+import com.google.common.base.Function;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
 public abstract class EntityLivingBase extends Entity
 {
+
     private static final UUID sprintingSpeedBoostModifierUUID = UUID.fromString("662A6B8D-DA3E-4C1C-8813-96EA6097278D");
     private static final AttributeModifier sprintingSpeedBoostModifier = (new AttributeModifier(sprintingSpeedBoostModifierUUID, "Sprinting speed boost", 0.30000001192092896D, 2)).setSaved(false);
     private BaseAttributeMap attributeMap;
-    private final CombatTracker _combatTracker = new CombatTracker(this);
-    private final Map activePotionsMap = Maps.newHashMap();
+    public CombatTracker _combatTracker = new CombatTracker(this); // SpigotMCP -- Apply access transformation
+    public final Map activePotionsMap = Maps.newHashMap(); // SpigotMCP -- Apply access transformation
     private final ItemStack[] previousEquipment = new ItemStack[5];
     public boolean isSwingInProgress;
     public int swingProgressInt;
     public int arrowHitTimer;
     public int hurtTime;
@@ -78,39 +97,53 @@
     public float renderYawOffset;
     public float prevRenderYawOffset;
     public float rotationYawHead;
     public float prevRotationYawHead;
     public float jumpMovementFactor = 0.02F;
-    protected EntityPlayer attackingPlayer;
+    public EntityPlayer attackingPlayer; // SpigotMCP -- Apply access transformation
     protected int recentlyHit;
     protected boolean dead;
     protected int entityAge;
     protected float field_70768_au;
     protected float field_110154_aX;
     protected float field_70764_aw;
     protected float field_70763_ax;
     protected float field_70741_aB;
     protected int scoreValue;
-    protected float lastDamage;
+    public float lastDamage; // SpigotMCP -- Apply access transformation
     protected boolean isJumping;
     public float moveStrafing;
     public float moveForward;
     protected float randomYawVelocity;
     protected int newPosRotationIncrements;
     protected double newPosX;
     protected double newPosY;
     protected double newPosZ;
     protected double newRotationYaw;
     protected double newRotationPitch;
-    private boolean potionsNeedUpdate = true;
-    private EntityLivingBase entityLivingToAttack;
+    public boolean potionsNeedUpdate = true; // SpigotMCP -- Apply access transformation
+    public EntityLivingBase entityLivingToAttack; // SpigotMCP -- Apply access transformation
     private int revengeTimer;
     private EntityLivingBase lastAttacker;
     private int lastAttackerTime;
     private float landMovementFactor;
     private int jumpTicks;
     private float absorptionAmount;
+    // CraftBukkit start
+    public int expToDrop;
+    public int maxAirTicks = 300;
+    ArrayList drops = null;
+
+    // CraftBukkit end
+    // Spigot start
+    public void inactiveTick()
+    {
+        super.inactiveTick();
+        ++this.entityAge; // Above all the floats
+    }
+
+    // Spigot end
     private static final String __OBFID = "CL_00001549";
 
     public void onKillCommand()
     {
         this.attackEntityFrom(DamageSource.outOfWorld, Float.MAX_VALUE);
@@ -118,11 +151,12 @@
 
     public EntityLivingBase(World worldIn)
     {
         super(worldIn);
         this.applyEntityAttributes();
-        this.setHealth(this.getMaxHealth());
+        // CraftBukkit - setHealth(getMaxHealth()) inlined and simplified to skip the instanceof check for EntityPlayer, as getBukkitEntity() is not initialized in constructor
+        this.dataWatcher.updateObject(6, (float)this.getEntityAttribute(SharedMonsterAttributes.maxHealth).getAttributeValue());
         this.preventEntitySpawning = true;
         this.field_70770_ap = (float)((Math.random() + 1.0D) * 0.009999999776482582D);
         this.setPosition(this.posX, this.posY, this.posZ);
         this.field_70769_ao = (float)Math.random() * 12398.0F;
         this.rotationYaw = (float)(Math.random() * Math.PI * 2.0D);
@@ -166,11 +200,22 @@
                 {
                     d1 = 2.5D;
                 }
 
                 int i = (int)(150.0D * d1);
-                ((WorldServer)this.worldObj).spawnParticle(EnumParticleTypes.BLOCK_DUST, this.posX, this.posY, this.posZ, i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D, new int[] {Block.getStateId(iblockstate)});
+
+                // CraftBukkit start - visiblity api
+                if (this instanceof EntityPlayer)
+                {
+                    ((WorldServer)this.worldObj).spawnParticle((EntityPlayerMP)this, EnumParticleTypes.BLOCK_DUST, false, this.posX, this.posY, this.posZ, i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D, new int[] {Block.getStateId(iblockstate)});
+                }
+                else
+                {
+                    ((WorldServer)this.worldObj).spawnParticle(EnumParticleTypes.BLOCK_DUST, this.posX, this.posY, this.posZ, i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D, new int[] {Block.getStateId(iblockstate)});
+                }
+
+                // CraftBukkit end
             }
         }
 
         super.func_180433_a(p_180433_1_, p_180433_3_, p_180433_4_, p_180433_5_);
     }
@@ -238,11 +283,17 @@
                 this.mountEntity((Entity)null);
             }
         }
         else
         {
-            this.setAir(300);
+            // CraftBukkit start - Only set if needed to work around a DataWatcher inefficiency
+            if (this.getAir() != 300)
+            {
+                this.setAir(maxAirTicks);
+            }
+
+            // CraftBukkit end
         }
 
         if (this.isEntityAlive() && this.isWet())
         {
             this.extinguish();
@@ -298,23 +349,52 @@
         this.prevRotationYaw = this.rotationYaw;
         this.prevRotationPitch = this.rotationPitch;
         this.worldObj.theProfiler.endSection();
     }
 
+    // CraftBukkit start
+    public int getExpReward()
+    {
+        int exp = this.getExperiencePoints(this.attackingPlayer);
+
+        if (!this.worldObj.isRemote && (this.recentlyHit > 0 || this.isPlayer()) && this.func_146066_aG() && this.worldObj.getGameRules().getGameRuleBooleanValue("doMobLoot"))
+        {
+            return exp;
+        }
+        else
+        {
+            return 0;
+        }
+    }
+    // CraftBukkit end
+
+
     public boolean isChild()
     {
         return false;
     }
 
     protected void onDeathUpdate()
     {
         ++this.deathTime;
 
-        if (this.deathTime == 20)
+        if (this.deathTime >= 20 && !this.isDead) // CraftBukkit - (this.deathTicks == 20) -> (this.deathTicks >= 20 && !this.dead)
         {
             int i;
+            // CraftBukkit start - Update getExpReward() above if the removed if() changes!
+            i = this.expToDrop;
 
+            while (i > 0)
+            {
+                int j = EntityXPOrb.getXPSplit(i);
+                i -= j;
+                this.worldObj.spawnEntityInWorld(new EntityXPOrb(this.worldObj, this.posX, this.posY, this.posZ, j));
+            }
+
+            this.expToDrop = 0;
+            // CraftBukkit end
+
             if (!this.worldObj.isRemote && (this.recentlyHit > 0 || this.isPlayer()) && this.func_146066_aG() && this.worldObj.getGameRules().getGameRuleBooleanValue("doMobLoot"))
             {
                 i = this.getExperiencePoints(this.attackingPlayer);
 
                 while (i > 0)
@@ -483,10 +563,27 @@
                     this.activePotionsMap.put(Integer.valueOf(potioneffect.getPotionID()), potioneffect);
                 }
             }
         }
 
+        // CraftBukkit start
+        if (tagCompund.hasKey("Bukkit.MaxHealth"))
+        {
+            NBTBase nbtbase = tagCompund.getTag("Bukkit.MaxHealth");
+
+            if (nbtbase.getId() == 5)
+            {
+                this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setBaseValue((double)((NBTTagFloat)nbtbase).getLong());
+            }
+            else if (nbtbase.getId() == 3)
+            {
+                this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setBaseValue((double)((NBTTagInt)nbtbase).getInt());
+            }
+        }
+
+        // CraftBukkit end
+
         if (tagCompund.hasKey("HealF", 99))
         {
             this.setHealth(tagCompund.getFloat("HealF"));
         }
         else
@@ -510,13 +607,19 @@
         this.hurtTime = tagCompund.getShort("HurtTime");
         this.deathTime = tagCompund.getShort("DeathTime");
         this.revengeTimer = tagCompund.getInteger("HurtByTimestamp");
     }
 
+    // CraftBukkit start
+    private boolean isTickingEffects = false;
+    private List effectsToProcess = Lists.newArrayList();
+    // CraftBukkit end
+
     protected void updatePotionEffects()
     {
         Iterator iterator = this.activePotionsMap.keySet().iterator();
+        isTickingEffects = true; // CraftBukkit
 
         while (iterator.hasNext())
         {
             Integer integer = (Integer)iterator.next();
             PotionEffect potioneffect = (PotionEffect)this.activePotionsMap.get(integer);
@@ -533,10 +636,27 @@
             {
                 this.onChangedPotionEffect(potioneffect, false);
             }
         }
 
+        // CraftBukkit start
+        isTickingEffects = false;
+
+        for (Object e : effectsToProcess)
+        {
+            if (e instanceof PotionEffect)
+            {
+                addPotionEffect((PotionEffect)e);
+            }
+            else
+            {
+                removePotionEffect((Integer)e);
+            }
+        }
+
+        // CraftBukkit end
+
         if (this.potionsNeedUpdate)
         {
             if (!this.worldObj.isRemote)
             {
                 this.func_175135_B();
@@ -620,11 +740,12 @@
         return this.activePotionsMap.values();
     }
 
     public boolean isPotionActive(int p_82165_1_)
     {
-        return this.activePotionsMap.containsKey(Integer.valueOf(p_82165_1_));
+        // CraftBukkit - Add size check for efficiency
+        return this.activePotionsMap.size() != 0 && this.activePotionsMap.containsKey(Integer.valueOf(p_82165_1_));
     }
 
     public boolean isPotionActive(Potion p_70644_1_)
     {
         return this.activePotionsMap.containsKey(Integer.valueOf(p_70644_1_.id));
@@ -635,10 +756,19 @@
         return (PotionEffect)this.activePotionsMap.get(Integer.valueOf(p_70660_1_.id));
     }
 
     public void addPotionEffect(PotionEffect p_70690_1_)
     {
+        org.spigotmc.AsyncCatcher.catchOp("effect add"); // Spigot
+        // CraftBukkit start
+        if (isTickingEffects)
+        {
+            effectsToProcess.add(p_70690_1_);
+            return;
+        }
+
+        // CraftBukkit end
         if (this.isPotionApplicable(p_70690_1_))
         {
             if (this.activePotionsMap.containsKey(Integer.valueOf(p_70690_1_.getPotionID())))
             {
                 ((PotionEffect)this.activePotionsMap.get(Integer.valueOf(p_70690_1_.getPotionID()))).combine(p_70690_1_);
@@ -670,18 +800,20 @@
     public boolean isEntityUndead()
     {
         return this.getCreatureAttribute() == EnumCreatureAttribute.UNDEAD;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void removePotionEffectClient(int p_70618_1_)
-    {
-        this.activePotionsMap.remove(Integer.valueOf(p_70618_1_));
-    }
-
     public void removePotionEffect(int p_82170_1_)
     {
+        // CraftBukkit start
+        if (isTickingEffects)
+        {
+            effectsToProcess.add(p_82170_1_);
+            return;
+        }
+
+        // CraftBukkit end
         PotionEffect potioneffect = (PotionEffect)this.activePotionsMap.remove(Integer.valueOf(p_82170_1_));
 
         if (potioneffect != null)
         {
             this.onFinishedPotionEffect(potioneffect);
@@ -717,27 +849,72 @@
         {
             Potion.potionTypes[p_70688_1_.getPotionID()].removeAttributesModifiersFromEntity(this, this.getAttributeMap(), p_70688_1_.getAmplifier());
         }
     }
 
+    // CraftBukkit start - Delegate so we can handle providing a reason for health being regained
     public void heal(float healAmount)
     {
+        heal(healAmount, RegainReason.CUSTOM);
+    }
+
+    public void heal(float f, RegainReason regainReason)
+    {
         float f1 = this.getHealth();
 
         if (f1 > 0.0F)
         {
-            this.setHealth(f1 + healAmount);
+            EntityRegainHealthEvent event = new EntityRegainHealthEvent(this.getBukkitEntity(), f, regainReason);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled())
+            {
+                this.setHealth((float)(this.getHealth() + event.getAmount()));
+            }
+
+            // CraftBukkit end
         }
     }
 
     public final float getHealth()
     {
+        // CraftBukkit start - Use unscaled health
+        if (this instanceof EntityPlayer)
+        {
+            return (float)((EntityPlayer)this).getBukkitEntity().getHealth();
+        }
+
+        // CraftBukkit end
         return this.dataWatcher.getWatchableObjectFloat(6);
     }
 
     public void setHealth(float p_70606_1_)
     {
+        // CraftBukkit start - Handle scaled health
+        if (this instanceof EntityPlayer)
+        {
+            CraftPlayer player = ((EntityPlayerMP)this).getBukkitEntity();
+
+            // Squeeze
+            if (p_70606_1_ < 0.0F)
+            {
+                player.setRealHealth(0.0D);
+            }
+            else if (p_70606_1_ > player.getMaxHealth())
+            {
+                player.setRealHealth(player.getMaxHealth());
+            }
+            else
+            {
+                player.setRealHealth(p_70606_1_);
+            }
+
+            this.dataWatcher.updateObject(6, Float.valueOf(player.getScaledHealth()));
+            return;
+        }
+
+        // CraftBukkit end
         this.dataWatcher.updateObject(6, Float.valueOf(MathHelper.clamp_float(p_70606_1_, 0.0F, this.getMaxHealth())));
     }
 
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
@@ -761,11 +938,12 @@
             {
                 return false;
             }
             else
             {
-                if ((source == DamageSource.anvil || source == DamageSource.fallingBlock) && this.getEquipmentInSlot(4) != null)
+                // CraftBukkit - Moved into d(DamageSource, float)
+                if (false && (source == DamageSource.anvil || source == DamageSource.fallingBlock) && this.getEquipmentInSlot(4) != null)
                 {
                     this.getEquipmentInSlot(4).damageItem((int)(amount * 4.0F + this.rand.nextFloat() * amount * 2.0F), this);
                     amount *= 0.75F;
                 }
 
@@ -777,22 +955,48 @@
                     if (amount <= this.lastDamage)
                     {
                         return false;
                     }
 
-                    this.damageEntity(source, amount - this.lastDamage);
+                    // CraftBukkit start
+                    if (!this.damageEntity(source, amount - this.lastDamage))
+                    {
+                        return false;
+                    }
+
+                    // CraftBukkit end
                     this.lastDamage = amount;
                     flag = false;
                 }
                 else
                 {
+                    // CraftBukkit start
+                    float previousHealth = this.getHealth();
+
+                    if (!this.damageEntity(source, amount))
+                    {
+                        return false;
+                    }
+
                     this.lastDamage = amount;
                     this.hurtResistantTime = this.maxHurtResistantTime;
-                    this.damageEntity(source, amount);
+                    // CraftBukkit end
                     this.hurtTime = this.maxHurtTime = 10;
                 }
 
+                // CraftBukkit start
+                if (this instanceof EntityAnimal)
+                {
+                    ((EntityAnimal)this).resetInLove();
+
+                    if (this instanceof EntityTameable)
+                    {
+                        ((EntityTameable)this).getAISit().setSitting(false);
+                    }
+                }
+
+                // CraftBukkit end
                 this.attackedAtYaw = 0.0F;
                 Entity entity = source.getEntity();
 
                 if (entity != null)
                 {
@@ -919,24 +1123,36 @@
                 i = EnchantmentHelper.getLootingModifier((EntityLivingBase)entity);
             }
 
             if (this.func_146066_aG() && this.worldObj.getGameRules().getGameRuleBooleanValue("doMobLoot"))
             {
+                this.drops = new ArrayList(); // CraftBukkit - Setup drop capture
                 this.dropFewItems(this.recentlyHit > 0, i);
                 this.dropEquipment(this.recentlyHit > 0, i);
 
                 if (this.recentlyHit > 0 && this.rand.nextFloat() < 0.025F + (float)i * 0.01F)
                 {
                     this.addRandomArmor();
                 }
+
+                // CraftBukkit start - Call death event
+                CraftEventFactory.callEntityDeathEvent(this, this.drops);
+                this.drops = null;
             }
+            else
+            {
+                CraftEventFactory.callEntityDeathEvent(this);
+                // CraftBukkit end
+            }
         }
 
         this.worldObj.setEntityState(this, (byte)3);
     }
 
-    protected void dropEquipment(boolean p_82160_1_, int p_82160_2_) {}
+    protected void dropEquipment(boolean p_82160_1_, int p_82160_2_)
+    {
+    }
 
     public void knockBack(Entity p_70653_1_, float p_70653_2_, double p_70653_3_, double p_70653_5_)
     {
         if (this.rand.nextDouble() >= this.getEntityAttribute(SharedMonsterAttributes.knockbackResistance).getAttributeValue())
         {
@@ -965,13 +1181,17 @@
     protected String getDeathSound()
     {
         return "game.neutral.die";
     }
 
-    protected void addRandomArmor() {}
+    protected void addRandomArmor()
+    {
+    }
 
-    protected void dropFewItems(boolean p_70628_1_, int p_70628_2_) {}
+    protected void dropFewItems(boolean p_70628_1_, int p_70628_2_)
+    {
+    }
 
     public boolean isOnLadder()
     {
         int i = MathHelper.floor_double(this.posX);
         int j = MathHelper.floor_double(this.getEntityBoundingBox().minY);
@@ -992,12 +1212,19 @@
         float f2 = potioneffect != null ? (float)(potioneffect.getAmplifier() + 1) : 0.0F;
         int i = MathHelper.ceiling_float_int((distance - 3.0F - f2) * damageMultiplier);
 
         if (i > 0)
         {
+            // CraftBukkit start
+            if (!this.attackEntityFrom(DamageSource.fall, (float)i))
+            {
+                return;
+            }
+
+            // CraftBukkit end
             this.playSound(this.getFallSoundString(i), 1.0F, 1.0F);
-            this.attackEntityFrom(DamageSource.fall, (float)i);
+            // this.attackEntityFrom(DamageSource.fall, (float)i); // CraftBukkit - moved up
             int j = MathHelper.floor_double(this.posX);
             int k = MathHelper.floor_double(this.posY - 0.20000000298023224D);
             int l = MathHelper.floor_double(this.posZ);
             Block block = this.worldObj.getBlockState(new BlockPos(j, k, l)).getBlock();
 
@@ -1012,17 +1239,10 @@
     protected String getFallSoundString(int damageValue)
     {
         return damageValue > 4 ? "game.neutral.hurt.fall.big" : "game.neutral.hurt.fall.small";
     }
 
-    @SideOnly(Side.CLIENT)
-    public void performHurtAnimation()
-    {
-        this.hurtTime = this.maxHurtTime = 10;
-        this.attackedAtYaw = 0.0F;
-    }
-
     public int getTotalArmorValue()
     {
         int i = 0;
         ItemStack[] aitemstack = this.getInventory();
         int j = aitemstack.length;
@@ -1039,19 +1259,21 @@
         }
 
         return i;
     }
 
-    protected void damageArmor(float p_70675_1_) {}
+    protected void damageArmor(float p_70675_1_)
+    {
+    }
 
     protected float applyArmorCalculations(DamageSource p_70655_1_, float p_70655_2_)
     {
         if (!p_70655_1_.isUnblockable())
         {
             int i = 25 - this.getTotalArmorValue();
             float f1 = p_70655_2_ * (float)i;
-            this.damageArmor(p_70655_2_);
+            // this.damageArmor(p_70655_2_); // CraftBukkit - Moved into d(DamageSource, float)
             p_70655_2_ = f1 / 25.0F;
         }
 
         return p_70655_2_;
     }
@@ -1066,11 +1288,12 @@
         {
             int i;
             int j;
             float f1;
 
-            if (this.isPotionActive(Potion.resistance) && p_70672_1_ != DamageSource.outOfWorld)
+            // CraftBukkit - Moved to d(DamageSource, float)
+            if (false && this.isPotionActive(Potion.resistance) && p_70672_1_ != DamageSource.outOfWorld)
             {
                 i = (this.getActivePotionEffect(Potion.resistance).getAmplifier() + 1) * 5;
                 j = 25 - i;
                 f1 = p_70672_2_ * (float)j;
                 p_70672_2_ = f1 / 25.0F;
@@ -1099,28 +1322,149 @@
                 return p_70672_2_;
             }
         }
     }
 
-    protected void damageEntity(DamageSource damageSrc, float damageAmount)
+    // CraftBukkit start
+    // SpigotMCP -- use craftbukkit param names
+    protected boolean damageEntity(final DamageSource damagesource, float f) // void -> boolean, add final
     {
-        if (!this.isEntityInvulnerable(damageSrc))
+        if (!this.isEntityInvulnerable(damagesource))
         {
-            damageAmount = this.applyArmorCalculations(damageSrc, damageAmount);
-            damageAmount = this.applyPotionDamageCalculations(damageSrc, damageAmount);
-            float f1 = damageAmount;
-            damageAmount = Math.max(damageAmount - this.getAbsorptionAmount(), 0.0F);
-            this.setAbsorptionAmount(this.getAbsorptionAmount() - (f1 - damageAmount));
+            final boolean human = this instanceof EntityPlayer;
+            float originalDamage = f;
+            Function<Double, Double> hardHat = new Function<Double, Double>()   // SpigotMCP -- Use generics in constructor
+            {
+                @Override
+                public java.lang.Double apply(Double f)
+                {
+                    if ((damagesource == DamageSource.anvil || damagesource == DamageSource.fallingBlock) && EntityLivingBase.this.getEquipmentInSlot(4) != null)
+                    {
+                        return -(f - (f * 0.75F));
+                    }
 
-            if (damageAmount != 0.0F)
+                    return -0.0;
+                }
+            };
+            float hardHatModifier = hardHat.apply((double)f).floatValue();
+            f += hardHatModifier;
+            Function<Double, Double> blocking = new Function<Double, Double>()   // SpigotMCP -- Use generics in constructor
             {
+                @Override
+                public java.lang.Double apply(Double f)
+                {
+                    if (human)
+                    {
+                        if (!damagesource.isUnblockable() && ((EntityPlayer)EntityLivingBase.this).isBlocking() && f > 0.0F)
+                        {
+                            return -(f - ((1.0F + f) * 0.5F));
+                        }
+                    }
+
+                    return -0.0;
+                }
+            };
+            float blockingModifier = blocking.apply((double)f).floatValue();
+            f += blockingModifier;
+            Function<Double, Double> armor = new Function<Double, Double>()   // SpigotMCP -- Use generics in constructor
+            {
+                @Override
+                public java.lang.Double apply(Double f)
+                {
+                    return -(f - EntityLivingBase.this.applyArmorCalculations(damagesource, f.floatValue()));
+                }
+            };
+            float armorModifier = armor.apply((double)f).floatValue();
+            f += armorModifier;
+            Function<Double, Double> resistance = new Function<Double, Double>()   // SpigotMCP -- Use generics in constructor
+            {
+                @Override
+                public java.lang.Double apply(Double f)
+                {
+                    if (!damagesource.isDamageAbsolute() && EntityLivingBase.this.isPotionActive(Potion.resistance) && damagesource != DamageSource.outOfWorld)
+                    {
+                        int i = (EntityLivingBase.this.getActivePotionEffect(Potion.resistance).getAmplifier() + 1) * 5;
+                        int j = 25 - i;
+                        float f1 = f.floatValue() * (float)j;
+                        return -(f - (f1 / 25.0F));
+                    }
+
+                    return -0.0;
+                }
+            };
+            float resistanceModifier = resistance.apply((double)f).floatValue();
+            f += resistanceModifier;
+            Function<Double, Double> magic = new Function<Double, Double>()   // SpigotMCP -- Use generics in constructor
+            {
+                @Override
+                public java.lang.Double apply(Double f)
+                {
+                    return -(f - EntityLivingBase.this.applyPotionDamageCalculations(damagesource, f.floatValue()));
+                }
+            };
+            float magicModifier = magic.apply((double)f).floatValue();
+            f += magicModifier;
+            Function<Double, Double> absorption = new Function<Double, Double>()   // SpigotMCP -- Use generics in constructor
+            {
+                @Override
+                public java.lang.Double apply(Double f)
+                {
+                    return -(Math.max(f - Math.max(f - EntityLivingBase.this.getAbsorptionAmount(), 0.0F), 0.0F));
+                }
+            };
+            float absorptionModifier = absorption.apply((double)f).floatValue();
+            EntityDamageEvent event = CraftEventFactory.handleLivingEntityDamageEvent(this, damagesource, originalDamage, hardHatModifier, blockingModifier, armorModifier, resistanceModifier, magicModifier, absorptionModifier, hardHat, blocking, armor, resistance, magic, absorption);
+
+            if (event.isCancelled())
+            {
+                return false;
+            }
+
+            f = (float)event.getFinalDamage();
+
+            // Apply damage to helmet
+            if ((damagesource == DamageSource.anvil || damagesource == DamageSource.fallingBlock) && this.getEquipmentInSlot(4) != null)
+            {
+                this.getEquipmentInSlot(4).damageItem((int)(event.getDamage() * 4.0F + this.rand.nextFloat() * event.getDamage() * 2.0F), this);
+            }
+
+            // Apply damage to armor
+            if (!damagesource.isUnblockable())
+            {
+                float armorDamage = (float)(event.getDamage() + event.getDamage(DamageModifier.BLOCKING) + event.getDamage(DamageModifier.HARD_HAT));
+                this.damageArmor(armorDamage);
+            }
+
+            absorptionModifier = (float) - event.getDamage(DamageModifier.ABSORPTION);
+            this.setAbsorptionAmount(Math.max(this.getAbsorptionAmount() - absorptionModifier, 0.0F));
+
+            if (f != 0.0F)
+            {
+                if (human)
+                {
+                    ((EntityPlayer)this).addExhaustion(damagesource.getHungerDamage());
+                }
+
+                // CraftBukkit end
                 float f2 = this.getHealth();
-                this.setHealth(f2 - damageAmount);
-                this.getCombatTracker().func_94547_a(damageSrc, f2, damageAmount);
-                this.setAbsorptionAmount(this.getAbsorptionAmount() - damageAmount);
+                this.setHealth(f2 - f);
+                this.getCombatTracker().func_94547_a(damagesource, f2, f);
+
+                // CraftBukkit start
+                if (human)
+                {
+                    return true;
+                }
+
+                // CraftBukkit end
+                this.setAbsorptionAmount(this.getAbsorptionAmount() - f);
             }
+
+            return true; // CraftBukkit
         }
+
+        return false; // CraftBukkit
     }
 
     public CombatTracker getCombatTracker()
     {
         return this._combatTracker;
@@ -1163,48 +1507,10 @@
                 ((WorldServer)this.worldObj).getEntityTracker().sendToAllTrackingEntity(this, new S0BPacketAnimation(this, 0));
             }
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public void handleHealthUpdate(byte p_70103_1_)
-    {
-        String s;
-
-        if (p_70103_1_ == 2)
-        {
-            this.limbSwingAmount = 1.5F;
-            this.hurtResistantTime = this.maxHurtResistantTime;
-            this.hurtTime = this.maxHurtTime = 10;
-            this.attackedAtYaw = 0.0F;
-            s = this.getHurtSound();
-
-            if (s != null)
-            {
-                this.playSound(this.getHurtSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
-            }
-
-            this.attackEntityFrom(DamageSource.generic, 0.0F);
-        }
-        else if (p_70103_1_ == 3)
-        {
-            s = this.getDeathSound();
-
-            if (s != null)
-            {
-                this.playSound(this.getDeathSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
-            }
-
-            this.setHealth(0.0F);
-            this.onDeath(DamageSource.generic);
-        }
-        else
-        {
-            super.handleHealthUpdate(p_70103_1_);
-        }
-    }
-
     protected void kill()
     {
         this.attackEntityFrom(DamageSource.outOfWorld, 4.0F);
     }
 
@@ -1252,13 +1558,10 @@
 
     public abstract ItemStack getHeldItem();
 
     public abstract ItemStack getEquipmentInSlot(int slotIn);
 
-    @SideOnly(Side.CLIENT)
-    public abstract ItemStack getCurrentArmor(int slotIn);
-
     public abstract void setCurrentItemOrArmor(int slotIn, ItemStack stack);
 
     public void setSprinting(boolean sprinting)
     {
         super.setSprinting(sprinting);
@@ -1329,16 +1632,10 @@
         }
 
         this.setPositionAndUpdate(d0, d1, d2);
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean getAlwaysRenderNameTagForRender()
-    {
-        return false;
-    }
-
     protected float func_175134_bD()
     {
         return 0.42F;
     }
 
@@ -1543,10 +1840,11 @@
         return false;
     }
 
     public void onUpdate()
     {
+        SpigotTimings.timerEntityBaseTick.startTiming(); // Spigot
         super.onUpdate();
 
         if (!this.worldObj.isRemote)
         {
             int i = this.getArrowCountInEntity();
@@ -1593,11 +1891,13 @@
             {
                 this.getCombatTracker().func_94549_h();
             }
         }
 
+        SpigotTimings.timerEntityBaseTick.stopTiming(); // Spigot
         this.onLivingUpdate();
+        SpigotTimings.timerEntityTickRest.startTiming(); // Spigot
         double d0 = this.posX - this.prevPosX;
         double d1 = this.posZ - this.prevPosZ;
         float f = (float)(d0 * d0 + d1 * d1);
         float f1 = this.renderYawOffset;
         float f2 = 0.0F;
@@ -1606,11 +1906,12 @@
 
         if (f > 0.0025000002F)
         {
             f3 = 1.0F;
             f2 = (float)Math.sqrt((double)f) * 3.0F;
-            f1 = (float)Math.atan2(d1, d0) * 180.0F / (float)Math.PI - 90.0F;
+            // CraftBukkit - Math -> TrigMath
+            f1 = (float)TrigMath.atan2(d1, d0) * 180.0F / (float)Math.PI - 90.0F;
         }
 
         if (this.swingProgress > 0.0F)
         {
             f1 = this.rotationYaw;
@@ -1667,10 +1968,11 @@
             this.prevRotationYawHead += 360.0F;
         }
 
         this.worldObj.theProfiler.endSection();
         this.field_70764_aw += f2;
+        SpigotTimings.timerEntityTickRest.stopTiming(); // Spigot
     }
 
     protected float func_110146_f(float p_110146_1_, float p_110146_2_)
     {
         float f2 = MathHelper.wrapAngleTo180_float(p_110146_1_ - this.renderYawOffset);
@@ -1743,10 +2045,11 @@
         {
             this.motionZ = 0.0D;
         }
 
         this.worldObj.theProfiler.startSection("ai");
+        SpigotTimings.timerEntityAI.startTiming(); // Spigot
 
         if (this.isMovementBlocked())
         {
             this.isJumping = false;
             this.moveStrafing = 0.0F;
@@ -1758,10 +2061,11 @@
             this.worldObj.theProfiler.startSection("newAi");
             this.updateEntityActionState();
             this.worldObj.theProfiler.endSection();
         }
 
+        SpigotTimings.timerEntityAI.stopTiming(); // Spigot
         this.worldObj.theProfiler.endSection();
         this.worldObj.theProfiler.startSection("jump");
 
         if (this.isJumping)
         {
@@ -1787,39 +2091,65 @@
         this.worldObj.theProfiler.endSection();
         this.worldObj.theProfiler.startSection("travel");
         this.moveStrafing *= 0.98F;
         this.moveForward *= 0.98F;
         this.randomYawVelocity *= 0.9F;
+        SpigotTimings.timerEntityAIMove.startTiming(); // Spigot
         this.moveEntityWithHeading(this.moveStrafing, this.moveForward);
+        SpigotTimings.timerEntityAIMove.stopTiming(); // Spigot
         this.worldObj.theProfiler.endSection();
         this.worldObj.theProfiler.startSection("push");
 
         if (!this.worldObj.isRemote)
         {
+            SpigotTimings.timerEntityAICollision.startTiming(); // Spigot
             this.collideWithNearbyEntities();
+            SpigotTimings.timerEntityAICollision.stopTiming(); // Spigot
         }
 
         this.worldObj.theProfiler.endSection();
     }
 
-    protected void updateEntityActionState() {}
+    protected void updateEntityActionState()
+    {
+    }
 
     protected void collideWithNearbyEntities()
     {
         List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.getEntityBoundingBox().expand(0.20000000298023224D, 0.0D, 0.20000000298023224D));
 
-        if (list != null && !list.isEmpty())
+        if (this.canBeCollidedWith() && list != null && !list.isEmpty()) // Spigot: Add this.ad() condition
         {
+            numCollisions -= worldObj.spigotConfig.maxCollisionsPerEntity; // Spigot
+
             for (int i = 0; i < list.size(); ++i)
             {
+                if (numCollisions > worldObj.spigotConfig.maxCollisionsPerEntity)
+                {
+                    break;
+                } // Spigot
+
                 Entity entity = (Entity)list.get(i);
 
+                // TODO better check now?
+                // CraftBukkit start - Only handle mob (non-player) collisions every other tick
+                if (entity instanceof EntityLiving && !(this instanceof EntityPlayer) && this.ticksExisted % 2 == 0)
+                {
+                    continue;
+                }
+
+                // CraftBukkit end
+
                 if (entity.canBePushed())
                 {
+                    entity.numCollisions++; // Spigot
+                    numCollisions++; // Spigot
                     this.collideWithEntity(entity);
                 }
             }
+
+            numCollisions = 0; // Spigot
         }
     }
 
     protected void collideWithEntity(Entity p_82167_1_)
     {
@@ -1828,10 +2158,26 @@
 
     public void mountEntity(Entity entityIn)
     {
         if (this.ridingEntity != null && entityIn == null)
         {
+            // CraftBukkit start
+            Entity originalVehicle = this.ridingEntity;
+
+            if ((this.bukkitEntity instanceof LivingEntity) && (this.ridingEntity.getBukkitEntity() instanceof Vehicle))
+            {
+                VehicleExitEvent event = new VehicleExitEvent((Vehicle)this.ridingEntity.getBukkitEntity(), (LivingEntity)this.bukkitEntity);
+                getBukkitEntity().getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled() || ridingEntity != originalVehicle)
+                {
+                    return;
+                }
+            }
+
+            // CraftBukkit end
+
             if (!this.worldObj.isRemote)
             {
                 this.dismountEntity(this.ridingEntity);
             }
 
@@ -1854,21 +2200,10 @@
         this.field_70768_au = this.field_110154_aX;
         this.field_110154_aX = 0.0F;
         this.fallDistance = 0.0F;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void func_180426_a(double p_180426_1_, double p_180426_3_, double p_180426_5_, float p_180426_7_, float p_180426_8_, int p_180426_9_, boolean p_180426_10_)
-    {
-        this.newPosX = p_180426_1_;
-        this.newPosY = p_180426_3_;
-        this.newPosZ = p_180426_5_;
-        this.newRotationYaw = (double)p_180426_7_;
-        this.newRotationPitch = (double)p_180426_8_;
-        this.newPosRotationIncrements = p_180426_9_;
-    }
-
     public void setJumping(boolean p_70637_1_)
     {
         this.isJumping = p_70637_1_;
     }
 
@@ -1917,23 +2252,10 @@
             float f2 = this.prevRotationYawHead + (this.rotationYawHead - this.prevRotationYawHead) * p_70676_1_;
             return this.getVectorForRotation(f1, f2);
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public float getSwingProgress(float p_70678_1_)
-    {
-        float f1 = this.swingProgress - this.prevSwingProgress;
-
-        if (f1 < 0.0F)
-        {
-            ++f1;
-        }
-
-        return this.prevSwingProgress + f1 * p_70678_1_;
-    }
-
     public boolean isServerWorld()
     {
         return !this.worldObj.isRemote;
     }
 
@@ -1990,13 +2312,17 @@
     public boolean isOnTeam(Team p_142012_1_)
     {
         return this.getTeam() != null ? this.getTeam().isSameTeam(p_142012_1_) : false;
     }
 
-    public void func_152111_bt() {}
+    public void func_152111_bt()
+    {
+    }
 
-    public void func_152112_bu() {}
+    public void func_152112_bu()
+    {
+    }
 
     protected void func_175136_bO()
     {
         this.potionsNeedUpdate = true;
     }
