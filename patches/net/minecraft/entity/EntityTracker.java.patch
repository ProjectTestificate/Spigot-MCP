--- decompiled\net\minecraft\entity\EntityTracker.java
+++ src\main\java\net\minecraft\entity\EntityTracker.java
@@ -1,13 +1,12 @@
 package net.minecraft.entity;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Sets;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.Set;
 import java.util.concurrent.Callable;
+
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.entity.boss.EntityDragon;
 import net.minecraft.entity.boss.EntityWither;
 import net.minecraft.entity.item.EntityArmorStand;
@@ -36,19 +35,24 @@
 import net.minecraft.network.Packet;
 import net.minecraft.util.IntHashMap;
 import net.minecraft.util.ReportedException;
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.chunk.Chunk;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import com.google.common.collect.Lists;
+import com.google.common.collect.Sets;
+
 public class EntityTracker
 {
+
     private static final Logger logger = LogManager.getLogger();
     private final WorldServer theWorld;
     private Set trackedEntities = Sets.newHashSet();
-    private IntHashMap trackedEntityHashTable = new IntHashMap();
+    public IntHashMap trackedEntityHashTable = new IntHashMap(); // SpigotMCP -- Apply access transformation
     private int maxTrackingDistanceThreshold;
     private static final String __OBFID = "CL_00001431";
 
     public EntityTracker(WorldServer p_i1516_1_)
     {
@@ -179,34 +183,42 @@
     public void trackEntity(Entity p_72791_1_, int p_72791_2_, int p_72791_3_)
     {
         this.addEntityToTracker(p_72791_1_, p_72791_2_, p_72791_3_, false);
     }
 
-    public void addEntityToTracker(Entity p_72785_1_, int p_72785_2_, final int p_72785_3_, boolean p_72785_4_)
+    /*
+     * SpigotMCP NOTE
+     * 'p_72785_1_' has been renamed to toAdd
+     * 'p_72785_2_' has been renamed to entityTrackingRange
+     */
+    public void addEntityToTracker(Entity toAdd, int entityTrackingRange, final int p_72785_3_, boolean p_72785_4_)
     {
-        if (p_72785_2_ > this.maxTrackingDistanceThreshold)
+        org.spigotmc.AsyncCatcher.catchOp("entity track"); // Spigot
+        entityTrackingRange = org.spigotmc.TrackingRange.getEntityTrackingRange(toAdd, entityTrackingRange); // Spigot
+
+        if (entityTrackingRange > this.maxTrackingDistanceThreshold)
         {
-            p_72785_2_ = this.maxTrackingDistanceThreshold;
+            entityTrackingRange = this.maxTrackingDistanceThreshold;
         }
 
         try
         {
-            if (this.trackedEntityHashTable.containsItem(p_72785_1_.getEntityId()))
+            if (this.trackedEntityHashTable.containsItem(toAdd.getEntityId()))
             {
                 throw new IllegalStateException("Entity is already tracked!");
             }
 
-            EntityTrackerEntry entitytrackerentry = new EntityTrackerEntry(p_72785_1_, p_72785_2_, p_72785_3_, p_72785_4_);
+            EntityTrackerEntry entitytrackerentry = new EntityTrackerEntry(toAdd, entityTrackingRange, p_72785_3_, p_72785_4_);
             this.trackedEntities.add(entitytrackerentry);
-            this.trackedEntityHashTable.addKey(p_72785_1_.getEntityId(), entitytrackerentry);
+            this.trackedEntityHashTable.addKey(toAdd.getEntityId(), entitytrackerentry);
             entitytrackerentry.updatePlayerEntities(this.theWorld.playerEntities);
         }
         catch (Throwable throwable)
         {
             CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Adding entity to track");
             CrashReportCategory crashreportcategory = crashreport.makeCategory("Entity To Track");
-            crashreportcategory.addCrashSection("Tracking range", p_72785_2_ + " blocks");
+            crashreportcategory.addCrashSection("Tracking range", entityTrackingRange + " blocks");
             crashreportcategory.addCrashSectionCallable("Update interval", new Callable()
             {
                 private static final String __OBFID = "CL_00001432";
                 public String call()
                 {
@@ -218,13 +230,13 @@
                     }
 
                     return s;
                 }
             });
-            p_72785_1_.addEntityCrashInfo(crashreportcategory);
+            toAdd.addEntityCrashInfo(crashreportcategory);
             CrashReportCategory crashreportcategory1 = crashreport.makeCategory("Entity That Is Already Tracked");
-            ((EntityTrackerEntry)this.trackedEntityHashTable.lookup(p_72785_1_.getEntityId())).trackedEntity.addEntityCrashInfo(crashreportcategory1);
+            ((EntityTrackerEntry)this.trackedEntityHashTable.lookup(toAdd.getEntityId())).trackedEntity.addEntityCrashInfo(crashreportcategory1);
 
             try
             {
                 throw new ReportedException(crashreport);
             }
@@ -235,10 +247,12 @@
         }
     }
 
     public void untrackEntity(Entity p_72790_1_)
     {
+        org.spigotmc.AsyncCatcher.catchOp("entity untrack"); // Spigot
+
         if (p_72790_1_ instanceof EntityPlayerMP)
         {
             EntityPlayerMP entityplayermp = (EntityPlayerMP)p_72790_1_;
             Iterator iterator = this.trackedEntities.iterator();
 
