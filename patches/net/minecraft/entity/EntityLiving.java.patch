--- decompiled\net\minecraft\entity\EntityLiving.java
+++ src\main\java\net\minecraft\entity\EntityLiving.java
@@ -1,10 +1,12 @@
 package net.minecraft.entity;
 
+import java.lang.ref.WeakReference;
 import java.util.Iterator;
 import java.util.List;
 import java.util.UUID;
+
 import net.minecraft.enchantment.EnchantmentHelper;
 import net.minecraft.entity.ai.EntityAITasks;
 import net.minecraft.entity.ai.EntityJumpHelper;
 import net.minecraft.entity.ai.EntityLookHelper;
 import net.minecraft.entity.ai.EntityMoveHelper;
@@ -13,10 +15,11 @@
 import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.monster.EntityGhast;
 import net.minecraft.entity.monster.IMob;
 import net.minecraft.entity.passive.EntityTameable;
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.Items;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemArmor;
 import net.minecraft.item.ItemBlock;
@@ -35,30 +38,37 @@
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.EnumDifficulty;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTargetEvent.TargetReason;
+import org.bukkit.event.entity.EntityTargetLivingEntityEvent;
+import org.bukkit.event.entity.EntityUnleashEvent;
+import org.bukkit.event.entity.EntityUnleashEvent.UnleashReason;
+
 public abstract class EntityLiving extends EntityLivingBase
 {
+
     public int livingSoundTime;
     protected int experienceValue;
     private EntityLookHelper lookHelper;
     protected EntityMoveHelper moveHelper;
     protected EntityJumpHelper jumpHelper;
     private EntityBodyHelper bodyHelper;
     protected PathNavigate navigator;
-    protected final EntityAITasks tasks;
-    protected final EntityAITasks targetTasks;
-    private EntityLivingBase attackTarget;
+    public EntityAITasks tasks; // PAIL protected final to public
+    public EntityAITasks targetTasks; // PAIL protected final to public
+    private WeakReference<EntityLivingBase> attackTarget = new WeakReference<EntityLivingBase>(null); // Spigot
     private EntitySenses senses;
     private ItemStack[] equipment = new ItemStack[5];
-    protected float[] equipmentDropChances = new float[5];
-    private boolean canPickUpLoot;
-    private boolean persistenceRequired;
+    public float[] equipmentDropChances = new float[5]; // SpigotMCP -- Apply access transformation
+    public boolean canPickUpLoot; // SpigotMCP -- manualy apply CraftBukkit's access transformation
+    public boolean persistenceRequired; // SpigotMCP -- manualy apply CraftBukkit's access transformation
     private boolean isLeashed;
     private Entity leashedToEntity;
     private NBTTagCompound leashNBTTag;
     private static final String __OBFID = "CL_00001550";
 
@@ -76,10 +86,14 @@
 
         for (int i = 0; i < this.equipmentDropChances.length; ++i)
         {
             this.equipmentDropChances[i] = 0.085F;
         }
+
+        // CraftBukkit start - default persistance to type's persistance value
+        this.persistenceRequired = !canDespawn();
+        // CraftBukkit end
     }
 
     protected void applyEntityAttributes()
     {
         super.applyEntityAttributes();
@@ -116,24 +130,72 @@
         return this.senses;
     }
 
     public EntityLivingBase getAttackTarget()
     {
-        return this.attackTarget;
+        return this.attackTarget.get(); // Spigot
     }
 
     public void setAttackTarget(EntityLivingBase p_70624_1_)
     {
-        this.attackTarget = p_70624_1_;
+        // CraftBukkit start - fire event
+        setGoalTarget(p_70624_1_, EntityTargetEvent.TargetReason.UNKNOWN, true);
     }
 
+    public void setGoalTarget(EntityLivingBase entityliving, TargetReason reason, boolean fireEvent)
+    {
+        if (getAttackTarget() == entityliving) return;
+
+        if (fireEvent)
+        {
+            if (reason == EntityTargetEvent.TargetReason.UNKNOWN && getAttackTarget() != null && entityliving == null)
+            {
+                reason = getAttackTarget().isEntityAlive() ? EntityTargetEvent.TargetReason.FORGOT_TARGET : EntityTargetEvent.TargetReason.TARGET_DIED;
+            }
+
+            if (reason == EntityTargetEvent.TargetReason.UNKNOWN)
+            {
+                worldObj.getServer().getLogger().log(java.util.logging.Level.WARNING, "Unknown target reason, please report on the issue tracker", new Exception());
+            }
+
+            CraftLivingEntity ctarget = null;
+
+            if (entityliving != null)
+            {
+                ctarget = (CraftLivingEntity)entityliving.getBukkitEntity();
+            }
+
+            EntityTargetLivingEntityEvent event = new EntityTargetLivingEntityEvent(this.getBukkitEntity(), ctarget, reason);
+            worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
+            {
+                return;
+            }
+
+            if (event.getTarget() != null)
+            {
+                entityliving = ((CraftLivingEntity)event.getTarget()).getHandle();
+            }
+            else
+            {
+                entityliving = null;
+            }
+        }
+
+        this.attackTarget = new WeakReference(entityliving); // Spigot
+        // CraftBukkit end
+    }
+
     public boolean canAttackClass(Class p_70686_1_)
     {
         return p_70686_1_ != EntityGhast.class;
     }
 
-    public void eatGrassBonus() {}
+    public void eatGrassBonus()
+    {
+    }
 
     protected void entityInit()
     {
         super.entityInit();
         this.dataWatcher.addObject(15, Byte.valueOf((byte)0));
@@ -208,23 +270,10 @@
         {
             this.worldObj.setEntityState(this, (byte)20);
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public void handleHealthUpdate(byte p_70103_1_)
-    {
-        if (p_70103_1_ == 20)
-        {
-            this.spawnExplosionParticle();
-        }
-        else
-        {
-            super.handleHealthUpdate(p_70103_1_);
-        }
-    }
-
     public void onUpdate()
     {
         super.onUpdate();
 
         if (!this.worldObj.isRemote)
@@ -328,16 +377,29 @@
 
     public void readEntityFromNBT(NBTTagCompound tagCompund)
     {
         super.readEntityFromNBT(tagCompund);
 
+        // CraftBukkit start - If looting or persistence is false only use it if it was set after we started using it
         if (tagCompund.hasKey("CanPickUpLoot", 1))
         {
-            this.setCanPickUpLoot(tagCompund.getBoolean("CanPickUpLoot"));
+            boolean data = tagCompund.getBoolean("CanPickUpLoot");
+
+            if (isLevelAtLeast(tagCompund, 1) || data)
+            {
+                this.setCanPickUpLoot(data);
+            }
         }
 
-        this.persistenceRequired = tagCompund.getBoolean("PersistenceRequired");
+        boolean data = tagCompund.getBoolean("PersistenceRequired");
+
+        if (isLevelAtLeast(tagCompund, 1) || data)
+        {
+            this.persistenceRequired = data;
+        }
+
+        // CraftBukkit end
         NBTTagList nbttaglist;
         int i;
 
         if (tagCompund.hasKey("Equipment", 9))
         {
@@ -498,11 +560,11 @@
     protected boolean func_175448_a(ItemStack p_175448_1_)
     {
         return true;
     }
 
-    protected boolean canDespawn()
+    public boolean canDespawn()   // SpigotMCP -- Make public as bukkit assumes in same package
     {
         return true;
     }
 
     protected void despawnEntity()
@@ -520,16 +582,16 @@
                 double d0 = entityplayer.posX - this.posX;
                 double d1 = entityplayer.posY - this.posY;
                 double d2 = entityplayer.posZ - this.posZ;
                 double d3 = d0 * d0 + d1 * d1 + d2 * d2;
 
-                if (this.canDespawn() && d3 > 16384.0D)
+                if (d3 > 16384.0D)  // CraftBukkit - remove isTypeNotPersistent() check
                 {
                     this.setDead();
                 }
 
-                if (this.entityAge > 600 && this.rand.nextInt(800) == 0 && d3 > 1024.0D && this.canDespawn())
+                if (this.entityAge > 600 && this.rand.nextInt(800) == 0 && d3 > 1024.0D)  // CraftBukkit - remove isTypeNotPersistent() check
                 {
                     this.setDead();
                 }
                 else if (d3 < 1024.0D)
                 {
@@ -543,10 +605,18 @@
     {
         ++this.entityAge;
         this.worldObj.theProfiler.startSection("checkDespawn");
         this.despawnEntity();
         this.worldObj.theProfiler.endSection();
+
+        // Spigot Start
+        if (this.fromMobSpawner)
+        {
+            return;
+        }
+
+        // Spigot End
         this.worldObj.theProfiler.startSection("sensing");
         this.senses.clearSensingCache();
         this.worldObj.theProfiler.endSection();
         this.worldObj.theProfiler.startSection("targetSelector");
         this.targetTasks.onUpdateTasks();
@@ -569,11 +639,13 @@
         this.jumpHelper.doJump();
         this.worldObj.theProfiler.endSection();
         this.worldObj.theProfiler.endSection();
     }
 
-    protected void updateAITasks() {}
+    protected void updateAITasks()
+    {
+    }
 
     public int getVerticalFaceSpeed()
     {
         return 40;
     }
@@ -626,16 +698,10 @@
     public boolean handleLavaMovement()
     {
         return this.worldObj.checkNoEntityCollision(this.getEntityBoundingBox(), this) && this.worldObj.getCollidingBoundingBoxes(this, this.getEntityBoundingBox()).isEmpty() && !this.worldObj.isAnyLiquid(this.getEntityBoundingBox());
     }
 
-    @SideOnly(Side.CLIENT)
-    public float getRenderSizeModifier()
-    {
-        return 1.0F;
-    }
-
     public int getMaxSpawnedInChunk()
     {
         return 4;
     }
 
@@ -790,10 +856,11 @@
     public static Item getArmorItemForSlot(int armorSlot, int itemTier)
     {
         switch (armorSlot)
         {
             case 4:
+
                 if (itemTier == 0)
                 {
                     return Items.leather_helmet;
                 }
                 else if (itemTier == 1)
@@ -810,11 +877,13 @@
                 }
                 else if (itemTier == 4)
                 {
                     return Items.diamond_helmet;
                 }
+
             case 3:
+
                 if (itemTier == 0)
                 {
                     return Items.leather_chestplate;
                 }
                 else if (itemTier == 1)
@@ -831,11 +900,13 @@
                 }
                 else if (itemTier == 4)
                 {
                     return Items.diamond_chestplate;
                 }
+
             case 2:
+
                 if (itemTier == 0)
                 {
                     return Items.leather_leggings;
                 }
                 else if (itemTier == 1)
@@ -852,11 +923,13 @@
                 }
                 else if (itemTier == 4)
                 {
                     return Items.diamond_leggings;
                 }
+
             case 1:
+
                 if (itemTier == 0)
                 {
                     return Items.leather_boots;
                 }
                 else if (itemTier == 1)
@@ -873,10 +946,11 @@
                 }
                 else if (itemTier == 4)
                 {
                     return Items.diamond_boots;
                 }
+
             default:
                 return null;
         }
     }
 
@@ -938,10 +1012,18 @@
 
     public final boolean interactFirst(EntityPlayer playerIn)
     {
         if (this.getLeashed() && this.getLeashedToEntity() == playerIn)
         {
+            // CraftBukkit start - fire PlayerUnleashEntityEvent
+            if (CraftEventFactory.callPlayerUnleashEntityEvent(this, playerIn).isCancelled())
+            {
+                ((EntityPlayerMP)playerIn).playerNetServerHandler.sendPacket(new S1BPacketEntityAttach(1, this, this.getLeashedToEntity()));
+                return false;
+            }
+
+            // CraftBukkit end
             this.clearLeashed(true, !playerIn.capabilities.isCreativeMode);
             return true;
         }
         else
         {
@@ -949,17 +1031,33 @@
 
             if (itemstack != null && itemstack.getItem() == Items.lead && this.allowLeashing())
             {
                 if (!(this instanceof EntityTameable) || !((EntityTameable)this).isTamed())
                 {
+                    // CraftBukkit start - fire PlayerLeashEntityEvent
+                    if (CraftEventFactory.callPlayerLeashEntityEvent(this, playerIn, playerIn).isCancelled())
+                    {
+                        ((EntityPlayerMP)playerIn).playerNetServerHandler.sendPacket(new S1BPacketEntityAttach(1, this, this.getLeashedToEntity()));
+                        return false;
+                    }
+
+                    // CraftBukkit end
                     this.setLeashedToEntity(playerIn, true);
                     --itemstack.stackSize;
                     return true;
                 }
 
                 if (((EntityTameable)this).isOwner(playerIn))
                 {
+                    // CraftBukkit start - fire PlayerLeashEntityEvent
+                    if (CraftEventFactory.callPlayerLeashEntityEvent(this, playerIn, playerIn).isCancelled())
+                    {
+                        ((EntityPlayerMP)playerIn).playerNetServerHandler.sendPacket(new S1BPacketEntityAttach(1, this, this.getLeashedToEntity()));
+                        return false;
+                    }
+
+                    // CraftBukkit end
                     this.setLeashedToEntity(playerIn, true);
                     --itemstack.stackSize;
                     return true;
                 }
             }
@@ -982,15 +1080,17 @@
 
         if (this.isLeashed)
         {
             if (!this.isEntityAlive())
             {
+                this.worldObj.getServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), UnleashReason.PLAYER_UNLEASH)); // CraftBukkit
                 this.clearLeashed(true, true);
             }
 
             if (this.leashedToEntity == null || this.leashedToEntity.isDead)
             {
+                this.worldObj.getServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), UnleashReason.HOLDER_GONE)); // CraftBukkit
                 this.clearLeashed(true, true);
             }
         }
     }
 
@@ -1072,10 +1172,11 @@
 
                 this.leashedToEntity = entityleashknot;
             }
             else
             {
+                this.worldObj.getServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), UnleashReason.UNKNOWN)); // CraftBukkit
                 this.clearLeashed(false, true);
             }
         }
 
         this.leashNBTTag = null;
