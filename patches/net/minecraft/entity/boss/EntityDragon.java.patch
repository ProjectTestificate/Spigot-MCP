--- decompiled\net\minecraft\entity\boss\EntityDragon.java
+++ src\main\java\net\minecraft\entity\boss\EntityDragon.java
@@ -1,11 +1,11 @@
 package net.minecraft.entity.boss;
 
-import com.google.common.collect.Lists;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockTorch;
 import net.minecraft.block.material.Material;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLiving;
@@ -14,24 +14,40 @@
 import net.minecraft.entity.SharedMonsterAttributes;
 import net.minecraft.entity.item.EntityEnderCrystal;
 import net.minecraft.entity.item.EntityXPOrb;
 import net.minecraft.entity.monster.IMob;
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Blocks;
+import net.minecraft.network.play.server.S23PacketBlockChange;
+import net.minecraft.network.play.server.S28PacketEffect;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.EntityDamageSource;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.Explosion;
 import net.minecraft.world.World;
+import net.minecraft.world.WorldServer;
 
+import org.bukkit.Bukkit;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.util.BlockStateListPopulator;
+import org.bukkit.event.entity.EntityCreatePortalEvent;
+import org.bukkit.event.entity.EntityExplodeEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.event.entity.EntityTargetEvent;
+
+import com.google.common.collect.Lists;
+
 public class EntityDragon extends EntityLiving implements IBossDisplayData, IEntityMultiPart, IMob
 {
+
     public double targetX;
     public double targetY;
     public double targetZ;
     public double[][] ringBuffer = new double[64][3];
     public int ringBufferIndex = -1;
@@ -48,16 +64,26 @@
     public boolean forceNewTarget;
     public boolean slowed;
     private Entity target;
     public int deathTicks;
     public EntityEnderCrystal healingEnderCrystal;
+    private Explosion explosionSource = new Explosion(null, this, Double.NaN, Double.NaN, Double.NaN, Float.NaN, true, true); // CraftBukkit - reusable source for CraftTNTPrimed.getSource()
     private static final String __OBFID = "CL_00001659";
 
     public EntityDragon(World worldIn)
     {
         super(worldIn);
-        this.dragonPartArray = new EntityDragonPart[] {this.dragonPartHead = new EntityDragonPart(this, "head", 6.0F, 6.0F), this.dragonPartBody = new EntityDragonPart(this, "body", 8.0F, 8.0F), this.dragonPartTail1 = new EntityDragonPart(this, "tail", 4.0F, 4.0F), this.dragonPartTail2 = new EntityDragonPart(this, "tail", 4.0F, 4.0F), this.dragonPartTail3 = new EntityDragonPart(this, "tail", 4.0F, 4.0F), this.dragonPartWing1 = new EntityDragonPart(this, "wing", 4.0F, 4.0F), this.dragonPartWing2 = new EntityDragonPart(this, "wing", 4.0F, 4.0F)};
+        this.dragonPartArray = new EntityDragonPart[]
+        {
+            this.dragonPartHead = new EntityDragonPart(this, "head", 6.0F, 6.0F),
+            this.dragonPartBody = new EntityDragonPart(this, "body", 8.0F, 8.0F),
+            this.dragonPartTail1 = new EntityDragonPart(this, "tail", 4.0F, 4.0F),
+            this.dragonPartTail2 = new EntityDragonPart(this, "tail", 4.0F, 4.0F),
+            this.dragonPartTail3 = new EntityDragonPart(this, "tail", 4.0F, 4.0F),
+            this.dragonPartWing1 = new EntityDragonPart(this, "wing", 4.0F, 4.0F),
+            this.dragonPartWing2 = new EntityDragonPart(this, "wing", 4.0F, 4.0F)
+        };
         this.setHealth(this.getMaxHealth());
         this.setSize(16.0F, 8.0F);
         this.noClip = true;
         this.isImmuneToFire = true;
         this.targetY = 100.0D;
@@ -351,18 +377,29 @@
         {
             if (this.healingEnderCrystal.isDead)
             {
                 if (!this.worldObj.isRemote)
                 {
+                    CraftEventFactory.entityDamage = this.healingEnderCrystal; // CraftBukkit
                     this.attackEntityFromPart(this.dragonPartHead, DamageSource.setExplosionSource((Explosion)null), 10.0F);
+                    CraftEventFactory.entityDamage = null; // CraftBukkit
                 }
 
                 this.healingEnderCrystal = null;
             }
             else if (this.ticksExisted % 10 == 0 && this.getHealth() < this.getMaxHealth())
             {
-                this.setHealth(this.getHealth() + 1.0F);
+                // CraftBukkit start
+                EntityRegainHealthEvent event = new EntityRegainHealthEvent(this.getBukkitEntity(), 1.0D, EntityRegainHealthEvent.RegainReason.ENDER_CRYSTAL);
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+
+                if (!event.isCancelled())
+                {
+                    this.setHealth((float)(this.getHealth() + event.getAmount()));
+                }
+
+                // CraftBukkit end
             }
         }
 
         if (this.rand.nextInt(10) == 0)
         {
@@ -436,11 +473,28 @@
             }
         }
 
         if (this.rand.nextInt(2) == 0 && !arraylist.isEmpty())
         {
-            this.target = (Entity)arraylist.get(this.rand.nextInt(arraylist.size()));
+            // CraftBukkit start
+            Entity target = (Entity)this.worldObj.playerEntities.get(this.rand.nextInt(this.worldObj.playerEntities.size()));
+            EntityTargetEvent event = new EntityTargetEvent(this.getBukkitEntity(), target.getBukkitEntity(), EntityTargetEvent.TargetReason.RANDOM_TARGET);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled())
+            {
+                if (event.getTarget() == null)
+                {
+                    this.target = null;
+                }
+                else
+                {
+                    this.target = ((org.bukkit.craftbukkit.entity.CraftEntity)event.getTarget()).getHandle();
+                }
+            }
+
+            // CraftBukkit end
         }
         else
         {
             boolean flag;
 
@@ -475,10 +529,14 @@
         int l = MathHelper.floor_double(p_70972_1_.maxX);
         int i1 = MathHelper.floor_double(p_70972_1_.maxY);
         int j1 = MathHelper.floor_double(p_70972_1_.maxZ);
         boolean flag = false;
         boolean flag1 = false;
+        // CraftBukkit start - Create a list to hold all the destroyed blocks
+        List<org.bukkit.block.Block> destroyedBlocks = new ArrayList();
+        org.bukkit.craftbukkit.CraftWorld craftWorld = this.worldObj.getWorld();
+        // CraftBukkit end
 
         for (int k1 = i; k1 <= l; ++k1)
         {
             for (int l1 = j; l1 <= i1; ++l1)
             {
@@ -488,11 +546,15 @@
 
                     if (block.getMaterial() != Material.air)
                     {
                         if (block != Blocks.barrier && block != Blocks.obsidian && block != Blocks.end_stone && block != Blocks.bedrock && block != Blocks.command_block && this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing"))
                         {
-                            flag1 = this.worldObj.setBlockToAir(new BlockPos(k1, l1, i2)) || flag1;
+                            // CraftBukkit start - Add blocks to list rather than destroying them
+                            //flag1 = this.worldObj.setBlockToAir(new BlockPos(k1, l1, i2)) || flag1;
+                            flag1 = true;
+                            destroyedBlocks.add(craftWorld.getBlockAt(k1, l1, i2));
+                            // CraftBukkit end
                         }
                         else
                         {
                             flag = true;
                         }
@@ -501,10 +563,56 @@
             }
         }
 
         if (flag1)
         {
+            // CraftBukkit start - Set off an EntityExplodeEvent for the dragon exploding all these blocks
+            org.bukkit.entity.Entity bukkitEntity = this.getBukkitEntity();
+            EntityExplodeEvent event = new EntityExplodeEvent(bukkitEntity, bukkitEntity.getLocation(), destroyedBlocks, 0F);
+            Bukkit.getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
+            {
+                // This flag literally means 'Dragon hit something hard' (Obsidian, White Stone or Bedrock) and will cause the dragon to slow down.
+                // We should consider adding an event extension for it, or perhaps returning true if the event is cancelled.
+                return flag;
+            }
+            else if (event.getYield() == 0F)
+            {
+                // Yield zero ==> no drops
+                for (org.bukkit.block.Block block : event.blockList())
+                {
+                    this.worldObj.setBlockToAir(new BlockPos(block.getX(), block.getY(), block.getZ()));
+                }
+            }
+            else
+            {
+                for (org.bukkit.block.Block block : event.blockList())
+                {
+                    org.bukkit.Material blockId = block.getType();
+
+                    if (blockId == org.bukkit.Material.AIR)
+                    {
+                        continue;
+                    }
+
+                    int blockX = block.getX();
+                    int blockY = block.getY();
+                    int blockZ = block.getZ();
+                    Block nmsBlock = org.bukkit.craftbukkit.util.CraftMagicNumbers.getBlock(blockId);
+
+                    if (nmsBlock.canDropFromExplosion(explosionSource))
+                    {
+                        nmsBlock.dropBlockAsItemWithChance(this.worldObj, new BlockPos(blockX, blockY, blockZ), nmsBlock.getStateFromMeta(block.getData()), event.getYield(), 0);
+                    }
+
+                    nmsBlock.onBlockDestroyedByExplosion(worldObj, new BlockPos(blockX, blockY, blockZ), explosionSource);
+                    this.worldObj.setBlockToAir(new BlockPos(blockX, blockY, blockZ));
+                }
+            }
+
+            // CraftBukkit end
             double d1 = p_70972_1_.minX + (p_70972_1_.maxX - p_70972_1_.minX) * (double)this.rand.nextFloat();
             double d2 = p_70972_1_.minY + (p_70972_1_.maxY - p_70972_1_.minY) * (double)this.rand.nextFloat();
             double d0 = p_70972_1_.minZ + (p_70972_1_.maxZ - p_70972_1_.minZ) * (double)this.rand.nextFloat();
             this.worldObj.spawnParticle(EnumParticleTypes.EXPLOSION_LARGE, d1, d2, d0, 0.0D, 0.0D, 0.0D, new int[0]);
         }
@@ -555,10 +663,12 @@
         this.setDead();
     }
 
     protected void onDeathUpdate()
     {
+        if (this.isDead) return; // CraftBukkit - can't kill what's already dead
+
         ++this.deathTicks;
 
         if (this.deathTicks >= 180 && this.deathTicks <= 200)
         {
             float f = (this.rand.nextFloat() - 0.5F) * 8.0F;
@@ -572,11 +682,11 @@
 
         if (!this.worldObj.isRemote)
         {
             if (this.deathTicks > 150 && this.deathTicks % 5 == 0 && this.worldObj.getGameRules().getGameRuleBooleanValue("doMobLoot"))
             {
-                i = 1000;
+                i = this.expToDrop / 12; // CraftBukkit - drop experience as dragon falls from sky. use experience drop from death event. This is now set in getExpReward()
 
                 while (i > 0)
                 {
                     j = EntityXPOrb.getXPSplit(i);
                     i -= j;
@@ -584,20 +694,46 @@
                 }
             }
 
             if (this.deathTicks == 1)
             {
-                this.worldObj.playBroadcastSound(1018, new BlockPos(this), 0);
+                // CraftBukkit start
+                // this.worldObj.playBroadcastSound(1018, new BlockPos(this), 0);
+                int viewDistance = ((WorldServer)this.worldObj).getServer().getViewDistance() * 16;
+
+                for (EntityPlayerMP player : (List<EntityPlayerMP>)this.worldObj.playerEntities)
+                {
+                    double deltaX = this.posX - player.posX;
+                    double deltaZ = this.posZ - player.posZ;
+                    double distanceSquared = deltaX * deltaX + deltaZ * deltaZ;
+
+                    if (worldObj.spigotConfig.dragonDeathSoundRadius > 0 && distanceSquared > worldObj.spigotConfig.dragonDeathSoundRadius * worldObj.spigotConfig.dragonDeathSoundRadius)
+                        continue; // Spigot
+
+                    if (distanceSquared > viewDistance * viewDistance)
+                    {
+                        double deltaLength = Math.sqrt(distanceSquared);
+                        double relativeX = player.posX + (deltaX / deltaLength) * viewDistance;
+                        double relativeZ = player.posZ + (deltaZ / deltaLength) * viewDistance;
+                        player.playerNetServerHandler.sendPacket(new S28PacketEffect(1018, new BlockPos((int)relativeX, (int)this.posY, (int)relativeZ), 0, true));
+                    }
+                    else
+                    {
+                        player.playerNetServerHandler.sendPacket(new S28PacketEffect(1018, new BlockPos((int)this.posX, (int)this.posY, (int)this.posZ), 0, true));
+                    }
+                }
+
+                // CraftBukkit end
             }
         }
 
         this.moveEntity(0.0D, 0.10000000149011612D, 0.0D);
         this.renderYawOffset = this.rotationYaw += 20.0F;
 
         if (this.deathTicks == 200 && !this.worldObj.isRemote)
         {
-            i = 2000;
+            i = this.expToDrop - (10 * this.expToDrop / 12); // CraftBukkit - drop the remaining experience
 
             while (i > 0)
             {
                 j = EntityXPOrb.getXPSplit(i);
                 i -= j;
@@ -612,10 +748,12 @@
     private void func_175499_a(BlockPos p_175499_1_)
     {
         boolean flag = true;
         double d0 = 12.25D;
         double d1 = 6.25D;
+        // CraftBukkit start - Replace any "this.world" in the following with just "world"!
+        BlockStateListPopulator world = new BlockStateListPopulator(this.worldObj.getWorld());
 
         for (int i = -1; i <= 32; ++i)
         {
             for (int j = -4; j <= 4; ++j)
             {
@@ -629,43 +767,74 @@
 
                         if (i < 0)
                         {
                             if (d2 <= 6.25D)
                             {
-                                this.worldObj.setBlockState(blockpos1, Blocks.bedrock.getDefaultState());
+                                world.setTypeUpdate(blockpos1, Blocks.bedrock.getDefaultState()); //SpigotMCP -- Change to craftbukkit name
                             }
                         }
                         else if (i > 0)
                         {
-                            this.worldObj.setBlockState(blockpos1, Blocks.air.getDefaultState());
+                            world.setTypeUpdate(blockpos1, Blocks.air.getDefaultState()); //SpigotMCP -- Change to craftbukkit name
                         }
                         else if (d2 > 6.25D)
                         {
-                            this.worldObj.setBlockState(blockpos1, Blocks.bedrock.getDefaultState());
+                            world.setTypeUpdate(blockpos1, Blocks.bedrock.getDefaultState()); //SpigotMCP -- Change to craftbukkit name
                         }
                         else
                         {
-                            this.worldObj.setBlockState(blockpos1, Blocks.end_portal.getDefaultState());
+                            world.setTypeUpdate(blockpos1, Blocks.end_portal.getDefaultState()); //SpigotMCP -- Change to craftbukkit name
                         }
                     }
                 }
             }
         }
 
-        this.worldObj.setBlockState(p_175499_1_, Blocks.bedrock.getDefaultState());
-        this.worldObj.setBlockState(p_175499_1_.up(), Blocks.bedrock.getDefaultState());
+        world.setTypeUpdate(p_175499_1_, Blocks.bedrock.getDefaultState()); //SpigotMCP -- Change to craftbukkit name
+        world.setTypeUpdate(p_175499_1_.up(), Blocks.bedrock.getDefaultState()); //SpigotMCP -- Change to craftbukkit name
         BlockPos blockpos2 = p_175499_1_.up(2);
-        this.worldObj.setBlockState(blockpos2, Blocks.bedrock.getDefaultState());
-        this.worldObj.setBlockState(blockpos2.west(), Blocks.torch.getDefaultState().withProperty(BlockTorch.FACING, EnumFacing.EAST));
-        this.worldObj.setBlockState(blockpos2.east(), Blocks.torch.getDefaultState().withProperty(BlockTorch.FACING, EnumFacing.WEST));
-        this.worldObj.setBlockState(blockpos2.north(), Blocks.torch.getDefaultState().withProperty(BlockTorch.FACING, EnumFacing.SOUTH));
-        this.worldObj.setBlockState(blockpos2.south(), Blocks.torch.getDefaultState().withProperty(BlockTorch.FACING, EnumFacing.NORTH));
-        this.worldObj.setBlockState(p_175499_1_.up(3), Blocks.bedrock.getDefaultState());
-        this.worldObj.setBlockState(p_175499_1_.up(4), Blocks.dragon_egg.getDefaultState());
+        world.setTypeUpdate(blockpos2, Blocks.bedrock.getDefaultState()); //SpigotMCP -- Change to craftbukkit name
+        world.setTypeUpdate(blockpos2.west(), Blocks.torch.getDefaultState().withProperty(BlockTorch.FACING, EnumFacing.EAST)); //SpigotMCP -- Change to craftbukkit name
+        world.setTypeUpdate(blockpos2.east(), Blocks.torch.getDefaultState().withProperty(BlockTorch.FACING, EnumFacing.WEST)); //SpigotMCP -- Change to craftbukkit name
+        world.setTypeUpdate(blockpos2.north(), Blocks.torch.getDefaultState().withProperty(BlockTorch.FACING, EnumFacing.SOUTH)); //SpigotMCP -- Change to craftbukkit name
+        world.setTypeUpdate(blockpos2.south(), Blocks.torch.getDefaultState().withProperty(BlockTorch.FACING, EnumFacing.NORTH)); //SpigotMCP -- Change to craftbukkit name
+        world.setTypeUpdate(p_175499_1_.up(3), Blocks.bedrock.getDefaultState()); //SpigotMCP -- Change to craftbukkit name
+        world.setTypeUpdate(p_175499_1_.up(4), Blocks.dragon_egg.getDefaultState()); //SpigotMCP -- Change to craftbukkit name
+        EntityCreatePortalEvent event = new EntityCreatePortalEvent((org.bukkit.entity.LivingEntity)this.getBukkitEntity(), java.util.Collections.unmodifiableList(world.getList()), org.bukkit.PortalType.ENDER);
+        this.worldObj.getServer().getPluginManager().callEvent(event);
+
+        if (!event.isCancelled())
+        {
+            for (BlockState state : event.getBlocks())
+            {
+                state.update(true);
+            }
+        }
+        else
+        {
+            for (BlockState state : event.getBlocks())
+            {
+                S23PacketBlockChange packet = new S23PacketBlockChange(this.worldObj, new BlockPos(state.getX(), state.getY(), state.getZ()));
+
+                for (Iterator it = this.worldObj.playerEntities.iterator(); it.hasNext();)
+                {
+                    EntityPlayer entity = (EntityPlayer)it.next();
+
+                    if (entity instanceof EntityPlayerMP)
+                    {
+                        ((EntityPlayerMP)entity).playerNetServerHandler.sendPacket(packet);
+                    }
+                }
+            }
+        }
+
+        // CraftBukkit
     }
 
-    protected void despawnEntity() {}
+    protected void despawnEntity()
+    {
+    }
 
     public Entity[] getParts()
     {
         return this.dragonPartArray;
     }
@@ -692,6 +861,15 @@
 
     protected float getSoundVolume()
     {
         return 5.0F;
     }
+
+    // CraftBukkit start
+    public int getExpReward()
+    {
+        // This value is equal to the amount of experience dropped while falling from the sky (10 * 1000)
+        // plus what is dropped when the dragon hits the ground (2000)
+        return 12000;
+    }
+    // CraftBukkit end
 }
