--- decompiled\net\minecraft\entity\boss\EntityWither.java
+++ src\main\java\net\minecraft\entity\boss\EntityWither.java
@@ -1,11 +1,10 @@
 package net.minecraft.entity.boss;
 
-import com.google.common.base.Predicate;
-import com.google.common.base.Predicates;
 import java.util.Iterator;
 import java.util.List;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.command.IEntitySelector;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLiving;
@@ -21,29 +20,38 @@
 import net.minecraft.entity.ai.EntityAIWander;
 import net.minecraft.entity.ai.EntityAIWatchClosest;
 import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.monster.EntityMob;
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.entity.projectile.EntityArrow;
 import net.minecraft.entity.projectile.EntityWitherSkull;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.Items;
 import net.minecraft.nbt.NBTTagCompound;
+import net.minecraft.network.play.server.S28PacketEffect;
 import net.minecraft.pathfinding.PathNavigateGround;
 import net.minecraft.potion.PotionEffect;
 import net.minecraft.stats.AchievementList;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.EnumDifficulty;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+import net.minecraft.world.WorldServer;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.event.entity.ExplosionPrimeEvent;
+
+import com.google.common.base.Predicate;
+import com.google.common.base.Predicates;
+
 public class EntityWither extends EntityMob implements IBossDisplayData, IRangedAttackMob
 {
+
     private float[] field_82220_d = new float[2];
     private float[] field_82221_e = new float[2];
     private float[] field_82217_f = new float[2];
     private float[] field_82218_g = new float[2];
     private int[] field_82223_h = new int[2];
@@ -230,19 +238,55 @@
         {
             i = this.getInvulTime() - 1;
 
             if (i <= 0)
             {
-                this.worldObj.newExplosion(this, this.posX, this.posY + (double)this.getEyeHeight(), this.posZ, 7.0F, false, this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing"));
-                this.worldObj.playBroadcastSound(1013, new BlockPos(this), 0);
+                // CraftBukkit start
+                //this.worldObj.newExplosion(this, this.posX, this.posY + (double)this.getEyeHeight(), this.posZ, 7.0F, false, this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing"));
+                ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), 7.0F, false);
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+
+                if (!event.isCancelled())
+                {
+                    this.worldObj.newExplosion(this, this.posX, this.posY + (double)this.getEyeHeight(), this.posZ, event.getRadius(), event.getFire(), this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing"));
+                }
+
+                // CraftBukkit end
+                // CraftBukkit start - Use relative location for far away sounds
+                // this.worldObj.playBroadcastSound(1013, new BlockPos(this), 0);
+                int viewDistance = ((WorldServer)this.worldObj).getServer().getViewDistance() * 16;
+
+                for (EntityPlayerMP player : (List<EntityPlayerMP>)this.worldObj.playerEntities)
+                {
+                    double deltaX = this.posX - player.posX;
+                    double deltaZ = this.posZ - player.posZ;
+                    double distanceSquared = deltaX * deltaX + deltaZ * deltaZ;
+
+                    if (worldObj.spigotConfig.witherSpawnSoundRadius > 0 && distanceSquared > worldObj.spigotConfig.witherSpawnSoundRadius * worldObj.spigotConfig.witherSpawnSoundRadius)
+                        continue; // Spigot
+
+                    if (distanceSquared > viewDistance * viewDistance)
+                    {
+                        double deltaLength = Math.sqrt(distanceSquared);
+                        double relativeX = player.posX + (deltaX / deltaLength) * viewDistance;
+                        double relativeZ = player.posZ + (deltaZ / deltaLength) * viewDistance;
+                        player.playerNetServerHandler.sendPacket(new S28PacketEffect(1013, new BlockPos((int)relativeX, (int)this.posY, (int)relativeZ), 0, true));
+                    }
+                    else
+                    {
+                        player.playerNetServerHandler.sendPacket(new S28PacketEffect(1013, new BlockPos((int)this.posX, (int)this.posY, (int)this.posZ), 0, true));
+                    }
+                }
+
+                // CraftBukkit end
             }
 
             this.setInvulTime(i);
 
             if (this.ticksExisted % 10 == 0)
             {
-                this.heal(10.0F);
+                this.heal(10.0F, EntityRegainHealthEvent.RegainReason.WITHER_SPAWN); // CraftBukkit
             }
         }
         else
         {
             super.updateAITasks();
@@ -351,10 +395,17 @@
                                 int l = j1 + i2;
                                 Block block = this.worldObj.getBlockState(new BlockPos(j2, k, l)).getBlock();
 
                                 if (block.getMaterial() != Material.air && block != Blocks.bedrock && block != Blocks.end_portal && block != Blocks.end_portal_frame && block != Blocks.command_block && block != Blocks.barrier)
                                 {
+                                    // CraftBukkit start
+                                    if (CraftEventFactory.callEntityChangeBlockEvent(this, j2, k, l, Blocks.air, 0).isCancelled())
+                                    {
+                                        continue;
+                                    }
+
+                                    // CraftBukkit end
                                     flag = this.worldObj.destroyBlock(new BlockPos(j2, k, l), true) || flag;
                                 }
                             }
                         }
                     }
@@ -366,22 +417,24 @@
                 }
             }
 
             if (this.ticksExisted % 20 == 0)
             {
-                this.heal(1.0F);
+                this.heal(1.0F, EntityRegainHealthEvent.RegainReason.REGEN); // CraftBukkit
             }
         }
     }
 
     public void func_82206_m()
     {
         this.setInvulTime(220);
         this.setHealth(this.getMaxHealth() / 3.0F);
     }
 
-    public void setInWeb() {}
+    public void setInWeb()
+    {
+    }
 
     public int getTotalArmorValue()
     {
         return 4;
     }
@@ -546,40 +599,26 @@
     protected void despawnEntity()
     {
         this.entityAge = 0;
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getBrightnessForRender(float p_70070_1_)
+    public void fall(float distance, float damageMultiplier)
     {
-        return 15728880;
     }
 
-    public void fall(float distance, float damageMultiplier) {}
+    public void addPotionEffect(PotionEffect p_70690_1_)
+    {
+    }
 
-    public void addPotionEffect(PotionEffect p_70690_1_) {}
-
     protected void applyEntityAttributes()
     {
         super.applyEntityAttributes();
         this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setBaseValue(300.0D);
         this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setBaseValue(0.6000000238418579D);
         this.getEntityAttribute(SharedMonsterAttributes.followRange).setBaseValue(40.0D);
     }
 
-    @SideOnly(Side.CLIENT)
-    public float func_82207_a(int p_82207_1_)
-    {
-        return this.field_82221_e[p_82207_1_];
-    }
-
-    @SideOnly(Side.CLIENT)
-    public float func_82210_r(int p_82210_1_)
-    {
-        return this.field_82220_d[p_82210_1_];
-    }
-
     public int getInvulTime()
     {
         return this.dataWatcher.getWatchableObjectInt(20);
     }
 
