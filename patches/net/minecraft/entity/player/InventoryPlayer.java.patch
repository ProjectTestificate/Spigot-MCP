--- decompiled\net\minecraft\entity\player\InventoryPlayer.java
+++ src\main\java\net\minecraft\entity\player\InventoryPlayer.java
@@ -1,8 +1,11 @@
 package net.minecraft.entity.player;
 
+import java.util.ArrayList;
+import java.util.List;
 import java.util.concurrent.Callable;
+
 import net.minecraft.block.Block;
 import net.minecraft.command.server.CommandTestForBlock;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.inventory.IInventory;
@@ -13,23 +16,66 @@
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.util.ChatComponentText;
 import net.minecraft.util.ChatComponentTranslation;
 import net.minecraft.util.IChatComponent;
 import net.minecraft.util.ReportedException;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.inventory.InventoryHolder;
+
 public class InventoryPlayer implements IInventory
 {
+
     public ItemStack[] mainInventory = new ItemStack[36];
     public ItemStack[] armorInventory = new ItemStack[4];
     public int currentItem;
     public EntityPlayer player;
     private ItemStack itemStack;
     public boolean inventoryChanged;
     private static final String __OBFID = "CL_00001709";
 
+    // CraftBukkit start - add fields and methods
+    public List transaction = new ArrayList();
+    private int maxStack = 64; // SpigotMCP -- Replace MAX_STACK with 64
+
+    public net.minecraft.item.ItemStack[] getContents()
+    {
+        return this.mainInventory;
+    }
+
+    public net.minecraft.item.ItemStack[] getArmorContents()
+    {
+        return this.armorInventory;
+    }
+
+    public void onOpen(CraftHumanEntity who)
+    {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who)
+    {
+        transaction.remove(who);
+    }
+
+    public java.util.List getViewers()
+    {
+        return transaction;
+    }
+
+    public InventoryHolder getOwner()
+    {
+        return this.player.getBukkitEntity();
+    }
+
+    public void setMaxStackSize(int size)
+    {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
+
     public InventoryPlayer(EntityPlayer playerIn)
     {
         this.player = playerIn;
     }
 
@@ -54,36 +100,44 @@
         }
 
         return -1;
     }
 
-    @SideOnly(Side.CLIENT)
-    private int getInventorySlotContainItemAndDamage(Item p_146024_1_, int p_146024_2_)
+    private int storeItemStack(ItemStack p_70432_1_)
     {
-        for (int j = 0; j < this.mainInventory.length; ++j)
+        for (int i = 0; i < this.mainInventory.length; ++i)
         {
-            if (this.mainInventory[j] != null && this.mainInventory[j].getItem() == p_146024_1_ && this.mainInventory[j].getMetadata() == p_146024_2_)
+            if (this.mainInventory[i] != null && this.mainInventory[i].getItem() == p_70432_1_.getItem() && this.mainInventory[i].isStackable() && this.mainInventory[i].stackSize < this.mainInventory[i].getMaxStackSize() && this.mainInventory[i].stackSize < this.getInventoryStackLimit() && (!this.mainInventory[i].getHasSubtypes() || this.mainInventory[i].getMetadata() == p_70432_1_.getMetadata()) && ItemStack.areItemStackTagsEqual(this.mainInventory[i], p_70432_1_))
             {
-                return j;
+                return i;
             }
         }
 
         return -1;
     }
 
-    private int storeItemStack(ItemStack p_70432_1_)
+    // CraftBukkit start - Watch method above! :D
+    public int canHold(ItemStack itemstack)
     {
+        int remains = itemstack.stackSize;
+
         for (int i = 0; i < this.mainInventory.length; ++i)
         {
-            if (this.mainInventory[i] != null && this.mainInventory[i].getItem() == p_70432_1_.getItem() && this.mainInventory[i].isStackable() && this.mainInventory[i].stackSize < this.mainInventory[i].getMaxStackSize() && this.mainInventory[i].stackSize < this.getInventoryStackLimit() && (!this.mainInventory[i].getHasSubtypes() || this.mainInventory[i].getMetadata() == p_70432_1_.getMetadata()) && ItemStack.areItemStackTagsEqual(this.mainInventory[i], p_70432_1_))
+            if (this.mainInventory[i] == null) return itemstack.stackSize;
+
+            // Taken from firstPartial(ItemStack)
+            if (this.mainInventory[i] != null && this.mainInventory[i].getItem() == itemstack.getItem() && this.mainInventory[i].isStackable() && this.mainInventory[i].stackSize < this.mainInventory[i].getMaxStackSize() && this.mainInventory[i].stackSize < this.getInventoryStackLimit() && (!this.mainInventory[i].getHasSubtypes() || this.mainInventory[i].getMetadata() == itemstack.getMetadata()) && ItemStack.areItemStackTagsEqual(this.mainInventory[i], itemstack))
             {
-                return i;
+                remains -= (this.mainInventory[i].getMaxStackSize() < this.getInventoryStackLimit() ? this.mainInventory[i].getMaxStackSize() : this.getInventoryStackLimit()) - this.mainInventory[i].stackSize;
             }
+
+            if (remains <= 0) return itemstack.stackSize;
         }
 
-        return -1;
+        return itemstack.stackSize - remains;
     }
+    // CraftBukkit end
 
     public int getFirstEmptyStack()
     {
         for (int i = 0; i < this.mainInventory.length; ++i)
         {
@@ -94,49 +148,10 @@
         }
 
         return -1;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void setCurrentItem(Item p_146030_1_, int p_146030_2_, boolean p_146030_3_, boolean p_146030_4_)
-    {
-        ItemStack itemstack = this.getCurrentItem();
-        int j = p_146030_3_ ? this.getInventorySlotContainItemAndDamage(p_146030_1_, p_146030_2_) : this.getInventorySlotContainItem(p_146030_1_);
-
-        if (j >= 0 && j < 9)
-        {
-            this.currentItem = j;
-        }
-        else if (p_146030_4_ && p_146030_1_ != null)
-        {
-            int k = this.getFirstEmptyStack();
-
-            if (k >= 0 && k < 9)
-            {
-                this.currentItem = k;
-            }
-
-            if (itemstack == null || !itemstack.isItemEnchantable() || this.getInventorySlotContainItemAndDamage(itemstack.getItem(), itemstack.getItemDamage()) != this.currentItem)
-            {
-                int l = this.getInventorySlotContainItemAndDamage(p_146030_1_, p_146030_2_);
-                int i1;
-
-                if (l >= 0)
-                {
-                    i1 = this.mainInventory[l].stackSize;
-                    this.mainInventory[l] = this.mainInventory[this.currentItem];
-                }
-                else
-                {
-                    i1 = 1;
-                }
-
-                this.mainInventory[this.currentItem] = new ItemStack(p_146030_1_, i1, p_146030_2_);
-            }
-        }
-    }
-
     public int func_174925_a(Item p_174925_1_, int p_174925_2_, int p_174925_3_, NBTTagCompound p_174925_4_)
     {
         int k = 0;
         int l;
         ItemStack itemstack;
@@ -231,34 +246,10 @@
         }
 
         return k;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void changeCurrentItem(int p_70453_1_)
-    {
-        if (p_70453_1_ > 0)
-        {
-            p_70453_1_ = 1;
-        }
-
-        if (p_70453_1_ < 0)
-        {
-            p_70453_1_ = -1;
-        }
-
-        for (this.currentItem -= p_70453_1_; this.currentItem < 0; this.currentItem += 9)
-        {
-            ;
-        }
-
-        while (this.currentItem >= 9)
-        {
-            this.currentItem -= 9;
-        }
-    }
-
     private int storePartialItemStack(ItemStack p_70452_1_)
     {
         Item item = p_70452_1_.getItem();
         int i = p_70452_1_.stackSize;
         int j = this.storeItemStack(p_70452_1_);
@@ -592,11 +583,11 @@
         return (IChatComponent)(this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatComponentTranslation(this.getName(), new Object[0]));
     }
 
     public int getInventoryStackLimit()
     {
-        return 64;
+        return maxStack; // CraftBukkit
     }
 
     public boolean func_146025_b(Block p_146025_1_)
     {
         if (p_146025_1_.getMaterial().isToolNotRequired())
@@ -687,10 +678,17 @@
         this.itemStack = p_70437_1_;
     }
 
     public ItemStack getItemStack()
     {
+        // CraftBukkit start
+        if (this.itemStack != null && this.itemStack.stackSize == 0)
+        {
+            this.setItemStack(null);
+        }
+
+        // CraftBukkit end
         return this.itemStack;
     }
 
     public boolean isUseableByPlayer(EntityPlayer player)
     {
@@ -718,13 +716,17 @@
         }
 
         return false;
     }
 
-    public void openInventory(EntityPlayer player) {}
+    public void openInventory(EntityPlayer player)
+    {
+    }
 
-    public void closeInventory(EntityPlayer player) {}
+    public void closeInventory(EntityPlayer player)
+    {
+    }
 
     public boolean isItemValidForSlot(int index, ItemStack stack)
     {
         return true;
     }
@@ -749,11 +751,13 @@
     public int getField(int id)
     {
         return 0;
     }
 
-    public void setField(int id, int value) {}
+    public void setField(int id, int value)
+    {
+    }
 
     public int getFieldCount()
     {
         return 0;
     }
