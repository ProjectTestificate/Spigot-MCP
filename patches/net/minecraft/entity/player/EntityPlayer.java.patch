--- decompiled\net\minecraft\entity\player\EntityPlayer.java
+++ src\main\java\net\minecraft\entity\player\EntityPlayer.java
@@ -1,14 +1,13 @@
 package net.minecraft.entity.player;
 
-import com.google.common.base.Charsets;
-import com.google.common.collect.Lists;
-import com.mojang.authlib.GameProfile;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.UUID;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockBed;
 import net.minecraft.block.BlockDirectional;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
@@ -46,10 +45,11 @@
 import net.minecraft.item.ItemBlock;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.network.play.server.S12PacketEntityVelocity;
+import net.minecraft.network.play.server.S2FPacketSetSlot;
 import net.minecraft.potion.Potion;
 import net.minecraft.scoreboard.IScoreObjectiveCriteria;
 import net.minecraft.scoreboard.Score;
 import net.minecraft.scoreboard.ScoreObjective;
 import net.minecraft.scoreboard.ScorePlayerTeam;
@@ -73,41 +73,55 @@
 import net.minecraft.world.EnumDifficulty;
 import net.minecraft.world.IInteractionObject;
 import net.minecraft.world.LockCode;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldSettings;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+import net.minecraft.world.gen.ChunkProviderServer;
 
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.entity.CraftItem;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.Player;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.player.PlayerBedEnterEvent;
+import org.bukkit.event.player.PlayerBedLeaveEvent;
+import org.bukkit.event.player.PlayerDropItemEvent;
+import org.bukkit.event.player.PlayerItemConsumeEvent;
+import org.bukkit.event.player.PlayerVelocityEvent;
+
+import com.google.common.base.Charsets;
+import com.google.common.collect.Lists;
+import com.mojang.authlib.GameProfile;
+
 public abstract class EntityPlayer extends EntityLivingBase
 {
+
     public InventoryPlayer inventory = new InventoryPlayer(this);
     private InventoryEnderChest theInventoryEnderChest = new InventoryEnderChest();
     public Container inventoryContainer;
     public Container openContainer;
-    protected FoodStats foodStats = new FoodStats();
+    protected FoodStats foodStats = new FoodStats(this); // CraftBukkit - add "this" to constructor
     protected int flyToggleTimer;
     public float prevCameraYaw;
     public float cameraYaw;
     public int xpCooldown;
     public double field_71091_bM;
     public double field_71096_bN;
     public double field_71097_bO;
     public double field_71094_bP;
     public double field_71095_bQ;
     public double field_71085_bR;
-    protected boolean sleeping;
+    public boolean sleeping; // SpigotMCP -- Apply access transformation
     public BlockPos playerLocation;
-    private int sleepTimer;
+    public int sleepTimer; // SpigotMCP -- Apply access transformation
     public float renderOffsetX;
-    @SideOnly(Side.CLIENT)
-    public float renderOffsetY;
     public float renderOffsetZ;
     private BlockPos spawnChunk;
     private boolean spawnForced;
     private BlockPos startMinecartRidingCoordinate;
     public PlayerCapabilities capabilities = new PlayerCapabilities();
+    public int oldLevel = -1; // CraftBukkit - add field
     public int experienceLevel;
     public int experienceTotal;
     public float experience;
     private int xpSeed;
     private ItemStack itemInUse;
@@ -116,10 +130,22 @@
     protected float speedInAir = 0.02F;
     private int lastXPSound;
     private final GameProfile gameProfile;
     private boolean hasReducedDebug = false;
     public EntityFishHook fishEntity;
+
+    // CraftBukkit start
+    public boolean fauxSleeping;
+    public String spawnWorld = "";
+
+    @Override
+    public CraftHumanEntity getBukkitEntity()
+    {
+        return (CraftHumanEntity)super.getBukkitEntity();
+    }
+
+    // CraftBukkit end
     private static final String __OBFID = "CL_00001711";
 
     public EntityPlayer(World worldIn, GameProfile p_i45324_2_)
     {
         super(worldIn);
@@ -147,33 +173,15 @@
         this.dataWatcher.addObject(17, Float.valueOf(0.0F));
         this.dataWatcher.addObject(18, Integer.valueOf(0));
         this.dataWatcher.addObject(10, Byte.valueOf((byte)0));
     }
 
-    @SideOnly(Side.CLIENT)
-    public ItemStack getItemInUse()
-    {
-        return this.itemInUse;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public int getItemInUseCount()
-    {
-        return this.itemInUseCount;
-    }
-
     public boolean isUsingItem()
     {
         return this.itemInUse != null;
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getItemInUseDuration()
-    {
-        return this.isUsingItem() ? this.itemInUse.getMaxItemUseDuration() - this.itemInUseCount : 0;
-    }
-
     public void stopUsingItem()
     {
         if (this.itemInUse != null)
         {
             this.itemInUse.onPlayerStoppedUsing(this.worldObj, this, this.itemInUseCount);
@@ -409,10 +417,45 @@
     {
         if (this.itemInUse != null)
         {
             this.updateItemUse(this.itemInUse, 16);
             int i = this.itemInUse.stackSize;
+            // CraftBukkit start - fire PlayerItemConsumeEvent
+            org.bukkit.inventory.ItemStack craftItem = CraftItemStack.asBukkitCopy(this.itemInUse);
+            PlayerItemConsumeEvent event = new PlayerItemConsumeEvent((Player)this.getBukkitEntity(), craftItem);
+            worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
+            {
+                // Update client
+                if (this instanceof EntityPlayer)
+                {
+                    ((EntityPlayerMP)this).playerNetServerHandler.sendPacket(new S2FPacketSetSlot((byte)0, openContainer.getSlotFromInventory((IInventory)this.inventory, this.inventory.currentItem).slotIndex, this.itemInUse));
+                    // Spigot Start
+                    ((EntityPlayerMP)this).getBukkitEntity().updateInventory();
+                    ((EntityPlayerMP)this).getBukkitEntity().updateScaledHealth();
+                    // Spigot End
+                }
+
+                return;
+            }
+
+            // Plugin modified the item, process it but don't remove it
+            if (!craftItem.equals(event.getItem()))
+            {
+                CraftItemStack.asNMSCopy(event.getItem()).onItemUseFinish(this.worldObj, this);
+
+                // Update client
+                if (this instanceof EntityPlayer)
+                {
+                    ((EntityPlayerMP)this).playerNetServerHandler.sendPacket(new S2FPacketSetSlot((byte)0, openContainer.getSlotFromInventory((IInventory)this.inventory, this.inventory.currentItem).slotIndex, this.itemInUse));
+                }
+
+                return;
+            }
+
+            // CraftBukkit end
             ItemStack itemstack = this.itemInUse.onItemUseFinish(this.worldObj, this);
 
             if (itemstack != this.itemInUse || itemstack != null && itemstack.stackSize != i)
             {
                 this.inventory.mainInventory[this.inventory.currentItem] = itemstack;
@@ -425,37 +468,16 @@
 
             this.clearItemInUse();
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public void handleHealthUpdate(byte p_70103_1_)
-    {
-        if (p_70103_1_ == 9)
-        {
-            this.onItemUseFinish();
-        }
-        else if (p_70103_1_ == 23)
-        {
-            this.hasReducedDebug = false;
-        }
-        else if (p_70103_1_ == 22)
-        {
-            this.hasReducedDebug = true;
-        }
-        else
-        {
-            super.handleHealthUpdate(p_70103_1_);
-        }
-    }
-
     protected boolean isMovementBlocked()
     {
         return this.getHealth() <= 0.0F || this.isPlayerSleeping();
     }
 
-    protected void closeScreen()
+    public void closeScreen()
     {
         this.openContainer = this.inventoryContainer;
     }
 
     public void updateRidden()
@@ -484,19 +506,10 @@
                 this.renderYawOffset = ((EntityPig)this.ridingEntity).renderYawOffset;
             }
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public void preparePlayerToSpawn()
-    {
-        this.setSize(0.6F, 1.8F);
-        super.preparePlayerToSpawn();
-        this.setHealth(this.getMaxHealth());
-        this.deathTime = 0;
-    }
-
     protected void updateEntityActionState()
     {
         super.updateEntityActionState();
         this.updateArmSwingProgress();
         this.rotationYawHead = this.rotationYaw;
@@ -511,11 +524,12 @@
 
         if (this.worldObj.getDifficulty() == EnumDifficulty.PEACEFUL && this.worldObj.getGameRules().getGameRuleBooleanValue("naturalRegeneration"))
         {
             if (this.getHealth() < this.getMaxHealth() && this.ticksExisted % 20 == 0)
             {
-                this.heal(1.0F);
+                // CraftBukkit - added regain reason of "REGEN" for filtering purposes.
+                this.heal(1.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.REGEN);
             }
 
             if (this.foodStats.needFood() && this.ticksExisted % 10 == 0)
             {
                 this.foodStats.setFoodLevel(this.foodStats.getFoodLevel() + 1);
@@ -539,11 +553,11 @@
             this.jumpMovementFactor = (float)((double)this.jumpMovementFactor + (double)this.speedInAir * 0.3D);
         }
 
         this.setAIMoveSpeed((float)iattributeinstance.getAttributeValue());
         float f = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-        float f1 = (float)(Math.atan(-this.motionY * 0.20000000298023224D) * 15.0D);
+        float f1 = (float)(org.bukkit.craftbukkit.TrigMath.atan(-this.motionY * 0.20000000298023224D) * 15.0D);  // CraftBukkit
 
         if (f > 0.1F)
         {
             f = 0.1F;
         }
@@ -574,19 +588,22 @@
                 axisalignedbb = this.getEntityBoundingBox().expand(1.0D, 0.5D, 1.0D);
             }
 
             List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, axisalignedbb);
 
-            for (int i = 0; i < list.size(); ++i)
+            if (this.canBePushed())   // Spigot: Add this.ae() condition (second !this.isDead near bottom of EntityLiving)
             {
-                Entity entity = (Entity)list.get(i);
-
-                if (!entity.isDead)
+                for (int i = 0; i < list.size(); ++i)
                 {
-                    this.collideWithPlayer(entity);
+                    Entity entity = (Entity)list.get(i);
+
+                    if (!entity.isDead)
+                    {
+                        this.collideWithPlayer(entity);
+                    }
                 }
-            }
+            } // Spigot
         }
     }
 
     private void collideWithPlayer(Entity p_71044_1_)
     {
@@ -651,16 +668,18 @@
     }
 
     public void addToPlayerScore(Entity entityIn, int amount)
     {
         this.addScore(amount);
-        Collection collection = this.getWorldScoreboard().getObjectivesFromCriteria(IScoreObjectiveCriteria.totalKillCount);
+        // CraftBukkit - Get our scores instead
+        Collection<Score> collection = this.worldObj.getServer().getScoreboardManager().getScoreboardScores(IScoreObjectiveCriteria.totalKillCount, this.getName(), new ArrayList());
 
         if (entityIn instanceof EntityPlayer)
         {
             this.triggerAchievement(StatList.playerKillsStat);
-            collection.addAll(this.getWorldScoreboard().getObjectivesFromCriteria(IScoreObjectiveCriteria.playerKillCount));
+            // CraftBukkit - Get our scores instead
+            this.worldObj.getServer().getScoreboardManager().getScoreboardScores(IScoreObjectiveCriteria.playerKillCount, this.getName(), collection);
             collection.addAll(this.func_175137_e(entityIn));
         }
         else
         {
             this.triggerAchievement(StatList.mobKillsStat);
@@ -668,12 +687,11 @@
 
         Iterator iterator = collection.iterator();
 
         while (iterator.hasNext())
         {
-            ScoreObjective scoreobjective = (ScoreObjective)iterator.next();
-            Score score = this.getWorldScoreboard().getValueFromObjective(this.getName(), scoreobjective);
+            Score score = (Score)iterator.next(); // CraftBukkit - Use our scores instead
             score.func_96648_a();
         }
     }
 
     private Collection func_175137_e(Entity p_175137_1_)
@@ -712,10 +730,11 @@
         return Lists.newArrayList();
     }
 
     public EntityItem dropOneItem(boolean p_71040_1_)
     {
+        // Called only when dropped by Q or CTRL-Q
         return this.dropItem(this.inventory.decrStackSize(this.inventory.currentItem, p_71040_1_ && this.inventory.getCurrentItem() != null ? this.inventory.getCurrentItem().stackSize : 1), false, true);
     }
 
     public EntityItem dropPlayerItemWithRandomChoice(ItemStack itemStackIn, boolean unused)
     {
@@ -765,10 +784,41 @@
                 entityitem.motionX += Math.cos((double)f1) * (double)f;
                 entityitem.motionY += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
                 entityitem.motionZ += Math.sin((double)f1) * (double)f;
             }
 
+            // CraftBukkit start - fire PlayerDropItemEvent
+            Player player = (Player)this.getBukkitEntity();
+            CraftItem drop = new CraftItem(this.worldObj.getServer(), entityitem);
+            PlayerDropItemEvent event = new PlayerDropItemEvent(player, drop);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
+            {
+                org.bukkit.inventory.ItemStack cur = player.getInventory().getItemInHand();
+
+                if (traceItem && (cur == null || cur.getAmount() == 0))
+                {
+                    // The complete stack was dropped
+                    player.getInventory().setItemInHand(drop.getItemStack());
+                }
+                else if (traceItem && cur.isSimilar(drop.getItemStack()) && drop.getItemStack().getAmount() == 1)
+                {
+                    // Only one item is dropped
+                    cur.setAmount(cur.getAmount() + 1);
+                    player.getInventory().setItemInHand(cur);
+                }
+                else
+                {
+                    // Fallback
+                    player.getInventory().addItem(drop.getItemStack());
+                }
+
+                return null;
+            }
+
+            // CraftBukkit end
             this.joinEntityItemWithWorld(entityitem);
 
             if (traceItem)
             {
                 this.triggerAchievement(StatList.dropStat);
@@ -776,11 +826,11 @@
 
             return entityitem;
         }
     }
 
-    protected void joinEntityItemWithWorld(EntityItem p_71012_1_)
+    public void joinEntityItemWithWorld(EntityItem p_71012_1_)
     {
         this.worldObj.spawnEntityInWorld(p_71012_1_);
     }
 
     public float getToolDigEfficiency(Block p_180471_1_)
@@ -869,10 +919,20 @@
         {
             this.playerLocation = new BlockPos(this);
             this.wakeUpPlayer(true, true, false);
         }
 
+        // CraftBukkit start
+        this.spawnWorld = tagCompund.getString("SpawnWorld");
+
+        if ("".equals(spawnWorld))
+        {
+            this.spawnWorld = this.worldObj.getServer().getWorlds().get(0).getName();
+        }
+
+        // CraftBukkit end
+
         if (tagCompund.hasKey("SpawnX", 99) && tagCompund.hasKey("SpawnY", 99) && tagCompund.hasKey("SpawnZ", 99))
         {
             this.spawnChunk = new BlockPos(tagCompund.getInteger("SpawnX"), tagCompund.getInteger("SpawnY"), tagCompund.getInteger("SpawnZ"));
             this.spawnForced = tagCompund.getBoolean("SpawnForced");
         }
@@ -883,10 +943,12 @@
         if (tagCompund.hasKey("EnderItems", 9))
         {
             NBTTagList nbttaglist1 = tagCompund.getTagList("EnderItems", 10);
             this.theInventoryEnderChest.loadInventoryFromNBT(nbttaglist1);
         }
+
+        tagCompund.setString("SpawnWorld", spawnWorld); // CraftBukkit - fixes bed spawns for multiworld worlds
     }
 
     public void writeEntityToNBT(NBTTagCompound tagCompound)
     {
         super.writeEntityToNBT(tagCompound);
@@ -915,10 +977,12 @@
 
         if (itemstack != null && itemstack.getItem() != null)
         {
             tagCompound.setTag("SelectedItem", itemstack.writeToNBT(new NBTTagCompound()));
         }
+
+        tagCompound.setString("SpawnWorld", spawnWorld); // CraftBukkit - fixes bed spawns for multiworld worlds
     }
 
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
         if (this.isEntityInvulnerable(source))
@@ -946,11 +1010,11 @@
 
                 if (source.isDifficultyScaled())
                 {
                     if (this.worldObj.getDifficulty() == EnumDifficulty.PEACEFUL)
                     {
-                        amount = 0.0F;
+                        return false; // CraftBukkit - f = 0.0f -> return false
                     }
 
                     if (this.worldObj.getDifficulty() == EnumDifficulty.EASY)
                     {
                         amount = amount / 2.0F + 1.0F;
@@ -960,11 +1024,11 @@
                     {
                         amount = amount * 3.0F / 2.0F;
                     }
                 }
 
-                if (amount == 0.0F)
+                if (false && amount == 0.0F) // CraftBukkit - Don't filter out 0 damage
                 {
                     return false;
                 }
                 else
                 {
@@ -979,15 +1043,45 @@
                 }
             }
         }
     }
 
-    public boolean canAttackPlayer(EntityPlayer other)
+    public boolean canAttackPlayer(EntityPlayer entityhuman) // SpigotMCP -- Change to entityhuman
     {
-        Team team = this.getTeam();
-        Team team1 = other.getTeam();
-        return team == null ? true : (!team.isSameTeam(team1) ? true : team.getAllowFriendlyFire());
+        // CraftBukkit start - Change to check OTHER player's scoreboard team according to API
+        // To summarize this method's logic, it's "Can parameter hurt this"
+        org.bukkit.scoreboard.Team team;
+
+        if (entityhuman instanceof EntityPlayer)
+        {
+            EntityPlayerMP thatPlayer = (EntityPlayerMP)entityhuman;
+            team = thatPlayer.getBukkitEntity().getScoreboard().getPlayerTeam(thatPlayer.getBukkitEntity());
+
+            if (team == null || team.allowFriendlyFire())
+            {
+                return true;
+            }
+        }
+        else
+        {
+            // This should never be called, but is implemented anyway
+            org.bukkit.OfflinePlayer thisPlayer = entityhuman.worldObj.getServer().getOfflinePlayer(entityhuman.getName());
+            team = entityhuman.worldObj.getServer().getScoreboardManager().getMainScoreboard().getPlayerTeam(thisPlayer);
+
+            if (team == null || team.allowFriendlyFire())
+            {
+                return true;
+            }
+        }
+
+        if (this instanceof EntityPlayerMP)
+        {
+            return !team.hasPlayer(((EntityPlayerMP)this).getBukkitEntity());
+        }
+
+        return !team.hasPlayer(this.worldObj.getServer().getOfflinePlayer(this.getName()));
+        // CraftBukkit end
     }
 
     protected void damageArmor(float p_70675_1_)
     {
         this.inventory.damageArmor(p_70675_1_);
@@ -1015,12 +1109,19 @@
         }
 
         return (float)i / (float)this.inventory.armorInventory.length;
     }
 
-    protected void damageEntity(DamageSource damageSrc, float damageAmount)
+    // CraftBukkit start
+    protected boolean damageEntity(DamageSource damageSrc, float damageAmount) // void -> boolean
     {
+        if (true)
+        {
+            return super.damageEntity(damageSrc, damageAmount);
+        }
+
+        // CraftBukkit end
         if (!this.isEntityInvulnerable(damageSrc))
         {
             if (!damageSrc.isUnblockable() && this.isBlocking() && damageAmount > 0.0F)
             {
                 damageAmount = (1.0F + damageAmount) * 0.5F;
@@ -1043,25 +1144,41 @@
                 {
                     this.addStat(StatList.damageTakenStat, Math.round(damageAmount * 10.0F));
                 }
             }
         }
+
+        return false; // CraftBukkit
     }
 
-    public void openEditSign(TileEntitySign signTile) {}
+    public void openEditSign(TileEntitySign signTile)
+    {
+    }
 
-    public void openEditCommandBlock(CommandBlockLogic cmdBlockLogic) {}
+    public void openEditCommandBlock(CommandBlockLogic cmdBlockLogic)
+    {
+    }
 
-    public void displayVillagerTradeGui(IMerchant villager) {}
+    public void displayVillagerTradeGui(IMerchant villager)
+    {
+    }
 
-    public void displayGUIChest(IInventory chestInventory) {}
+    public void displayGUIChest(IInventory chestInventory)
+    {
+    }
 
-    public void displayGUIHorse(EntityHorse horse, IInventory horseInventory) {}
+    public void displayGUIHorse(EntityHorse horse, IInventory horseInventory)
+    {
+    }
 
-    public void displayGui(IInteractionObject guiOwner) {}
+    public void displayGui(IInteractionObject guiOwner)
+    {
+    }
 
-    public void displayGUIBook(ItemStack bookStack) {}
+    public void displayGUIBook(ItemStack bookStack)
+    {
+    }
 
     public boolean interactWith(Entity p_70998_1_)
     {
         if (this.isSpectator())
         {
@@ -1086,11 +1203,12 @@
                         itemstack = itemstack1;
                     }
 
                     if (itemstack.interactWithEntity(this, (EntityLivingBase)p_70998_1_))
                     {
-                        if (itemstack.stackSize <= 0 && !this.capabilities.isCreativeMode)
+                        // CraftBukkit - bypass infinite items; <= 0 -> == 0
+                        if (itemstack.stackSize == 0 && !this.capabilities.isCreativeMode)
                         {
                             this.destroyCurrentEquippedItem();
                         }
 
                         return true;
@@ -1172,12 +1290,21 @@
                     boolean flag1 = false;
                     int i = EnchantmentHelper.getFireAspectModifier(this);
 
                     if (targetEntity instanceof EntityLivingBase && i > 0 && !targetEntity.isBurning())
                     {
-                        flag1 = true;
-                        targetEntity.setFire(1);
+                        // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
+                        EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), targetEntity.getBukkitEntity(), 1);
+                        org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
+
+                        if (!combustEvent.isCancelled())
+                        {
+                            flag1 = true;
+                            targetEntity.setFire(combustEvent.getDuration());
+                        }
+
+                        // CraftBukkit end
                     }
 
                     double d0 = targetEntity.motionX;
                     double d1 = targetEntity.motionY;
                     double d2 = targetEntity.motionZ;
@@ -1193,15 +1320,36 @@
                             this.setSprinting(false);
                         }
 
                         if (targetEntity instanceof EntityPlayerMP && targetEntity.velocityChanged)
                         {
-                            ((EntityPlayerMP)targetEntity).playerNetServerHandler.sendPacket(new S12PacketEntityVelocity(targetEntity));
-                            targetEntity.velocityChanged = false;
-                            targetEntity.motionX = d0;
-                            targetEntity.motionY = d1;
-                            targetEntity.motionZ = d2;
+                            // CraftBukkit start - Add Velocity Event
+                            boolean cancelled = false;
+                            Player player = (Player)targetEntity.getBukkitEntity();
+                            org.bukkit.util.Vector velocity = new org.bukkit.util.Vector(d0, d1, d2);
+                            PlayerVelocityEvent event = new PlayerVelocityEvent(player, velocity.clone());
+                            worldObj.getServer().getPluginManager().callEvent(event);
+
+                            if (event.isCancelled())
+                            {
+                                cancelled = true;
+                            }
+                            else if (!velocity.equals(event.getVelocity()))
+                            {
+                                player.setVelocity(velocity);
+                            }
+
+                            if (!cancelled)
+                            {
+                                ((EntityPlayerMP)targetEntity).playerNetServerHandler.sendPacket(new S12PacketEntityVelocity(targetEntity));
+                                targetEntity.velocityChanged = false;
+                                targetEntity.motionX = d0;
+                                targetEntity.motionY = d1;
+                                targetEntity.motionZ = d2;
+                            }
+
+                            // CraftBukkit end
                         }
 
                         if (flag)
                         {
                             this.onCriticalHit(targetEntity);
@@ -1240,11 +1388,12 @@
 
                         if (itemstack != null && object instanceof EntityLivingBase)
                         {
                             itemstack.hitEntity((EntityLivingBase)object, this);
 
-                            if (itemstack.stackSize <= 0)
+                            // CraftBukkit - bypass infinite items; <= 0 -> == 0
+                            if (itemstack.stackSize == 0)
                             {
                                 this.destroyCurrentEquippedItem();
                             }
                         }
 
@@ -1252,32 +1401,42 @@
                         {
                             this.addStat(StatList.damageDealtStat, Math.round(f * 10.0F));
 
                             if (i > 0)
                             {
-                                targetEntity.setFire(i * 4);
+                                // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
+                                EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), targetEntity.getBukkitEntity(), i * 4);
+                                org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
+
+                                if (!combustEvent.isCancelled())
+                                {
+                                    targetEntity.setFire(combustEvent.getDuration());
+                                }
+
+                                // CraftBukkit end
                             }
                         }
 
-                        this.addExhaustion(0.3F);
+                        this.addExhaustion(worldObj.spigotConfig.combatExhaustion); // Spigot - Change to use configurable value
                     }
                     else if (flag1)
                     {
                         targetEntity.extinguish();
                     }
                 }
             }
         }
     }
 
-    public void onCriticalHit(Entity entityHit) {}
+    public void onCriticalHit(Entity entityHit)
+    {
+    }
 
-    public void onEnchantmentCritical(Entity entityHit) {}
+    public void onEnchantmentCritical(Entity entityHit)
+    {
+    }
 
-    @SideOnly(Side.CLIENT)
-    public void respawnPlayer() {}
-
     public void setDead()
     {
         super.setDead();
         this.inventoryContainer.onContainerClosed(this);
 
@@ -1290,16 +1449,10 @@
     public boolean isEntityInsideOpaqueBlock()
     {
         return !this.sleeping && super.isEntityInsideOpaqueBlock();
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean isUser()
-    {
-        return false;
-    }
-
     public GameProfile getGameProfile()
     {
         return this.gameProfile;
     }
 
@@ -1340,10 +1493,25 @@
         if (this.isRiding())
         {
             this.mountEntity((Entity)null);
         }
 
+        // CraftBukkit start - fire PlayerBedEnterEvent
+        if (this.getBukkitEntity() instanceof Player)
+        {
+            Player player = (Player)this.getBukkitEntity();
+            org.bukkit.block.Block bed = this.worldObj.getWorld().getBlockAt(bedLocation.getX(), bedLocation.getY(), bedLocation.getZ());
+            PlayerBedEnterEvent event = new PlayerBedEnterEvent(player, bed);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
+            {
+                return EnumStatus.OTHER_PROBLEM;
+            }
+        }
+
+        // CraftBukkit end
         this.setSize(0.2F, 0.2F);
 
         if (this.worldObj.isBlockLoaded(bedLocation))
         {
             EnumFacing enumfacing = (EnumFacing)this.worldObj.getBlockState(bedLocation).getValue(BlockDirectional.FACING);
@@ -1430,10 +1598,31 @@
         if (!this.worldObj.isRemote && updateWorldFlag)
         {
             this.worldObj.updateAllPlayersSleepingFlag();
         }
 
+        // CraftBukkit start - fire PlayerBedLeaveEvent
+        if (this.getBukkitEntity() instanceof Player)
+        {
+            Player player = (Player)this.getBukkitEntity();
+            org.bukkit.block.Block bed;
+            BlockPos blockposition = this.playerLocation;
+
+            if (blockposition != null)
+            {
+                bed = this.worldObj.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
+            }
+            else
+            {
+                bed = this.worldObj.getWorld().getBlockAt(player.getLocation());
+            }
+
+            PlayerBedLeaveEvent event = new PlayerBedLeaveEvent(player, bed);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+        }
+
+        // CraftBukkit end
         this.sleepTimer = p_70999_1_ ? 0 : 100;
 
         if (setSpawn)
         {
             this.setSpawnPoint(this.playerLocation, false);
@@ -1445,10 +1634,12 @@
         return this.worldObj.getBlockState(this.playerLocation).getBlock() == Blocks.bed;
     }
 
     public static BlockPos getBedSpawnLocation(World worldIn, BlockPos bedLocation, boolean forceSpawn)
     {
+        ((ChunkProviderServer)worldIn.chunkProvider).loadChunk(bedLocation.getX() >> 4, bedLocation.getZ() >> 4); // CraftBukkit
+
         if (worldIn.getBlockState(bedLocation).getBlock() != Blocks.bed)
         {
             if (!forceSpawn)
             {
                 return null;
@@ -1466,51 +1657,25 @@
         {
             return BlockBed.getSafeExitLocation(worldIn, bedLocation, 0);
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public float getBedOrientationInDegrees()
-    {
-        if (this.playerLocation != null)
-        {
-            EnumFacing enumfacing = (EnumFacing)this.worldObj.getBlockState(this.playerLocation).getValue(BlockDirectional.FACING);
-
-            switch (EntityPlayer.SwitchEnumFacing.FACING_LOOKUP[enumfacing.ordinal()])
-            {
-                case 1:
-                    return 90.0F;
-                case 2:
-                    return 270.0F;
-                case 3:
-                    return 0.0F;
-                case 4:
-                    return 180.0F;
-            }
-        }
-
-        return 0.0F;
-    }
-
     public boolean isPlayerSleeping()
     {
         return this.sleeping;
     }
 
     public boolean isPlayerFullyAsleep()
     {
         return this.sleeping && this.sleepTimer >= 100;
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getSleepTimer()
+
+    public void addChatComponentMessage(IChatComponent chatComponent)
     {
-        return this.sleepTimer;
     }
 
-    public void addChatComponentMessage(IChatComponent chatComponent) {}
-
     public BlockPos getBedLocation()
     {
         return this.spawnChunk;
     }
 
@@ -1523,39 +1688,45 @@
     {
         if (pos != null)
         {
             this.spawnChunk = pos;
             this.spawnForced = forced;
+            this.spawnWorld = this.worldObj.worldInfo.getWorldName(); // CraftBukkit
         }
         else
         {
             this.spawnChunk = null;
             this.spawnForced = false;
+            this.spawnWorld = ""; // CraftBukkit
         }
     }
 
     public void triggerAchievement(StatBase achievementIn)
     {
         this.addStat(achievementIn, 1);
     }
 
-    public void addStat(StatBase stat, int amount) {}
+    public void addStat(StatBase stat, int amount)
+    {
+    }
 
-    public void func_175145_a(StatBase p_175145_1_) {}
+    public void func_175145_a(StatBase p_175145_1_)
+    {
+    }
 
     public void jump()
     {
         super.jump();
         this.triggerAchievement(StatList.jumpStat);
 
         if (this.isSprinting())
         {
-            this.addExhaustion(0.8F);
+            this.addExhaustion(worldObj.spigotConfig.sprintExhaustion);
         }
         else
         {
-            this.addExhaustion(0.2F);
+            this.addExhaustion(worldObj.spigotConfig.walkExhaustion);
         }
     }
 
     public void moveEntityWithHeading(float p_70612_1_, float p_70612_2_)
     {
@@ -1886,16 +2057,10 @@
     protected boolean isPlayer()
     {
         return true;
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean getAlwaysRenderNameTagForRender()
-    {
-        return true;
-    }
-
     public void clonePlayer(EntityPlayer oldPlayer, boolean respawnFromEnd)
     {
         if (respawnFromEnd)
         {
             this.inventory.copyInventory(oldPlayer.inventory);
@@ -1923,13 +2088,17 @@
     protected boolean canTriggerWalking()
     {
         return !this.capabilities.isFlying;
     }
 
-    public void sendPlayerAbilities() {}
+    public void sendPlayerAbilities()
+    {
+    }
 
-    public void setGameType(WorldSettings.GameType gameType) {}
+    public void setGameType(WorldSettings.GameType gameType)
+    {
+    }
 
     public String getName()
     {
         return this.gameProfile.getName();
     }
@@ -1952,28 +2121,10 @@
     public void setCurrentItemOrArmor(int slotIn, ItemStack stack)
     {
         this.inventory.armorInventory[slotIn] = stack;
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean isInvisibleToPlayer(EntityPlayer player)
-    {
-        if (!this.isInvisible())
-        {
-            return false;
-        }
-        else if (player.isSpectator())
-        {
-            return false;
-        }
-        else
-        {
-            Team team = this.getTeam();
-            return team == null || player == null || player.getTeam() != team || !team.func_98297_h();
-        }
-    }
-
     public abstract boolean isSpectator();
 
     public ItemStack[] getInventory()
     {
         return this.inventory.armorInventory;
@@ -1994,10 +2145,11 @@
         return this.getWorldScoreboard().getPlayersTeam(this.getName());
     }
 
     public IChatComponent getDisplayName()
     {
+        // CraftBukkit - todo: fun
         ChatComponentText chatcomponenttext = new ChatComponentText(ScorePlayerTeam.formatPlayerName(this.getTeam(), this.getName()));
         chatcomponenttext.getChatStyle().setChatClickEvent(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/msg " + this.getName() + " "));
         chatcomponenttext.getChatStyle().setChatHoverEvent(this.func_174823_aP());
         chatcomponenttext.getChatStyle().setInsertion(this.getName());
         return chatcomponenttext;
@@ -2063,16 +2215,10 @@
             ItemStack itemstack = this.getCurrentEquippedItem();
             return itemstack != null && itemstack.hasDisplayName() ? itemstack.getDisplayName().equals(code.getLock()) : false;
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean func_175148_a(EnumPlayerModelParts p_175148_1_)
-    {
-        return (this.getDataWatcher().getWatchableObjectByte(10) & p_175148_1_.getPartMask()) == p_175148_1_.getPartMask();
-    }
-
     public boolean sendCommandFeedback()
     {
         return MinecraftServer.getServer().worldServers[0].getGameRules().getGameRuleBooleanValue("sendCommandFeedback");
     }
 
@@ -2125,22 +2271,10 @@
                 }
             }
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean hasReducedDebug()
-    {
-        return this.hasReducedDebug;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public void setReducedDebug(boolean reducedDebug)
-    {
-        this.hasReducedDebug = reducedDebug;
-    }
-
     public static enum EnumChatVisibility
     {
         FULL(0, "options.chat.visibility.full"),
         SYSTEM(1, "options.chat.visibility.system"),
         HIDDEN(2, "options.chat.visibility.hidden");
@@ -2164,16 +2298,10 @@
         public static EntityPlayer.EnumChatVisibility getEnumChatVisibility(int id)
         {
             return ID_LOOKUP[id % ID_LOOKUP.length];
         }
 
-        @SideOnly(Side.CLIENT)
-        public String getResourceKey()
-        {
-            return this.resourceKey;
-        }
-
         static
         {
             EntityPlayer.EnumChatVisibility[] var0 = values();
             int var1 = var0.length;
 
@@ -2197,10 +2325,11 @@
         private static final String __OBFID = "CL_00001712";
     }
 
     static final class SwitchEnumFacing
         {
+
             static final int[] FACING_LOOKUP = new int[EnumFacing.values().length];
             private static final String __OBFID = "CL_00002188";
 
             static
             {
