--- decompiled\net\minecraft\entity\player\EntityPlayerMP.java
+++ src\main\java\net\minecraft\entity\player\EntityPlayerMP.java
@@ -1,17 +1,13 @@
 package net.minecraft.entity.player;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Sets;
-import com.mojang.authlib.GameProfile;
-import io.netty.buffer.Unpooled;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockFence;
 import net.minecraft.block.BlockFenceGate;
 import net.minecraft.block.BlockWall;
 import net.minecraft.block.material.Material;
@@ -68,65 +64,113 @@
 import net.minecraft.network.play.server.S48PacketResourcePackSend;
 import net.minecraft.potion.PotionEffect;
 import net.minecraft.scoreboard.IScoreObjectiveCriteria;
 import net.minecraft.scoreboard.Score;
 import net.minecraft.scoreboard.ScoreObjective;
-import net.minecraft.scoreboard.Team;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.management.ItemInWorldManager;
-import net.minecraft.server.management.UserListOpsEntry;
 import net.minecraft.stats.AchievementList;
 import net.minecraft.stats.StatBase;
 import net.minecraft.stats.StatList;
 import net.minecraft.stats.StatisticsFile;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.tileentity.TileEntitySign;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.ChatComponentTranslation;
+import net.minecraft.util.CombatTracker;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.EntityDamageSource;
+import net.minecraft.util.FoodStats;
 import net.minecraft.util.IChatComponent;
 import net.minecraft.util.JsonSerializableSet;
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.ReportedException;
 import net.minecraft.village.MerchantRecipeList;
 import net.minecraft.world.ChunkCoordIntPair;
 import net.minecraft.world.IInteractionObject;
 import net.minecraft.world.ILockableContainer;
+import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.WorldSettings;
 import net.minecraft.world.biome.BiomeGenBase;
 import net.minecraft.world.chunk.Chunk;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.WeatherType;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.event.inventory.InventoryType;
+import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Sets;
+import com.mojang.authlib.GameProfile;
+
+import io.netty.buffer.Unpooled;
+
 public class EntityPlayerMP extends EntityPlayer implements ICrafting
 {
+
     private static final Logger logger = LogManager.getLogger();
-    private String translator = "en_US";
+    public String translator = "en_US"; // Spigot -- make public // SpigotMCP -- add reason
     public NetHandlerPlayServer playerNetServerHandler;
     public final MinecraftServer mcServer;
     public final ItemInWorldManager theItemInWorldManager;
     public double managedPosX;
     public double managedPosZ;
     public final List loadedChunks = Lists.newLinkedList();
-    private final List destroyedItemsNetCache = Lists.newLinkedList();
+    public List destroyedItemsNetCache = Lists.newLinkedList(); // SpigotMCP -- apply access transformation
     private final StatisticsFile statsFile;
     private float combinedHealth = Float.MIN_VALUE;
     private float lastHealth = -1.0E8F;
     private int lastFoodLevel = -99999999;
     private boolean wasHungry = true;
-    private int lastExperience = -99999999;
-    private int respawnInvulnerabilityTicks = 60;
+    public int lastExperience = -99999999; // SpigotMCP -- apply access transformation
+    public int respawnInvulnerabilityTicks = 60; // SpigotMCP -- apply access transformation
     private EntityPlayer.EnumChatVisibility chatVisibility;
     private boolean chatColours = true;
     private long playerLastActiveTime = System.currentTimeMillis();
     private Entity spectatingEntity = null;
-    private int currentWindowId;
+    public int currentWindowId;
     public boolean isChangingQuantityOnly;
     public int ping;
     public boolean playerConqueredTheEnd;
+
+    // CraftBukkit start
+    public String displayName;
+    public IChatComponent listName;
+    public Location compassTarget;
+    public int newExp = 0;
+    public int newLevel = 0;
+    public int newTotalExp = 0;
+    public boolean keepLevel = false;
+    public double maxHealthCache;
+    public boolean joining = true;
+    // CraftBukkit end
+    // Spigot start
+    public boolean collidesWithEntities = true;
+
+    @Override
+    public boolean canBeCollidedWith()
+    {
+        return this.collidesWithEntities && super.canBeCollidedWith(); // (first !this.isDead near bottom of EntityLiving)
+    }
+
+    @Override
+    public boolean canBePushed()
+    {
+        return this.collidesWithEntities && super.canBePushed(); // (second !this.isDead near bottom of EntityLiving)
+    }
+    // Spigot end
+
     private static final String __OBFID = "CL_00001440";
 
     public EntityPlayerMP(MinecraftServer server, WorldServer worldIn, GameProfile profile, ItemInWorldManager interactionManager)
     {
         super(worldIn, profile);
@@ -159,10 +203,16 @@
 
         while (!worldIn.getCollidingBoundingBoxes(this, this.getEntityBoundingBox()).isEmpty() && this.posY < 255.0D)
         {
             this.setPosition(this.posX, this.posY + 1.0D, this.posZ);
         }
+
+        // CraftBukkit start
+        this.displayName = this.getName();
+        // this.canPickUpLoot = true; TODO
+        this.maxHealthCache = this.getMaxHealth();
+        // CraftBukkit end
     }
 
     public void readEntityFromNBT(NBTTagCompound tagCompund)
     {
         super.readEntityFromNBT(tagCompund);
@@ -184,10 +234,48 @@
     {
         super.writeEntityToNBT(tagCompound);
         tagCompound.setInteger("playerGameType", this.theItemInWorldManager.getGameType().getID());
     }
 
+    // CraftBukkit start - World fallback code, either respawn location or global spawn
+    // SpigotMCP start - fix SrgHelper stupidity
+    public void setWorld(World world)
+    {
+        super.setWorld(world);
+
+        if (world == null)
+        {
+            this.isDead = false;
+            BlockPos position = null;
+
+            if (this.spawnWorld != null && !this.spawnWorld.equals(""))
+            {
+                CraftWorld cworld = (CraftWorld)Bukkit.getServer().getWorld(this.spawnWorld);
+
+                if (cworld != null && this.getBedLocation() != null)
+                {
+                    world = cworld.getHandle();
+                    position = EntityPlayer.getBedSpawnLocation(cworld.getHandle(), this.getBedLocation(), false);
+                }
+            }
+
+            if (world == null || position == null)
+            {
+                world = ((CraftWorld)Bukkit.getServer().getWorlds().get(0)).getHandle();
+                position = world.getSpawnPoint();
+            }
+
+            this.worldObj = world;
+            this.setPosition(position.getX() + 0.5, position.getY(), position.getZ() + 0.5);
+        }
+
+        this.dimension = ((WorldServer)this.worldObj).dimension;
+        this.theItemInWorldManager.setWorld((WorldServer)world);
+    }
+    // SpigotMCP end
+    // CraftBukkit end
+
     public void addExperienceLevel(int levels)
     {
         super.addExperienceLevel(levels);
         this.lastExperience = -1;
     }
@@ -215,10 +303,17 @@
         this.playerNetServerHandler.sendPacket(new S42PacketCombatEvent(this.getCombatTracker(), S42PacketCombatEvent.Event.END_COMBAT));
     }
 
     public void onUpdate()
     {
+        // CraftBukkit start
+        if (this.joining)
+        {
+            this.joining = false;
+        }
+
+        // CraftBukkit end
         this.theItemInWorldManager.updateBlockRemoving();
         --this.respawnInvulnerabilityTicks;
 
         if (this.hurtResistantTime > 0)
         {
@@ -254,11 +349,11 @@
             ArrayList arraylist = Lists.newArrayList();
             Iterator iterator1 = this.loadedChunks.iterator();
             ArrayList arraylist1 = Lists.newArrayList();
             Chunk chunk;
 
-            while (iterator1.hasNext() && arraylist.size() < 10)
+            while (iterator1.hasNext() && arraylist.size() < this.worldObj.spigotConfig.maxBulkChunk) // Spigot
             {
                 ChunkCoordIntPair chunkcoordintpair = (ChunkCoordIntPair)iterator1.next();
 
                 if (chunkcoordintpair != null)
                 {
@@ -267,11 +362,11 @@
                         chunk = this.worldObj.getChunkFromChunkCoords(chunkcoordintpair.chunkXPos, chunkcoordintpair.chunkZPos);
 
                         if (chunk.isPopulated())
                         {
                             arraylist.add(chunk);
-                            arraylist1.addAll(((WorldServer)this.worldObj).func_147486_a(chunkcoordintpair.chunkXPos * 16, 0, chunkcoordintpair.chunkZPos * 16, chunkcoordintpair.chunkXPos * 16 + 16, 256, chunkcoordintpair.chunkZPos * 16 + 16));
+                            arraylist1.addAll(chunk.chunkTileEntityMap.values()); // CraftBukkit - Get tile entities directly from the chunk instead of the world
                             iterator1.remove();
                         }
                     }
                 }
                 else
@@ -351,39 +446,56 @@
                 }
             }
 
             if (this.getHealth() != this.lastHealth || this.lastFoodLevel != this.foodStats.getFoodLevel() || this.foodStats.getSaturationLevel() == 0.0F != this.wasHungry)
             {
-                this.playerNetServerHandler.sendPacket(new S06PacketUpdateHealth(this.getHealth(), this.foodStats.getFoodLevel(), this.foodStats.getSaturationLevel()));
+                // CraftBukkit - Optionally scale health // SpigotMCP -- move to the correct spot
+                this.playerNetServerHandler.sendPacket(new S06PacketUpdateHealth(this.getBukkitEntity().getScaledHealth(), this.foodStats.getFoodLevel(), this.foodStats.getSaturationLevel()));
                 this.lastHealth = this.getHealth();
                 this.lastFoodLevel = this.foodStats.getFoodLevel();
                 this.wasHungry = this.foodStats.getSaturationLevel() == 0.0F;
             }
 
             if (this.getHealth() + this.getAbsorptionAmount() != this.combinedHealth)
             {
                 this.combinedHealth = this.getHealth() + this.getAbsorptionAmount();
-                Collection collection = this.getWorldScoreboard().getObjectivesFromCriteria(IScoreObjectiveCriteria.health);
-                Iterator iterator = collection.iterator();
+                // CraftBukkit - Update ALL the scores!
+                this.worldObj.getServer().getScoreboardManager().updateAllScoresForList(IScoreObjectiveCriteria.health, this.getName(), ImmutableList.of(this));
+            }
 
-                while (iterator.hasNext())
-                {
-                    ScoreObjective scoreobjective = (ScoreObjective)iterator.next();
-                    this.getWorldScoreboard().getValueFromObjective(this.getName(), scoreobjective).func_96651_a(Arrays.asList(new EntityPlayer[] {this}));
-                }
+            // CraftBukkit start - Force max health updates
+            if (this.maxHealthCache != this.getMaxHealth())
+            {
+                this.getBukkitEntity().updateScaledHealth();
             }
 
+            // CraftBukkit end
+
             if (this.experienceTotal != this.lastExperience)
             {
                 this.lastExperience = this.experienceTotal;
                 this.playerNetServerHandler.sendPacket(new S1FPacketSetExperience(this.experience, this.experienceTotal, this.experienceLevel));
             }
 
             if (this.ticksExisted % 20 * 5 == 0 && !this.getStatFile().hasAchievementUnlocked(AchievementList.exploreAllBiomes))
             {
                 this.updateBiomesExplored();
             }
+
+            // CraftBukkit start - initialize oldLevel and fire PlayerLevelChangeEvent
+            if (this.oldLevel == -1)
+            {
+                this.oldLevel = this.experienceLevel;
+            }
+
+            if (this.oldLevel != this.experienceLevel)
+            {
+                CraftEventFactory.callPlayerLevelChangeEvent(this.worldObj.getServer().getPlayer((EntityPlayerMP)this), this.oldLevel, this.experienceLevel);
+                this.oldLevel = this.experienceLevel;
+            }
+
+            // CraftBukkit end
         }
         catch (Throwable throwable)
         {
             CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Ticking player");
             CrashReportCategory crashreportcategory = crashreport.makeCategory("Player being ticked");
@@ -438,44 +550,80 @@
         }
     }
 
     public void onDeath(DamageSource cause)
     {
-        if (this.worldObj.getGameRules().getGameRuleBooleanValue("showDeathMessages"))
+        // CraftBukkit start - fire PlayerDeathEvent
+        if (this.isDead)
         {
-            Team team = this.getTeam();
+            return;
+        }
 
-            if (team != null && team.func_178771_j() != Team.EnumVisible.ALWAYS)
+        java.util.List<org.bukkit.inventory.ItemStack> loot = new ArrayList();
+        boolean keepInventory = this.worldObj.getGameRules().getGameRuleBooleanValue("keepInventory");
+
+        if (!keepInventory)
+        {
+            for (int i = 0; i < this.inventory.mainInventory.length; ++i)
             {
-                if (team.func_178771_j() == Team.EnumVisible.HIDE_FOR_OTHER_TEAMS)
+                if (this.inventory.mainInventory[i] != null)
                 {
-                    this.mcServer.getConfigurationManager().func_177453_a(this, this.getCombatTracker().getDeathMessage());
+                    loot.add(CraftItemStack.asCraftMirror(this.inventory.mainInventory[i]));
                 }
-                else if (team.func_178771_j() == Team.EnumVisible.HIDE_FOR_OWN_TEAM)
+            }
+
+            for (int i = 0; i < this.inventory.armorInventory.length; ++i)
+            {
+                if (this.inventory.armorInventory[i] != null)
                 {
-                    this.mcServer.getConfigurationManager().func_177452_b(this, this.getCombatTracker().getDeathMessage());
+                    loot.add(CraftItemStack.asCraftMirror(this.inventory.armorInventory[i]));
                 }
             }
+        }
+
+        IChatComponent chatmessage = this.getCombatTracker().getDeathMessage();
+        String deathmessage = chatmessage.getUnformattedText();
+        org.bukkit.event.entity.PlayerDeathEvent event = CraftEventFactory.callPlayerDeathEvent(this, loot, deathmessage, keepInventory);
+        String deathMessage = event.getDeathMessage();
+
+        if (deathMessage != null && deathMessage.length() > 0 && this.worldObj.getGameRules().getGameRuleBooleanValue("showDeathMessages"))   // TODO: allow plugins to override?
+        {
+            if (deathMessage.equals(deathmessage))
+            {
+                this.mcServer.getConfigurationManager().sendChatMsg(chatmessage);
+            }
             else
             {
-                this.mcServer.getConfigurationManager().sendChatMsg(this.getCombatTracker().getDeathMessage());
+                this.mcServer.getConfigurationManager().sendMessage(CraftChatMessage.fromString(deathMessage)); // SpigotMCP -- remap
             }
         }
 
-        if (!this.worldObj.getGameRules().getGameRuleBooleanValue("keepInventory"))
+        // we clean the player's inventory after the EntityDeathEvent is called so plugins can get the exact state of the inventory.
+        if (!event.getKeepInventory())
         {
-            this.inventory.dropAllItems();
+            for (int i = 0; i < this.inventory.mainInventory.length; ++i)
+            {
+                this.inventory.mainInventory[i] = null;
+            }
+
+            for (int i = 0; i < this.inventory.armorInventory.length; ++i)
+            {
+                this.inventory.armorInventory[i] = null;
+            }
         }
 
-        Collection collection = this.worldObj.getScoreboard().getObjectivesFromCriteria(IScoreObjectiveCriteria.deathCount);
+        this.closeScreen();
+        this.setSpectatingEntity((Entity)this); // Remove spectated target
+        // CraftBukkit end
+        // CraftBukkit - Get our scores instead
+        Collection collection = this.worldObj.getServer().getScoreboardManager().getScoreboardScores(IScoreObjectiveCriteria.deathCount, this.getName(), new ArrayList());
         Iterator iterator = collection.iterator();
 
         while (iterator.hasNext())
         {
-            ScoreObjective scoreobjective = (ScoreObjective)iterator.next();
-            Score score = this.getWorldScoreboard().getValueFromObjective(this.getName(), scoreobjective);
-            score.func_96648_a();
+            Score scoreboardscore = (Score)iterator.next(); // CraftBukkit - Use our scores instead
+            scoreboardscore.func_96648_a(); // SpigotMCP -- use cb local variable name
         }
 
         EntityLivingBase entitylivingbase = this.func_94060_bK();
 
         if (entitylivingbase != null)
@@ -541,11 +689,12 @@
         return !this.func_175400_cq() ? false : super.canAttackPlayer(other);
     }
 
     private boolean func_175400_cq()
     {
-        return this.mcServer.isPVPEnabled();
+        // CraftBukkit - this.mcServer.isPVPEnabled() -> this.world.pvpMode
+        return this.worldObj.pvpMode;
     }
 
     public void travelToDimension(int dimensionId)
     {
         if (this.dimension == 1 && dimensionId == 1)
@@ -558,25 +707,32 @@
         else
         {
             if (this.dimension == 0 && dimensionId == 1)
             {
                 this.triggerAchievement(AchievementList.theEnd);
+                // CraftBukkit start - Rely on custom portal management
+                /*
                 BlockPos blockpos = this.mcServer.worldServerForDimension(dimensionId).func_180504_m();
 
                 if (blockpos != null)
                 {
                     this.playerNetServerHandler.setPlayerLocation((double)blockpos.getX(), (double)blockpos.getY(), (double)blockpos.getZ(), 0.0F, 0.0F);
                 }
 
                 dimensionId = 1;
+                */
+                // CraftBukkit end
             }
             else
             {
                 this.triggerAchievement(AchievementList.portal);
             }
 
-            this.mcServer.getConfigurationManager().transferPlayerToDimension(this, dimensionId);
+            // CraftBukkit start
+            TeleportCause cause = (this.dimension == 1 || dimensionId == 1) ? TeleportCause.END_PORTAL : TeleportCause.NETHER_PORTAL;
+            this.mcServer.getConfigurationManager().changeDimension(this, dimensionId, cause);
+            // CraftBukkit end
             this.lastExperience = -1;
             this.lastHealth = -1.0F;
             this.lastFoodLevel = -1;
         }
     }
@@ -620,10 +776,12 @@
         return enumstatus;
     }
 
     public void wakeUpPlayer(boolean p_70999_1_, boolean updateWorldFlag, boolean setSpawn)
     {
+        if (!this.sleeping) return; // CraftBukkit - Can't leave bed if not in one!
+
         if (this.isPlayerSleeping())
         {
             this.getServerForPlayer().getEntityTracker().func_151248_b(this, new S0BPacketAnimation(this, 2));
         }
 
@@ -638,18 +796,20 @@
     public void mountEntity(Entity entityIn)
     {
         Entity entity1 = this.ridingEntity;
         super.mountEntity(entityIn);
 
-        if (entityIn != entity1)
+        if (this.ridingEntity != entity1)   // CraftBukkit
         {
             this.playerNetServerHandler.sendPacket(new S1BPacketEntityAttach(0, this, this.ridingEntity));
             this.playerNetServerHandler.setPlayerLocation(this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
         }
     }
 
-    protected void func_180433_a(double p_180433_1_, boolean p_180433_3_, Block p_180433_4_, BlockPos p_180433_5_) {}
+    protected void func_180433_a(double p_180433_1_, boolean p_180433_3_, Block p_180433_4_, BlockPos p_180433_5_)
+    {
+    }
 
     public void handleFalling(double p_71122_1_, boolean p_71122_3_)
     {
         int i = MathHelper.floor_double(this.posX);
         int j = MathHelper.floor_double(this.posY - 0.20000000298023224D);
@@ -675,64 +835,114 @@
     {
         signTile.setPlayer(this);
         this.playerNetServerHandler.sendPacket(new S36PacketSignEditorOpen(signTile.getPos()));
     }
 
-    private void getNextWindowId()
+    public int getNextWindowId()   // CraftBukkit - private void -> public int // SpigotMCP NOTE -- Someone else made public
     {
         this.currentWindowId = this.currentWindowId % 100 + 1;
+        return currentWindowId; // CraftBukkit
     }
 
     public void displayGui(IInteractionObject guiOwner)
     {
+        // CraftBukkit start - Inventory open hook
+        Container container = CraftEventFactory.callInventoryOpenEvent(this, guiOwner.createContainer(this.inventory, this));
+
+        if (container == null)
+        {
+            return;
+        }
+
+        // CraftBukkit end
         this.getNextWindowId();
         this.playerNetServerHandler.sendPacket(new S2DPacketOpenWindow(this.currentWindowId, guiOwner.getGuiID(), guiOwner.getDisplayName()));
         this.openContainer = guiOwner.createContainer(this.inventory, this);
         this.openContainer.windowId = this.currentWindowId;
         this.openContainer.addCraftingToCrafters(this);
     }
 
     public void displayGUIChest(IInventory chestInventory)
     {
+        // CraftBukkit start - Inventory open hook
+        // Copied from below
+        boolean cancelled = false;
+
+        if (chestInventory instanceof ILockableContainer)
+        {
+            ILockableContainer itileinventory = (ILockableContainer)chestInventory;
+            cancelled = itileinventory.isLocked() && !this.canOpen(itileinventory.getLockCode()) && !this.isSpectator();
+        }
+
+        Container container;
+
+        if (chestInventory instanceof IInteractionObject)
+        {
+            container = ((IInteractionObject)chestInventory).createContainer(this.inventory, this);
+        }
+        else
+        {
+            container = new ContainerChest(this.inventory, chestInventory, this);
+        }
+
+        container = CraftEventFactory.callInventoryOpenEvent(this, container, cancelled);
+
+        if (container == null && !cancelled)   // Let pre-cancelled events fall through
+        {
+            chestInventory.closeInventory(this);
+            return;
+        }
+
+        // CraftBukkit end
         if (this.openContainer != this.inventoryContainer)
         {
             this.closeScreen();
         }
 
         if (chestInventory instanceof ILockableContainer)
         {
             ILockableContainer ilockablecontainer = (ILockableContainer)chestInventory;
 
-            if (ilockablecontainer.isLocked() && !this.canOpen(ilockablecontainer.getLockCode()) && !this.isSpectator())
+            if (ilockablecontainer.isLocked() && !this.canOpen(ilockablecontainer.getLockCode()) && !this.isSpectator() && container == null) // CraftBukkit - allow plugins to uncancel the lock
             {
                 this.playerNetServerHandler.sendPacket(new S02PacketChat(new ChatComponentTranslation("container.isLocked", new Object[] {chestInventory.getDisplayName()}), (byte)2));
                 this.playerNetServerHandler.sendPacket(new S29PacketSoundEffect("random.door_close", this.posX, this.posY, this.posZ, 1.0F, 1.0F));
+                chestInventory.closeInventory(this); // CraftBukkit
                 return;
             }
         }
 
         this.getNextWindowId();
 
         if (chestInventory instanceof IInteractionObject)
         {
             this.playerNetServerHandler.sendPacket(new S2DPacketOpenWindow(this.currentWindowId, ((IInteractionObject)chestInventory).getGuiID(), chestInventory.getDisplayName(), chestInventory.getSizeInventory()));
-            this.openContainer = ((IInteractionObject)chestInventory).createContainer(this.inventory, this);
+            this.openContainer = container;
         }
         else
         {
             this.playerNetServerHandler.sendPacket(new S2DPacketOpenWindow(this.currentWindowId, "minecraft:container", chestInventory.getDisplayName(), chestInventory.getSizeInventory()));
-            this.openContainer = new ContainerChest(this.inventory, chestInventory, this);
+            this.openContainer = container;
         }
 
         this.openContainer.windowId = this.currentWindowId;
         this.openContainer.addCraftingToCrafters(this);
     }
 
     public void displayVillagerTradeGui(IMerchant villager)
     {
+        // CraftBukkit start - Inventory open hook
+        Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerMerchant(this.inventory, villager, this.worldObj));
+
+        if (container == null)
+        {
+            return;
+        }
+
+        // CraftBukkit end
         this.getNextWindowId();
-        this.openContainer = new ContainerMerchant(this.inventory, villager, this.worldObj);
+        this.openContainer = container; // CraftBukkit
         this.openContainer.windowId = this.currentWindowId;
         this.openContainer.addCraftingToCrafters(this);
         InventoryMerchant inventorymerchant = ((ContainerMerchant)this.openContainer).getMerchantInventory();
         IChatComponent ichatcomponent = villager.getDisplayName();
         this.playerNetServerHandler.sendPacket(new S2DPacketOpenWindow(this.currentWindowId, "minecraft:villager", ichatcomponent, inventorymerchant.getSizeInventory()));
@@ -747,10 +957,20 @@
         }
     }
 
     public void displayGUIHorse(EntityHorse horse, IInventory horseInventory)
     {
+        // CraftBukkit start - Inventory open hook
+        Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerHorseInventory(this.inventory, horseInventory, horse, this));
+
+        if (container == null)
+        {
+            horseInventory.closeInventory(this);
+            return;
+        }
+
+        // CraftBukkit end
         if (this.openContainer != this.inventoryContainer)
         {
             this.closeScreen();
         }
 
@@ -789,10 +1009,18 @@
 
     public void sendContainerAndContentsToPlayer(Container containerToSend, List itemsList)
     {
         this.playerNetServerHandler.sendPacket(new S30PacketWindowItems(containerToSend.windowId, itemsList));
         this.playerNetServerHandler.sendPacket(new S2FPacketSetSlot(-1, -1, this.inventory.getItemStack()));
+
+        // CraftBukkit start - Send a Set Slot to update the crafting result slot
+        if (java.util.EnumSet.of(InventoryType.CRAFTING, InventoryType.WORKBENCH).contains(containerToSend.getBukkitView().getType()))
+        {
+            this.playerNetServerHandler.sendPacket(new S2FPacketSetSlot(containerToSend.windowId, 0, containerToSend.getSlot(0).getStack()));
+        }
+
+        // CraftBukkit end
     }
 
     public void sendProgressBarUpdate(Container containerIn, int varToUpdate, int newValue)
     {
         this.playerNetServerHandler.sendPacket(new S31PacketWindowProperty(containerIn.windowId, varToUpdate, newValue));
@@ -806,10 +1034,11 @@
         }
     }
 
     public void closeScreen()
     {
+        CraftEventFactory.handleInventoryCloseEvent(this); // CraftBukkit
         this.playerNetServerHandler.sendPacket(new S2EPacketCloseWindow(this.openContainer.windowId));
         this.closeContainer();
     }
 
     public void updateHeldItem()
@@ -899,12 +1128,23 @@
     }
 
     public void setPlayerHealthUpdated()
     {
         this.lastHealth = -1.0E8F;
+        this.lastExperience = -1; // CraftBukkit - Added to reset
     }
 
+    // CraftBukkit start - Support multi-line messages
+    public void sendMessage(IChatComponent[] ichatbasecomponent)
+    {
+        for (IChatComponent component : ichatbasecomponent)
+        {
+            this.addChatMessage(component);
+        }
+    }
+    // CraftBukkit end
+
     public void addChatComponentMessage(IChatComponent chatComponent)
     {
         this.playerNetServerHandler.sendPacket(new S02PacketChat(chatComponent));
     }
 
@@ -980,10 +1220,14 @@
         return (WorldServer)this.worldObj;
     }
 
     public void setGameType(WorldSettings.GameType gameType)
     {
+        // SpigotMCP -- Move craftbukkit comment to above craftbukkit call
+        getBukkitEntity().setGameMode(org.bukkit.GameMode.getByValue(gameType.getID()));
+        // CraftBukkit start -  defer to our setGameMode
+        /*
         this.theItemInWorldManager.setGameType(gameType);
         this.playerNetServerHandler.sendPacket(new S2BPacketChangeGameState(3, (float)gameType.getID()));
 
         if (gameType == WorldSettings.GameType.SPECTATOR)
         {
@@ -994,10 +1238,11 @@
             this.setSpectatingEntity(this);
         }
 
         this.sendPlayerAbilities();
         this.func_175136_bO();
+        */
     }
 
     public boolean isSpectator()
     {
         return this.theItemInWorldManager.getGameType() == WorldSettings.GameType.SPECTATOR;
@@ -1008,10 +1253,11 @@
         this.playerNetServerHandler.sendPacket(new S02PacketChat(message));
     }
 
     public boolean canUseCommand(int permLevel, String commandName)
     {
+        /* CraftBukkit start
         if ("seed".equals(commandName) && !this.mcServer.isDedicatedServer())
         {
             return true;
         }
         else if (!"tell".equals(commandName) && !"help".equals(commandName) && !"me".equals(commandName) && !"trigger".equals(commandName))
@@ -1028,10 +1274,13 @@
         }
         else
         {
             return true;
         }
+        */
+        return true;
+        // CraftBukkit end
     }
 
     public String getPlayerIP()
     {
         String s = this.playerNetServerHandler.netManager.getRemoteAddress().toString();
@@ -1134,8 +1383,167 @@
         return this.playerLastActiveTime;
     }
 
     public IChatComponent getTabListDisplayName()
     {
-        return null;
+        return listName; // CraftBukkit
     }
+
+    // CraftBukkit start - Add per-player time and weather.
+    public long timeOffset = 0;
+    public boolean relativeTime = true;
+
+    public long getPlayerTime()
+    {
+        if (this.relativeTime)
+        {
+            // Adds timeOffset to the current server time.
+            return this.worldObj.getWorldTime() + this.timeOffset;
+        }
+        else
+        {
+            // Adds timeOffset to the beginning of this day.
+            return this.worldObj.getWorldTime() - (this.worldObj.getWorldTime() % 24000) + this.timeOffset;
+        }
+    }
+
+    public WeatherType weather = null;
+
+    public WeatherType getPlayerWeather()
+    {
+        return this.weather;
+    }
+
+    public void setPlayerWeather(WeatherType type, boolean plugin)
+    {
+        if (!plugin && this.weather != null)
+        {
+            return;
+        }
+
+        if (plugin)
+        {
+            this.weather = type;
+        }
+
+        if (type == WeatherType.DOWNFALL)
+        {
+            this.playerNetServerHandler.sendPacket(new S2BPacketChangeGameState(2, 0));
+        }
+        else
+        {
+            this.playerNetServerHandler.sendPacket(new S2BPacketChangeGameState(1, 0));
+        }
+    }
+
+    private float pluginRainPosition;
+    private float pluginRainPositionPrevious;
+
+    public void updateWeather(float oldRain, float newRain, float oldThunder, float newThunder)
+    {
+        if (this.weather == null)
+        {
+            // Vanilla
+            if (oldRain != newRain)
+            {
+                this.playerNetServerHandler.sendPacket(new S2BPacketChangeGameState(7, newRain));
+            }
+        }
+        else
+        {
+            // Plugin
+            if (pluginRainPositionPrevious != pluginRainPosition)
+            {
+                this.playerNetServerHandler.sendPacket(new S2BPacketChangeGameState(7, pluginRainPosition));
+            }
+        }
+
+        if (oldThunder != newThunder)
+        {
+            if (weather == WeatherType.DOWNFALL || weather == null)
+            {
+                this.playerNetServerHandler.sendPacket(new S2BPacketChangeGameState(8, newThunder));
+            }
+            else
+            {
+                this.playerNetServerHandler.sendPacket(new S2BPacketChangeGameState(8, 0));
+            }
+        }
+    }
+
+    public void tickWeather()
+    {
+        if (this.weather == null) return;
+
+        pluginRainPositionPrevious = pluginRainPosition;
+
+        if (weather == WeatherType.DOWNFALL)
+        {
+            pluginRainPosition += 0.01;
+        }
+        else
+        {
+            pluginRainPosition -= 0.01;
+        }
+
+        pluginRainPosition = MathHelper.clamp_float(pluginRainPosition, 0.0F, 1.0F);
+    }
+
+    public void resetPlayerWeather()
+    {
+        this.weather = null;
+        this.setPlayerWeather(this.worldObj.getWorldInfo().isRaining() ? WeatherType.DOWNFALL : WeatherType.CLEAR, false);
+    }
+
+    @Override
+    public java.lang.String toString()
+    {
+        return super.toString() + "(" + this.getName() + " at " + this.posX + "," + this.posY + "," + this.posZ + ")";
+    }
+
+    public void reset()
+    {
+        float exp = 0;
+        boolean keepInventory = this.worldObj.getGameRules().getGameRuleBooleanValue("keepInventory");
+
+        if (this.keepLevel || keepInventory)
+        {
+            exp = this.experience;
+            this.newTotalExp = this.experienceTotal;
+            this.newLevel = this.experienceLevel;
+        }
+
+        this.setHealth(this.getMaxHealth());
+        this.fire = 0;
+        this.fallDistance = 0;
+        this.foodStats = new FoodStats(this);
+        this.experienceLevel = this.newLevel;
+        this.experienceTotal = this.newTotalExp;
+        this.experience = 0;
+        this.deathTime = 0;
+        this.clearActivePotions();
+        this.potionsNeedUpdate = true;
+        this.openContainer = this.inventoryContainer;
+        this.attackingPlayer = null;
+        this.entityLivingToAttack = null;
+        this._combatTracker = new CombatTracker(this);
+        this.lastExperience = -1;
+
+        if (this.keepLevel || keepInventory)
+        {
+            this.experience = exp;
+        }
+        else
+        {
+            this.addExperience(this.newExp);
+        }
+
+        this.keepLevel = false;
+    }
+
+    @Override
+    public org.bukkit.craftbukkit.entity.CraftPlayer getBukkitEntity()
+    {
+        return (CraftPlayer)super.getBukkitEntity();
+    }
+    // CraftBukkit end
 }
