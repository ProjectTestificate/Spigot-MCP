--- decompiled\net\minecraft\entity\DataWatcher.java
+++ src\main\java\net\minecraft\entity\DataWatcher.java
@@ -1,195 +1,179 @@
 package net.minecraft.entity;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.locks.ReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
+
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.item.ItemStack;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.ReportedException;
 import net.minecraft.util.Rotations;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+
 import org.apache.commons.lang3.ObjectUtils;
 
-public class DataWatcher
-{
+import com.google.common.collect.Lists;
+
+import gnu.trove.map.TIntObjectMap;
+import gnu.trove.map.TObjectIntMap;
+import gnu.trove.map.hash.TIntObjectHashMap;
+import gnu.trove.map.hash.TObjectIntHashMap;
+
+public class DataWatcher {
+
     private final Entity owner;
     private boolean isBlank = true;
-    private static final Map dataTypes = Maps.newHashMap();
-    private final Map watchedObjects = Maps.newHashMap();
+    // Spigot Start
+    private static final TObjectIntMap classToId = new TObjectIntHashMap(10, 0.5f, -1);
+    private final TIntObjectMap dataValues = new TIntObjectHashMap(10, 0.5f, -1);
+    // These exist as an attempt at backwards compatability for (broken) NMS plugins
+    private static final Map dataTypes = gnu.trove.TDecorators.wrap(classToId);
+    private final Map watchedObjects = gnu.trove.TDecorators.wrap(dataValues);
+    // Spigot End
     private boolean objectChanged;
     private ReadWriteLock lock = new ReentrantReadWriteLock();
     private static final String __OBFID = "CL_00001559";
 
-    public DataWatcher(Entity owner)
-    {
+    public DataWatcher(Entity owner) {
         this.owner = owner;
     }
 
-    public void addObject(int id, Object object)
-    {
-        Integer integer = (Integer)dataTypes.get(object.getClass());
+    public void addObject(int id, Object object) {
+        int integer = classToId.get(object.getClass()); // Spigot
 
-        if (integer == null)
+        if (integer == -1) // Spigot
         {
             throw new IllegalArgumentException("Unknown data type: " + object.getClass());
-        }
-        else if (id > 31)
-        {
+        } else if (id > 31) {
             throw new IllegalArgumentException("Data value id is too big with " + id + "! (Max is " + 31 + ")");
-        }
-        else if (this.watchedObjects.containsKey(Integer.valueOf(id)))
-        {
+        } else if (this.watchedObjects.containsKey(id)) {
             throw new IllegalArgumentException("Duplicate id value for " + id + "!");
-        }
-        else
-        {
-            DataWatcher.WatchableObject watchableobject = new DataWatcher.WatchableObject(integer.intValue(), id, object);
+        } else {
+            DataWatcher.WatchableObject watchableobject = new DataWatcher.WatchableObject(integer, id, object); // Spigot
             this.lock.writeLock().lock();
-            this.watchedObjects.put(Integer.valueOf(id), watchableobject);
+            this.watchedObjects.put(id, watchableobject);
             this.lock.writeLock().unlock();
             this.isBlank = false;
         }
     }
 
-    public void addObjectByDataType(int id, int type)
-    {
-        DataWatcher.WatchableObject watchableobject = new DataWatcher.WatchableObject(type, id, (Object)null);
+    public void addObjectByDataType(int id, int type) {
+        DataWatcher.WatchableObject watchableobject = new DataWatcher.WatchableObject(type, id, (Object) null);
         this.lock.writeLock().lock();
-        this.watchedObjects.put(Integer.valueOf(id), watchableobject);
+        this.watchedObjects.put(id, watchableobject); // Spigot
         this.lock.writeLock().unlock();
         this.isBlank = false;
     }
 
-    public byte getWatchableObjectByte(int id)
-    {
-        return ((Byte)this.getWatchedObject(id).getObject()).byteValue();
+    public byte getWatchableObjectByte(int id) {
+        return ((Byte) this.getWatchedObject(id).getObject()).byteValue();
     }
 
-    public short getWatchableObjectShort(int id)
-    {
-        return ((Short)this.getWatchedObject(id).getObject()).shortValue();
+    public short getWatchableObjectShort(int id) {
+        return ((Short) this.getWatchedObject(id).getObject()).shortValue();
     }
 
-    public int getWatchableObjectInt(int id)
-    {
-        return ((Integer)this.getWatchedObject(id).getObject()).intValue();
+    public int getWatchableObjectInt(int id) {
+        return ((Integer) this.getWatchedObject(id).getObject()).intValue();
     }
 
-    public float getWatchableObjectFloat(int id)
-    {
-        return ((Float)this.getWatchedObject(id).getObject()).floatValue();
+    public float getWatchableObjectFloat(int id) {
+        return ((Float) this.getWatchedObject(id).getObject()).floatValue();
     }
 
-    public String getWatchableObjectString(int id)
-    {
-        return (String)this.getWatchedObject(id).getObject();
+    public String getWatchableObjectString(int id) {
+        return (String) this.getWatchedObject(id).getObject();
     }
 
-    public ItemStack getWatchableObjectItemStack(int id)
-    {
-        return (ItemStack)this.getWatchedObject(id).getObject();
+    public ItemStack getWatchableObjectItemStack(int id) {
+        return (ItemStack) this.getWatchedObject(id).getObject();
     }
 
-    private DataWatcher.WatchableObject getWatchedObject(int id)
-    {
+    private DataWatcher.WatchableObject getWatchedObject(int id) {
         this.lock.readLock().lock();
         DataWatcher.WatchableObject watchableobject;
 
-        try
-        {
-            watchableobject = (DataWatcher.WatchableObject)this.watchedObjects.get(Integer.valueOf(id));
-        }
-        catch (Throwable throwable)
-        {
+        try {
+            watchableobject = (DataWatcher.WatchableObject) this.watchedObjects.get(id); // Spigot
+        } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Getting synched entity data");
             CrashReportCategory crashreportcategory = crashreport.makeCategory("Synched entity data");
             crashreportcategory.addCrashSection("Data ID", Integer.valueOf(id));
             throw new ReportedException(crashreport);
         }
 
         this.lock.readLock().unlock();
         return watchableobject;
     }
 
-    public Rotations getWatchableObjectRotations(int id)
-    {
-        return (Rotations)this.getWatchedObject(id).getObject();
+    public Rotations getWatchableObjectRotations(int id) {
+        return (Rotations) this.getWatchedObject(id).getObject();
     }
 
-    public void updateObject(int id, Object newData)
-    {
+    public void updateObject(int id, Object newData) {
         DataWatcher.WatchableObject watchableobject = this.getWatchedObject(id);
 
-        if (ObjectUtils.notEqual(newData, watchableobject.getObject()))
-        {
+        if (ObjectUtils.notEqual(newData, watchableobject.getObject())) {
             watchableobject.setObject(newData);
             this.owner.func_145781_i(id);
             watchableobject.setWatched(true);
             this.objectChanged = true;
         }
     }
 
-    public void setObjectWatched(int id)
-    {
+    public void setObjectWatched(int id) {
         this.getWatchedObject(id).watched = true;
         this.objectChanged = true;
     }
 
-    public boolean hasObjectChanged()
-    {
+    public boolean hasObjectChanged() {
         return this.objectChanged;
     }
 
-    public static void writeWatchedListToPacketBuffer(List objectsList, PacketBuffer buffer) throws IOException
-    {
-        if (objectsList != null)
-        {
+    public static void writeWatchedListToPacketBuffer(List objectsList, PacketBuffer buffer) throws IOException {
+        if (objectsList != null) {
             Iterator iterator = objectsList.iterator();
 
-            while (iterator.hasNext())
-            {
-                DataWatcher.WatchableObject watchableobject = (DataWatcher.WatchableObject)iterator.next();
+            while (iterator.hasNext()) {
+                DataWatcher.WatchableObject watchableobject = (DataWatcher.WatchableObject) iterator.next();
                 writeWatchableObjectToPacketBuffer(buffer, watchableobject);
             }
         }
 
         buffer.writeByte(127);
     }
 
-    public List getChanged()
-    {
+    public List getChanged() {
         ArrayList arraylist = null;
 
-        if (this.objectChanged)
-        {
+        if (this.objectChanged) {
             this.lock.readLock().lock();
-            Iterator iterator = this.watchedObjects.values().iterator();
+            Iterator iterator = this.dataValues.valueCollection().iterator(); // Spigot
 
-            while (iterator.hasNext())
-            {
-                DataWatcher.WatchableObject watchableobject = (DataWatcher.WatchableObject)iterator.next();
+            while (iterator.hasNext()) {
+                DataWatcher.WatchableObject watchableobject = (DataWatcher.WatchableObject) iterator.next();
 
-                if (watchableobject.isWatched())
-                {
+                if (watchableobject.isWatched()) {
                     watchableobject.setWatched(false);
 
-                    if (arraylist == null)
-                    {
+                    if (arraylist == null) {
                         arraylist = Lists.newArrayList();
                     }
 
+                    // Spigot start - copy ItemStacks to prevent ConcurrentModificationExceptions
+                    if (watchableobject.getObject() instanceof ItemStack) {
+                        watchableobject = new WatchableObject(watchableobject.getObjectType(), watchableobject.getDataValueId(), ((ItemStack) watchableobject.getObject()).copy());
+                    }
+                    // Spigot end
+
                     arraylist.add(watchableobject);
                 }
             }
 
             this.lock.readLock().unlock();
@@ -197,102 +181,93 @@
 
         this.objectChanged = false;
         return arraylist;
     }
 
-    public void writeTo(PacketBuffer buffer) throws IOException
-    {
+    public void writeTo(PacketBuffer buffer) throws IOException {
         this.lock.readLock().lock();
-        Iterator iterator = this.watchedObjects.values().iterator();
+        Iterator iterator = this.dataValues.valueCollection().iterator(); // Spigot
 
-        while (iterator.hasNext())
-        {
-            DataWatcher.WatchableObject watchableobject = (DataWatcher.WatchableObject)iterator.next();
+        while (iterator.hasNext()) {
+            DataWatcher.WatchableObject watchableobject = (DataWatcher.WatchableObject) iterator.next();
             writeWatchableObjectToPacketBuffer(buffer, watchableobject);
         }
 
         this.lock.readLock().unlock();
         buffer.writeByte(127);
     }
 
-    public List getAllWatched()
-    {
-        ArrayList arraylist = null;
+    public List getAllWatched() {
+        ArrayList arraylist = Lists.newArrayList(); // Spigot
         this.lock.readLock().lock();
-        DataWatcher.WatchableObject watchableobject;
 
-        for (Iterator iterator = this.watchedObjects.values().iterator(); iterator.hasNext(); arraylist.add(watchableobject))
-        {
-            watchableobject = (DataWatcher.WatchableObject)iterator.next();
+        arraylist.addAll(this.dataValues.valueCollection()); // Spigot
 
-            if (arraylist == null)
-            {
-                arraylist = Lists.newArrayList();
+        // Spigot start - copy ItemStacks to prevent ConcurrentModificationExceptions
+        for (int i = 0; i < arraylist.size(); i++) {
+            WatchableObject watchableobject = (WatchableObject) arraylist.get(i);
+            if (watchableobject.getObject() instanceof ItemStack) {
+                watchableobject = new WatchableObject(watchableobject.getObjectType(), watchableobject.getDataValueId(), ((ItemStack) watchableobject.getObject()).copy());
+                arraylist.set(i, watchableobject);
             }
         }
-
+        // Spigot end
         this.lock.readLock().unlock();
         return arraylist;
     }
 
-    private static void writeWatchableObjectToPacketBuffer(PacketBuffer buffer, DataWatcher.WatchableObject object) throws IOException
-    {
+    private static void writeWatchableObjectToPacketBuffer(PacketBuffer buffer, DataWatcher.WatchableObject object) throws IOException {
         int i = (object.getObjectType() << 5 | object.getDataValueId() & 31) & 255;
         buffer.writeByte(i);
 
-        switch (object.getObjectType())
-        {
+        switch (object.getObjectType()) {
             case 0:
-                buffer.writeByte(((Byte)object.getObject()).byteValue());
+                buffer.writeByte(((Byte) object.getObject()).byteValue());
                 break;
             case 1:
-                buffer.writeShort(((Short)object.getObject()).shortValue());
+                buffer.writeShort(((Short) object.getObject()).shortValue());
                 break;
             case 2:
-                buffer.writeInt(((Integer)object.getObject()).intValue());
+                buffer.writeInt(((Integer) object.getObject()).intValue());
                 break;
             case 3:
-                buffer.writeFloat(((Float)object.getObject()).floatValue());
+                buffer.writeFloat(((Float) object.getObject()).floatValue());
                 break;
             case 4:
-                buffer.writeString((String)object.getObject());
+                buffer.writeString((String) object.getObject());
                 break;
             case 5:
-                ItemStack itemstack = (ItemStack)object.getObject();
+                ItemStack itemstack = (ItemStack) object.getObject();
                 buffer.writeItemStackToBuffer(itemstack);
                 break;
             case 6:
-                BlockPos blockpos = (BlockPos)object.getObject();
+                BlockPos blockpos = (BlockPos) object.getObject();
                 buffer.writeInt(blockpos.getX());
                 buffer.writeInt(blockpos.getY());
                 buffer.writeInt(blockpos.getZ());
                 break;
             case 7:
-                Rotations rotations = (Rotations)object.getObject();
+                Rotations rotations = (Rotations) object.getObject();
                 buffer.writeFloat(rotations.getX());
                 buffer.writeFloat(rotations.getY());
                 buffer.writeFloat(rotations.getZ());
         }
     }
 
-    public static List readWatchedListFromPacketBuffer(PacketBuffer buffer) throws IOException
-    {
+    public static List readWatchedListFromPacketBuffer(PacketBuffer buffer) throws IOException {
         ArrayList arraylist = null;
 
-        for (byte b0 = buffer.readByte(); b0 != 127; b0 = buffer.readByte())
-        {
-            if (arraylist == null)
-            {
+        for (byte b0 = buffer.readByte(); b0 != 127; b0 = buffer.readByte()) {
+            if (arraylist == null) {
                 arraylist = Lists.newArrayList();
             }
 
             int i = (b0 & 224) >> 5;
             int j = b0 & 31;
             DataWatcher.WatchableObject watchableobject = null;
 
-            switch (i)
-            {
+            switch (i) {
                 case 0:
                     watchableobject = new DataWatcher.WatchableObject(i, j, Byte.valueOf(buffer.readByte()));
                     break;
                 case 1:
                     watchableobject = new DataWatcher.WatchableObject(i, j, Short.valueOf(buffer.readShort()));
@@ -326,96 +301,66 @@
         }
 
         return arraylist;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void updateWatchedObjectsFromList(List p_75687_1_)
-    {
-        this.lock.writeLock().lock();
-        Iterator iterator = p_75687_1_.iterator();
-
-        while (iterator.hasNext())
-        {
-            DataWatcher.WatchableObject watchableobject = (DataWatcher.WatchableObject)iterator.next();
-            DataWatcher.WatchableObject watchableobject1 = (DataWatcher.WatchableObject)this.watchedObjects.get(Integer.valueOf(watchableobject.getDataValueId()));
-
-            if (watchableobject1 != null)
-            {
-                watchableobject1.setObject(watchableobject.getObject());
-                this.owner.func_145781_i(watchableobject.getDataValueId());
-            }
-        }
-
-        this.lock.writeLock().unlock();
-        this.objectChanged = true;
-    }
-
-    public boolean getIsBlank()
-    {
+    public boolean getIsBlank() {
         return this.isBlank;
     }
 
-    public void func_111144_e()
-    {
+    public void func_111144_e() {
         this.objectChanged = false;
     }
 
-    static
-    {
-        dataTypes.put(Byte.class, Integer.valueOf(0));
-        dataTypes.put(Short.class, Integer.valueOf(1));
-        dataTypes.put(Integer.class, Integer.valueOf(2));
-        dataTypes.put(Float.class, Integer.valueOf(3));
-        dataTypes.put(String.class, Integer.valueOf(4));
-        dataTypes.put(ItemStack.class, Integer.valueOf(5));
-        dataTypes.put(BlockPos.class, Integer.valueOf(6));
-        dataTypes.put(Rotations.class, Integer.valueOf(7));
+    static {
+        // Spigot Start - remove valueOf
+        dataTypes.put(Byte.class, 0);
+        dataTypes.put(Short.class, 1);
+        dataTypes.put(Integer.class, 2);
+        dataTypes.put(Float.class, 3);
+        dataTypes.put(String.class, 4);
+        dataTypes.put(ItemStack.class, 5);
+        dataTypes.put(BlockPos.class, 6);
+        dataTypes.put(Rotations.class, 7);
+        // Spigot End
     }
 
-    public static class WatchableObject
-        {
-            private final int objectType;
-            private final int dataValueId;
-            private Object watchedObject;
-            private boolean watched;
-            private static final String __OBFID = "CL_00001560";
+    public static class WatchableObject {
 
-            public WatchableObject(int type, int id, Object object)
-            {
-                this.dataValueId = id;
-                this.watchedObject = object;
-                this.objectType = type;
-                this.watched = true;
-            }
+        private final int objectType;
+        private final int dataValueId;
+        private Object watchedObject;
+        private boolean watched;
+        private static final String __OBFID = "CL_00001560";
 
-            public int getDataValueId()
-            {
-                return this.dataValueId;
-            }
+        public WatchableObject(int type, int id, Object object) {
+            this.dataValueId = id;
+            this.watchedObject = object;
+            this.objectType = type;
+            this.watched = true;
+        }
 
-            public void setObject(Object object)
-            {
-                this.watchedObject = object;
-            }
+        public int getDataValueId() {
+            return this.dataValueId;
+        }
 
-            public Object getObject()
-            {
-                return this.watchedObject;
-            }
+        public void setObject(Object object) {
+            this.watchedObject = object;
+        }
 
-            public int getObjectType()
-            {
-                return this.objectType;
-            }
+        public Object getObject() {
+            return this.watchedObject;
+        }
 
-            public boolean isWatched()
-            {
-                return this.watched;
-            }
+        public int getObjectType() {
+            return this.objectType;
+        }
 
-            public void setWatched(boolean watched)
-            {
-                this.watched = watched;
-            }
+        public boolean isWatched() {
+            return this.watched;
         }
+
+        public void setWatched(boolean watched) {
+            this.watched = watched;
+        }
+    }
 }
