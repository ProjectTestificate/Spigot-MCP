--- decompiled\net\minecraft\entity\DataWatcher.java
+++ src\main\java\net\minecraft\entity\DataWatcher.java
@@ -1,33 +1,44 @@
 package net.minecraft.entity;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.locks.ReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
+
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.item.ItemStack;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.ReportedException;
 import net.minecraft.util.Rotations;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+
 import org.apache.commons.lang3.ObjectUtils;
 
+import com.google.common.collect.Lists;
+
+import gnu.trove.map.TIntObjectMap;
+import gnu.trove.map.TObjectIntMap;
+import gnu.trove.map.hash.TIntObjectHashMap;
+import gnu.trove.map.hash.TObjectIntHashMap;
+
 public class DataWatcher
 {
+
     private final Entity owner;
     private boolean isBlank = true;
-    private static final Map dataTypes = Maps.newHashMap();
-    private final Map watchedObjects = Maps.newHashMap();
+    // Spigot Start
+    private static final TObjectIntMap classToId = new TObjectIntHashMap(10, 0.5f, -1);
+    private final TIntObjectMap dataValues = new TIntObjectHashMap(10, 0.5f, -1);
+    // These exist as an attempt at backwards compatability for (broken) NMS plugins
+    private static final Map dataTypes = gnu.trove.TDecorators.wrap(classToId);
+    private final Map watchedObjects = gnu.trove.TDecorators.wrap(dataValues);
+    // Spigot End
     private boolean objectChanged;
     private ReadWriteLock lock = new ReentrantReadWriteLock();
     private static final String __OBFID = "CL_00001559";
 
     public DataWatcher(Entity owner)
@@ -35,39 +46,39 @@
         this.owner = owner;
     }
 
     public void addObject(int id, Object object)
     {
-        Integer integer = (Integer)dataTypes.get(object.getClass());
+        int integer = classToId.get(object.getClass()); // Spigot
 
-        if (integer == null)
+        if (integer == -1) // Spigot
         {
             throw new IllegalArgumentException("Unknown data type: " + object.getClass());
         }
         else if (id > 31)
         {
             throw new IllegalArgumentException("Data value id is too big with " + id + "! (Max is " + 31 + ")");
         }
-        else if (this.watchedObjects.containsKey(Integer.valueOf(id)))
+        else if (this.watchedObjects.containsKey(id))
         {
             throw new IllegalArgumentException("Duplicate id value for " + id + "!");
         }
         else
         {
-            DataWatcher.WatchableObject watchableobject = new DataWatcher.WatchableObject(integer.intValue(), id, object);
+            DataWatcher.WatchableObject watchableobject = new DataWatcher.WatchableObject(integer, id, object); // Spigot
             this.lock.writeLock().lock();
-            this.watchedObjects.put(Integer.valueOf(id), watchableobject);
+            this.watchedObjects.put(id, watchableobject);
             this.lock.writeLock().unlock();
             this.isBlank = false;
         }
     }
 
     public void addObjectByDataType(int id, int type)
     {
         DataWatcher.WatchableObject watchableobject = new DataWatcher.WatchableObject(type, id, (Object)null);
         this.lock.writeLock().lock();
-        this.watchedObjects.put(Integer.valueOf(id), watchableobject);
+        this.watchedObjects.put(id, watchableobject); // Spigot
         this.lock.writeLock().unlock();
         this.isBlank = false;
     }
 
     public byte getWatchableObjectByte(int id)
@@ -105,11 +116,11 @@
         this.lock.readLock().lock();
         DataWatcher.WatchableObject watchableobject;
 
         try
         {
-            watchableobject = (DataWatcher.WatchableObject)this.watchedObjects.get(Integer.valueOf(id));
+            watchableobject = (DataWatcher.WatchableObject)this.watchedObjects.get(id); // Spigot
         }
         catch (Throwable throwable)
         {
             CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Getting synched entity data");
             CrashReportCategory crashreportcategory = crashreport.makeCategory("Synched entity data");
@@ -171,11 +182,11 @@
         ArrayList arraylist = null;
 
         if (this.objectChanged)
         {
             this.lock.readLock().lock();
-            Iterator iterator = this.watchedObjects.values().iterator();
+            Iterator iterator = this.dataValues.valueCollection().iterator(); // Spigot
 
             while (iterator.hasNext())
             {
                 DataWatcher.WatchableObject watchableobject = (DataWatcher.WatchableObject)iterator.next();
 
@@ -186,10 +197,17 @@
                     if (arraylist == null)
                     {
                         arraylist = Lists.newArrayList();
                     }
 
+                    // Spigot start - copy ItemStacks to prevent ConcurrentModificationExceptions
+                    if (watchableobject.getObject() instanceof ItemStack)
+                    {
+                        watchableobject = new WatchableObject(watchableobject.getObjectType(), watchableobject.getDataValueId(), ((ItemStack)watchableobject.getObject()).copy());
+                    }
+
+                    // Spigot end
                     arraylist.add(watchableobject);
                 }
             }
 
             this.lock.readLock().unlock();
@@ -200,11 +218,11 @@
     }
 
     public void writeTo(PacketBuffer buffer) throws IOException
     {
         this.lock.readLock().lock();
-        Iterator iterator = this.watchedObjects.values().iterator();
+        Iterator iterator = this.dataValues.valueCollection().iterator(); // Spigot
 
         while (iterator.hasNext())
         {
             DataWatcher.WatchableObject watchableobject = (DataWatcher.WatchableObject)iterator.next();
             writeWatchableObjectToPacketBuffer(buffer, watchableobject);
@@ -214,24 +232,26 @@
         buffer.writeByte(127);
     }
 
     public List getAllWatched()
     {
-        ArrayList arraylist = null;
+        ArrayList arraylist = Lists.newArrayList(); // Spigot
         this.lock.readLock().lock();
-        DataWatcher.WatchableObject watchableobject;
-
-        for (Iterator iterator = this.watchedObjects.values().iterator(); iterator.hasNext(); arraylist.add(watchableobject))
+        arraylist.addAll(this.dataValues.valueCollection()); // Spigot
+        // Spigot start - copy ItemStacks to prevent ConcurrentModificationExceptions
+        for (int i = 0; i < arraylist.size(); i++)
         {
-            watchableobject = (DataWatcher.WatchableObject)iterator.next();
+            WatchableObject watchableobject = (WatchableObject)arraylist.get(i);
 
-            if (arraylist == null)
+            if (watchableobject.getObject() instanceof ItemStack)
             {
-                arraylist = Lists.newArrayList();
+                watchableobject = new WatchableObject(watchableobject.getObjectType(), watchableobject.getDataValueId(), ((ItemStack)watchableobject.getObject()).copy());
+                arraylist.set(i, watchableobject);
             }
         }
 
+        // Spigot end
         this.lock.readLock().unlock();
         return arraylist;
     }
 
     private static void writeWatchableObjectToPacketBuffer(PacketBuffer buffer, DataWatcher.WatchableObject object) throws IOException
@@ -326,32 +346,10 @@
         }
 
         return arraylist;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void updateWatchedObjectsFromList(List p_75687_1_)
-    {
-        this.lock.writeLock().lock();
-        Iterator iterator = p_75687_1_.iterator();
-
-        while (iterator.hasNext())
-        {
-            DataWatcher.WatchableObject watchableobject = (DataWatcher.WatchableObject)iterator.next();
-            DataWatcher.WatchableObject watchableobject1 = (DataWatcher.WatchableObject)this.watchedObjects.get(Integer.valueOf(watchableobject.getDataValueId()));
-
-            if (watchableobject1 != null)
-            {
-                watchableobject1.setObject(watchableobject.getObject());
-                this.owner.func_145781_i(watchableobject.getDataValueId());
-            }
-        }
-
-        this.lock.writeLock().unlock();
-        this.objectChanged = true;
-    }
-
     public boolean getIsBlank()
     {
         return this.isBlank;
     }
 
@@ -360,22 +358,25 @@
         this.objectChanged = false;
     }
 
     static
     {
-        dataTypes.put(Byte.class, Integer.valueOf(0));
-        dataTypes.put(Short.class, Integer.valueOf(1));
-        dataTypes.put(Integer.class, Integer.valueOf(2));
-        dataTypes.put(Float.class, Integer.valueOf(3));
-        dataTypes.put(String.class, Integer.valueOf(4));
-        dataTypes.put(ItemStack.class, Integer.valueOf(5));
-        dataTypes.put(BlockPos.class, Integer.valueOf(6));
-        dataTypes.put(Rotations.class, Integer.valueOf(7));
+        // Spigot Start - remove valueOf
+        dataTypes.put(Byte.class, 0);
+        dataTypes.put(Short.class, 1);
+        dataTypes.put(Integer.class, 2);
+        dataTypes.put(Float.class, 3);
+        dataTypes.put(String.class, 4);
+        dataTypes.put(ItemStack.class, 5);
+        dataTypes.put(BlockPos.class, 6);
+        dataTypes.put(Rotations.class, 7);
+        // Spigot End
     }
 
     public static class WatchableObject
         {
+
             private final int objectType;
             private final int dataValueId;
             private Object watchedObject;
             private boolean watched;
             private static final String __OBFID = "CL_00001560";
