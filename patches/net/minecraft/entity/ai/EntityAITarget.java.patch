---a/net/minecraft/entity/ai/EntityAITarget.java
+++b/net/minecraft/entity/ai/EntityAITarget.java
@@ -12,8 +12,10 @@
 import net.minecraft.scoreboard.Team;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.MathHelper;
+
 import org.apache.commons.lang3.StringUtils;
 
-public abstract class EntityAITarget extends EntityAIBase
-{
+public abstract class EntityAITarget extends EntityAIBase {
+
     protected final EntityCreature taskOwner;
     protected boolean shouldCheckSight;
     private boolean nearbyOnly;
@@ -24,127 +24,89 @@
     private int targetUnseenTicks;
     private static final String __OBFID = "CL_00001626";
 
-    public EntityAITarget(EntityCreature p_i1669_1_, boolean p_i1669_2_)
-    {
+    public EntityAITarget(EntityCreature p_i1669_1_, boolean p_i1669_2_) {
         this(p_i1669_1_, p_i1669_2_, false);
     }
 
-    public EntityAITarget(EntityCreature p_i1670_1_, boolean p_i1670_2_, boolean p_i1670_3_)
-    {
+    public EntityAITarget(EntityCreature p_i1670_1_, boolean p_i1670_2_, boolean p_i1670_3_) {
         this.taskOwner = p_i1670_1_;
         this.shouldCheckSight = p_i1670_2_;
         this.nearbyOnly = p_i1670_3_;
     }
 
-    public boolean continueExecuting()
-    {
+    public boolean continueExecuting() {
         EntityLivingBase entitylivingbase = this.taskOwner.getAttackTarget();
 
-        if (entitylivingbase == null)
-        {
+        if (entitylivingbase == null) {
             return false;
-        }
-        else if (!entitylivingbase.isEntityAlive())
-        {
+        } else if (!entitylivingbase.isEntityAlive()) {
             return false;
-        }
-        else
-        {
+        } else {
             Team team = this.taskOwner.getTeam();
             Team team1 = entitylivingbase.getTeam();
 
-            if (team != null && team1 == team)
-            {
+            if (team != null && team1 == team) {
                 return false;
-            }
-            else
-            {
+            } else {
                 double d0 = this.getTargetDistance();
 
-                if (this.taskOwner.getDistanceSqToEntity(entitylivingbase) > d0 * d0)
-                {
+                if (this.taskOwner.getDistanceSqToEntity(entitylivingbase) > d0 * d0) {
                     return false;
-                }
-                else
-                {
-                    if (this.shouldCheckSight)
-                    {
-                        if (this.taskOwner.getEntitySenses().canSee(entitylivingbase))
-                        {
+                } else {
+                    if (this.shouldCheckSight) {
+                        if (this.taskOwner.getEntitySenses().canSee(entitylivingbase)) {
                             this.targetUnseenTicks = 0;
-                        }
-                        else if (++this.targetUnseenTicks > 60)
-                        {
+                        } else if (++this.targetUnseenTicks > 60) {
                             return false;
                         }
                     }
 
-                    return !(entitylivingbase instanceof EntityPlayer) || !((EntityPlayer)entitylivingbase).capabilities.disableDamage;
+                    return !(entitylivingbase instanceof EntityPlayer) || !((EntityPlayer) entitylivingbase).capabilities.disableDamage;
                 }
             }
         }
     }
 
-    protected double getTargetDistance()
-    {
+    protected double getTargetDistance() {
         IAttributeInstance iattributeinstance = this.taskOwner.getEntityAttribute(SharedMonsterAttributes.followRange);
         return iattributeinstance == null ? 16.0D : iattributeinstance.getAttributeValue();
     }
 
-    public void startExecuting()
-    {
+    public void startExecuting() {
         this.targetSearchStatus = 0;
         this.targetSearchDelay = 0;
         this.targetUnseenTicks = 0;
     }
 
-    public void resetTask()
-    {
-        this.taskOwner.setAttackTarget((EntityLivingBase)null);
+    public void resetTask() {
+        this.taskOwner.setAttackTarget((EntityLivingBase) null);
     }
 
-    public static boolean func_179445_a(EntityLiving p_179445_0_, EntityLivingBase p_179445_1_, boolean p_179445_2_, boolean p_179445_3_)
-    {
-        if (p_179445_1_ == null)
-        {
+    public static boolean func_179445_a(EntityLiving p_179445_0_, EntityLivingBase p_179445_1_, boolean p_179445_2_, boolean p_179445_3_) {
+        if (p_179445_1_ == null) {
             return false;
-        }
-        else if (p_179445_1_ == p_179445_0_)
-        {
+        } else if (p_179445_1_ == p_179445_0_) {
             return false;
-        }
-        else if (!p_179445_1_.isEntityAlive())
-        {
+        } else if (!p_179445_1_.isEntityAlive()) {
             return false;
-        }
-        else if (!p_179445_0_.canAttackClass(p_179445_1_.getClass()))
-        {
+        } else if (!p_179445_0_.canAttackClass(p_179445_1_.getClass())) {
             return false;
-        }
-        else
-        {
+        } else {
             Team team = p_179445_0_.getTeam();
             Team team1 = p_179445_1_.getTeam();
 
-            if (team != null && team1 == team)
-            {
+            if (team != null && team1 == team) {
                 return false;
-            }
-            else
-            {
-                if (p_179445_0_ instanceof IEntityOwnable && StringUtils.isNotEmpty(((IEntityOwnable)p_179445_0_).getOwnerId()))
-                {
-                    if (p_179445_1_ instanceof IEntityOwnable && ((IEntityOwnable)p_179445_0_).getOwnerId().equals(((IEntityOwnable)p_179445_1_).getOwnerId()))
-                    {
+            } else {
+                if (p_179445_0_ instanceof IEntityOwnable && StringUtils.isNotEmpty(((IEntityOwnable) p_179445_0_).getOwnerId())) {
+                    if (p_179445_1_ instanceof IEntityOwnable && ((IEntityOwnable) p_179445_0_).getOwnerId().equals(((IEntityOwnable) p_179445_1_).getOwnerId())) {
                         return false;
                     }
 
-                    if (p_179445_1_ == ((IEntityOwnable)p_179445_0_).getOwner())
-                    {
+                    if (p_179445_1_ == ((IEntityOwnable) p_179445_0_).getOwner()) {
                         return false;
                     }
-                }
-                else if (p_179445_1_ instanceof EntityPlayer && !p_179445_2_ && ((EntityPlayer)p_179445_1_).capabilities.disableDamage)
-                {
+                } else if (p_179445_1_ instanceof EntityPlayer && !p_179445_2_ && ((EntityPlayer) p_179445_1_).capabilities.disableDamage) {
                     return false;
                 }
 
@@ -154,34 +154,23 @@
         }
     }
 
-    protected boolean isSuitableTarget(EntityLivingBase p_75296_1_, boolean p_75296_2_)
-    {
-        if (!func_179445_a(this.taskOwner, p_75296_1_, p_75296_2_, this.shouldCheckSight))
-        {
+    protected boolean isSuitableTarget(EntityLivingBase p_75296_1_, boolean p_75296_2_) {
+        if (!func_179445_a(this.taskOwner, p_75296_1_, p_75296_2_, this.shouldCheckSight)) {
             return false;
-        }
-        else if (!this.taskOwner.func_180485_d(new BlockPos(p_75296_1_)))
-        {
+        } else if (!this.taskOwner.func_180485_d(new BlockPos(p_75296_1_))) {
             return false;
-        }
-        else
-        {
-            if (this.nearbyOnly)
-            {
-                if (--this.targetSearchDelay <= 0)
-                {
+        } else {
+            if (this.nearbyOnly) {
+                if (--this.targetSearchDelay <= 0) {
                     this.targetSearchStatus = 0;
                 }
 
-                if (this.targetSearchStatus == 0)
-                {
+                if (this.targetSearchStatus == 0) {
                     this.targetSearchStatus = this.canEasilyReach(p_75296_1_) ? 1 : 2;
                 }
 
-                if (this.targetSearchStatus == 2)
-                {
+                if (this.targetSearchStatus == 2) {
                     return false;
                 }
             }
@@ -188,30 +188,22 @@
         }
     }
 
-    private boolean canEasilyReach(EntityLivingBase p_75295_1_)
-    {
+    private boolean canEasilyReach(EntityLivingBase p_75295_1_) {
         this.targetSearchDelay = 10 + this.taskOwner.getRNG().nextInt(5);
         PathEntity pathentity = this.taskOwner.getNavigator().getPathToEntityLiving(p_75295_1_);
 
-        if (pathentity == null)
-        {
+        if (pathentity == null) {
             return false;
-        }
-        else
-        {
+        } else {
             PathPoint pathpoint = pathentity.getFinalPathPoint();
 
-            if (pathpoint == null)
-            {
+            if (pathpoint == null) {
                 return false;
-            }
-            else
-            {
+            } else {
                 int i = pathpoint.xCoord - MathHelper.floor_double(p_75295_1_.posX);
                 int j = pathpoint.zCoord - MathHelper.floor_double(p_75295_1_.posZ);
-                return (double)(i * i + j * j) <= 2.25D;
+                return (double) (i * i + j * j) <= 2.25D;
             }
         }
     }
-}
+}
