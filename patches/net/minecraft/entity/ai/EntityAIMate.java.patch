--- decompiled\net\minecraft\entity\ai\EntityAIMate.java
+++ src\main\java\net\minecraft\entity\ai\EntityAIMate.java
@@ -1,137 +1,125 @@
 package net.minecraft.entity.ai;
 
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
+
 import net.minecraft.entity.EntityAgeable;
 import net.minecraft.entity.item.EntityXPOrb;
 import net.minecraft.entity.passive.EntityAnimal;
 import net.minecraft.entity.passive.EntityCow;
+import net.minecraft.entity.passive.EntityTameable;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.stats.AchievementList;
 import net.minecraft.stats.StatList;
 import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.world.World;
 
-public class EntityAIMate extends EntityAIBase
-{
+public class EntityAIMate extends EntityAIBase {
+
     private EntityAnimal theAnimal;
     World theWorld;
     private EntityAnimal targetMate;
     int spawnBabyDelay;
     double moveSpeed;
     private static final String __OBFID = "CL_00001578";
 
-    public EntityAIMate(EntityAnimal p_i1619_1_, double p_i1619_2_)
-    {
+    public EntityAIMate(EntityAnimal p_i1619_1_, double p_i1619_2_) {
         this.theAnimal = p_i1619_1_;
         this.theWorld = p_i1619_1_.worldObj;
         this.moveSpeed = p_i1619_2_;
         this.setMutexBits(3);
     }
 
-    public boolean shouldExecute()
-    {
-        if (!this.theAnimal.isInLove())
-        {
+    public boolean shouldExecute() {
+        if (!this.theAnimal.isInLove()) {
             return false;
-        }
-        else
-        {
+        } else {
             this.targetMate = this.getNearbyMate();
             return this.targetMate != null;
         }
     }
 
-    public boolean continueExecuting()
-    {
+    public boolean continueExecuting() {
         return this.targetMate.isEntityAlive() && this.targetMate.isInLove() && this.spawnBabyDelay < 60;
     }
 
-    public void resetTask()
-    {
+    public void resetTask() {
         this.targetMate = null;
         this.spawnBabyDelay = 0;
     }
 
-    public void updateTask()
-    {
-        this.theAnimal.getLookHelper().setLookPositionWithEntity(this.targetMate, 10.0F, (float)this.theAnimal.getVerticalFaceSpeed());
+    public void updateTask() {
+        this.theAnimal.getLookHelper().setLookPositionWithEntity(this.targetMate, 10.0F, (float) this.theAnimal.getVerticalFaceSpeed());
         this.theAnimal.getNavigator().tryMoveToEntityLiving(this.targetMate, this.moveSpeed);
         ++this.spawnBabyDelay;
 
-        if (this.spawnBabyDelay >= 60 && this.theAnimal.getDistanceSqToEntity(this.targetMate) < 9.0D)
-        {
+        if (this.spawnBabyDelay >= 60 && this.theAnimal.getDistanceSqToEntity(this.targetMate) < 9.0D) {
             this.spawnBaby();
         }
     }
 
-    private EntityAnimal getNearbyMate()
-    {
+    private EntityAnimal getNearbyMate() {
         float f = 8.0F;
-        List list = this.theWorld.getEntitiesWithinAABB(this.theAnimal.getClass(), this.theAnimal.getEntityBoundingBox().expand((double)f, (double)f, (double)f));
+        List list = this.theWorld.getEntitiesWithinAABB(this.theAnimal.getClass(), this.theAnimal.getEntityBoundingBox().expand((double) f, (double) f, (double) f));
         double d0 = Double.MAX_VALUE;
         EntityAnimal entityanimal = null;
         Iterator iterator = list.iterator();
 
-        while (iterator.hasNext())
-        {
-            EntityAnimal entityanimal1 = (EntityAnimal)iterator.next();
+        while (iterator.hasNext()) {
+            EntityAnimal entityanimal1 = (EntityAnimal) iterator.next();
 
-            if (this.theAnimal.canMateWith(entityanimal1) && this.theAnimal.getDistanceSqToEntity(entityanimal1) < d0)
-            {
+            if (this.theAnimal.canMateWith(entityanimal1) && this.theAnimal.getDistanceSqToEntity(entityanimal1) < d0) {
                 entityanimal = entityanimal1;
                 d0 = this.theAnimal.getDistanceSqToEntity(entityanimal1);
             }
         }
 
         return entityanimal;
     }
 
-    private void spawnBaby()
-    {
+    private void spawnBaby() {
         EntityAgeable entityageable = this.theAnimal.createChild(this.targetMate);
 
-        if (entityageable != null)
-        {
+        if (entityageable != null) {
+            // CraftBukkit start - set persistence for tame animals
+            if (entityageable instanceof EntityTameable && ((EntityTameable) entityageable).isTamed()) {
+                entityageable.persistenceRequired = true;
+            }
+            // CraftBukkit end
             EntityPlayer entityplayer = this.theAnimal.func_146083_cb();
 
-            if (entityplayer == null && this.targetMate.func_146083_cb() != null)
-            {
+            if (entityplayer == null && this.targetMate.func_146083_cb() != null) {
                 entityplayer = this.targetMate.func_146083_cb();
             }
 
-            if (entityplayer != null)
-            {
+            if (entityplayer != null) {
                 entityplayer.triggerAchievement(StatList.animalsBredStat);
 
-                if (this.theAnimal instanceof EntityCow)
-                {
+                if (this.theAnimal instanceof EntityCow) {
                     entityplayer.triggerAchievement(AchievementList.breedCow);
                 }
             }
 
             this.theAnimal.setGrowingAge(6000);
             this.targetMate.setGrowingAge(6000);
             this.theAnimal.resetInLove();
             this.targetMate.resetInLove();
             entityageable.setGrowingAge(-24000);
             entityageable.setLocationAndAngles(this.theAnimal.posX, this.theAnimal.posY, this.theAnimal.posZ, 0.0F, 0.0F);
-            this.theWorld.spawnEntityInWorld(entityageable);
+            this.theWorld.addEntity(entityageable, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.BREEDING); // CraftBukkit - added SpawnReason);
             Random random = this.theAnimal.getRNG();
 
-            for (int i = 0; i < 7; ++i)
-            {
+            for (int i = 0; i < 7; ++i) {
                 double d0 = random.nextGaussian() * 0.02D;
                 double d1 = random.nextGaussian() * 0.02D;
                 double d2 = random.nextGaussian() * 0.02D;
-                this.theWorld.spawnParticle(EnumParticleTypes.HEART, this.theAnimal.posX + (double)(random.nextFloat() * this.theAnimal.width * 2.0F) - (double)this.theAnimal.width, this.theAnimal.posY + 0.5D + (double)(random.nextFloat() * this.theAnimal.height), this.theAnimal.posZ + (double)(random.nextFloat() * this.theAnimal.width * 2.0F) - (double)this.theAnimal.width, d0, d1, d2, new int[0]);
+                this.theWorld.spawnParticle(EnumParticleTypes.HEART, this.theAnimal.posX + (double) (random.nextFloat() * this.theAnimal.width * 2.0F) - (double) this.theAnimal.width, this.theAnimal.posY + 0.5D + (double) (random.nextFloat() * this.theAnimal.height), this.theAnimal.posZ + (double) (random.nextFloat() * this.theAnimal.width * 2.0F) - (double) this.theAnimal.width, d0, d1, d2, new int[0]);
             }
 
-            if (this.theWorld.getGameRules().getGameRuleBooleanValue("doMobLoot"))
-            {
+            if (this.theWorld.getGameRules().getGameRuleBooleanValue("doMobLoot")) {
                 this.theWorld.spawnEntityInWorld(new EntityXPOrb(this.theWorld, this.theAnimal.posX, this.theAnimal.posY, this.theAnimal.posZ, random.nextInt(7) + 1));
             }
         }
     }
 }
