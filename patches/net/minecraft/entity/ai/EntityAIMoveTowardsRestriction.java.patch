---a/net/minecraft/entity/ai/EntityAIMoveTowardsRestriction.java
+++b/net/minecraft/entity/ai/EntityAIMoveTowardsRestriction.java
@@ -4,8 +4,8 @@
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.Vec3;
 
-public class EntityAIMoveTowardsRestriction extends EntityAIBase
-{
+public class EntityAIMoveTowardsRestriction extends EntityAIBase {
+
     private EntityCreature theEntity;
     private double movePosX;
     private double movePosY;
@@ -13,29 +13,22 @@
     private double movementSpeed;
     private static final String __OBFID = "CL_00001598";
 
-    public EntityAIMoveTowardsRestriction(EntityCreature p_i2347_1_, double p_i2347_2_)
-    {
+    public EntityAIMoveTowardsRestriction(EntityCreature p_i2347_1_, double p_i2347_2_) {
         this.theEntity = p_i2347_1_;
         this.movementSpeed = p_i2347_2_;
         this.setMutexBits(1);
     }
 
-    public boolean shouldExecute()
-    {
-        if (this.theEntity.isWithinHomeDistanceCurrentPosition())
-        {
+    public boolean shouldExecute() {
+        if (this.theEntity.isWithinHomeDistanceCurrentPosition()) {
             return false;
-        }
-        else
-        {
+        } else {
             BlockPos blockpos = this.theEntity.func_180486_cf();
-            Vec3 vec3 = RandomPositionGenerator.findRandomTargetBlockTowards(this.theEntity, 16, 7, new Vec3((double)blockpos.getX(), (double)blockpos.getY(), (double)blockpos.getZ()));
+            Vec3 vec3 = RandomPositionGenerator.findRandomTargetBlockTowards(this.theEntity, 16, 7, new Vec3((double) blockpos.getX(), (double) blockpos.getY(), (double) blockpos.getZ()));
 
-            if (vec3 == null)
-            {
+            if (vec3 == null) {
                 return false;
-            }
-            else
-            {
+            } else {
                 this.movePosX = vec3.xCoord;
                 this.movePosY = vec3.yCoord;
                 this.movePosZ = vec3.zCoord;
@@ -45,14 +45,11 @@
         }
     }
 
-    public boolean continueExecuting()
-    {
+    public boolean continueExecuting() {
         return !this.theEntity.getNavigator().noPath();
     }
 
-    public void startExecuting()
-    {
+    public void startExecuting() {
         this.theEntity.getNavigator().tryMoveToXYZ(this.movePosX, this.movePosY, this.movePosZ, this.movementSpeed);
     }
-}
+}
