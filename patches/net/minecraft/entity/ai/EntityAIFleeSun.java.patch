--- decompiled\net\minecraft\entity\ai\EntityAIFleeSun.java
+++ src\main\java\net\minecraft\entity\ai\EntityAIFleeSun.java
@@ -1,85 +1,69 @@
 package net.minecraft.entity.ai;
 
 import java.util.Random;
+
 import net.minecraft.entity.EntityCreature;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.World;
 
-public class EntityAIFleeSun extends EntityAIBase
-{
+public class EntityAIFleeSun extends EntityAIBase {
+
     private EntityCreature theCreature;
     private double shelterX;
     private double shelterY;
     private double shelterZ;
     private double movementSpeed;
     private World theWorld;
     private static final String __OBFID = "CL_00001583";
 
-    public EntityAIFleeSun(EntityCreature p_i1623_1_, double p_i1623_2_)
-    {
+    public EntityAIFleeSun(EntityCreature p_i1623_1_, double p_i1623_2_) {
         this.theCreature = p_i1623_1_;
         this.movementSpeed = p_i1623_2_;
         this.theWorld = p_i1623_1_.worldObj;
         this.setMutexBits(1);
     }
 
-    public boolean shouldExecute()
-    {
-        if (!this.theWorld.isDaytime())
-        {
+    public boolean shouldExecute() {
+        if (!this.theWorld.isDaytime()) {
             return false;
-        }
-        else if (!this.theCreature.isBurning())
-        {
+        } else if (!this.theCreature.isBurning()) {
             return false;
-        }
-        else if (!this.theWorld.canSeeSky(new BlockPos(this.theCreature.posX, this.theCreature.getEntityBoundingBox().minY, this.theCreature.posZ)))
-        {
+        } else if (!this.theWorld.canSeeSky(new BlockPos(this.theCreature.posX, this.theCreature.getEntityBoundingBox().minY, this.theCreature.posZ))) {
             return false;
-        }
-        else
-        {
+        } else {
             Vec3 vec3 = this.findPossibleShelter();
 
-            if (vec3 == null)
-            {
+            if (vec3 == null) {
                 return false;
-            }
-            else
-            {
+            } else {
                 this.shelterX = vec3.xCoord;
                 this.shelterY = vec3.yCoord;
                 this.shelterZ = vec3.zCoord;
                 return true;
             }
         }
     }
 
-    public boolean continueExecuting()
-    {
+    public boolean continueExecuting() {
         return !this.theCreature.getNavigator().noPath();
     }
 
-    public void startExecuting()
-    {
+    public void startExecuting() {
         this.theCreature.getNavigator().tryMoveToXYZ(this.shelterX, this.shelterY, this.shelterZ, this.movementSpeed);
     }
 
-    private Vec3 findPossibleShelter()
-    {
+    private Vec3 findPossibleShelter() {
         Random random = this.theCreature.getRNG();
         BlockPos blockpos = new BlockPos(this.theCreature.posX, this.theCreature.getEntityBoundingBox().minY, this.theCreature.posZ);
 
-        for (int i = 0; i < 10; ++i)
-        {
+        for (int i = 0; i < 10; ++i) {
             BlockPos blockpos1 = blockpos.add(random.nextInt(20) - 10, random.nextInt(6) - 3, random.nextInt(20) - 10);
 
-            if (!this.theWorld.canSeeSky(blockpos1) && this.theCreature.func_180484_a(blockpos1) < 0.0F)
-            {
-                return new Vec3((double)blockpos1.getX(), (double)blockpos1.getY(), (double)blockpos1.getZ());
+            if (!this.theWorld.canSeeSky(blockpos1) && this.theCreature.func_180484_a(blockpos1) < 0.0F) {
+                return new Vec3((double) blockpos1.getX(), (double) blockpos1.getY(), (double) blockpos1.getZ());
             }
         }
 
         return null;
     }
