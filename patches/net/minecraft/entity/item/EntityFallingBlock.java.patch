--- decompiled\net\minecraft\entity\item\EntityFallingBlock.java
+++ src\main\java\net\minecraft\entity\item\EntityFallingBlock.java
@@ -1,10 +1,10 @@
 package net.minecraft.entity.item;
 
-import com.google.common.collect.Lists;
 import java.util.ArrayList;
 import java.util.Iterator;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockAnvil;
 import net.minecraft.block.BlockFalling;
 import net.minecraft.block.ITileEntityProvider;
 import net.minecraft.block.material.Material;
@@ -20,32 +20,32 @@
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class EntityFallingBlock extends Entity
-{
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+
+import com.google.common.collect.Lists;
+
+public class EntityFallingBlock extends Entity {
+
     private IBlockState fallTile;
     public int fallTime;
     public boolean shouldDropItem = true;
     private boolean field_145808_f;
     private boolean hurtEntities;
     private int fallHurtMax = 40;
     private float fallHurtAmount = 2.0F;
     public NBTTagCompound tileEntityData;
     private static final String __OBFID = "CL_00001668";
 
-    public EntityFallingBlock(World worldIn)
-    {
+    public EntityFallingBlock(World worldIn) {
         super(worldIn);
     }
 
-    public EntityFallingBlock(World worldIn, double x, double y, double z, IBlockState fallingBlockState)
-    {
+    public EntityFallingBlock(World worldIn, double x, double y, double z, IBlockState fallingBlockState) {
         super(worldIn);
         this.fallTile = fallingBlockState;
         this.preventEntitySpawning = true;
         this.setSize(0.98F, 0.98F);
         this.setPosition(x, y, z);
@@ -55,47 +55,39 @@
         this.prevPosX = x;
         this.prevPosY = y;
         this.prevPosZ = z;
     }
 
-    protected boolean canTriggerWalking()
-    {
+    protected boolean canTriggerWalking() {
         return false;
     }
 
-    protected void entityInit() {}
+    protected void entityInit() {
+    }
 
-    public boolean canBeCollidedWith()
-    {
+    public boolean canBeCollidedWith() {
         return !this.isDead;
     }
 
-    public void onUpdate()
-    {
+    public void onUpdate() {
         Block block = this.fallTile.getBlock();
 
-        if (block.getMaterial() == Material.air)
-        {
+        if (block.getMaterial() == Material.air) {
             this.setDead();
-        }
-        else
-        {
+        } else {
             this.prevPosX = this.posX;
             this.prevPosY = this.posY;
             this.prevPosZ = this.posZ;
             BlockPos blockpos;
 
-            if (this.fallTime++ == 0)
-            {
+            if (this.fallTime++ == 0) {
                 blockpos = new BlockPos(this);
 
-                if (this.worldObj.getBlockState(blockpos).getBlock() == block)
+                if (this.worldObj.getBlockState(blockpos).getBlock() == block && !CraftEventFactory.callEntityChangeBlockEvent(this, blockpos.getX(), blockpos.getY(), blockpos.getZ(), Blocks.air, 0).isCancelled()) // CraftBukkit // SpigotMCP -- Added craftbukkit
                 {
                     this.worldObj.setBlockToAir(blockpos);
-                }
-                else if (!this.worldObj.isRemote)
-                {
+                } else if (!this.worldObj.isRemote) {
                     this.setDead();
                     return;
                 }
             }
 
@@ -103,209 +95,167 @@
             this.moveEntity(this.motionX, this.motionY, this.motionZ);
             this.motionX *= 0.9800000190734863D;
             this.motionY *= 0.9800000190734863D;
             this.motionZ *= 0.9800000190734863D;
 
-            if (!this.worldObj.isRemote)
-            {
+            if (!this.worldObj.isRemote) {
                 blockpos = new BlockPos(this);
 
-                if (this.onGround)
-                {
+                if (this.onGround) {
                     this.motionX *= 0.699999988079071D;
                     this.motionZ *= 0.699999988079071D;
                     this.motionY *= -0.5D;
 
-                    if (this.worldObj.getBlockState(blockpos).getBlock() != Blocks.piston_extension)
-                    {
+                    if (this.worldObj.getBlockState(blockpos).getBlock() != Blocks.piston_extension) {
                         this.setDead();
 
-                        if (!this.field_145808_f && this.worldObj.canBlockBePlaced(block, blockpos, true, EnumFacing.UP, (Entity)null, (ItemStack)null) && !BlockFalling.canFallInto(this.worldObj, blockpos.down()) && this.worldObj.setBlockState(blockpos, this.fallTile, 3))
-                        {
-                            if (block instanceof BlockFalling)
-                            {
-                                ((BlockFalling)block).onEndFalling(this.worldObj, blockpos);
+                        // CraftBukkit Start // SpigotMCP -- Added missing 'CraftBukkit start'
+                        if (!this.field_145808_f && this.worldObj.canBlockBePlaced(block, blockpos, true, EnumFacing.UP, (Entity) null, (ItemStack) null) && !BlockFalling.canFallInto(this.worldObj, blockpos.down()) /* mimic the false conditions of setTypeIdAndData */ && blockpos.getX() >= -30000000 && blockpos.getZ() >= -30000000 && blockpos.getX() < 30000000 && blockpos.getZ() < 30000000 && blockpos.getY() >= 0 && blockpos.getY() < 256 && this.worldObj
+                                .getBlockState(blockpos) != this.fallTile) {
+                            if (CraftEventFactory.callEntityChangeBlockEvent(this, blockpos.getX(), blockpos.getY(), blockpos.getZ(), this.fallTile.getBlock(), this.fallTile.getBlock().getMetaFromState(this.fallTile)).isCancelled()) {
+                                return;
                             }
+                            this.worldObj.setBlockState(blockpos, this.fallTile, 3);
+                            // CraftBukkit end
+                            if (block instanceof BlockFalling) {
+                                ((BlockFalling) block).onEndFalling(this.worldObj, blockpos);
+                            }
 
-                            if (this.tileEntityData != null && block instanceof ITileEntityProvider)
-                            {
+                            if (this.tileEntityData != null && block instanceof ITileEntityProvider) {
                                 TileEntity tileentity = this.worldObj.getTileEntity(blockpos);
 
-                                if (tileentity != null)
-                                {
+                                if (tileentity != null) {
                                     NBTTagCompound nbttagcompound = new NBTTagCompound();
                                     tileentity.writeToNBT(nbttagcompound);
                                     Iterator iterator = this.tileEntityData.getKeySet().iterator();
 
-                                    while (iterator.hasNext())
-                                    {
-                                        String s = (String)iterator.next();
+                                    while (iterator.hasNext()) {
+                                        String s = (String) iterator.next();
                                         NBTBase nbtbase = this.tileEntityData.getTag(s);
 
-                                        if (!s.equals("x") && !s.equals("y") && !s.equals("z"))
-                                        {
+                                        if (!s.equals("x") && !s.equals("y") && !s.equals("z")) {
                                             nbttagcompound.setTag(s, nbtbase.copy());
                                         }
                                     }
 
                                     tileentity.readFromNBT(nbttagcompound);
                                     tileentity.markDirty();
                                 }
                             }
-                        }
-                        else if (this.shouldDropItem && !this.field_145808_f && this.worldObj.getGameRules().getGameRuleBooleanValue("doTileDrops"))
-                        {
+                        } else if (this.shouldDropItem && !this.field_145808_f && this.worldObj.getGameRules().getGameRuleBooleanValue("doTileDrops")) {
                             this.entityDropItem(new ItemStack(block, 1, block.damageDropped(this.fallTile)), 0.0F);
                         }
                     }
-                }
-                else if (this.fallTime > 100 && !this.worldObj.isRemote && (blockpos.getY() < 1 || blockpos.getY() > 256) || this.fallTime > 600)
-                {
-                    if (this.shouldDropItem && this.worldObj.getGameRules().getGameRuleBooleanValue("doTileDrops"))
-                    {
+                } else if (this.fallTime > 100 && !this.worldObj.isRemote && (blockpos.getY() < 1 || blockpos.getY() > 256) || this.fallTime > 600) {
+                    if (this.shouldDropItem && this.worldObj.getGameRules().getGameRuleBooleanValue("doTileDrops")) {
                         this.entityDropItem(new ItemStack(block, 1, block.damageDropped(this.fallTile)), 0.0F);
                     }
 
                     this.setDead();
                 }
             }
         }
     }
 
-    public void fall(float distance, float damageMultiplier)
-    {
+    public void fall(float distance, float damageMultiplier) {
         Block block = this.fallTile.getBlock();
 
-        if (this.hurtEntities)
-        {
+        if (this.hurtEntities) {
             int i = MathHelper.ceiling_float_int(distance - 1.0F);
 
-            if (i > 0)
-            {
+            if (i > 0) {
                 ArrayList arraylist = Lists.newArrayList(this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.getEntityBoundingBox()));
                 boolean flag = block == Blocks.anvil;
                 DamageSource damagesource = flag ? DamageSource.anvil : DamageSource.fallingBlock;
                 Iterator iterator = arraylist.iterator();
 
-                while (iterator.hasNext())
-                {
-                    Entity entity = (Entity)iterator.next();
-                    entity.attackEntityFrom(damagesource, (float)Math.min(MathHelper.floor_float((float)i * this.fallHurtAmount), this.fallHurtMax));
+                while (iterator.hasNext()) {
+                    Entity entity = (Entity) iterator.next();
+
+                    CraftEventFactory.entityDamage = this; // CraftBukkit
+                    entity.attackEntityFrom(damagesource, (float) Math.min(MathHelper.floor_float((float) i * this.fallHurtAmount), this.fallHurtMax));
+                    CraftEventFactory.entityDamage = null; // CraftBukkit
                 }
 
-                if (flag && (double)this.rand.nextFloat() < 0.05000000074505806D + (double)i * 0.05D)
-                {
-                    int j = ((Integer)this.fallTile.getValue(BlockAnvil.DAMAGE)).intValue();
+                if (flag && (double) this.rand.nextFloat() < 0.05000000074505806D + (double) i * 0.05D) {
+                    int j = ((Integer) this.fallTile.getValue(BlockAnvil.DAMAGE)).intValue();
                     ++j;
 
-                    if (j > 2)
-                    {
+                    if (j > 2) {
                         this.field_145808_f = true;
-                    }
-                    else
-                    {
+                    } else {
                         this.fallTile = this.fallTile.withProperty(BlockAnvil.DAMAGE, Integer.valueOf(j));
                     }
                 }
             }
         }
     }
 
-    protected void writeEntityToNBT(NBTTagCompound tagCompound)
-    {
+    protected void writeEntityToNBT(NBTTagCompound tagCompound) {
         Block block = this.fallTile != null ? this.fallTile.getBlock() : Blocks.air;
-        ResourceLocation resourcelocation = (ResourceLocation)Block.blockRegistry.getNameForObject(block);
+        ResourceLocation resourcelocation = (ResourceLocation) Block.blockRegistry.getNameForObject(block);
         tagCompound.setString("Block", resourcelocation == null ? "" : resourcelocation.toString());
-        tagCompound.setByte("Data", (byte)block.getMetaFromState(this.fallTile));
-        tagCompound.setByte("Time", (byte)this.fallTime);
+        tagCompound.setByte("Data", (byte) block.getMetaFromState(this.fallTile));
+        tagCompound.setByte("Time", (byte) this.fallTime);
         tagCompound.setBoolean("DropItem", this.shouldDropItem);
         tagCompound.setBoolean("HurtEntities", this.hurtEntities);
         tagCompound.setFloat("FallHurtAmount", this.fallHurtAmount);
         tagCompound.setInteger("FallHurtMax", this.fallHurtMax);
 
-        if (this.tileEntityData != null)
-        {
+        if (this.tileEntityData != null) {
             tagCompound.setTag("TileEntityData", this.tileEntityData);
         }
     }
 
-    protected void readEntityFromNBT(NBTTagCompound tagCompund)
-    {
+    protected void readEntityFromNBT(NBTTagCompound tagCompund) {
         int i = tagCompund.getByte("Data") & 255;
 
-        if (tagCompund.hasKey("Block", 8))
-        {
+        if (tagCompund.hasKey("Block", 8)) {
             this.fallTile = Block.getBlockFromName(tagCompund.getString("Block")).getStateFromMeta(i);
-        }
-        else if (tagCompund.hasKey("TileID", 99))
-        {
+        } else if (tagCompund.hasKey("TileID", 99)) {
             this.fallTile = Block.getBlockById(tagCompund.getInteger("TileID")).getStateFromMeta(i);
-        }
-        else
-        {
+        } else {
             this.fallTile = Block.getBlockById(tagCompund.getByte("Tile") & 255).getStateFromMeta(i);
         }
 
         this.fallTime = tagCompund.getByte("Time") & 255;
         Block block = this.fallTile.getBlock();
 
-        if (tagCompund.hasKey("HurtEntities", 99))
-        {
+        if (tagCompund.hasKey("HurtEntities", 99)) {
             this.hurtEntities = tagCompund.getBoolean("HurtEntities");
             this.fallHurtAmount = tagCompund.getFloat("FallHurtAmount");
             this.fallHurtMax = tagCompund.getInteger("FallHurtMax");
-        }
-        else if (block == Blocks.anvil)
-        {
+        } else if (block == Blocks.anvil) {
             this.hurtEntities = true;
         }
 
-        if (tagCompund.hasKey("DropItem", 99))
-        {
+        if (tagCompund.hasKey("DropItem", 99)) {
             this.shouldDropItem = tagCompund.getBoolean("DropItem");
         }
 
-        if (tagCompund.hasKey("TileEntityData", 10))
-        {
+        if (tagCompund.hasKey("TileEntityData", 10)) {
             this.tileEntityData = tagCompund.getCompoundTag("TileEntityData");
         }
 
-        if (block == null || block.getMaterial() == Material.air)
-        {
+        if (block == null || block.getMaterial() == Material.air) {
             this.fallTile = Blocks.sand.getDefaultState();
         }
     }
 
-    public void setHurtEntities(boolean p_145806_1_)
-    {
+    public void setHurtEntities(boolean p_145806_1_) {
         this.hurtEntities = p_145806_1_;
     }
 
-    public void addEntityCrashInfo(CrashReportCategory category)
-    {
+    public void addEntityCrashInfo(CrashReportCategory category) {
         super.addEntityCrashInfo(category);
 
-        if (this.fallTile != null)
-        {
+        if (this.fallTile != null) {
             Block block = this.fallTile.getBlock();
             category.addCrashSection("Immitating block ID", Integer.valueOf(Block.getIdFromBlock(block)));
             category.addCrashSection("Immitating block data", Integer.valueOf(block.getMetaFromState(this.fallTile)));
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public World getWorldObj()
-    {
-        return this.worldObj;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public boolean canRenderOnFire()
-    {
-        return false;
-    }
-
-    public IBlockState getBlock()
-    {
+    public IBlockState getBlock() {
         return this.fallTile;
     }
 }
