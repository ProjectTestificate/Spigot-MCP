---a/net/minecraft/entity/item/EntityMinecartContainer.java
+++b/net/minecraft/entity/item/EntityMinecartContainer.java
@@ -1,5 +1,8 @@
 package net.minecraft.entity.item;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.inventory.Container;
 import net.minecraft.inventory.InventoryHelper;
@@ -11,142 +11,155 @@
 import net.minecraft.world.LockCode;
 import net.minecraft.world.World;
 
-public abstract class EntityMinecartContainer extends EntityMinecart implements ILockableContainer
-{
-    private ItemStack[] minecartContainerItems = new ItemStack[36];
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.inventory.InventoryHolder;
+
+public abstract class EntityMinecartContainer extends EntityMinecart implements ILockableContainer {
+
+    private ItemStack[] minecartContainerItems = new ItemStack[27]; // CraftBukkit - 36 -> 27
     private boolean dropContentsWhenDead = true;
+
+    // CraftBukkit start
+    public List transaction = new ArrayList();
+    private int maxStack = 64; // SpigotMCP -- Replace 'MAX_STACK' with 64
+
+    public net.minecraft.item.ItemStack[] getContents() {
+        return this.minecartContainerItems;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public java.util.List getViewers() {
+        return transaction;
+    }
+
+    public InventoryHolder getOwner() {
+        org.bukkit.entity.Entity cart = getBukkitEntity();
+        if (cart instanceof InventoryHolder) return (InventoryHolder) cart;
+        return null;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
     private static final String __OBFID = "CL_00001674";
 
-    public EntityMinecartContainer(World worldIn)
-    {
+    public EntityMinecartContainer(World worldIn) {
         super(worldIn);
     }
 
-    public EntityMinecartContainer(World worldIn, double p_i1717_2_, double p_i1717_4_, double p_i1717_6_)
-    {
+    public EntityMinecartContainer(World worldIn, double p_i1717_2_, double p_i1717_4_, double p_i1717_6_) {
         super(worldIn, p_i1717_2_, p_i1717_4_, p_i1717_6_);
     }
 
-    public void killMinecart(DamageSource p_94095_1_)
-    {
+    public void killMinecart(DamageSource p_94095_1_) {
         super.killMinecart(p_94095_1_);
         InventoryHelper.func_180176_a(this.worldObj, this, this);
     }
 
-    public ItemStack getStackInSlot(int index)
-    {
+    public ItemStack getStackInSlot(int index) {
         return this.minecartContainerItems[index];
     }
 
-    public ItemStack decrStackSize(int index, int count)
-    {
-        if (this.minecartContainerItems[index] != null)
-        {
+    public ItemStack decrStackSize(int index, int count) {
+        if (this.minecartContainerItems[index] != null) {
             ItemStack itemstack;
 
-            if (this.minecartContainerItems[index].stackSize <= count)
-            {
+            if (this.minecartContainerItems[index].stackSize <= count) {
                 itemstack = this.minecartContainerItems[index];
                 this.minecartContainerItems[index] = null;
                 return itemstack;
-            }
-            else
-            {
+            } else {
                 itemstack = this.minecartContainerItems[index].splitStack(count);
 
-                if (this.minecartContainerItems[index].stackSize == 0)
-                {
+                if (this.minecartContainerItems[index].stackSize == 0) {
                     this.minecartContainerItems[index] = null;
                 }
 
                 return itemstack;
             }
-        }
-        else
-        {
+        } else {
             return null;
         }
     }
 
-    public ItemStack getStackInSlotOnClosing(int index)
-    {
-        if (this.minecartContainerItems[index] != null)
-        {
+    public ItemStack getStackInSlotOnClosing(int index) {
+        if (this.minecartContainerItems[index] != null) {
             ItemStack itemstack = this.minecartContainerItems[index];
             this.minecartContainerItems[index] = null;
             return itemstack;
-        }
-        else
-        {
+        } else {
             return null;
         }
     }
 
-    public void setInventorySlotContents(int index, ItemStack stack)
-    {
+    public void setInventorySlotContents(int index, ItemStack stack) {
         this.minecartContainerItems[index] = stack;
 
-        if (stack != null && stack.stackSize > this.getInventoryStackLimit())
-        {
+        if (stack != null && stack.stackSize > this.getInventoryStackLimit()) {
             stack.stackSize = this.getInventoryStackLimit();
         }
     }
 
-    public void markDirty() {}
+    public void markDirty() {
+    }
 
-    public boolean isUseableByPlayer(EntityPlayer player)
-    {
+    public boolean isUseableByPlayer(EntityPlayer player) {
         return this.isDead ? false : player.getDistanceSqToEntity(this) <= 64.0D;
     }
 
-    public void openInventory(EntityPlayer player) {}
+    public void openInventory(EntityPlayer player) {
+    }
 
-    public void closeInventory(EntityPlayer player) {}
+    public void closeInventory(EntityPlayer player) {
+    }
 
-    public boolean isItemValidForSlot(int index, ItemStack stack)
-    {
+    public boolean isItemValidForSlot(int index, ItemStack stack) {
         return true;
     }
 
-    public String getName()
-    {
+    public String getName() {
         return this.hasCustomName() ? this.getCustomNameTag() : "container.minecart";
     }
 
-    public int getInventoryStackLimit()
-    {
-        return 64;
+    public int getInventoryStackLimit() {
+        return maxStack;
     }
 
-    public void travelToDimension(int dimensionId)
-    {
+    public void travelToDimension(int dimensionId) {
         this.dropContentsWhenDead = false;
         super.travelToDimension(dimensionId);
     }
 
-    public void setDead()
-    {
-        if (this.dropContentsWhenDead)
-        {
+    public void setDead() {
+        if (this.dropContentsWhenDead) {
             InventoryHelper.func_180176_a(this.worldObj, this, this);
         }
 
         super.setDead();
     }
 
-    protected void writeEntityToNBT(NBTTagCompound tagCompound)
-    {
+    protected void writeEntityToNBT(NBTTagCompound tagCompound) {
         super.writeEntityToNBT(tagCompound);
         NBTTagList nbttaglist = new NBTTagList();
 
-        for (int i = 0; i < this.minecartContainerItems.length; ++i)
-        {
-            if (this.minecartContainerItems[i] != null)
-            {
+        for (int i = 0; i < this.minecartContainerItems.length; ++i) {
+            if (this.minecartContainerItems[i] != null) {
                 NBTTagCompound nbttagcompound1 = new NBTTagCompound();
-                nbttagcompound1.setByte("Slot", (byte)i);
+                nbttagcompound1.setByte("Slot", (byte) i);
                 this.minecartContainerItems[i].writeToNBT(nbttagcompound1);
                 nbttaglist.appendTag(nbttagcompound1);
             }
@@ -153,73 +153,62 @@
         tagCompound.setTag("Items", nbttaglist);
     }
 
-    protected void readEntityFromNBT(NBTTagCompound tagCompund)
-    {
+    protected void readEntityFromNBT(NBTTagCompound tagCompund) {
         super.readEntityFromNBT(tagCompund);
         NBTTagList nbttaglist = tagCompund.getTagList("Items", 10);
         this.minecartContainerItems = new ItemStack[this.getSizeInventory()];
 
-        for (int i = 0; i < nbttaglist.tagCount(); ++i)
-        {
+        for (int i = 0; i < nbttaglist.tagCount(); ++i) {
             NBTTagCompound nbttagcompound1 = nbttaglist.getCompoundTagAt(i);
             int j = nbttagcompound1.getByte("Slot") & 255;
 
-            if (j >= 0 && j < this.minecartContainerItems.length)
-            {
+            if (j >= 0 && j < this.minecartContainerItems.length) {
                 this.minecartContainerItems[j] = ItemStack.loadItemStackFromNBT(nbttagcompound1);
             }
         }
     }
 
-    public boolean interactFirst(EntityPlayer playerIn)
-    {
-        if (!this.worldObj.isRemote)
-        {
+    public boolean interactFirst(EntityPlayer playerIn) {
+        if (!this.worldObj.isRemote) {
             playerIn.displayGUIChest(this);
         }
 
         return true;
     }
 
-    protected void applyDrag()
-    {
+    protected void applyDrag() {
         int i = 15 - Container.calcRedstoneFromInventory(this);
-        float f = 0.98F + (float)i * 0.001F;
-        this.motionX *= (double)f;
+        float f = 0.98F + (float) i * 0.001F;
+        this.motionX *= (double) f;
         this.motionY *= 0.0D;
-        this.motionZ *= (double)f;
+        this.motionZ *= (double) f;
     }
 
-    public int getField(int id)
-    {
+    public int getField(int id) {
         return 0;
     }
 
-    public void setField(int id, int value) {}
+    public void setField(int id, int value) {
+    }
 
-    public int getFieldCount()
-    {
+    public int getFieldCount() {
         return 0;
     }
 
-    public boolean isLocked()
-    {
+    public boolean isLocked() {
         return false;
     }
 
-    public void setLockCode(LockCode code) {}
+    public void setLockCode(LockCode code) {
+    }
 
-    public LockCode getLockCode()
-    {
+    public LockCode getLockCode() {
         return LockCode.EMPTY_CODE;
     }
 
-    public void clear()
-    {
-        for (int i = 0; i < this.minecartContainerItems.length; ++i)
-        {
+    public void clear() {
+        for (int i = 0; i < this.minecartContainerItems.length; ++i) {
             this.minecartContainerItems[i] = null;
         }
     }
-}
+}
