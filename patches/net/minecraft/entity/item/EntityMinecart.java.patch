--- decompiled\net\minecraft\entity\item\EntityMinecart.java
+++ src\main\java\net\minecraft\entity\item\EntityMinecart.java
@@ -1,10 +1,10 @@
 package net.minecraft.entity.item;
 
-import com.google.common.collect.Maps;
 import java.util.Iterator;
 import java.util.Map;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockRailBase;
 import net.minecraft.block.BlockRailPowered;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.Entity;
@@ -16,10 +16,12 @@
 import net.minecraft.init.Blocks;
 import net.minecraft.init.Items;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.tileentity.TileEntity;
+import net.minecraft.tileentity.TileEntityHopper;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.ChatComponentText;
 import net.minecraft.util.ChatComponentTranslation;
 import net.minecraft.util.DamageSource;
@@ -28,30 +30,48 @@
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.IWorldNameable;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import org.bukkit.Location;
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.vehicle.VehicleCreateEvent;
+import org.bukkit.event.vehicle.VehicleDamageEvent;
+import org.bukkit.event.vehicle.VehicleDestroyEvent;
+import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
+import org.bukkit.event.vehicle.VehicleMoveEvent;
+import org.bukkit.event.vehicle.VehicleUpdateEvent;
+import org.bukkit.util.Vector;
+
+import com.google.common.collect.Maps;
+
 public abstract class EntityMinecart extends Entity implements IWorldNameable
 {
+
     private boolean isInReverse;
     private String entityName;
     private static final int[][][] matrix = new int[][][] {{{0, 0, -1}, {0, 0, 1}}, {{ -1, 0, 0}, {1, 0, 0}}, {{ -1, -1, 0}, {1, 0, 0}}, {{ -1, 0, 0}, {1, -1, 0}}, {{0, 0, -1}, {0, -1, 1}}, {{0, -1, -1}, {0, 0, 1}}, {{0, 0, 1}, {1, 0, 0}}, {{0, 0, 1}, { -1, 0, 0}}, {{0, 0, -1}, { -1, 0, 0}}, {{0, 0, -1}, {1, 0, 0}}};
     private int turnProgress;
     private double minecartX;
     private double minecartY;
     private double minecartZ;
     private double minecartYaw;
     private double minecartPitch;
-    @SideOnly(Side.CLIENT)
-    private double velocityX;
-    @SideOnly(Side.CLIENT)
-    private double velocityY;
-    @SideOnly(Side.CLIENT)
-    private double velocityZ;
+
+    // CraftBukkit start
+    public boolean slowWhenEmpty = true;
+    private double derailedX = 0.5;
+    private double derailedY = 0.5;
+    private double derailedZ = 0.5;
+    private double flyingX = 0.95;
+    private double flyingY = 0.95;
+    private double flyingZ = 0.95;
+    public double maxSpeed = 0.4D;
+    // CraftBukkit end
+
+    // SpigotMCP -- Remove client-sided variables
     private static final String __OBFID = "CL_00001670";
 
     public EntityMinecart(World worldIn)
     {
         super(worldIn);
@@ -118,10 +138,11 @@
         this.motionY = 0.0D;
         this.motionZ = 0.0D;
         this.prevPosX = p_i1713_2_;
         this.prevPosY = p_i1713_4_;
         this.prevPosZ = p_i1713_6_;
+        this.worldObj.getServer().getPluginManager().callEvent(new VehicleCreateEvent((Vehicle)this.getBukkitEntity())); // CraftBukkit
     }
 
     public double getMountedYOffset()
     {
         return (double)this.height * 0.5D - 0.20000000298023224D;
@@ -135,23 +156,48 @@
             {
                 return false;
             }
             else
             {
+                // CraftBukkit start - fire VehicleDamageEvent
+                Vehicle vehicle = (Vehicle)this.getBukkitEntity();
+                org.bukkit.entity.Entity passenger = (source.getEntity() == null) ? null : source.getEntity().getBukkitEntity();
+                VehicleDamageEvent event = new VehicleDamageEvent(vehicle, passenger, amount);
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled())
+                {
+                    return true;
+                }
+
+                amount = (float)event.getDamage();
+                // CraftBukkit end
                 this.setRollingDirection(-this.getRollingDirection());
                 this.setRollingAmplitude(10);
                 this.setBeenAttacked();
                 this.setDamage(this.getDamage() + amount * 10.0F);
                 boolean flag = source.getEntity() instanceof EntityPlayer && ((EntityPlayer)source.getEntity()).capabilities.isCreativeMode;
 
-                if (flag || this.getDamage() > 40.0F)
+                if (flag || this.getDamage() > 40.0F) // CraftBukkit - multi-world should still allow teleport even if default vanilla nether disabled // SpigotMCP NOTE -- CB Changed nothing
                 {
                     if (this.riddenByEntity != null)
                     {
                         this.riddenByEntity.mountEntity((Entity)null);
                     }
 
+                    // CraftBukkit start
+                    VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, passenger);
+                    this.worldObj.getServer().getPluginManager().callEvent(destroyEvent);
+
+                    if (destroyEvent.isCancelled())
+                    {
+                        this.setDamage(40); // Maximize damage so this doesn't get triggered again right away
+                        return true;
+                    }
+
+                    // CraftBukkit end
+
                     if (flag && !this.hasCustomName())
                     {
                         this.setDead();
                     }
                     else
@@ -180,18 +226,10 @@
         }
 
         this.entityDropItem(itemstack, 0.0F);
     }
 
-    @SideOnly(Side.CLIENT)
-    public void performHurtAnimation()
-    {
-        this.setRollingDirection(-this.getRollingDirection());
-        this.setRollingAmplitude(10);
-        this.setDamage(this.getDamage() + this.getDamage() * 10.0F);
-    }
-
     public boolean canBeCollidedWith()
     {
         return !this.isDead;
     }
 
@@ -200,10 +238,18 @@
         super.setDead();
     }
 
     public void onUpdate()
     {
+        // CraftBukkit start
+        double prevX = this.posX;
+        double prevY = this.posY;
+        double prevZ = this.posZ;
+        float prevYaw = this.rotationYaw;
+        float prevPitch = this.rotationPitch;
+        // CraftBukkit end
+
         if (this.getRollingAmplitude() > 0)
         {
             this.setRollingAmplitude(this.getRollingAmplitude() - 1);
         }
 
@@ -345,10 +391,23 @@
                 this.rotationYaw += 180.0F;
                 this.isInReverse = !this.isInReverse;
             }
 
             this.setRotation(this.rotationYaw, this.rotationPitch);
+            // CraftBukkit start
+            org.bukkit.World bworld = this.worldObj.getWorld();
+            Location from = new Location(bworld, prevX, prevY, prevZ, prevYaw, prevPitch);
+            Location to = new Location(bworld, this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
+            Vehicle vehicle = (Vehicle)this.getBukkitEntity();
+            this.worldObj.getServer().getPluginManager().callEvent(new VehicleUpdateEvent(vehicle));
+
+            if (!from.equals(to))
+            {
+                this.worldObj.getServer().getPluginManager().callEvent(new VehicleMoveEvent(vehicle, from, to));
+            }
+
+            // CraftBukkit end
             Iterator iterator = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.getEntityBoundingBox().expand(0.20000000298023224D, 0.0D, 0.20000000298023224D)).iterator();
 
             while (iterator.hasNext())
             {
                 Entity entity = (Entity)iterator.next();
@@ -367,41 +426,76 @@
                 }
 
                 this.riddenByEntity = null;
             }
 
+            // Spigot start - Make hoppers around this container minecart active.
+            // Called each tick on each minecart.
+            if (this.worldObj.spigotConfig.altHopperTicking && this instanceof EntityMinecartContainer)
+            {
+                int xi = MathHelper.floor_double(this.getEntityBoundingBox().minX) - 1;
+                int yi = MathHelper.floor_double(this.getEntityBoundingBox().minY) - 1;
+                int zi = MathHelper.floor_double(this.getEntityBoundingBox().minZ) - 1;
+                int xf = MathHelper.floor_double(this.getEntityBoundingBox().maxX) + 1;
+                int yf = MathHelper.floor_double(this.getEntityBoundingBox().maxY) + 1;
+                int zf = MathHelper.floor_double(this.getEntityBoundingBox().maxZ) + 1;
+
+                for (int a = xi; a <= xf; a++)
+                {
+                    for (int b = yi; b <= yf; b++)
+                    {
+                        for (int c = zi; c <= zf; c++)
+                        {
+                            TileEntity tileEntity = this.worldObj.getTileEntity(new BlockPos(a, b, c));
+
+                            if (tileEntity instanceof TileEntityHopper)
+                            {
+                                ((TileEntityHopper)tileEntity).makeTick();
+                            }
+                        }
+                    }
+                }
+            }
+
+            // Spigot end
             this.handleWaterMovement();
         }
     }
 
     protected double func_174898_m()
     {
-        return 0.4D;
+        return this.maxSpeed; // CraftBukkit
     }
 
-    public void onActivatorRailPass(int p_96095_1_, int p_96095_2_, int p_96095_3_, boolean p_96095_4_) {}
+    public void onActivatorRailPass(int p_96095_1_, int p_96095_2_, int p_96095_3_, boolean p_96095_4_)
+    {
+    }
 
     protected void moveDerailedMinecart()
     {
         double d0 = this.func_174898_m();
         this.motionX = MathHelper.clamp_double(this.motionX, -d0, d0);
         this.motionZ = MathHelper.clamp_double(this.motionZ, -d0, d0);
 
         if (this.onGround)
         {
-            this.motionX *= 0.5D;
-            this.motionY *= 0.5D;
-            this.motionZ *= 0.5D;
+            // CraftBukkit start - replace magic numbers with our variables
+            this.motionX *= this.derailedX;
+            this.motionY *= this.derailedY;
+            this.motionZ *= this.derailedZ;
+            // CraftBukkit end
         }
 
         this.moveEntity(this.motionX, this.motionY, this.motionZ);
 
         if (!this.onGround)
         {
-            this.motionX *= 0.949999988079071D;
-            this.motionY *= 0.949999988079071D;
-            this.motionZ *= 0.949999988079071D;
+            // CraftBukkit start - replace magic numbers with our variables
+            this.motionX *= this.flyingX;
+            this.motionY *= this.flyingY;
+            this.motionZ *= this.flyingZ;
+            // CraftBukkit end
         }
     }
 
     protected void func_180460_a(BlockPos p_180460_1_, IBlockState p_180460_2_)
     {
@@ -618,11 +712,11 @@
         }
     }
 
     protected void applyDrag()
     {
-        if (this.riddenByEntity != null)
+        if (this.riddenByEntity != null || !this.slowWhenEmpty) // CraftBukkit - add !this.slowWhenEmpty)
         {
             this.motionX *= 0.996999979019165D;
             this.motionY *= 0.0D;
             this.motionZ *= 0.996999979019165D;
         }
@@ -642,60 +736,10 @@
         float f = this.width / 2.0F;
         float f1 = this.height;
         this.setEntityBoundingBox(new AxisAlignedBB(x - (double)f, y, z - (double)f, x + (double)f, y + (double)f1, z + (double)f));
     }
 
-    @SideOnly(Side.CLIENT)
-    public Vec3 func_70495_a(double p_70495_1_, double p_70495_3_, double p_70495_5_, double p_70495_7_)
-    {
-        int i = MathHelper.floor_double(p_70495_1_);
-        int j = MathHelper.floor_double(p_70495_3_);
-        int k = MathHelper.floor_double(p_70495_5_);
-
-        if (BlockRailBase.isRailBlock(this.worldObj, new BlockPos(i, j - 1, k)))
-        {
-            --j;
-        }
-
-        IBlockState iblockstate = this.worldObj.getBlockState(new BlockPos(i, j, k));
-
-        if (BlockRailBase.isRailBlock(iblockstate))
-        {
-            BlockRailBase.EnumRailDirection enumraildirection = (BlockRailBase.EnumRailDirection)iblockstate.getValue(((BlockRailBase)iblockstate.getBlock()).getShapeProperty());
-            p_70495_3_ = (double)j;
-
-            if (enumraildirection.isAscending())
-            {
-                p_70495_3_ = (double)(j + 1);
-            }
-
-            int[][] aint = matrix[enumraildirection.getMetadata()];
-            double d4 = (double)(aint[1][0] - aint[0][0]);
-            double d5 = (double)(aint[1][2] - aint[0][2]);
-            double d6 = Math.sqrt(d4 * d4 + d5 * d5);
-            d4 /= d6;
-            d5 /= d6;
-            p_70495_1_ += d4 * p_70495_7_;
-            p_70495_5_ += d5 * p_70495_7_;
-
-            if (aint[0][1] != 0 && MathHelper.floor_double(p_70495_1_) - i == aint[0][0] && MathHelper.floor_double(p_70495_5_) - k == aint[0][2])
-            {
-                p_70495_3_ += (double)aint[0][1];
-            }
-            else if (aint[1][1] != 0 && MathHelper.floor_double(p_70495_1_) - i == aint[1][0] && MathHelper.floor_double(p_70495_5_) - k == aint[1][2])
-            {
-                p_70495_3_ += (double)aint[1][1];
-            }
-
-            return this.func_70489_a(p_70495_1_, p_70495_3_, p_70495_5_);
-        }
-        else
-        {
-            return null;
-        }
-    }
-
     public Vec3 func_70489_a(double p_70489_1_, double p_70489_3_, double p_70489_5_)
     {
         int i = MathHelper.floor_double(p_70489_1_);
         int j = MathHelper.floor_double(p_70489_3_);
         int k = MathHelper.floor_double(p_70489_5_);
@@ -828,20 +872,32 @@
         {
             if (!entityIn.noClip && !this.noClip)
             {
                 if (entityIn != this.riddenByEntity)
                 {
+                    // CraftBukkit start
+                    Vehicle vehicle = (Vehicle)this.getBukkitEntity();
+                    org.bukkit.entity.Entity hitEntity = (entityIn == null) ? null : entityIn.getBukkitEntity();
+                    VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, hitEntity);
+                    this.worldObj.getServer().getPluginManager().callEvent(collisionEvent);
+
+                    if (collisionEvent.isCancelled())
+                    {
+                        return;
+                    }
+
+                    // CraftBukkit end
                     if (entityIn instanceof EntityLivingBase && !(entityIn instanceof EntityPlayer) && !(entityIn instanceof EntityIronGolem) && this.getMinecartType() == EntityMinecart.EnumMinecartType.RIDEABLE && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.01D && this.riddenByEntity == null && entityIn.ridingEntity == null)
                     {
                         entityIn.mountEntity(this);
                     }
 
                     double d0 = entityIn.posX - this.posX;
                     double d1 = entityIn.posZ - this.posZ;
                     double d2 = d0 * d0 + d1 * d1;
 
-                    if (d2 >= 9.999999747378752E-5D)
+                    if (d2 >= 9.999999747378752E-5D && !collisionEvent.isCollisionCancelled()) // CraftBukkit - collision
                     {
                         d2 = (double)MathHelper.sqrt_double(d2);
                         d0 /= d2;
                         d1 /= d2;
                         double d3 = 1.0D / d2;
@@ -913,36 +969,18 @@
                 }
             }
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public void func_180426_a(double p_180426_1_, double p_180426_3_, double p_180426_5_, float p_180426_7_, float p_180426_8_, int p_180426_9_, boolean p_180426_10_)
-    {
-        this.minecartX = p_180426_1_;
-        this.minecartY = p_180426_3_;
-        this.minecartZ = p_180426_5_;
-        this.minecartYaw = (double)p_180426_7_;
-        this.minecartPitch = (double)p_180426_8_;
-        this.turnProgress = p_180426_9_ + 2;
-        this.motionX = this.velocityX;
-        this.motionY = this.velocityY;
-        this.motionZ = this.velocityZ;
-    }
+    // SpigotMCP -- Remove client sided method
 
     public void setDamage(float p_70492_1_)
     {
         this.dataWatcher.updateObject(19, Float.valueOf(p_70492_1_));
     }
 
-    @SideOnly(Side.CLIENT)
-    public void setVelocity(double x, double y, double z)
-    {
-        this.velocityX = this.motionX = x;
-        this.velocityY = this.motionY = y;
-        this.velocityZ = this.motionZ = z;
-    }
+    // SpigotMCP -- Remove client sided method
 
     public float getDamage()
     {
         return this.dataWatcher.getWatchableObjectFloat(19);
     }
@@ -1099,10 +1137,11 @@
         }
     }
 
     static final class SwitchEnumMinecartType
         {
+
             static final int[] MINECART_TYPE_LOOKUP;
 
             static final int[] RAIL_SHAPE_LOOKUP = new int[BlockRailBase.EnumRailDirection.values().length];
             private static final String __OBFID = "CL_00002227";
 
@@ -1199,6 +1238,32 @@
                 {
                     ;
                 }
             }
         }
+
+    // CraftBukkit start - Methods for getting and setting flying and derailed velocity modifiers
+    public Vector getFlyingVelocityMod()
+    {
+        return new Vector(flyingX, flyingY, flyingZ);
+    }
+
+    public void setFlyingVelocityMod(Vector flying)
+    {
+        flyingX = flying.getX();
+        flyingY = flying.getY();
+        flyingZ = flying.getZ();
+    }
+
+    public Vector getDerailedVelocityMod()
+    {
+        return new Vector(derailedX, derailedY, derailedZ);
+    }
+
+    public void setDerailedVelocityMod(Vector derailed)
+    {
+        derailedX = derailed.getX();
+        derailedY = derailed.getY();
+        derailedZ = derailed.getZ();
+    }
+    // CraftBukkit end
 }
