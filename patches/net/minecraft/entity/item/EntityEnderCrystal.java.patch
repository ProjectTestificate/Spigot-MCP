---a/net/minecraft/entity/item/EntityEnderCrystal.java
+++b/net/minecraft/entity/item/EntityEnderCrystal.java
@@ -8,17 +8,16 @@
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldProviderEnd;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class EntityEnderCrystal extends Entity
-{
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.ExplosionPrimeEvent;
+
+public class EntityEnderCrystal extends Entity {
+
     public int innerRotation;
     public int health;
     private static final String __OBFID = "CL_00001658";
 
-    public EntityEnderCrystal(World worldIn)
-    {
+    public EntityEnderCrystal(World worldIn) {
         super(worldIn);
         this.preventEntitySpawning = true;
         this.setSize(2.0F, 2.0F);
@@ -26,32 +26,15 @@
         this.innerRotation = this.rand.nextInt(100000);
     }
 
-    @SideOnly(Side.CLIENT)
-    public EntityEnderCrystal(World worldIn, double p_i1699_2_, double p_i1699_4_, double p_i1699_6_)
-    {
-        this(worldIn);
-        this.setPosition(p_i1699_2_, p_i1699_4_, p_i1699_6_);
-    }
-
-    protected boolean canTriggerWalking()
-    {
+    protected boolean canTriggerWalking() {
         return false;
     }
 
-    protected void entityInit()
-    {
+    protected void entityInit() {
         this.dataWatcher.addObject(8, Integer.valueOf(this.health));
     }
 
-    public void onUpdate()
-    {
+    public void onUpdate() {
         this.prevPosX = this.posX;
         this.prevPosY = this.posY;
         this.prevPosZ = this.posZ;
@@ -54,40 +54,46 @@
         int j = MathHelper.floor_double(this.posY);
         int k = MathHelper.floor_double(this.posZ);
 
-        if (this.worldObj.provider instanceof WorldProviderEnd && this.worldObj.getBlockState(new BlockPos(i, j, k)).getBlock() != Blocks.fire)
-        {
-            this.worldObj.setBlockState(new BlockPos(i, j, k), Blocks.fire.getDefaultState());
+        if (this.worldObj.provider instanceof WorldProviderEnd && this.worldObj.getBlockState(new BlockPos(i, j, k)).getBlock() != Blocks.fire) {
+            // CraftBukkit start
+            if (!CraftEventFactory.callBlockIgniteEvent(this.worldObj, i, j, k, this).isCancelled()) {
+                this.worldObj.setBlockState(new BlockPos(i, j, k), Blocks.fire.getDefaultState());
+            }
+            // CraftBukkit end
         }
     }
 
-    protected void writeEntityToNBT(NBTTagCompound tagCompound) {}
+    protected void writeEntityToNBT(NBTTagCompound tagCompound) {
+    }
 
-    protected void readEntityFromNBT(NBTTagCompound tagCompund) {}
+    protected void readEntityFromNBT(NBTTagCompound tagCompund) {
+    }
 
-    public boolean canBeCollidedWith()
-    {
+    public boolean canBeCollidedWith() {
         return true;
     }
 
-    public boolean attackEntityFrom(DamageSource source, float amount)
-    {
-        if (this.isEntityInvulnerable(source))
-        {
+    public boolean attackEntityFrom(DamageSource source, float amount) {
+        if (this.isEntityInvulnerable(source)) {
             return false;
-        }
-        else
-        {
-            if (!this.isDead && !this.worldObj.isRemote)
-            {
+        } else {
+            if (!this.isDead && !this.worldObj.isRemote) {
+                // CraftBukkit start - All non-living entities need this
+                if (CraftEventFactory.handleNonLivingEntityDamageEvent(this, source, amount)) {
+                    return false;
+                }
+                // CraftBukkit end
                 this.health = 0;
 
-                if (this.health <= 0)
-                {
+                if (this.health <= 0) {
                     this.setDead();
 
-                    if (!this.worldObj.isRemote)
-                    {
-                        this.worldObj.createExplosion((Entity)null, this.posX, this.posY, this.posZ, 6.0F, true);
+                    if (!this.worldObj.isRemote) {
+                        // CraftBukkit start
+                        ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), 6.0F, false);
+                        this.worldObj.getServer().getPluginManager().callEvent(event);
+                        if (event.isCancelled()) {
+                            this.isDead = false;
+                            return false;
+                        }
+                        this.worldObj.newExplosion(this, this.posX, this.posY, this.posZ, event.getRadius(), event.getFire(), true);
+                        // CraftBukkit end
                     }
                 }
             }
@@ -95,4 +95,4 @@
             return true;
         }
     }
-}
+}
