--- decompiled\net\minecraft\entity\item\EntityBoat.java
+++ src\main\java\net\minecraft\entity\item\EntityBoat.java
@@ -1,8 +1,9 @@
 package net.minecraft.entity.item;
 
 import java.util.List;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.player.EntityPlayer;
@@ -15,29 +16,55 @@
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.EntityDamageSourceIndirect;
 import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.vehicle.VehicleCreateEvent;
+import org.bukkit.event.vehicle.VehicleDamageEvent;
+import org.bukkit.event.vehicle.VehicleDestroyEvent;
+import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
+import org.bukkit.event.vehicle.VehicleMoveEvent;
+import org.bukkit.event.vehicle.VehicleUpdateEvent;
+
 public class EntityBoat extends Entity
 {
+
     private boolean isBoatEmpty;
     private double speedMultiplier;
     private int boatPosRotationIncrements;
     private double boatX;
     private double boatY;
     private double boatZ;
     private double boatYaw;
     private double boatPitch;
-    @SideOnly(Side.CLIENT)
-    private double velocityX;
-    @SideOnly(Side.CLIENT)
-    private double velocityY;
-    @SideOnly(Side.CLIENT)
-    private double velocityZ;
+
+    // CraftBukkit start
+    public double maxSpeed = 0.4D;
+    public double occupiedDeceleration = 0.2D;
+    public double unoccupiedDeceleration = -1;
+    public boolean landBoats = false;
+
+    @Override
+    public void applyEntityCollision(Entity entity)
+    {
+        org.bukkit.entity.Entity hitEntity = (entity == null) ? null : entity.getBukkitEntity();
+        VehicleEntityCollisionEvent event = new VehicleEntityCollisionEvent((Vehicle)this.getBukkitEntity(), hitEntity);
+        this.worldObj.getServer().getPluginManager().callEvent(event);
+
+        if (event.isCancelled())
+        {
+            return;
+        }
+
+        super.applyEntityCollision(entity);
+    }
+    // CraftBukkit end
+
     private static final String __OBFID = "CL_00001667";
 
     public EntityBoat(World worldIn)
     {
         super(worldIn);
@@ -82,10 +109,11 @@
         this.motionY = 0.0D;
         this.motionZ = 0.0D;
         this.prevPosX = p_i1705_2_;
         this.prevPosY = p_i1705_4_;
         this.prevPosZ = p_i1705_6_;
+        this.worldObj.getServer().getPluginManager().callEvent(new VehicleCreateEvent((Vehicle)this.getBukkitEntity())); // CraftBukkit
     }
 
     public double getMountedYOffset()
     {
         return (double)this.height * 0.0D - 0.30000001192092896D;
@@ -103,18 +131,42 @@
             {
                 return false;
             }
             else
             {
+                // CraftBukkit start
+                Vehicle vehicle = (Vehicle)this.getBukkitEntity();
+                org.bukkit.entity.Entity attacker = (source.getEntity() == null) ? null : source.getEntity().getBukkitEntity();
+                VehicleDamageEvent event = new VehicleDamageEvent(vehicle, attacker, (double)amount);
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled())
+                {
+                    return true;
+                }
+
+                // amount = event.getDamage(); // TODO Why don't we do this?
+                // CraftBukkit end
                 this.setForwardDirection(-this.getForwardDirection());
                 this.setTimeSinceHit(10);
                 this.setDamageTaken(this.getDamageTaken() + amount * 10.0F);
                 this.setBeenAttacked();
                 boolean flag = source.getEntity() instanceof EntityPlayer && ((EntityPlayer)source.getEntity()).capabilities.isCreativeMode;
 
                 if (flag || this.getDamageTaken() > 40.0F)
                 {
+                    // CraftBukkit start
+                    VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, attacker);
+                    this.worldObj.getServer().getPluginManager().callEvent(destroyEvent);
+
+                    if (destroyEvent.isCancelled())
+                    {
+                        this.setDamageTaken(40F); // Maximize damage so this doesn't get triggered again right away
+                        return true;
+                    }
+
+                    // CraftBukkit end
                     if (this.riddenByEntity != null)
                     {
                         this.riddenByEntity.mountEntity(this);
                     }
 
@@ -133,81 +185,24 @@
         {
             return true;
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public void performHurtAnimation()
-    {
-        this.setForwardDirection(-this.getForwardDirection());
-        this.setTimeSinceHit(10);
-        this.setDamageTaken(this.getDamageTaken() * 11.0F);
-    }
-
     public boolean canBeCollidedWith()
     {
         return !this.isDead;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void func_180426_a(double p_180426_1_, double p_180426_3_, double p_180426_5_, float p_180426_7_, float p_180426_8_, int p_180426_9_, boolean p_180426_10_)
-    {
-        if (p_180426_10_ && this.riddenByEntity != null)
-        {
-            this.prevPosX = this.posX = p_180426_1_;
-            this.prevPosY = this.posY = p_180426_3_;
-            this.prevPosZ = this.posZ = p_180426_5_;
-            this.rotationYaw = p_180426_7_;
-            this.rotationPitch = p_180426_8_;
-            this.boatPosRotationIncrements = 0;
-            this.setPosition(p_180426_1_, p_180426_3_, p_180426_5_);
-            this.motionX = this.velocityX = 0.0D;
-            this.motionY = this.velocityY = 0.0D;
-            this.motionZ = this.velocityZ = 0.0D;
-        }
-        else
-        {
-            if (this.isBoatEmpty)
-            {
-                this.boatPosRotationIncrements = p_180426_9_ + 5;
-            }
-            else
-            {
-                double d3 = p_180426_1_ - this.posX;
-                double d4 = p_180426_3_ - this.posY;
-                double d5 = p_180426_5_ - this.posZ;
-                double d6 = d3 * d3 + d4 * d4 + d5 * d5;
-
-                if (d6 <= 1.0D)
-                {
-                    return;
-                }
-
-                this.boatPosRotationIncrements = 3;
-            }
-
-            this.boatX = p_180426_1_;
-            this.boatY = p_180426_3_;
-            this.boatZ = p_180426_5_;
-            this.boatYaw = (double)p_180426_7_;
-            this.boatPitch = (double)p_180426_8_;
-            this.motionX = this.velocityX;
-            this.motionY = this.velocityY;
-            this.motionZ = this.velocityZ;
-        }
-    }
-
-    @SideOnly(Side.CLIENT)
-    public void setVelocity(double x, double y, double z)
-    {
-        this.velocityX = this.motionX = x;
-        this.velocityY = this.motionY = y;
-        this.velocityZ = this.motionZ = z;
-    }
-
     public void onUpdate()
     {
+        // CraftBukkit start
+        double prevX = this.posX;
+        double prevY = this.posY;
+        double prevZ = this.posZ;
+        float prevYaw = this.rotationYaw;
+        float prevPitch = this.rotationPitch;
+        // CraftBukkit end
         super.onUpdate();
 
         if (this.getTimeSinceHit() > 0)
         {
             this.setTimeSinceHit(this.getTimeSinceHit() - 1);
@@ -326,11 +321,29 @@
                 EntityLivingBase entitylivingbase = (EntityLivingBase)this.riddenByEntity;
                 float f = this.riddenByEntity.rotationYaw + -entitylivingbase.moveStrafing * 90.0F;
                 this.motionX += -Math.sin((double)(f * (float)Math.PI / 180.0F)) * this.speedMultiplier * (double)entitylivingbase.moveForward * 0.05000000074505806D;
                 this.motionZ += Math.cos((double)(f * (float)Math.PI / 180.0F)) * this.speedMultiplier * (double)entitylivingbase.moveForward * 0.05000000074505806D;
             }
+            // CraftBukkit start - Support unoccupied deceleration
+            else if (unoccupiedDeceleration >= 0)
+            {
+                this.motionX *= unoccupiedDeceleration;
+                this.motionZ *= unoccupiedDeceleration;
 
+                // Kill lingering speed
+                if (motionX <= 0.00001)
+                {
+                    motionX = 0;
+                }
+
+                if (motionZ <= 0.00001)
+                {
+                    motionZ = 0;
+                }
+            }
+
+            // CraftBukkit end
             d2 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
 
             if (d2 > 0.35D)
             {
                 d4 = 0.35D / d2;
@@ -371,22 +384,36 @@
                     BlockPos blockpos = new BlockPos(i1, k, j);
                     Block block = this.worldObj.getBlockState(blockpos).getBlock();
 
                     if (block == Blocks.snow_layer)
                     {
+                        // CraftBukkit start
+                        if (CraftEventFactory.callEntityChangeBlockEvent(this, i1, j1, j, Blocks.air, 0).isCancelled())
+                        {
+                            continue;
+                        }
+
+                        // CraftBukkit end
                         this.worldObj.setBlockToAir(blockpos);
                         this.isCollidedHorizontally = false;
                     }
                     else if (block == Blocks.waterlily)
                     {
+                        // CraftBukkit start
+                        if (CraftEventFactory.callEntityChangeBlockEvent(this, i1, j1, j, Blocks.air, 0).isCancelled())
+                        {
+                            continue;
+                        }
+
+                        // CraftBukkit end
                         this.worldObj.destroyBlock(blockpos, true);
                         this.isCollidedHorizontally = false;
                     }
                 }
             }
 
-            if (this.onGround)
+            if (this.onGround && !this.landBoats) // CraftBukkit
             {
                 this.motionX *= 0.5D;
                 this.motionY *= 0.5D;
                 this.motionZ *= 0.5D;
             }
@@ -395,21 +422,31 @@
 
             if (this.isCollidedHorizontally && d9 > 0.2D)
             {
                 if (!this.worldObj.isRemote && !this.isDead)
                 {
-                    this.setDead();
+                    // CraftBukkit start
+                    Vehicle vehicle = (Vehicle)this.getBukkitEntity();
+                    VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, null);
+                    this.worldObj.getServer().getPluginManager().callEvent(destroyEvent);
 
-                    for (l = 0; l < 3; ++l)
+                    if (!destroyEvent.isCancelled())
                     {
-                        this.dropItemWithOffset(Item.getItemFromBlock(Blocks.planks), 1, 0.0F);
-                    }
+                        this.setDead();
 
-                    for (l = 0; l < 2; ++l)
-                    {
-                        this.dropItemWithOffset(Items.stick, 1, 0.0F);
+                        for (l = 0; l < 3; ++l)
+                        {
+                            this.dropItemWithOffset(Item.getItemFromBlock(Blocks.planks), 1, 0.0F);
+                        }
+
+                        for (l = 0; l < 2; ++l)
+                        {
+                            this.dropItemWithOffset(Items.stick, 1, 0.0F);
+                        }
                     }
+
+                    // CraftBukkit end
                 }
             }
             else
             {
                 this.motionX *= 0.9900000095367432D;
@@ -439,11 +476,26 @@
                 d12 = -20.0D;
             }
 
             this.rotationYaw = (float)((double)this.rotationYaw + d12);
             this.setRotation(this.rotationYaw, this.rotationPitch);
+            // CraftBukkit start
+            org.bukkit.Server server = this.worldObj.getServer();
+            org.bukkit.World bworld = this.worldObj.getWorld();
+            Location from = new Location(bworld, prevX, prevY, prevZ, prevYaw, prevPitch);
+            Location to = new Location(bworld, this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
+            Vehicle vehicle = (Vehicle)this.getBukkitEntity();
+            server.getPluginManager().callEvent(new VehicleUpdateEvent(vehicle));
 
+            if (!from.equals(to))
+            {
+                VehicleMoveEvent event = new VehicleMoveEvent(vehicle, from, to);
+                server.getPluginManager().callEvent(event);
+            }
+
+            // CraftBukkit end
+
             if (!this.worldObj.isRemote)
             {
                 List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.getEntityBoundingBox().expand(0.20000000298023224D, 0.0D, 0.20000000298023224D));
 
                 if (list != null && !list.isEmpty())
@@ -459,10 +511,11 @@
                     }
                 }
 
                 if (this.riddenByEntity != null && this.riddenByEntity.isDead)
                 {
+                    this.riddenByEntity.ridingEntity = null; // CraftBukkit
                     this.riddenByEntity = null;
                 }
             }
         }
     }
@@ -475,13 +528,17 @@
             double d1 = Math.sin((double)this.rotationYaw * Math.PI / 180.0D) * 0.4D;
             this.riddenByEntity.setPosition(this.posX + d0, this.posY + this.getMountedYOffset() + this.riddenByEntity.getYOffset(), this.posZ + d1);
         }
     }
 
-    protected void writeEntityToNBT(NBTTagCompound tagCompound) {}
+    protected void writeEntityToNBT(NBTTagCompound tagCompound)
+    {
+    }
 
-    protected void readEntityFromNBT(NBTTagCompound tagCompund) {}
+    protected void readEntityFromNBT(NBTTagCompound tagCompund)
+    {
+    }
 
     public boolean interactFirst(EntityPlayer playerIn)
     {
         if (this.riddenByEntity != null && this.riddenByEntity instanceof EntityPlayer && this.riddenByEntity != playerIn)
         {
@@ -506,22 +563,32 @@
             {
                 this.fall(this.fallDistance, 1.0F);
 
                 if (!this.worldObj.isRemote && !this.isDead)
                 {
-                    this.setDead();
-                    int i;
+                    // CraftBukkit start
+                    Vehicle vehicle = (Vehicle)this.getBukkitEntity();
+                    VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, null);
+                    this.worldObj.getServer().getPluginManager().callEvent(destroyEvent);
 
-                    for (i = 0; i < 3; ++i)
+                    if (!destroyEvent.isCancelled())
                     {
-                        this.dropItemWithOffset(Item.getItemFromBlock(Blocks.planks), 1, 0.0F);
-                    }
+                        this.setDead();
+                        int i;
 
-                    for (i = 0; i < 2; ++i)
-                    {
-                        this.dropItemWithOffset(Items.stick, 1, 0.0F);
+                        for (i = 0; i < 3; ++i)
+                        {
+                            this.dropItemWithOffset(Item.getItemFromBlock(Blocks.planks), 1, 0.0F);
+                        }
+
+                        for (i = 0; i < 2; ++i)
+                        {
+                            this.dropItemWithOffset(Items.stick, 1, 0.0F);
+                        }
                     }
+
+                    // CraftBukkit end
                 }
 
                 this.fallDistance = 0.0F;
             }
         }
@@ -559,11 +626,6 @@
     public int getForwardDirection()
     {
         return this.dataWatcher.getWatchableObjectInt(18);
     }
 
-    @SideOnly(Side.CLIENT)
-    public void setIsBoatEmpty(boolean p_70270_1_)
-    {
-        this.isBoatEmpty = p_70270_1_;
-    }
 }
