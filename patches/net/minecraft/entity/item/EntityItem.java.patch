--- decompiled\net\minecraft\entity\item\EntityItem.java
+++ src\main\java\net\minecraft\entity\item\EntityItem.java
@@ -1,36 +1,42 @@
 package net.minecraft.entity.item;
 
 import java.util.Iterator;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.Items;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.stats.AchievementList;
+import net.minecraft.tileentity.TileEntity;
+import net.minecraft.tileentity.TileEntityHopper;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.StatCollector;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.event.player.PlayerPickupItemEvent;
 
 public class EntityItem extends Entity
 {
+
     private static final Logger logger = LogManager.getLogger();
     private int age;
-    private int delayBeforeCanPickup;
+    public int delayBeforeCanPickup; // SpigotMCP -- Apply access transformation
     private int health;
     private String thrower;
     private String owner;
     public float hoverStart;
+    private int lastTick = MinecraftServer.currentTick; // CraftBukkit
     private static final String __OBFID = "CL_00001669";
 
     public EntityItem(World worldIn, double x, double y, double z)
     {
         super(worldIn);
@@ -45,10 +51,18 @@
     }
 
     public EntityItem(World worldIn, double x, double y, double z, ItemStack stack)
     {
         this(worldIn, x, y, z);
+
+        // CraftBukkit start - Can't set null items in the datawatcher
+        if (stack == null || stack.getItem() == null)
+        {
+            return;
+        }
+
+        // CraftBukkit end
         this.setEntityItemStack(stack);
     }
 
     protected boolean canTriggerWalking()
     {
@@ -76,10 +90,16 @@
             this.setDead();
         }
         else
         {
             super.onUpdate();
+            // CraftBukkit start - Use wall time for pickup and despawn timers
+            int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+            this.delayBeforeCanPickup -= elapsedTicks;
+            this.age += elapsedTicks;
+            this.lastTick = MinecraftServer.currentTick;
+            // CraftBukkit end
 
             if (this.delayBeforeCanPickup > 0 && this.delayBeforeCanPickup != 32767)
             {
                 --this.delayBeforeCanPickup;
             }
@@ -122,27 +142,94 @@
             if (this.onGround)
             {
                 this.motionY *= -0.5D;
             }
 
+            // Spigot start - Make the hopper(s) below this item active.
+            // Called each tick on each item entity.
+            if (this.worldObj.spigotConfig.altHopperTicking)
+            {
+                int xi = MathHelper.floor_double(this.getEntityBoundingBox().minX);
+                int yi = MathHelper.floor_double(this.getEntityBoundingBox().minY) - 1;
+                int zi = MathHelper.floor_double(this.getEntityBoundingBox().minZ);
+                int xf = MathHelper.floor_double(this.getEntityBoundingBox().maxX);
+                int yf = MathHelper.floor_double(this.getEntityBoundingBox().maxY) - 1;
+                int zf = MathHelper.floor_double(this.getEntityBoundingBox().maxZ);
+
+                for (int a = xi; a <= xf; a++)
+                {
+                    for (int c = zi; c <= zf; c++)
+                    {
+                        for (int b = yi; b <= yf; b++)
+                        {
+                            TileEntity tileEntity = this.worldObj.getTileEntity(new BlockPos(a, b, c));
+
+                            if (tileEntity instanceof TileEntityHopper)
+                            {
+                                ((TileEntityHopper)tileEntity).makeTick();
+                            }
+                        }
+                    }
+                }
+            }
+
+            // Spigot end
+            /* Craftbukkit start - moved up
             if (this.age != -32768)
             {
                 ++this.age;
             }
-
+            // Craftbukkit end */
             this.handleWaterMovement();
 
-            if (!this.worldObj.isRemote && this.age >= 6000)
+            if (!this.worldObj.isRemote && this.age >= worldObj.spigotConfig.itemDespawnRate) // Spigot)
             {
+                // CraftBukkit start - fire ItemDespawnEvent
+                if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled())
+                {
+                    this.age = 0;
+                    return;
+                }
+
+                // CraftBukkit end
                 this.setDead();
             }
         }
     }
 
+    // Spigot start - copied from above
+    @Override
+    public void inactiveTick()
+    {
+        // CraftBukkit start - Use wall time for pickup and despawn timers
+        int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+        this.delayBeforeCanPickup -= elapsedTicks;
+        this.age += elapsedTicks;
+        this.lastTick = MinecraftServer.currentTick;
+        // CraftBukkit end
+
+        if (!this.worldObj.isRemote && this.age >= worldObj.spigotConfig.itemDespawnRate)   // Spigot
+        {
+            // CraftBukkit start - fire ItemDespawnEvent
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled())
+            {
+                this.age = 0;
+                return;
+            }
+
+            // CraftBukkit end
+            this.setDead();
+        }
+    }
+    // Spigot end
+
     private void searchForOtherItemsNearby()
     {
-        Iterator iterator = this.worldObj.getEntitiesWithinAABB(EntityItem.class, this.getEntityBoundingBox().expand(0.5D, 0.0D, 0.5D)).iterator();
+        // Spigot start
+        double radius = worldObj.spigotConfig.itemMerge;
+        Iterator iterator = this.worldObj.getEntitiesWithinAABB(net.minecraft.entity.item.EntityItem.class, this.getEntityBoundingBox().expand(radius, radius, radius)).iterator();
+        // Spigot end
 
         while (iterator.hasNext())
         {
             EntityItem entityitem = (EntityItem)iterator.next();
             this.combineItems(entityitem);
@@ -192,15 +279,17 @@
                     {
                         return false;
                     }
                     else
                     {
-                        itemstack1.stackSize += itemstack.stackSize;
-                        other.delayBeforeCanPickup = Math.max(other.delayBeforeCanPickup, this.delayBeforeCanPickup);
-                        other.age = Math.min(other.age, this.age);
-                        other.setEntityItemStack(itemstack1);
-                        this.setDead();
+                        // Spigot start
+                        itemstack.stackSize += itemstack1.stackSize;
+                        this.delayBeforeCanPickup = Math.max(other.delayBeforeCanPickup, this.delayBeforeCanPickup);
+                        this.age = Math.min(other.age, this.age);
+                        this.setEntityItemStack(itemstack);
+                        other.setDead();
+                        // Spigot end
                         return true;
                     }
                 }
                 else
                 {
@@ -257,10 +346,17 @@
         {
             return false;
         }
         else
         {
+            // CraftBukkit start
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, source, amount))
+            {
+                return false;
+            }
+
+            // CraftBukkit end
             this.setBeenAttacked();
             this.health = (int)((float)this.health - amount);
 
             if (this.health <= 0)
             {
@@ -312,12 +408,31 @@
         {
             this.thrower = tagCompund.getString("Thrower");
         }
 
         NBTTagCompound nbttagcompound1 = tagCompund.getCompoundTag("Item");
-        this.setEntityItemStack(ItemStack.loadItemStackFromNBT(nbttagcompound1));
 
+        // CraftBukkit start - Handle missing "Item" compounds
+        if (nbttagcompound1 != null)
+        {
+            ItemStack itemstack = ItemStack.loadItemStackFromNBT(nbttagcompound1);
+
+            if (itemstack != null)
+            {
+                this.setEntityItemStack(itemstack);
+            }
+            else
+            {
+                this.setDead();
+            }
+        }
+        else
+        {
+            this.setDead();
+        }
+
+        // CraftBukkit end
         if (this.getEntityItem() == null)
         {
             this.setDead();
         }
     }
@@ -326,11 +441,33 @@
     {
         if (!this.worldObj.isRemote)
         {
             ItemStack itemstack = this.getEntityItem();
             int i = itemstack.stackSize;
+            // CraftBukkit start - fire PlayerPickupItemEvent
+            int canHold = entityIn.inventory.canHold(itemstack);
+            int remaining = itemstack.stackSize - canHold;
 
+            if (this.delayBeforeCanPickup <= 0 && canHold > 0)
+            {
+                itemstack.stackSize = canHold;
+                PlayerPickupItemEvent event = new PlayerPickupItemEvent((org.bukkit.entity.Player)entityIn.getBukkitEntity(), (org.bukkit.entity.Item)this.getBukkitEntity(), remaining);
+                // event.setCancelled(!entityhuman.canPickUpLoot); TODO
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+                itemstack.stackSize = canHold + remaining;
+
+                if (event.isCancelled())
+                {
+                    return;
+                }
+
+                // Possibly < 0; fix here so we do not have to modify code below
+                this.delayBeforeCanPickup = 0;
+            }
+
+            // CraftBukkit end
+
             if (this.delayBeforeCanPickup == 0 && (this.owner == null || 6000 - this.age <= 200 || this.owner.equals(entityIn.getName())) && entityIn.inventory.addItemStackToInventory(itemstack))
             {
                 if (itemstack.getItem() == Item.getItemFromBlock(Blocks.log))
                 {
                     entityIn.triggerAchievement(AchievementList.mineWood);
@@ -444,16 +581,10 @@
     public void setThrower(String thrower)
     {
         this.thrower = thrower;
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getAge()
-    {
-        return this.age;
-    }
-
     public void setDefaultPickupDelay()
     {
         this.delayBeforeCanPickup = 10;
     }
 
