---a/net/minecraft/entity/item/EntityItem.java
+++b/net/minecraft/entity/item/EntityItem.java
@@ -1,6 +1,7 @@
 package net.minecraft.entity.item;
 
 import java.util.Iterator;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
@@ -9,76 +9,83 @@
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.stats.AchievementList;
+import net.minecraft.tileentity.TileEntity;
+import net.minecraft.tileentity.TileEntityHopper;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.StatCollector;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.event.player.PlayerPickupItemEvent;
 
-public class EntityItem extends Entity
-{
+public class EntityItem extends Entity {
+
     private static final Logger logger = LogManager.getLogger();
     private int age;
-    private int delayBeforeCanPickup;
+    public int delayBeforeCanPickup; // SpigotMCP -- Apply access transformation
     private int health;
     private String thrower;
     private String owner;
     public float hoverStart;
+    private int lastTick = MinecraftServer.currentTick; // CraftBukkit
     private static final String __OBFID = "CL_00001669";
 
-    public EntityItem(World worldIn, double x, double y, double z)
-    {
+    public EntityItem(World worldIn, double x, double y, double z) {
         super(worldIn);
         this.health = 5;
-        this.hoverStart = (float)(Math.random() * Math.PI * 2.0D);
+        this.hoverStart = (float) (Math.random() * Math.PI * 2.0D);
         this.setSize(0.25F, 0.25F);
         this.setPosition(x, y, z);
-        this.rotationYaw = (float)(Math.random() * 360.0D);
-        this.motionX = (double)((float)(Math.random() * 0.20000000298023224D - 0.10000000149011612D));
+        this.rotationYaw = (float) (Math.random() * 360.0D);
+        this.motionX = (double) ((float) (Math.random() * 0.20000000298023224D - 0.10000000149011612D));
         this.motionY = 0.20000000298023224D;
-        this.motionZ = (double)((float)(Math.random() * 0.20000000298023224D - 0.10000000149011612D));
+        this.motionZ = (double) ((float) (Math.random() * 0.20000000298023224D - 0.10000000149011612D));
     }
 
-    public EntityItem(World worldIn, double x, double y, double z, ItemStack stack)
-    {
+    public EntityItem(World worldIn, double x, double y, double z, ItemStack stack) {
         this(worldIn, x, y, z);
+        // CraftBukkit start - Can't set null items in the datawatcher
+        if (stack == null || stack.getItem() == null) {
+            return;
+        }
+        // CraftBukkit end
         this.setEntityItemStack(stack);
     }
 
-    protected boolean canTriggerWalking()
-    {
+    protected boolean canTriggerWalking() {
         return false;
     }
 
-    public EntityItem(World worldIn)
-    {
+    public EntityItem(World worldIn) {
         super(worldIn);
         this.health = 5;
-        this.hoverStart = (float)(Math.random() * Math.PI * 2.0D);
+        this.hoverStart = (float) (Math.random() * Math.PI * 2.0D);
         this.setSize(0.25F, 0.25F);
         this.setEntityItemStack(new ItemStack(Blocks.air, 0));
     }
 
-    protected void entityInit()
-    {
+    protected void entityInit() {
         this.getDataWatcher().addObjectByDataType(10, 5);
     }
 
-    public void onUpdate()
-    {
-        if (this.getEntityItem() == null)
-        {
+    public void onUpdate() {
+        if (this.getEntityItem() == null) {
             this.setDead();
-        }
-        else
-        {
+        } else {
             super.onUpdate();
+            // CraftBukkit start - Use wall time for pickup and despawn timers
+            int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+            this.delayBeforeCanPickup -= elapsedTicks;
+            this.age += elapsedTicks;
+            this.lastTick = MinecraftServer.currentTick;
+            // CraftBukkit end
 
-            if (this.delayBeforeCanPickup > 0 && this.delayBeforeCanPickup != 32767)
-            {
+            if (this.delayBeforeCanPickup > 0 && this.delayBeforeCanPickup != 32767) {
                 --this.delayBeforeCanPickup;
             }
 
@@ -90,179 +90,193 @@
             this.motionY -= 0.03999999910593033D;
             this.noClip = this.pushOutOfBlocks(this.posX, (this.getEntityBoundingBox().minY + this.getEntityBoundingBox().maxY) / 2.0D, this.posZ);
             this.moveEntity(this.motionX, this.motionY, this.motionZ);
-            boolean flag = (int)this.prevPosX != (int)this.posX || (int)this.prevPosY != (int)this.posY || (int)this.prevPosZ != (int)this.posZ;
+            boolean flag = (int) this.prevPosX != (int) this.posX || (int) this.prevPosY != (int) this.posY || (int) this.prevPosZ != (int) this.posZ;
 
-            if (flag || this.ticksExisted % 25 == 0)
-            {
-                if (this.worldObj.getBlockState(new BlockPos(this)).getBlock().getMaterial() == Material.lava)
-                {
+            if (flag || this.ticksExisted % 25 == 0) {
+                if (this.worldObj.getBlockState(new BlockPos(this)).getBlock().getMaterial() == Material.lava) {
                     this.motionY = 0.20000000298023224D;
-                    this.motionX = (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F);
-                    this.motionZ = (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F);
+                    this.motionX = (double) ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F);
+                    this.motionZ = (double) ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F);
                     this.playSound("random.fizz", 0.4F, 2.0F + this.rand.nextFloat() * 0.4F);
                 }
 
-                if (!this.worldObj.isRemote)
-                {
+                if (!this.worldObj.isRemote) {
                     this.searchForOtherItemsNearby();
                 }
             }
 
             float f = 0.98F;
 
-            if (this.onGround)
-            {
+            if (this.onGround) {
                 f = this.worldObj.getBlockState(new BlockPos(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.getEntityBoundingBox().minY) - 1, MathHelper.floor_double(this.posZ))).getBlock().slipperiness * 0.98F;
             }
 
-            this.motionX *= (double)f;
+            this.motionX *= (double) f;
             this.motionY *= 0.9800000190734863D;
-            this.motionZ *= (double)f;
+            this.motionZ *= (double) f;
 
-            if (this.onGround)
-            {
+            if (this.onGround) {
                 this.motionY *= -0.5D;
             }
+            // Spigot start - Make the hopper(s) below this item active.
+            // Called each tick on each item entity.
+            if (this.worldObj.spigotConfig.altHopperTicking) {
+                int xi = MathHelper.floor_double(this.getEntityBoundingBox().minX);
+                int yi = MathHelper.floor_double(this.getEntityBoundingBox().minY) - 1;
+                int zi = MathHelper.floor_double(this.getEntityBoundingBox().minZ);
+                int xf = MathHelper.floor_double(this.getEntityBoundingBox().maxX);
+                int yf = MathHelper.floor_double(this.getEntityBoundingBox().maxY) - 1;
+                int zf = MathHelper.floor_double(this.getEntityBoundingBox().maxZ);
+                for (int a = xi; a <= xf; a++) {
+                    for (int c = zi; c <= zf; c++) {
+                        for (int b = yi; b <= yf; b++) {
+                            TileEntity tileEntity = this.worldObj.getTileEntity(new BlockPos(a, b, c));
+                            if (tileEntity instanceof TileEntityHopper) {
+                                ((TileEntityHopper) tileEntity).makeTick();
+                            }
+                        }
+                    }
+                }
+            }
+            // Spigot end
 
+            /* Craftbukkit start - moved up
             if (this.age != -32768)
             {
                 ++this.age;
             }
+            // Craftbukkit end */
 
             this.handleWaterMovement();
 
-            if (!this.worldObj.isRemote && this.age >= 6000)
+            if (!this.worldObj.isRemote && this.age >= worldObj.spigotConfig.itemDespawnRate) // Spigot)
             {
+                // CraftBukkit start - fire ItemDespawnEvent
+                if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
+                    this.age = 0;
+                    return;
+                }
+                // CraftBukkit end
                 this.setDead();
             }
         }
     }
 
-    private void searchForOtherItemsNearby()
-    {
-        Iterator iterator = this.worldObj.getEntitiesWithinAABB(EntityItem.class, this.getEntityBoundingBox().expand(0.5D, 0.0D, 0.5D)).iterator();
+    // Spigot start - copied from above
+    @Override
+    public void inactiveTick() {
+        // CraftBukkit start - Use wall time for pickup and despawn timers
+        int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+        this.delayBeforeCanPickup -= elapsedTicks;
+        this.age += elapsedTicks;
+        this.lastTick = MinecraftServer.currentTick;
+        // CraftBukkit end
 
-        while (iterator.hasNext())
-        {
-            EntityItem entityitem = (EntityItem)iterator.next();
+        if (!this.worldObj.isRemote && this.age >= worldObj.spigotConfig.itemDespawnRate) { // Spigot
+            // CraftBukkit start - fire ItemDespawnEvent
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
+                this.age = 0;
+                return;
+            }
+            // CraftBukkit end
+            this.setDead();
+        }
+    }
+    // Spigot end
+
+    private void searchForOtherItemsNearby() {
+        // Spigot start
+        double radius = worldObj.spigotConfig.itemMerge;
+        Iterator iterator = this.worldObj.getEntitiesWithinAABB(net.minecraft.entity.item.EntityItem.class, this.getEntityBoundingBox().expand(radius, radius, radius)).iterator();
+        // Spigot end
+
+        while (iterator.hasNext()) {
+            EntityItem entityitem = (EntityItem) iterator.next();
             this.combineItems(entityitem);
         }
     }
 
-    private boolean combineItems(EntityItem other)
-    {
-        if (other == this)
-        {
+    private boolean combineItems(EntityItem other) {
+        if (other == this) {
             return false;
-        }
-        else if (other.isEntityAlive() && this.isEntityAlive())
-        {
+        } else if (other.isEntityAlive() && this.isEntityAlive()) {
             ItemStack itemstack = this.getEntityItem();
             ItemStack itemstack1 = other.getEntityItem();
 
-            if (this.delayBeforeCanPickup != 32767 && other.delayBeforeCanPickup != 32767)
-            {
-                if (this.age != -32768 && other.age != -32768)
-                {
-                    if (itemstack1.getItem() != itemstack.getItem())
-                    {
+            if (this.delayBeforeCanPickup != 32767 && other.delayBeforeCanPickup != 32767) {
+                if (this.age != -32768 && other.age != -32768) {
+                    if (itemstack1.getItem() != itemstack.getItem()) {
                         return false;
-                    }
-                    else if (itemstack1.hasTagCompound() ^ itemstack.hasTagCompound())
-                    {
+                    } else if (itemstack1.hasTagCompound() ^ itemstack.hasTagCompound()) {
                         return false;
-                    }
-                    else if (itemstack1.hasTagCompound() && !itemstack1.getTagCompound().equals(itemstack.getTagCompound()))
-                    {
+                    } else if (itemstack1.hasTagCompound() && !itemstack1.getTagCompound().equals(itemstack.getTagCompound())) {
                         return false;
-                    }
-                    else if (itemstack1.getItem() == null)
-                    {
+                    } else if (itemstack1.getItem() == null) {
                         return false;
-                    }
-                    else if (itemstack1.getItem().getHasSubtypes() && itemstack1.getMetadata() != itemstack.getMetadata())
-                    {
+                    } else if (itemstack1.getItem().getHasSubtypes() && itemstack1.getMetadata() != itemstack.getMetadata()) {
                         return false;
-                    }
-                    else if (itemstack1.stackSize < itemstack.stackSize)
-                    {
+                    } else if (itemstack1.stackSize < itemstack.stackSize) {
                         return other.combineItems(this);
-                    }
-                    else if (itemstack1.stackSize + itemstack.stackSize > itemstack1.getMaxStackSize())
-                    {
+                    } else if (itemstack1.stackSize + itemstack.stackSize > itemstack1.getMaxStackSize()) {
                         return false;
-                    }
-                    else
-                    {
-                        itemstack1.stackSize += itemstack.stackSize;
-                        other.delayBeforeCanPickup = Math.max(other.delayBeforeCanPickup, this.delayBeforeCanPickup);
-                        other.age = Math.min(other.age, this.age);
-                        other.setEntityItemStack(itemstack1);
-                        this.setDead();
+                    } else {
+                        // Spigot start
+                        itemstack.stackSize += itemstack1.stackSize;
+                        this.delayBeforeCanPickup = Math.max(other.delayBeforeCanPickup, this.delayBeforeCanPickup);
+                        this.age = Math.min(other.age, this.age);
+                        this.setEntityItemStack(itemstack);
+                        other.setDead();
+                        // Spigot end
                         return true;
                     }
-                }
-                else
-                {
+                } else {
                     return false;
                 }
-            }
-            else
-            {
+            } else {
                 return false;
             }
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
 
-    public void setAgeToCreativeDespawnTime()
-    {
+    public void setAgeToCreativeDespawnTime() {
         this.age = 4800;
     }
 
-    public boolean handleWaterMovement()
-    {
-        if (this.worldObj.handleMaterialAcceleration(this.getEntityBoundingBox(), Material.water, this))
-        {
-            if (!this.inWater && !this.firstUpdate)
-            {
+    public boolean handleWaterMovement() {
+        if (this.worldObj.handleMaterialAcceleration(this.getEntityBoundingBox(), Material.water, this)) {
+            if (!this.inWater && !this.firstUpdate) {
                 this.resetHeight();
             }
 
             this.inWater = true;
-        }
-        else
-        {
+        } else {
             this.inWater = false;
         }
 
         return this.inWater;
     }
 
-    protected void dealFireDamage(int amount)
-    {
-        this.attackEntityFrom(DamageSource.inFire, (float)amount);
+    protected void dealFireDamage(int amount) {
+        this.attackEntityFrom(DamageSource.inFire, (float) amount);
     }
 
-    public boolean attackEntityFrom(DamageSource source, float amount)
-    {
-        if (this.isEntityInvulnerable(source))
-        {
+    public boolean attackEntityFrom(DamageSource source, float amount) {
+        if (this.isEntityInvulnerable(source)) {
             return false;
-        }
-        else if (this.getEntityItem() != null && this.getEntityItem().getItem() == Items.nether_star && source.isExplosion())
-        {
+        } else if (this.getEntityItem() != null && this.getEntityItem().getItem() == Items.nether_star && source.isExplosion()) {
             return false;
-        }
-        else
-        {
+        } else {
+            // CraftBukkit start
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, source, amount)) {
+                return false;
+            }
+            // CraftBukkit end
             this.setBeenAttacked();
-            this.health = (int)((float)this.health - amount);
+            this.health = (int) ((float) this.health - amount);
 
-            if (this.health <= 0)
-            {
+            if (this.health <= 0) {
                 this.setDead();
             }
 
@@ -271,224 +271,205 @@
         }
     }
 
-    public void writeEntityToNBT(NBTTagCompound tagCompound)
-    {
-        tagCompound.setShort("Health", (short)((byte)this.health));
-        tagCompound.setShort("Age", (short)this.age);
-        tagCompound.setShort("PickupDelay", (short)this.delayBeforeCanPickup);
+    public void writeEntityToNBT(NBTTagCompound tagCompound) {
+        tagCompound.setShort("Health", (short) ((byte) this.health));
+        tagCompound.setShort("Age", (short) this.age);
+        tagCompound.setShort("PickupDelay", (short) this.delayBeforeCanPickup);
 
-        if (this.getThrower() != null)
-        {
+        if (this.getThrower() != null) {
             tagCompound.setString("Thrower", this.thrower);
         }
 
-        if (this.getOwner() != null)
-        {
+        if (this.getOwner() != null) {
             tagCompound.setString("Owner", this.owner);
         }
 
-        if (this.getEntityItem() != null)
-        {
+        if (this.getEntityItem() != null) {
             tagCompound.setTag("Item", this.getEntityItem().writeToNBT(new NBTTagCompound()));
         }
     }
 
-    public void readEntityFromNBT(NBTTagCompound tagCompund)
-    {
+    public void readEntityFromNBT(NBTTagCompound tagCompund) {
         this.health = tagCompund.getShort("Health") & 255;
         this.age = tagCompund.getShort("Age");
 
-        if (tagCompund.hasKey("PickupDelay"))
-        {
+        if (tagCompund.hasKey("PickupDelay")) {
             this.delayBeforeCanPickup = tagCompund.getShort("PickupDelay");
         }
 
-        if (tagCompund.hasKey("Owner"))
-        {
+        if (tagCompund.hasKey("Owner")) {
             this.owner = tagCompund.getString("Owner");
         }
 
-        if (tagCompund.hasKey("Thrower"))
-        {
+        if (tagCompund.hasKey("Thrower")) {
             this.thrower = tagCompund.getString("Thrower");
         }
 
         NBTTagCompound nbttagcompound1 = tagCompund.getCompoundTag("Item");
-        this.setEntityItemStack(ItemStack.loadItemStackFromNBT(nbttagcompound1));
-
-        if (this.getEntityItem() == null)
-        {
+        // CraftBukkit start - Handle missing "Item" compounds
+        if (nbttagcompound1 != null) {
+            ItemStack itemstack = ItemStack.loadItemStackFromNBT(nbttagcompound1);
+            if (itemstack != null) {
+                this.setEntityItemStack(itemstack);
+            } else {
+                this.setDead();
+            }
+        } else {
             this.setDead();
         }
+        // CraftBukkit end
+        if (this.getEntityItem() == null) {
+            this.setDead();
+        }
     }
 
-    public void onCollideWithPlayer(EntityPlayer entityIn)
-    {
-        if (!this.worldObj.isRemote)
-        {
+    public void onCollideWithPlayer(EntityPlayer entityIn) {
+        if (!this.worldObj.isRemote) {
             ItemStack itemstack = this.getEntityItem();
             int i = itemstack.stackSize;
 
-            if (this.delayBeforeCanPickup == 0 && (this.owner == null || 6000 - this.age <= 200 || this.owner.equals(entityIn.getName())) && entityIn.inventory.addItemStackToInventory(itemstack))
-            {
-                if (itemstack.getItem() == Item.getItemFromBlock(Blocks.log))
-                {
+            // CraftBukkit start - fire PlayerPickupItemEvent
+            int canHold = entityIn.inventory.canHold(itemstack);
+            int remaining = itemstack.stackSize - canHold;
+
+            if (this.delayBeforeCanPickup <= 0 && canHold > 0) {
+                itemstack.stackSize = canHold;
+                PlayerPickupItemEvent event = new PlayerPickupItemEvent((org.bukkit.entity.Player) entityIn.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
+                // event.setCancelled(!entityhuman.canPickUpLoot); TODO
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+                itemstack.stackSize = canHold + remaining;
+
+                if (event.isCancelled()) {
+                    return;
+                }
+
+                // Possibly < 0; fix here so we do not have to modify code below
+                this.delayBeforeCanPickup = 0;
+            }
+            // CraftBukkit end
+
+            if (this.delayBeforeCanPickup == 0 && (this.owner == null || 6000 - this.age <= 200 || this.owner.equals(entityIn.getName())) && entityIn.inventory.addItemStackToInventory(itemstack)) {
+                if (itemstack.getItem() == Item.getItemFromBlock(Blocks.log)) {
                     entityIn.triggerAchievement(AchievementList.mineWood);
                 }
 
-                if (itemstack.getItem() == Item.getItemFromBlock(Blocks.log2))
-                {
+                if (itemstack.getItem() == Item.getItemFromBlock(Blocks.log2)) {
                     entityIn.triggerAchievement(AchievementList.mineWood);
                 }
 
-                if (itemstack.getItem() == Items.leather)
-                {
+                if (itemstack.getItem() == Items.leather) {
                     entityIn.triggerAchievement(AchievementList.killCow);
                 }
 
-                if (itemstack.getItem() == Items.diamond)
-                {
+                if (itemstack.getItem() == Items.diamond) {
                     entityIn.triggerAchievement(AchievementList.diamonds);
                 }
 
-                if (itemstack.getItem() == Items.blaze_rod)
-                {
+                if (itemstack.getItem() == Items.blaze_rod) {
                     entityIn.triggerAchievement(AchievementList.blazeRod);
                 }
 
-                if (itemstack.getItem() == Items.diamond && this.getThrower() != null)
-                {
+                if (itemstack.getItem() == Items.diamond && this.getThrower() != null) {
                     EntityPlayer entityplayer1 = this.worldObj.getPlayerEntityByName(this.getThrower());
 
-                    if (entityplayer1 != null && entityplayer1 != entityIn)
-                    {
+                    if (entityplayer1 != null && entityplayer1 != entityIn) {
                         entityplayer1.triggerAchievement(AchievementList.diamondsToYou);
                     }
                 }
 
-                if (!this.isSilent())
-                {
+                if (!this.isSilent()) {
                     this.worldObj.playSoundAtEntity(entityIn, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
                 }
 
                 entityIn.onItemPickup(this, i);
 
-                if (itemstack.stackSize <= 0)
-                {
+                if (itemstack.stackSize <= 0) {
                     this.setDead();
                 }
             }
         }
     }
 
-    public String getName()
-    {
+    public String getName() {
         return this.hasCustomName() ? this.getCustomNameTag() : StatCollector.translateToLocal("item." + this.getEntityItem().getUnlocalizedName());
     }
 
-    public boolean canAttackWithItem()
-    {
+    public boolean canAttackWithItem() {
         return false;
     }
 
-    public void travelToDimension(int dimensionId)
-    {
+    public void travelToDimension(int dimensionId) {
         super.travelToDimension(dimensionId);
 
-        if (!this.worldObj.isRemote)
-        {
+        if (!this.worldObj.isRemote) {
             this.searchForOtherItemsNearby();
         }
     }
 
-    public ItemStack getEntityItem()
-    {
+    public ItemStack getEntityItem() {
         ItemStack itemstack = this.getDataWatcher().getWatchableObjectItemStack(10);
 
-        if (itemstack == null)
-        {
-            if (this.worldObj != null)
-            {
+        if (itemstack == null) {
+            if (this.worldObj != null) {
                 logger.error("Item entity " + this.getEntityId() + " has no item?!");
             }
 
             return new ItemStack(Blocks.stone);
-        }
-        else
-        {
+        } else {
             return itemstack;
         }
     }
 
-    public void setEntityItemStack(ItemStack stack)
-    {
+    public void setEntityItemStack(ItemStack stack) {
         this.getDataWatcher().updateObject(10, stack);
         this.getDataWatcher().setObjectWatched(10);
     }
 
-    public String getOwner()
-    {
+    public String getOwner() {
         return this.owner;
     }
 
-    public void setOwner(String owner)
-    {
+    public void setOwner(String owner) {
         this.owner = owner;
     }
 
-    public String getThrower()
-    {
+    public String getThrower() {
         return this.thrower;
     }
 
-    public void setThrower(String thrower)
-    {
+    public void setThrower(String thrower) {
         this.thrower = thrower;
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getAge()
-    {
-        return this.age;
-    }
-
-    public void setDefaultPickupDelay()
-    {
+    public void setDefaultPickupDelay() {
         this.delayBeforeCanPickup = 10;
     }
 
-    public void setNoPickupDelay()
-    {
+    public void setNoPickupDelay() {
         this.delayBeforeCanPickup = 0;
     }
 
-    public void setInfinitePickupDelay()
-    {
+    public void setInfinitePickupDelay() {
         this.delayBeforeCanPickup = 32767;
     }
 
-    public void setPickupDelay(int ticks)
-    {
+    public void setPickupDelay(int ticks) {
         this.delayBeforeCanPickup = ticks;
     }
 
-    public boolean cannotPickup()
-    {
+    public boolean cannotPickup() {
         return this.delayBeforeCanPickup > 0;
     }
 
-    public void setNoDespawn()
-    {
+    public void setNoDespawn() {
         this.age = -6000;
     }
 
-    public void func_174870_v()
-    {
+    public void func_174870_v() {
         this.setInfinitePickupDelay();
         this.age = 5999;
     }
-}
+}
