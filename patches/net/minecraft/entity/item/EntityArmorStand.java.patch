--- decompiled\net\minecraft\entity\item\EntityArmorStand.java
+++ src\main\java\net\minecraft\entity\item\EntityArmorStand.java
@@ -1,8 +1,9 @@
 package net.minecraft.entity.item;
 
 import java.util.List;
+
 import net.minecraft.block.Block;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLiving;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.player.EntityPlayer;
@@ -20,31 +21,37 @@
 import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.util.Rotations;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import org.bukkit.craftbukkit.CraftEquipmentSlot;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.ArmorStand;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerArmorStandManipulateEvent;
+import org.bukkit.inventory.EquipmentSlot;
+
 public class EntityArmorStand extends EntityLivingBase
 {
+
     private static final Rotations DEFAULT_HEAD_ROTATION = new Rotations(0.0F, 0.0F, 0.0F);
     private static final Rotations DEFAULT_BODY_ROTATION = new Rotations(0.0F, 0.0F, 0.0F);
     private static final Rotations DEFAULT_LEFTARM_ROTATION = new Rotations(-10.0F, 0.0F, -10.0F);
     private static final Rotations DEFAULT_RIGHTARM_ROTATION = new Rotations(-15.0F, 0.0F, 10.0F);
     private static final Rotations DEFAULT_LEFTLEG_ROTATION = new Rotations(-1.0F, 0.0F, -1.0F);
     private static final Rotations DEFAULT_RIGHTLEG_ROTATION = new Rotations(1.0F, 0.0F, 1.0F);
     private final ItemStack[] contents;
     private boolean canInteract;
     private long punchCooldown;
     private int disabledSlots;
-    private Rotations headRotation;
-    private Rotations bodyRotation;
-    private Rotations leftArmRotation;
-    private Rotations rightArmRotation;
-    private Rotations leftLegRotation;
-    private Rotations rightLegRotation;
+    public Rotations headRotation; // SpigotMCP -- Apply access transformation
+    public Rotations bodyRotation; // SpigotMCP -- Apply access transformation
+    public Rotations leftArmRotation; // SpigotMCP -- Apply access transformation
+    public Rotations rightArmRotation; // SpigotMCP -- Apply access transformation
+    public Rotations leftLegRotation; // SpigotMCP -- Apply access transformation
+    public Rotations rightLegRotation; // SpigotMCP -- Apply access transformation
     private static final String __OBFID = "CL_00002228";
 
     public EntityArmorStand(World worldIn)
     {
         super(worldIn);
@@ -91,16 +98,10 @@
     public ItemStack getEquipmentInSlot(int slotIn)
     {
         return this.contents[slotIn];
     }
 
-    @SideOnly(Side.CLIENT)
-    public ItemStack getCurrentArmor(int slotIn)
-    {
-        return this.contents[slotIn + 1];
-    }
-
     public void setCurrentItemOrArmor(int slotIn, ItemStack stack)
     {
         this.contents[slotIn] = stack;
     }
 
@@ -305,11 +306,13 @@
     public boolean canBePushed()
     {
         return false;
     }
 
-    protected void collideWithEntity(Entity p_82167_1_) {}
+    protected void collideWithEntity(Entity p_82167_1_)
+    {
+    }
 
     protected void collideWithNearbyEntities()
     {
         List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.getEntityBoundingBox());
 
@@ -437,11 +440,26 @@
             if (itemstack != null || (this.disabledSlots & 1 << p_175422_2_ + 16) == 0)
             {
                 int j = p_175422_1_.inventory.currentItem;
                 ItemStack itemstack1 = p_175422_1_.inventory.getStackInSlot(j);
                 ItemStack itemstack2;
+                // CraftBukkit start
+                org.bukkit.inventory.ItemStack armorStandItem = CraftItemStack.asCraftMirror(itemstack);
+                org.bukkit.inventory.ItemStack playerHeldItem = CraftItemStack.asCraftMirror(itemstack1);
+                Player player = (Player)p_175422_1_.getBukkitEntity();
+                ArmorStand self = (ArmorStand)this.getBukkitEntity();
+                EquipmentSlot slot = CraftEquipmentSlot.getSlot(p_175422_2_);
+                PlayerArmorStandManipulateEvent armorStandManipulateEvent = new PlayerArmorStandManipulateEvent(player, self, playerHeldItem, armorStandItem, slot);
+                this.worldObj.getServer().getPluginManager().callEvent(armorStandManipulateEvent);
 
+                if (armorStandManipulateEvent.isCancelled())
+                {
+                    return;
+                }
+
+                // CraftBukkit end
+
                 if (p_175422_1_.capabilities.isCreativeMode && (itemstack == null || itemstack.getItem() == Item.getItemFromBlock(Blocks.air)) && itemstack1 != null)
                 {
                     itemstack2 = itemstack1.copy();
                     itemstack2.stackSize = 1;
                     this.setCurrentItemOrArmor(p_175422_2_, itemstack2);
@@ -465,10 +483,17 @@
         }
     }
 
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
+        // CraftBukkit start
+        if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, source, amount))
+        {
+            return false;
+        }
+
+        // CraftBukkit end
         if (!this.worldObj.isRemote && !this.canInteract)
         {
             if (DamageSource.outOfWorld.equals(source))
             {
                 this.setDead();
@@ -690,11 +715,11 @@
     public boolean func_180427_aV()
     {
         return this.isInvisible();
     }
 
-    private void setSmall(boolean p_175420_1_)
+    public void setSmall(boolean p_175420_1_)   // SpigotMCP -- Apply access transformation
     {
         byte b0 = this.dataWatcher.getWatchableObjectByte(10);
 
         if (p_175420_1_)
         {
@@ -711,11 +736,11 @@
     public boolean isSmall()
     {
         return (this.dataWatcher.getWatchableObjectByte(10) & 1) != 0;
     }
 
-    private void setNoGravity(boolean p_175425_1_)
+    public void setNoGravity(boolean p_175425_1_)   // SpigotMCP -- Apply acceess transformation
     {
         byte b0 = this.dataWatcher.getWatchableObjectByte(10);
 
         if (p_175425_1_)
         {
@@ -725,18 +750,19 @@
         {
             b0 &= -3;
         }
 
         this.dataWatcher.updateObject(10, Byte.valueOf(b0));
+        this.noClip = p_175425_1_; // CraftBukkit. // PAIL: Rename (noclip)
     }
 
     public boolean hasNoGravity()
     {
         return (this.dataWatcher.getWatchableObjectByte(10) & 2) != 0;
     }
 
-    private void setShowArms(boolean p_175413_1_)
+    public void setShowArms(boolean p_175413_1_)   // SpigotMCP -- Apply acceess transformation
     {
         byte b0 = this.dataWatcher.getWatchableObjectByte(10);
 
         if (p_175413_1_)
         {
@@ -753,11 +779,11 @@
     public boolean getShowArms()
     {
         return (this.dataWatcher.getWatchableObjectByte(10) & 4) != 0;
     }
 
-    private void setNoBasePlate(boolean p_175426_1_)
+    public void setNoBasePlate(boolean p_175426_1_)   // SpigotMCP -- Apply acceess transformation
     {
         byte b0 = this.dataWatcher.getWatchableObjectByte(10);
 
         if (p_175426_1_)
         {
@@ -820,29 +846,6 @@
     public Rotations getBodyRotation()
     {
         return this.bodyRotation;
     }
 
-    @SideOnly(Side.CLIENT)
-    public Rotations getLeftArmRotation()
-    {
-        return this.leftArmRotation;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public Rotations getRightArmRotation()
-    {
-        return this.rightArmRotation;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public Rotations getLeftLegRotation()
-    {
-        return this.leftLegRotation;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public Rotations getRightLegRotation()
-    {
-        return this.rightLegRotation;
-    }
 }
