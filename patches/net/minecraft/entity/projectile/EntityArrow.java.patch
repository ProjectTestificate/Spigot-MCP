--- decompiled\net\minecraft\entity\projectile\EntityArrow.java
+++ src\main\java\net\minecraft\entity\projectile\EntityArrow.java
@@ -1,15 +1,17 @@
 package net.minecraft.entity.projectile;
 
 import java.util.List;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.enchantment.EnchantmentHelper;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.IProjectile;
+import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.monster.EntityEnderman;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Items;
 import net.minecraft.item.ItemStack;
@@ -22,30 +24,47 @@
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import org.bukkit.craftbukkit.entity.CraftItem;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.player.PlayerPickupItemEvent;
+
 public class EntityArrow extends Entity implements IProjectile
 {
+
     private int xTile = -1;
     private int yTile = -1;
     private int zTile = -1;
     private Block inTile;
     private int inData;
-    private boolean inGround;
+    public boolean inGround;
     public int canBePickedUp;
     public int arrowShake;
     public Entity shootingEntity;
     private int ticksInGround;
     private int ticksInAir;
     private double damage = 2.0D;
-    private int knockbackStrength;
+    public int knockbackStrength; // SpigotMCP -- Apply access transformation
     private static final String __OBFID = "CL_00001715";
 
+    // Spigot Start
+    @Override
+    public void inactiveTick()
+    {
+        if (this.inGround)
+        {
+            this.ticksInGround += 1; // Despawn counter. First int after shooter
+        }
+
+        super.inactiveTick();
+    }
+    // Spigot End
+
     public EntityArrow(World worldIn)
     {
         super(worldIn);
         this.renderDistanceWeight = 10.0D;
         this.setSize(0.5F, 0.5F);
@@ -62,10 +81,11 @@
     public EntityArrow(World worldIn, EntityLivingBase shooter, EntityLivingBase p_i1755_3_, float p_i1755_4_, float p_i1755_5_)
     {
         super(worldIn);
         this.renderDistanceWeight = 10.0D;
         this.shootingEntity = shooter;
+        this.projectileSource = (LivingEntity)shooter.getBukkitEntity(); // CraftBukkit
 
         if (shooter instanceof EntityPlayer)
         {
             this.canBePickedUp = 1;
         }
@@ -91,10 +111,11 @@
     public EntityArrow(World worldIn, EntityLivingBase shooter, float p_i1756_3_)
     {
         super(worldIn);
         this.renderDistanceWeight = 10.0D;
         this.shootingEntity = shooter;
+        this.projectileSource = (LivingEntity)shooter.getBukkitEntity(); // CraftBukkit
 
         if (shooter instanceof EntityPlayer)
         {
             this.canBePickedUp = 1;
         }
@@ -135,36 +156,10 @@
         this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(x, z) * 180.0D / Math.PI);
         this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(y, (double)f3) * 180.0D / Math.PI);
         this.ticksInGround = 0;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void func_180426_a(double p_180426_1_, double p_180426_3_, double p_180426_5_, float p_180426_7_, float p_180426_8_, int p_180426_9_, boolean p_180426_10_)
-    {
-        this.setPosition(p_180426_1_, p_180426_3_, p_180426_5_);
-        this.setRotation(p_180426_7_, p_180426_8_);
-    }
-
-    @SideOnly(Side.CLIENT)
-    public void setVelocity(double x, double y, double z)
-    {
-        this.motionX = x;
-        this.motionY = y;
-        this.motionZ = z;
-
-        if (this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F)
-        {
-            float f = MathHelper.sqrt_double(x * x + z * z);
-            this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(x, z) * 180.0D / Math.PI);
-            this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(y, (double)f) * 180.0D / Math.PI);
-            this.prevRotationPitch = this.rotationPitch;
-            this.prevRotationYaw = this.rotationYaw;
-            this.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
-            this.ticksInGround = 0;
-        }
-    }
-
     public void onUpdate()
     {
         super.onUpdate();
 
         if (this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F)
@@ -200,11 +195,11 @@
 
             if (block == this.inTile && j == this.inData)
             {
                 ++this.ticksInGround;
 
-                if (this.ticksInGround >= 1200)
+                if (this.ticksInGround >= worldObj.spigotConfig.arrowDespawnRate) // Spigot - First int after shooter
                 {
                     this.setDead();
                 }
             }
             else
@@ -247,11 +242,11 @@
                     AxisAlignedBB axisalignedbb1 = entity1.getEntityBoundingBox().expand((double)f1, (double)f1, (double)f1);
                     MovingObjectPosition movingobjectposition1 = axisalignedbb1.calculateIntercept(vec31, vec3);
 
                     if (movingobjectposition1 != null)
                     {
-                        double d1 = vec31.distanceTo(movingobjectposition1.hitVec);
+                        double d1 = vec3.squareDistanceTo(movingobjectposition1.hitVec); // CraftBukkit
 
                         if (d1 < d0 || d0 == 0.0D)
                         {
                             entity = entity1;
                             d0 = d1;
@@ -279,10 +274,12 @@
             float f3;
             float f4;
 
             if (movingobjectposition != null)
             {
+                org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileHitEvent(this); // CraftBukkit - Call event
+
                 if (movingobjectposition.entityHit != null)
                 {
                     f2 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
                     int k = MathHelper.ceiling_double_int((double)f2 * this.damage);
 
@@ -300,17 +297,28 @@
                     else
                     {
                         damagesource = DamageSource.causeArrowDamage(this, this.shootingEntity);
                     }
 
-                    if (this.isBurning() && !(movingobjectposition.entityHit instanceof EntityEnderman))
-                    {
-                        movingobjectposition.entityHit.setFire(5);
-                    }
-
+                    // CraftBukkit start - Moved damage call
                     if (movingobjectposition.entityHit.attackEntityFrom(damagesource, (float)k))
                     {
+                        if (this.isBurning() && !(movingobjectposition.entityHit instanceof EntityEnderman) && (!(movingobjectposition.entityHit instanceof EntityPlayer) || !(this.shootingEntity instanceof EntityPlayer) || this.worldObj.pvpMode))  // CraftBukkit - abide by pvp setting if destination is a player
+                        {
+                            EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 5);
+                            org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
+
+                            if (!combustEvent.isCancelled())
+                            {
+                                movingobjectposition.entityHit.setFire(combustEvent.getDuration());
+                            }
+
+                            // CraftBukkit end
+                        }
+
+                        // if (movingobjectposition.entityHit.attackEntityFrom(damagesource, (float)k)) // CraftBukkit - moved up
+                        // { // SpigotMCP -- remove '{'
                         if (movingobjectposition.entityHit instanceof EntityLivingBase)
                         {
                             EntityLivingBase entitylivingbase = (EntityLivingBase)movingobjectposition.entityHit;
 
                             if (!this.worldObj.isRemote)
@@ -501,10 +509,27 @@
 
     public void onCollideWithPlayer(EntityPlayer entityIn)
     {
         if (!this.worldObj.isRemote && this.inGround && this.arrowShake <= 0)
         {
+            // CraftBukkit start
+            ItemStack itemstack = new ItemStack(Items.arrow);
+
+            if (this.canBePickedUp == 1 && entityIn.inventory.canHold(itemstack) > 0)
+            {
+                EntityItem item = new EntityItem(this.worldObj, this.posX, this.posY, this.posZ, itemstack);
+                PlayerPickupItemEvent event = new PlayerPickupItemEvent((org.bukkit.entity.Player)entityIn.getBukkitEntity(), new CraftItem(this.worldObj.getServer(), this, item), 0);
+                // event.setCancelled(!entityhuman.canPickUpLoot); TODO
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled())
+                {
+                    return;
+                }
+            }
+
+            // CraftBukkit end
             boolean flag = this.canBePickedUp == 1 || this.canBePickedUp == 2 && entityIn.capabilities.isCreativeMode;
 
             if (this.canBePickedUp == 1 && !entityIn.inventory.addItemStackToInventory(new ItemStack(Items.arrow, 1)))
             {
                 flag = false;
@@ -561,6 +586,13 @@
     public boolean getIsCritical()
     {
         byte b0 = this.dataWatcher.getWatchableObjectByte(16);
         return (b0 & 1) != 0;
     }
+
+    // CraftBukkit start
+    public boolean isInGround()
+    {
+        return inGround;
+    }
+    // CraftBukkit end
 }
