--- decompiled\net\minecraft\entity\projectile\EntityArrow.java
+++ src\main\java\net\minecraft\entity\projectile\EntityArrow.java
@@ -1,15 +1,17 @@
 package net.minecraft.entity.projectile;
 
 import java.util.List;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.enchantment.EnchantmentHelper;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.IProjectile;
+import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.monster.EntityEnderman;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Items;
 import net.minecraft.item.ItemStack;
@@ -22,545 +24,487 @@
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class EntityArrow extends Entity implements IProjectile
-{
+import org.bukkit.craftbukkit.entity.CraftItem;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.player.PlayerPickupItemEvent;
+
+public class EntityArrow extends Entity implements IProjectile {
+
     private int xTile = -1;
     private int yTile = -1;
     private int zTile = -1;
     private Block inTile;
     private int inData;
-    private boolean inGround;
+    public boolean inGround;
     public int canBePickedUp;
     public int arrowShake;
     public Entity shootingEntity;
     private int ticksInGround;
     private int ticksInAir;
     private double damage = 2.0D;
-    private int knockbackStrength;
+    public int knockbackStrength; // SpigotMCP -- Apply access transformation
     private static final String __OBFID = "CL_00001715";
 
-    public EntityArrow(World worldIn)
-    {
+    // Spigot Start
+    @Override
+    public void inactiveTick() {
+        if (this.inGround) {
+            this.ticksInGround += 1; // Despawn counter. First int after shooter
+        }
+        super.inactiveTick();
+    }
+    // Spigot End
+
+    public EntityArrow(World worldIn) {
         super(worldIn);
         this.renderDistanceWeight = 10.0D;
         this.setSize(0.5F, 0.5F);
     }
 
-    public EntityArrow(World worldIn, double x, double y, double z)
-    {
+    public EntityArrow(World worldIn, double x, double y, double z) {
         super(worldIn);
         this.renderDistanceWeight = 10.0D;
         this.setSize(0.5F, 0.5F);
         this.setPosition(x, y, z);
     }
 
-    public EntityArrow(World worldIn, EntityLivingBase shooter, EntityLivingBase p_i1755_3_, float p_i1755_4_, float p_i1755_5_)
-    {
+    public EntityArrow(World worldIn, EntityLivingBase shooter, EntityLivingBase p_i1755_3_, float p_i1755_4_, float p_i1755_5_) {
         super(worldIn);
         this.renderDistanceWeight = 10.0D;
         this.shootingEntity = shooter;
+        this.projectileSource = (LivingEntity) shooter.getBukkitEntity(); // CraftBukkit
 
-        if (shooter instanceof EntityPlayer)
-        {
+        if (shooter instanceof EntityPlayer) {
             this.canBePickedUp = 1;
         }
 
-        this.posY = shooter.posY + (double)shooter.getEyeHeight() - 0.10000000149011612D;
+        this.posY = shooter.posY + (double) shooter.getEyeHeight() - 0.10000000149011612D;
         double d0 = p_i1755_3_.posX - shooter.posX;
-        double d1 = p_i1755_3_.getEntityBoundingBox().minY + (double)(p_i1755_3_.height / 3.0F) - this.posY;
+        double d1 = p_i1755_3_.getEntityBoundingBox().minY + (double) (p_i1755_3_.height / 3.0F) - this.posY;
         double d2 = p_i1755_3_.posZ - shooter.posZ;
-        double d3 = (double)MathHelper.sqrt_double(d0 * d0 + d2 * d2);
+        double d3 = (double) MathHelper.sqrt_double(d0 * d0 + d2 * d2);
 
-        if (d3 >= 1.0E-7D)
-        {
-            float f2 = (float)(Math.atan2(d2, d0) * 180.0D / Math.PI) - 90.0F;
-            float f3 = (float)(-(Math.atan2(d1, d3) * 180.0D / Math.PI));
+        if (d3 >= 1.0E-7D) {
+            float f2 = (float) (Math.atan2(d2, d0) * 180.0D / Math.PI) - 90.0F;
+            float f3 = (float) (-(Math.atan2(d1, d3) * 180.0D / Math.PI));
             double d4 = d0 / d3;
             double d5 = d2 / d3;
             this.setLocationAndAngles(shooter.posX + d4, this.posY, shooter.posZ + d5, f2, f3);
-            float f4 = (float)(d3 * 0.20000000298023224D);
-            this.setThrowableHeading(d0, d1 + (double)f4, d2, p_i1755_4_, p_i1755_5_);
+            float f4 = (float) (d3 * 0.20000000298023224D);
+            this.setThrowableHeading(d0, d1 + (double) f4, d2, p_i1755_4_, p_i1755_5_);
         }
     }
 
-    public EntityArrow(World worldIn, EntityLivingBase shooter, float p_i1756_3_)
-    {
+    public EntityArrow(World worldIn, EntityLivingBase shooter, float p_i1756_3_) {
         super(worldIn);
         this.renderDistanceWeight = 10.0D;
         this.shootingEntity = shooter;
+        this.projectileSource = (LivingEntity) shooter.getBukkitEntity(); // CraftBukkit
 
-        if (shooter instanceof EntityPlayer)
-        {
+        if (shooter instanceof EntityPlayer) {
             this.canBePickedUp = 1;
         }
 
         this.setSize(0.5F, 0.5F);
-        this.setLocationAndAngles(shooter.posX, shooter.posY + (double)shooter.getEyeHeight(), shooter.posZ, shooter.rotationYaw, shooter.rotationPitch);
-        this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
+        this.setLocationAndAngles(shooter.posX, shooter.posY + (double) shooter.getEyeHeight(), shooter.posZ, shooter.rotationYaw, shooter.rotationPitch);
+        this.posX -= (double) (MathHelper.cos(this.rotationYaw / 180.0F * (float) Math.PI) * 0.16F);
         this.posY -= 0.10000000149011612D;
-        this.posZ -= (double)(MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
+        this.posZ -= (double) (MathHelper.sin(this.rotationYaw / 180.0F * (float) Math.PI) * 0.16F);
         this.setPosition(this.posX, this.posY, this.posZ);
-        this.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI));
-        this.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI));
-        this.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI));
+        this.motionX = (double) (-MathHelper.sin(this.rotationYaw / 180.0F * (float) Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float) Math.PI));
+        this.motionZ = (double) (MathHelper.cos(this.rotationYaw / 180.0F * (float) Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float) Math.PI));
+        this.motionY = (double) (-MathHelper.sin(this.rotationPitch / 180.0F * (float) Math.PI));
         this.setThrowableHeading(this.motionX, this.motionY, this.motionZ, p_i1756_3_ * 1.5F, 1.0F);
     }
 
-    protected void entityInit()
-    {
-        this.dataWatcher.addObject(16, Byte.valueOf((byte)0));
+    protected void entityInit() {
+        this.dataWatcher.addObject(16, Byte.valueOf((byte) 0));
     }
 
-    public void setThrowableHeading(double x, double y, double z, float velocity, float inaccuracy)
-    {
+    public void setThrowableHeading(double x, double y, double z, float velocity, float inaccuracy) {
         float f2 = MathHelper.sqrt_double(x * x + y * y + z * z);
-        x /= (double)f2;
-        y /= (double)f2;
-        z /= (double)f2;
-        x += this.rand.nextGaussian() * (double)(this.rand.nextBoolean() ? -1 : 1) * 0.007499999832361937D * (double)inaccuracy;
-        y += this.rand.nextGaussian() * (double)(this.rand.nextBoolean() ? -1 : 1) * 0.007499999832361937D * (double)inaccuracy;
-        z += this.rand.nextGaussian() * (double)(this.rand.nextBoolean() ? -1 : 1) * 0.007499999832361937D * (double)inaccuracy;
-        x *= (double)velocity;
-        y *= (double)velocity;
-        z *= (double)velocity;
+        x /= (double) f2;
+        y /= (double) f2;
+        z /= (double) f2;
+        x += this.rand.nextGaussian() * (double) (this.rand.nextBoolean() ? -1 : 1) * 0.007499999832361937D * (double) inaccuracy;
+        y += this.rand.nextGaussian() * (double) (this.rand.nextBoolean() ? -1 : 1) * 0.007499999832361937D * (double) inaccuracy;
+        z += this.rand.nextGaussian() * (double) (this.rand.nextBoolean() ? -1 : 1) * 0.007499999832361937D * (double) inaccuracy;
+        x *= (double) velocity;
+        y *= (double) velocity;
+        z *= (double) velocity;
         this.motionX = x;
         this.motionY = y;
         this.motionZ = z;
         float f3 = MathHelper.sqrt_double(x * x + z * z);
-        this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(x, z) * 180.0D / Math.PI);
-        this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(y, (double)f3) * 180.0D / Math.PI);
+        this.prevRotationYaw = this.rotationYaw = (float) (Math.atan2(x, z) * 180.0D / Math.PI);
+        this.prevRotationPitch = this.rotationPitch = (float) (Math.atan2(y, (double) f3) * 180.0D / Math.PI);
         this.ticksInGround = 0;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void func_180426_a(double p_180426_1_, double p_180426_3_, double p_180426_5_, float p_180426_7_, float p_180426_8_, int p_180426_9_, boolean p_180426_10_)
-    {
-        this.setPosition(p_180426_1_, p_180426_3_, p_180426_5_);
-        this.setRotation(p_180426_7_, p_180426_8_);
-    }
-
-    @SideOnly(Side.CLIENT)
-    public void setVelocity(double x, double y, double z)
-    {
-        this.motionX = x;
-        this.motionY = y;
-        this.motionZ = z;
-
-        if (this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F)
-        {
-            float f = MathHelper.sqrt_double(x * x + z * z);
-            this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(x, z) * 180.0D / Math.PI);
-            this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(y, (double)f) * 180.0D / Math.PI);
-            this.prevRotationPitch = this.rotationPitch;
-            this.prevRotationYaw = this.rotationYaw;
-            this.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
-            this.ticksInGround = 0;
-        }
-    }
-
-    public void onUpdate()
-    {
+    public void onUpdate() {
         super.onUpdate();
 
-        if (this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F)
-        {
+        if (this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F) {
             float f = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-            this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / Math.PI);
-            this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(this.motionY, (double)f) * 180.0D / Math.PI);
+            this.prevRotationYaw = this.rotationYaw = (float) (Math.atan2(this.motionX, this.motionZ) * 180.0D / Math.PI);
+            this.prevRotationPitch = this.rotationPitch = (float) (Math.atan2(this.motionY, (double) f) * 180.0D / Math.PI);
         }
 
         BlockPos blockpos = new BlockPos(this.xTile, this.yTile, this.zTile);
         IBlockState iblockstate = this.worldObj.getBlockState(blockpos);
         Block block = iblockstate.getBlock();
 
-        if (block.getMaterial() != Material.air)
-        {
+        if (block.getMaterial() != Material.air) {
             block.setBlockBoundsBasedOnState(this.worldObj, blockpos);
             AxisAlignedBB axisalignedbb = block.getCollisionBoundingBox(this.worldObj, blockpos, iblockstate);
 
-            if (axisalignedbb != null && axisalignedbb.isVecInside(new Vec3(this.posX, this.posY, this.posZ)))
-            {
+            if (axisalignedbb != null && axisalignedbb.isVecInside(new Vec3(this.posX, this.posY, this.posZ))) {
                 this.inGround = true;
             }
         }
 
-        if (this.arrowShake > 0)
-        {
+        if (this.arrowShake > 0) {
             --this.arrowShake;
         }
 
-        if (this.inGround)
-        {
+        if (this.inGround) {
             int j = block.getMetaFromState(iblockstate);
 
-            if (block == this.inTile && j == this.inData)
-            {
+            if (block == this.inTile && j == this.inData) {
                 ++this.ticksInGround;
 
-                if (this.ticksInGround >= 1200)
+                if (this.ticksInGround >= worldObj.spigotConfig.arrowDespawnRate) // Spigot - First int after shooter
                 {
                     this.setDead();
                 }
-            }
-            else
-            {
+            } else {
                 this.inGround = false;
-                this.motionX *= (double)(this.rand.nextFloat() * 0.2F);
-                this.motionY *= (double)(this.rand.nextFloat() * 0.2F);
-                this.motionZ *= (double)(this.rand.nextFloat() * 0.2F);
+                this.motionX *= (double) (this.rand.nextFloat() * 0.2F);
+                this.motionY *= (double) (this.rand.nextFloat() * 0.2F);
+                this.motionZ *= (double) (this.rand.nextFloat() * 0.2F);
                 this.ticksInGround = 0;
                 this.ticksInAir = 0;
             }
-        }
-        else
-        {
+        } else {
             ++this.ticksInAir;
             Vec3 vec31 = new Vec3(this.posX, this.posY, this.posZ);
             Vec3 vec3 = new Vec3(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
             MovingObjectPosition movingobjectposition = this.worldObj.rayTraceBlocks(vec31, vec3, false, true, false);
             vec31 = new Vec3(this.posX, this.posY, this.posZ);
             vec3 = new Vec3(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
 
-            if (movingobjectposition != null)
-            {
+            if (movingobjectposition != null) {
                 vec3 = new Vec3(movingobjectposition.hitVec.xCoord, movingobjectposition.hitVec.yCoord, movingobjectposition.hitVec.zCoord);
             }
 
             Entity entity = null;
             List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.getEntityBoundingBox().addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
             double d0 = 0.0D;
             int i;
             float f1;
 
-            for (i = 0; i < list.size(); ++i)
-            {
-                Entity entity1 = (Entity)list.get(i);
+            for (i = 0; i < list.size(); ++i) {
+                Entity entity1 = (Entity) list.get(i);
 
-                if (entity1.canBeCollidedWith() && (entity1 != this.shootingEntity || this.ticksInAir >= 5))
-                {
+                if (entity1.canBeCollidedWith() && (entity1 != this.shootingEntity || this.ticksInAir >= 5)) {
                     f1 = 0.3F;
-                    AxisAlignedBB axisalignedbb1 = entity1.getEntityBoundingBox().expand((double)f1, (double)f1, (double)f1);
+                    AxisAlignedBB axisalignedbb1 = entity1.getEntityBoundingBox().expand((double) f1, (double) f1, (double) f1);
                     MovingObjectPosition movingobjectposition1 = axisalignedbb1.calculateIntercept(vec31, vec3);
 
-                    if (movingobjectposition1 != null)
-                    {
-                        double d1 = vec31.distanceTo(movingobjectposition1.hitVec);
+                    if (movingobjectposition1 != null) {
+                        double d1 = vec3.squareDistanceTo(movingobjectposition1.hitVec); // CraftBukkit
 
-                        if (d1 < d0 || d0 == 0.0D)
-                        {
+                        if (d1 < d0 || d0 == 0.0D) {
                             entity = entity1;
                             d0 = d1;
                         }
                     }
                 }
             }
 
-            if (entity != null)
-            {
+            if (entity != null) {
                 movingobjectposition = new MovingObjectPosition(entity);
             }
 
-            if (movingobjectposition != null && movingobjectposition.entityHit != null && movingobjectposition.entityHit instanceof EntityPlayer)
-            {
-                EntityPlayer entityplayer = (EntityPlayer)movingobjectposition.entityHit;
+            if (movingobjectposition != null && movingobjectposition.entityHit != null && movingobjectposition.entityHit instanceof EntityPlayer) {
+                EntityPlayer entityplayer = (EntityPlayer) movingobjectposition.entityHit;
 
-                if (entityplayer.capabilities.disableDamage || this.shootingEntity instanceof EntityPlayer && !((EntityPlayer)this.shootingEntity).canAttackPlayer(entityplayer))
-                {
+                if (entityplayer.capabilities.disableDamage || this.shootingEntity instanceof EntityPlayer && !((EntityPlayer) this.shootingEntity).canAttackPlayer(entityplayer)) {
                     movingobjectposition = null;
                 }
             }
 
             float f2;
             float f3;
             float f4;
 
-            if (movingobjectposition != null)
-            {
-                if (movingobjectposition.entityHit != null)
-                {
+            if (movingobjectposition != null) {
+                org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileHitEvent(this); // CraftBukkit - Call event
+
+                if (movingobjectposition.entityHit != null) {
                     f2 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
-                    int k = MathHelper.ceiling_double_int((double)f2 * this.damage);
+                    int k = MathHelper.ceiling_double_int((double) f2 * this.damage);
 
-                    if (this.getIsCritical())
-                    {
+                    if (this.getIsCritical()) {
                         k += this.rand.nextInt(k / 2 + 2);
                     }
 
                     DamageSource damagesource;
 
-                    if (this.shootingEntity == null)
-                    {
+                    if (this.shootingEntity == null) {
                         damagesource = DamageSource.causeArrowDamage(this, this);
-                    }
-                    else
-                    {
+                    } else {
                         damagesource = DamageSource.causeArrowDamage(this, this.shootingEntity);
                     }
 
-                    if (this.isBurning() && !(movingobjectposition.entityHit instanceof EntityEnderman))
-                    {
-                        movingobjectposition.entityHit.setFire(5);
-                    }
-
-                    if (movingobjectposition.entityHit.attackEntityFrom(damagesource, (float)k))
-                    {
-                        if (movingobjectposition.entityHit instanceof EntityLivingBase)
+                    // CraftBukkit start - Moved damage call
+                    if (movingobjectposition.entityHit.attackEntityFrom(damagesource, (float) k)) {
+                        if (this.isBurning() && !(movingobjectposition.entityHit instanceof EntityEnderman) && (!(movingobjectposition.entityHit instanceof EntityPlayer) || !(this.shootingEntity instanceof EntityPlayer) || this.worldObj.pvpMode))  // CraftBukkit - abide by pvp setting if destination is a player
                         {
-                            EntityLivingBase entitylivingbase = (EntityLivingBase)movingobjectposition.entityHit;
+                            EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 5);
+                            org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
 
-                            if (!this.worldObj.isRemote)
-                            {
+                            if (!combustEvent.isCancelled()) {
+                                movingobjectposition.entityHit.setFire(combustEvent.getDuration());
+                            }
+                            // CraftBukkit end
+                        }
+
+                        // if (movingobjectposition.entityHit.attackEntityFrom(damagesource, (float)k)) // CraftBukkit - moved up
+                        // { // SpigotMCP -- remove '{'
+                        if (movingobjectposition.entityHit instanceof EntityLivingBase) {
+                            EntityLivingBase entitylivingbase = (EntityLivingBase) movingobjectposition.entityHit;
+
+                            if (!this.worldObj.isRemote) {
                                 entitylivingbase.setArrowCountInEntity(entitylivingbase.getArrowCountInEntity() + 1);
                             }
 
-                            if (this.knockbackStrength > 0)
-                            {
+                            if (this.knockbackStrength > 0) {
                                 f4 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
 
-                                if (f4 > 0.0F)
-                                {
-                                    movingobjectposition.entityHit.addVelocity(this.motionX * (double)this.knockbackStrength * 0.6000000238418579D / (double)f4, 0.1D, this.motionZ * (double)this.knockbackStrength * 0.6000000238418579D / (double)f4);
+                                if (f4 > 0.0F) {
+                                    movingobjectposition.entityHit.addVelocity(this.motionX * (double) this.knockbackStrength * 0.6000000238418579D / (double) f4, 0.1D, this.motionZ * (double) this.knockbackStrength * 0.6000000238418579D / (double) f4);
                                 }
                             }
 
-                            if (this.shootingEntity instanceof EntityLivingBase)
-                            {
+                            if (this.shootingEntity instanceof EntityLivingBase) {
                                 EnchantmentHelper.func_151384_a(entitylivingbase, this.shootingEntity);
-                                EnchantmentHelper.func_151385_b((EntityLivingBase)this.shootingEntity, entitylivingbase);
+                                EnchantmentHelper.func_151385_b((EntityLivingBase) this.shootingEntity, entitylivingbase);
                             }
 
-                            if (this.shootingEntity != null && movingobjectposition.entityHit != this.shootingEntity && movingobjectposition.entityHit instanceof EntityPlayer && this.shootingEntity instanceof EntityPlayerMP)
-                            {
-                                ((EntityPlayerMP)this.shootingEntity).playerNetServerHandler.sendPacket(new S2BPacketChangeGameState(6, 0.0F));
+                            if (this.shootingEntity != null && movingobjectposition.entityHit != this.shootingEntity && movingobjectposition.entityHit instanceof EntityPlayer && this.shootingEntity instanceof EntityPlayerMP) {
+                                ((EntityPlayerMP) this.shootingEntity).playerNetServerHandler.sendPacket(new S2BPacketChangeGameState(6, 0.0F));
                             }
                         }
 
                         this.playSound("random.bowhit", 1.0F, 1.2F / (this.rand.nextFloat() * 0.2F + 0.9F));
 
-                        if (!(movingobjectposition.entityHit instanceof EntityEnderman))
-                        {
+                        if (!(movingobjectposition.entityHit instanceof EntityEnderman)) {
                             this.setDead();
                         }
-                    }
-                    else
-                    {
+                    } else {
                         this.motionX *= -0.10000000149011612D;
                         this.motionY *= -0.10000000149011612D;
                         this.motionZ *= -0.10000000149011612D;
                         this.rotationYaw += 180.0F;
                         this.prevRotationYaw += 180.0F;
                         this.ticksInAir = 0;
                     }
-                }
-                else
-                {
+                } else {
                     BlockPos blockpos1 = movingobjectposition.getBlockPos();
                     this.xTile = blockpos1.getX();
                     this.yTile = blockpos1.getY();
                     this.zTile = blockpos1.getZ();
                     iblockstate = this.worldObj.getBlockState(blockpos1);
                     this.inTile = iblockstate.getBlock();
                     this.inData = this.inTile.getMetaFromState(iblockstate);
-                    this.motionX = (double)((float)(movingobjectposition.hitVec.xCoord - this.posX));
-                    this.motionY = (double)((float)(movingobjectposition.hitVec.yCoord - this.posY));
-                    this.motionZ = (double)((float)(movingobjectposition.hitVec.zCoord - this.posZ));
+                    this.motionX = (double) ((float) (movingobjectposition.hitVec.xCoord - this.posX));
+                    this.motionY = (double) ((float) (movingobjectposition.hitVec.yCoord - this.posY));
+                    this.motionZ = (double) ((float) (movingobjectposition.hitVec.zCoord - this.posZ));
                     f3 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
-                    this.posX -= this.motionX / (double)f3 * 0.05000000074505806D;
-                    this.posY -= this.motionY / (double)f3 * 0.05000000074505806D;
-                    this.posZ -= this.motionZ / (double)f3 * 0.05000000074505806D;
+                    this.posX -= this.motionX / (double) f3 * 0.05000000074505806D;
+                    this.posY -= this.motionY / (double) f3 * 0.05000000074505806D;
+                    this.posZ -= this.motionZ / (double) f3 * 0.05000000074505806D;
                     this.playSound("random.bowhit", 1.0F, 1.2F / (this.rand.nextFloat() * 0.2F + 0.9F));
                     this.inGround = true;
                     this.arrowShake = 7;
                     this.setIsCritical(false);
 
-                    if (this.inTile.getMaterial() != Material.air)
-                    {
+                    if (this.inTile.getMaterial() != Material.air) {
                         this.inTile.onEntityCollidedWithBlock(this.worldObj, blockpos1, iblockstate, this);
                     }
                 }
             }
 
-            if (this.getIsCritical())
-            {
-                for (i = 0; i < 4; ++i)
-                {
-                    this.worldObj.spawnParticle(EnumParticleTypes.CRIT, this.posX + this.motionX * (double)i / 4.0D, this.posY + this.motionY * (double)i / 4.0D, this.posZ + this.motionZ * (double)i / 4.0D, -this.motionX, -this.motionY + 0.2D, -this.motionZ, new int[0]);
+            if (this.getIsCritical()) {
+                for (i = 0; i < 4; ++i) {
+                    this.worldObj.spawnParticle(EnumParticleTypes.CRIT, this.posX + this.motionX * (double) i / 4.0D, this.posY + this.motionY * (double) i / 4.0D, this.posZ + this.motionZ * (double) i / 4.0D, -this.motionX, -this.motionY + 0.2D, -this.motionZ, new int[0]);
                 }
             }
 
             this.posX += this.motionX;
             this.posY += this.motionY;
             this.posZ += this.motionZ;
             f2 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-            this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / Math.PI);
+            this.rotationYaw = (float) (Math.atan2(this.motionX, this.motionZ) * 180.0D / Math.PI);
 
-            for (this.rotationPitch = (float)(Math.atan2(this.motionY, (double)f2) * 180.0D / Math.PI); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F)
-            {
+            for (this.rotationPitch = (float) (Math.atan2(this.motionY, (double) f2) * 180.0D / Math.PI); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
                 ;
             }
 
-            while (this.rotationPitch - this.prevRotationPitch >= 180.0F)
-            {
+            while (this.rotationPitch - this.prevRotationPitch >= 180.0F) {
                 this.prevRotationPitch += 360.0F;
             }
 
-            while (this.rotationYaw - this.prevRotationYaw < -180.0F)
-            {
+            while (this.rotationYaw - this.prevRotationYaw < -180.0F) {
                 this.prevRotationYaw -= 360.0F;
             }
 
-            while (this.rotationYaw - this.prevRotationYaw >= 180.0F)
-            {
+            while (this.rotationYaw - this.prevRotationYaw >= 180.0F) {
                 this.prevRotationYaw += 360.0F;
             }
 
             this.rotationPitch = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * 0.2F;
             this.rotationYaw = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;
             f3 = 0.99F;
             f1 = 0.05F;
 
-            if (this.isInWater())
-            {
-                for (int l = 0; l < 4; ++l)
-                {
+            if (this.isInWater()) {
+                for (int l = 0; l < 4; ++l) {
                     f4 = 0.25F;
-                    this.worldObj.spawnParticle(EnumParticleTypes.WATER_BUBBLE, this.posX - this.motionX * (double)f4, this.posY - this.motionY * (double)f4, this.posZ - this.motionZ * (double)f4, this.motionX, this.motionY, this.motionZ, new int[0]);
+                    this.worldObj.spawnParticle(EnumParticleTypes.WATER_BUBBLE, this.posX - this.motionX * (double) f4, this.posY - this.motionY * (double) f4, this.posZ - this.motionZ * (double) f4, this.motionX, this.motionY, this.motionZ, new int[0]);
                 }
 
                 f3 = 0.6F;
             }
 
-            if (this.isWet())
-            {
+            if (this.isWet()) {
                 this.extinguish();
             }
 
-            this.motionX *= (double)f3;
-            this.motionY *= (double)f3;
-            this.motionZ *= (double)f3;
-            this.motionY -= (double)f1;
+            this.motionX *= (double) f3;
+            this.motionY *= (double) f3;
+            this.motionZ *= (double) f3;
+            this.motionY -= (double) f1;
             this.setPosition(this.posX, this.posY, this.posZ);
             this.doBlockCollisions();
         }
     }
 
-    public void writeEntityToNBT(NBTTagCompound tagCompound)
-    {
-        tagCompound.setShort("xTile", (short)this.xTile);
-        tagCompound.setShort("yTile", (short)this.yTile);
-        tagCompound.setShort("zTile", (short)this.zTile);
-        tagCompound.setShort("life", (short)this.ticksInGround);
-        ResourceLocation resourcelocation = (ResourceLocation)Block.blockRegistry.getNameForObject(this.inTile);
+    public void writeEntityToNBT(NBTTagCompound tagCompound) {
+        tagCompound.setShort("xTile", (short) this.xTile);
+        tagCompound.setShort("yTile", (short) this.yTile);
+        tagCompound.setShort("zTile", (short) this.zTile);
+        tagCompound.setShort("life", (short) this.ticksInGround);
+        ResourceLocation resourcelocation = (ResourceLocation) Block.blockRegistry.getNameForObject(this.inTile);
         tagCompound.setString("inTile", resourcelocation == null ? "" : resourcelocation.toString());
-        tagCompound.setByte("inData", (byte)this.inData);
-        tagCompound.setByte("shake", (byte)this.arrowShake);
-        tagCompound.setByte("inGround", (byte)(this.inGround ? 1 : 0));
-        tagCompound.setByte("pickup", (byte)this.canBePickedUp);
+        tagCompound.setByte("inData", (byte) this.inData);
+        tagCompound.setByte("shake", (byte) this.arrowShake);
+        tagCompound.setByte("inGround", (byte) (this.inGround ? 1 : 0));
+        tagCompound.setByte("pickup", (byte) this.canBePickedUp);
         tagCompound.setDouble("damage", this.damage);
     }
 
-    public void readEntityFromNBT(NBTTagCompound tagCompund)
-    {
+    public void readEntityFromNBT(NBTTagCompound tagCompund) {
         this.xTile = tagCompund.getShort("xTile");
         this.yTile = tagCompund.getShort("yTile");
         this.zTile = tagCompund.getShort("zTile");
         this.ticksInGround = tagCompund.getShort("life");
 
-        if (tagCompund.hasKey("inTile", 8))
-        {
+        if (tagCompund.hasKey("inTile", 8)) {
             this.inTile = Block.getBlockFromName(tagCompund.getString("inTile"));
-        }
-        else
-        {
+        } else {
             this.inTile = Block.getBlockById(tagCompund.getByte("inTile") & 255);
         }
 
         this.inData = tagCompund.getByte("inData") & 255;
         this.arrowShake = tagCompund.getByte("shake") & 255;
         this.inGround = tagCompund.getByte("inGround") == 1;
 
-        if (tagCompund.hasKey("damage", 99))
-        {
+        if (tagCompund.hasKey("damage", 99)) {
             this.damage = tagCompund.getDouble("damage");
         }
 
-        if (tagCompund.hasKey("pickup", 99))
-        {
+        if (tagCompund.hasKey("pickup", 99)) {
             this.canBePickedUp = tagCompund.getByte("pickup");
-        }
-        else if (tagCompund.hasKey("player", 99))
-        {
+        } else if (tagCompund.hasKey("player", 99)) {
             this.canBePickedUp = tagCompund.getBoolean("player") ? 1 : 0;
         }
     }
 
-    public void onCollideWithPlayer(EntityPlayer entityIn)
-    {
-        if (!this.worldObj.isRemote && this.inGround && this.arrowShake <= 0)
-        {
+    public void onCollideWithPlayer(EntityPlayer entityIn) {
+        if (!this.worldObj.isRemote && this.inGround && this.arrowShake <= 0) {
+            // CraftBukkit start
+            ItemStack itemstack = new ItemStack(Items.arrow);
+            if (this.canBePickedUp == 1 && entityIn.inventory.canHold(itemstack) > 0) {
+                EntityItem item = new EntityItem(this.worldObj, this.posX, this.posY, this.posZ, itemstack);
+
+                PlayerPickupItemEvent event = new PlayerPickupItemEvent((org.bukkit.entity.Player) entityIn.getBukkitEntity(), new CraftItem(this.worldObj.getServer(), this, item), 0);
+                // event.setCancelled(!entityhuman.canPickUpLoot); TODO
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled()) {
+                    return;
+                }
+            }
+            // CraftBukkit end
+
             boolean flag = this.canBePickedUp == 1 || this.canBePickedUp == 2 && entityIn.capabilities.isCreativeMode;
 
-            if (this.canBePickedUp == 1 && !entityIn.inventory.addItemStackToInventory(new ItemStack(Items.arrow, 1)))
-            {
+            if (this.canBePickedUp == 1 && !entityIn.inventory.addItemStackToInventory(new ItemStack(Items.arrow, 1))) {
                 flag = false;
             }
 
-            if (flag)
-            {
+            if (flag) {
                 this.playSound("random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
                 entityIn.onItemPickup(this, 1);
                 this.setDead();
             }
         }
     }
 
-    protected boolean canTriggerWalking()
-    {
+    protected boolean canTriggerWalking() {
         return false;
     }
 
-    public void setDamage(double p_70239_1_)
-    {
+    public void setDamage(double p_70239_1_) {
         this.damage = p_70239_1_;
     }
 
-    public double getDamage()
-    {
+    public double getDamage() {
         return this.damage;
     }
 
-    public void setKnockbackStrength(int p_70240_1_)
-    {
+    public void setKnockbackStrength(int p_70240_1_) {
         this.knockbackStrength = p_70240_1_;
     }
 
-    public boolean canAttackWithItem()
-    {
+    public boolean canAttackWithItem() {
         return false;
     }
 
-    public void setIsCritical(boolean p_70243_1_)
-    {
+    public void setIsCritical(boolean p_70243_1_) {
         byte b0 = this.dataWatcher.getWatchableObjectByte(16);
 
-        if (p_70243_1_)
-        {
-            this.dataWatcher.updateObject(16, Byte.valueOf((byte)(b0 | 1)));
+        if (p_70243_1_) {
+            this.dataWatcher.updateObject(16, Byte.valueOf((byte) (b0 | 1)));
+        } else {
+            this.dataWatcher.updateObject(16, Byte.valueOf((byte) (b0 & -2)));
         }
-        else
-        {
-            this.dataWatcher.updateObject(16, Byte.valueOf((byte)(b0 & -2)));
-        }
     }
 
-    public boolean getIsCritical()
-    {
+    public boolean getIsCritical() {
         byte b0 = this.dataWatcher.getWatchableObjectByte(16);
         return (b0 & 1) != 0;
     }
+
+    // CraftBukkit start
+    public boolean isInGround() {
+        return inGround;
+    }
+    // CraftBukkit end
 }
