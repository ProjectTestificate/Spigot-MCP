--- decompiled\net\minecraft\entity\projectile\EntityFireball.java
+++ src\main\java\net\minecraft\entity\projectile\EntityFireball.java
@@ -1,8 +1,9 @@
 package net.minecraft.entity.projectile;
 
 import java.util.List;
+
 import net.minecraft.block.Block;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
@@ -13,15 +14,16 @@
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+
 public abstract class EntityFireball extends Entity
 {
+
     private int xTile = -1;
     private int yTile = -1;
     private int zTile = -1;
     private Block inTile;
     private boolean inGround;
@@ -29,26 +31,22 @@
     private int ticksAlive;
     private int ticksInAir;
     public double accelerationX;
     public double accelerationY;
     public double accelerationZ;
+    public float bukkitYield = 1; // CraftBukkit
+    public boolean isIncendiary = true; // CraftBukkit
     private static final String __OBFID = "CL_00001717";
 
     public EntityFireball(World worldIn)
     {
         super(worldIn);
         this.setSize(1.0F, 1.0F);
     }
 
-    protected void entityInit() {}
-
-    @SideOnly(Side.CLIENT)
-    public boolean isInRangeToRenderDist(double distance)
+    protected void entityInit()
     {
-        double d1 = this.getEntityBoundingBox().getAverageEdgeLength() * 4.0D;
-        d1 *= 64.0D;
-        return distance < d1 * d1;
     }
 
     public EntityFireball(World worldIn, double x, double y, double z, double accelX, double accelY, double accelZ)
     {
         super(worldIn);
@@ -63,14 +61,22 @@
 
     public EntityFireball(World worldIn, EntityLivingBase shooter, double accelX, double accelY, double accelZ)
     {
         super(worldIn);
         this.shootingEntity = shooter;
+        this.projectileSource = (org.bukkit.entity.LivingEntity)shooter.getBukkitEntity(); // CraftBukkit
         this.setSize(1.0F, 1.0F);
         this.setLocationAndAngles(shooter.posX, shooter.posY, shooter.posZ, shooter.rotationYaw, shooter.rotationPitch);
         this.setPosition(this.posX, this.posY, this.posZ);
         this.motionX = this.motionY = this.motionZ = 0.0D;
+        // CraftBukkit start - Added setDirection method
+        this.setDirection(accelX, accelY, accelZ);
+    }
+
+    public void setDirection(double accelX, double accelY, double accelZ)   // SpigotMCP - use mcp names
+    {
+        // CraftBukkit end
         accelX += this.rand.nextGaussian() * 0.4D;
         accelY += this.rand.nextGaussian() * 0.4D;
         accelZ += this.rand.nextGaussian() * 0.4D;
         double d3 = (double)MathHelper.sqrt_double(accelX * accelX + accelY * accelY + accelZ * accelZ);
         this.accelerationX = accelX / d3 * 0.1D;
@@ -140,11 +146,11 @@
                     AxisAlignedBB axisalignedbb = entity1.getEntityBoundingBox().expand((double)f, (double)f, (double)f);
                     MovingObjectPosition movingobjectposition1 = axisalignedbb.calculateIntercept(vec3, vec31);
 
                     if (movingobjectposition1 != null)
                     {
-                        double d1 = vec3.distanceTo(movingobjectposition1.hitVec);
+                        double d1 = vec3.squareDistanceTo(movingobjectposition1.hitVec); // CraftBukkit - distance efficiency
 
                         if (d1 < d0 || d0 == 0.0D)
                         {
                             entity = entity1;
                             d0 = d1;
@@ -158,10 +164,17 @@
                 movingobjectposition = new MovingObjectPosition(entity);
             }
 
             if (movingobjectposition != null)
             {
+                // CraftBukkit start - Fire ProjectileHitEvent
+                if (this.isDead)
+                {
+                    CraftEventFactory.callProjectileHitEvent(this);
+                }
+
+                // CraftBukkit end
                 this.onImpact(movingobjectposition);
             }
 
             this.posX += this.motionX;
             this.posY += this.motionY;
@@ -228,10 +241,12 @@
         tagCompound.setShort("yTile", (short)this.yTile);
         tagCompound.setShort("zTile", (short)this.zTile);
         ResourceLocation resourcelocation = (ResourceLocation)Block.blockRegistry.getNameForObject(this.inTile);
         tagCompound.setString("inTile", resourcelocation == null ? "" : resourcelocation.toString());
         tagCompound.setByte("inGround", (byte)(this.inGround ? 1 : 0));
+        // CraftBukkit - Fix direction being mismapped to invalid variables
+        tagCompound.setTag("power", this.newDoubleNBTList(new double[] {this.accelerationX, this.accelerationY, this.accelerationZ}));
         tagCompound.setTag("direction", this.newDoubleNBTList(new double[] {this.motionX, this.motionY, this.motionZ}));
     }
 
     public void readEntityFromNBT(NBTTagCompound tagCompund)
     {
@@ -248,16 +263,25 @@
             this.inTile = Block.getBlockById(tagCompund.getByte("inTile") & 255);
         }
 
         this.inGround = tagCompund.getByte("inGround") == 1;
 
-        if (tagCompund.hasKey("direction", 9))
+        // CraftBukkit start - direction -> power
+        if (tagCompund.hasKey("power", 9))
         {
+            NBTTagList nbttaglist = tagCompund.getTagList("power", 6);
+            this.accelerationX = nbttaglist.getDouble(0);
+            this.accelerationY = nbttaglist.getDouble(1);
+            this.accelerationZ = nbttaglist.getDouble(2);
+        }
+        else if (tagCompund.hasKey("direction", 9))
+        {
             NBTTagList nbttaglist = tagCompund.getTagList("direction", 6);
             this.motionX = nbttaglist.getDouble(0);
             this.motionY = nbttaglist.getDouble(1);
             this.motionZ = nbttaglist.getDouble(2);
+            // CraftBukkit end
         }
         else
         {
             this.setDead();
         }
@@ -283,10 +307,17 @@
         {
             this.setBeenAttacked();
 
             if (source.getEntity() != null)
             {
+                // CraftBukkit start
+                if (CraftEventFactory.handleNonLivingEntityDamageEvent(this, source, amount))
+                {
+                    return false;
+                }
+
+                // CraftBukkit end
                 Vec3 vec3 = source.getEntity().getLookVec();
 
                 if (vec3 != null)
                 {
                     this.motionX = vec3.xCoord;
@@ -314,11 +345,6 @@
     public float getBrightness(float p_70013_1_)
     {
         return 1.0F;
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getBrightnessForRender(float p_70070_1_)
-    {
-        return 15728880;
-    }
 }
