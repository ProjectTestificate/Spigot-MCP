---a/net/minecraft/entity/projectile/EntityFireball.java
+++b/net/minecraft/entity/projectile/EntityFireball.java
@@ -1,6 +1,7 @@
 package net.minecraft.entity.projectile;
 
 import java.util.List;
+
 import net.minecraft.block.Block;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
@@ -15,11 +15,7 @@
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public abstract class EntityFireball extends Entity
-{
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+
+public abstract class EntityFireball extends Entity {
+
     private int xTile = -1;
     private int yTile = -1;
     private int zTile = -1;
@@ -31,70 +31,65 @@
     public double accelerationX;
     public double accelerationY;
     public double accelerationZ;
+    public float bukkitYield = 1; // CraftBukkit
+    public boolean isIncendiary = true; // CraftBukkit
     private static final String __OBFID = "CL_00001717";
 
-    public EntityFireball(World worldIn)
-    {
+    public EntityFireball(World worldIn) {
         super(worldIn);
         this.setSize(1.0F, 1.0F);
     }
 
-    protected void entityInit() {}
-
-    @SideOnly(Side.CLIENT)
-    public boolean isInRangeToRenderDist(double distance)
-    {
-        double d1 = this.getEntityBoundingBox().getAverageEdgeLength() * 4.0D;
-        d1 *= 64.0D;
-        return distance < d1 * d1;
+    protected void entityInit() {
     }
 
-    public EntityFireball(World worldIn, double x, double y, double z, double accelX, double accelY, double accelZ)
-    {
+    public EntityFireball(World worldIn, double x, double y, double z, double accelX, double accelY, double accelZ) {
         super(worldIn);
         this.setSize(1.0F, 1.0F);
         this.setLocationAndAngles(x, y, z, this.rotationYaw, this.rotationPitch);
         this.setPosition(x, y, z);
-        double d6 = (double)MathHelper.sqrt_double(accelX * accelX + accelY * accelY + accelZ * accelZ);
+        double d6 = (double) MathHelper.sqrt_double(accelX * accelX + accelY * accelY + accelZ * accelZ);
         this.accelerationX = accelX / d6 * 0.1D;
         this.accelerationY = accelY / d6 * 0.1D;
         this.accelerationZ = accelZ / d6 * 0.1D;
     }
 
-    public EntityFireball(World worldIn, EntityLivingBase shooter, double accelX, double accelY, double accelZ)
-    {
+    public EntityFireball(World worldIn, EntityLivingBase shooter, double accelX, double accelY, double accelZ) {
         super(worldIn);
         this.shootingEntity = shooter;
+        this.projectileSource = (org.bukkit.entity.LivingEntity) shooter.getBukkitEntity(); // CraftBukkit
         this.setSize(1.0F, 1.0F);
         this.setLocationAndAngles(shooter.posX, shooter.posY, shooter.posZ, shooter.rotationYaw, shooter.rotationPitch);
         this.setPosition(this.posX, this.posY, this.posZ);
         this.motionX = this.motionY = this.motionZ = 0.0D;
+        // CraftBukkit start - Added setDirection method
+        this.setDirection(accelX, accelY, accelZ);
+    }
+
+    public void setDirection(double accelX, double accelY, double accelZ) { // SpigotMCP - use mcp names
+        // CraftBukkit end
         accelX += this.rand.nextGaussian() * 0.4D;
         accelY += this.rand.nextGaussian() * 0.4D;
         accelZ += this.rand.nextGaussian() * 0.4D;
-        double d3 = (double)MathHelper.sqrt_double(accelX * accelX + accelY * accelY + accelZ * accelZ);
+        double d3 = (double) MathHelper.sqrt_double(accelX * accelX + accelY * accelY + accelZ * accelZ);
         this.accelerationX = accelX / d3 * 0.1D;
         this.accelerationY = accelY / d3 * 0.1D;
         this.accelerationZ = accelZ / d3 * 0.1D;
     }
 
-    public void onUpdate()
-    {
-        if (!this.worldObj.isRemote && (this.shootingEntity != null && this.shootingEntity.isDead || !this.worldObj.isBlockLoaded(new BlockPos(this))))
-        {
+    public void onUpdate() {
+        if (!this.worldObj.isRemote && (this.shootingEntity != null && this.shootingEntity.isDead || !this.worldObj.isBlockLoaded(new BlockPos(this)))) {
             this.setDead();
-        }
-        else
-        {
+        } else {
             super.onUpdate();
             this.setFire(1);
 
-            if (this.inGround)
-            {
-                if (this.worldObj.getBlockState(new BlockPos(this.xTile, this.yTile, this.zTile)).getBlock() == this.inTile)
-                {
+            if (this.inGround) {
+                if (this.worldObj.getBlockState(new BlockPos(this.xTile, this.yTile, this.zTile)).getBlock() == this.inTile) {
                     ++this.ticksAlive;
 
-                    if (this.ticksAlive == 600)
-                    {
+                    if (this.ticksAlive == 600) {
                         this.setDead();
                     }
 
@@ -104,14 +104,14 @@
                 }
 
                 this.inGround = false;
-                this.motionX *= (double)(this.rand.nextFloat() * 0.2F);
-                this.motionY *= (double)(this.rand.nextFloat() * 0.2F);
-                this.motionZ *= (double)(this.rand.nextFloat() * 0.2F);
+                this.motionX *= (double) (this.rand.nextFloat() * 0.2F);
+                this.motionY *= (double) (this.rand.nextFloat() * 0.2F);
+                this.motionZ *= (double) (this.rand.nextFloat() * 0.2F);
                 this.ticksAlive = 0;
                 this.ticksInAir = 0;
-            }
-            else
-            {
+            } else {
                 ++this.ticksInAir;
             }
 
@@ -121,8 +121,7 @@
             vec3 = new Vec3(this.posX, this.posY, this.posZ);
             vec31 = new Vec3(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
 
-            if (movingobjectposition != null)
-            {
+            if (movingobjectposition != null) {
                 vec31 = new Vec3(movingobjectposition.hitVec.xCoord, movingobjectposition.hitVec.yCoord, movingobjectposition.hitVec.zCoord);
             }
 
@@ -130,23 +130,19 @@
             List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.getEntityBoundingBox().addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
             double d0 = 0.0D;
 
-            for (int i = 0; i < list.size(); ++i)
-            {
-                Entity entity1 = (Entity)list.get(i);
+            for (int i = 0; i < list.size(); ++i) {
+                Entity entity1 = (Entity) list.get(i);
 
-                if (entity1.canBeCollidedWith() && (!entity1.isEntityEqual(this.shootingEntity) || this.ticksInAir >= 25))
-                {
+                if (entity1.canBeCollidedWith() && (!entity1.isEntityEqual(this.shootingEntity) || this.ticksInAir >= 25)) {
                     float f = 0.3F;
-                    AxisAlignedBB axisalignedbb = entity1.getEntityBoundingBox().expand((double)f, (double)f, (double)f);
+                    AxisAlignedBB axisalignedbb = entity1.getEntityBoundingBox().expand((double) f, (double) f, (double) f);
                     MovingObjectPosition movingobjectposition1 = axisalignedbb.calculateIntercept(vec3, vec31);
 
-                    if (movingobjectposition1 != null)
-                    {
-                        double d1 = vec3.distanceTo(movingobjectposition1.hitVec);
+                    if (movingobjectposition1 != null) {
+                        double d1 = vec3.squareDistanceTo(movingobjectposition1.hitVec); // CraftBukkit - distance efficiency
 
-                        if (d1 < d0 || d0 == 0.0D)
-                        {
+                        if (d1 < d0 || d0 == 0.0D) {
                             entity = entity1;
                             d0 = d1;
                         }
@@ -153,13 +153,11 @@
                 }
             }
 
-            if (entity != null)
-            {
+            if (entity != null) {
                 movingobjectposition = new MovingObjectPosition(entity);
             }
 
-            if (movingobjectposition != null)
-            {
+            if (movingobjectposition != null) {
+                // CraftBukkit start - Fire ProjectileHitEvent
+                if (this.isDead) {
+                    CraftEventFactory.callProjectileHitEvent(this);
+                }
+                // CraftBukkit end
+
                 this.onImpact(movingobjectposition);
             }
 
@@ -167,24 +167,21 @@
             this.posY += this.motionY;
             this.posZ += this.motionZ;
             float f1 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-            this.rotationYaw = (float)(Math.atan2(this.motionZ, this.motionX) * 180.0D / Math.PI) + 90.0F;
+            this.rotationYaw = (float) (Math.atan2(this.motionZ, this.motionX) * 180.0D / Math.PI) + 90.0F;
 
-            for (this.rotationPitch = (float)(Math.atan2((double)f1, this.motionY) * 180.0D / Math.PI) - 90.0F; this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F)
-            {
+            for (this.rotationPitch = (float) (Math.atan2((double) f1, this.motionY) * 180.0D / Math.PI) - 90.0F; this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
                 ;
             }
 
-            while (this.rotationPitch - this.prevRotationPitch >= 180.0F)
-            {
+            while (this.rotationPitch - this.prevRotationPitch >= 180.0F) {
                 this.prevRotationPitch += 360.0F;
             }
 
-            while (this.rotationYaw - this.prevRotationYaw < -180.0F)
-            {
+            while (this.rotationYaw - this.prevRotationYaw < -180.0F) {
                 this.prevRotationYaw -= 360.0F;
             }
 
-            while (this.rotationYaw - this.prevRotationYaw >= 180.0F)
-            {
+            while (this.rotationYaw - this.prevRotationYaw >= 180.0F) {
                 this.prevRotationYaw += 360.0F;
             }
 
@@ -193,15 +193,11 @@
             this.rotationYaw = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;
             float f2 = this.getMotionFactor();
 
-            if (this.isInWater())
-            {
-                for (int j = 0; j < 4; ++j)
-                {
+            if (this.isInWater()) {
+                for (int j = 0; j < 4; ++j) {
                     float f3 = 0.25F;
-                    this.worldObj.spawnParticle(EnumParticleTypes.WATER_BUBBLE, this.posX - this.motionX * (double)f3, this.posY - this.motionY * (double)f3, this.posZ - this.motionZ * (double)f3, this.motionX, this.motionY, this.motionZ, new int[0]);
+                    this.worldObj.spawnParticle(EnumParticleTypes.WATER_BUBBLE, this.posX - this.motionX * (double) f3, this.posY - this.motionY * (double) f3, this.posZ - this.motionZ * (double) f3, this.motionX, this.motionY, this.motionZ, new int[0]);
                 }
 
                 f2 = 0.8F;
@@ -207,89 +207,89 @@
             this.motionX += this.accelerationX;
             this.motionY += this.accelerationY;
             this.motionZ += this.accelerationZ;
-            this.motionX *= (double)f2;
-            this.motionY *= (double)f2;
-            this.motionZ *= (double)f2;
+            this.motionX *= (double) f2;
+            this.motionY *= (double) f2;
+            this.motionZ *= (double) f2;
             this.worldObj.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, this.posX, this.posY + 0.5D, this.posZ, 0.0D, 0.0D, 0.0D, new int[0]);
             this.setPosition(this.posX, this.posY, this.posZ);
         }
     }
 
-    protected float getMotionFactor()
-    {
+    protected float getMotionFactor() {
         return 0.95F;
     }
 
     protected abstract void onImpact(MovingObjectPosition movingObject);
 
-    public void writeEntityToNBT(NBTTagCompound tagCompound)
-    {
-        tagCompound.setShort("xTile", (short)this.xTile);
-        tagCompound.setShort("yTile", (short)this.yTile);
-        tagCompound.setShort("zTile", (short)this.zTile);
-        ResourceLocation resourcelocation = (ResourceLocation)Block.blockRegistry.getNameForObject(this.inTile);
+    public void writeEntityToNBT(NBTTagCompound tagCompound) {
+        tagCompound.setShort("xTile", (short) this.xTile);
+        tagCompound.setShort("yTile", (short) this.yTile);
+        tagCompound.setShort("zTile", (short) this.zTile);
+        ResourceLocation resourcelocation = (ResourceLocation) Block.blockRegistry.getNameForObject(this.inTile);
         tagCompound.setString("inTile", resourcelocation == null ? "" : resourcelocation.toString());
-        tagCompound.setByte("inGround", (byte)(this.inGround ? 1 : 0));
-        tagCompound.setTag("direction", this.newDoubleNBTList(new double[] {this.motionX, this.motionY, this.motionZ}));
+        tagCompound.setByte("inGround", (byte) (this.inGround ? 1 : 0));
+        // CraftBukkit - Fix direction being mismapped to invalid variables
+        tagCompound.setTag("power", this.newDoubleNBTList(new double[]{this.accelerationX, this.accelerationY, this.accelerationZ}));
+        tagCompound.setTag("direction", this.newDoubleNBTList(new double[]{this.motionX, this.motionY, this.motionZ}));
     }
 
-    public void readEntityFromNBT(NBTTagCompound tagCompund)
-    {
+    public void readEntityFromNBT(NBTTagCompound tagCompund) {
         this.xTile = tagCompund.getShort("xTile");
         this.yTile = tagCompund.getShort("yTile");
         this.zTile = tagCompund.getShort("zTile");
 
-        if (tagCompund.hasKey("inTile", 8))
-        {
+        if (tagCompund.hasKey("inTile", 8)) {
             this.inTile = Block.getBlockFromName(tagCompund.getString("inTile"));
-        }
-        else
-        {
+        } else {
             this.inTile = Block.getBlockById(tagCompund.getByte("inTile") & 255);
         }
 
         this.inGround = tagCompund.getByte("inGround") == 1;
 
-        if (tagCompund.hasKey("direction", 9))
-        {
+        // CraftBukkit start - direction -> power
+        if (tagCompund.hasKey("power", 9)) {
+            NBTTagList nbttaglist = tagCompund.getTagList("power", 6);
+
+            this.accelerationX = nbttaglist.getDouble(0);
+            this.accelerationY = nbttaglist.getDouble(1);
+            this.accelerationZ = nbttaglist.getDouble(2);
+        } else if (tagCompund.hasKey("direction", 9)) {
             NBTTagList nbttaglist = tagCompund.getTagList("direction", 6);
+
             this.motionX = nbttaglist.getDouble(0);
             this.motionY = nbttaglist.getDouble(1);
             this.motionZ = nbttaglist.getDouble(2);
-        }
-        else
-        {
+            // CraftBukkit end
+        } else {
             this.setDead();
         }
     }
 
-    public boolean canBeCollidedWith()
-    {
+    public boolean canBeCollidedWith() {
         return true;
     }
 
-    public float getCollisionBorderSize()
-    {
+    public float getCollisionBorderSize() {
         return 1.0F;
     }
 
-    public boolean attackEntityFrom(DamageSource source, float amount)
-    {
-        if (this.isEntityInvulnerable(source))
-        {
+    public boolean attackEntityFrom(DamageSource source, float amount) {
+        if (this.isEntityInvulnerable(source)) {
             return false;
-        }
-        else
-        {
+        } else {
             this.setBeenAttacked();
 
-            if (source.getEntity() != null)
-            {
+            if (source.getEntity() != null) {
+                // CraftBukkit start
+                if (CraftEventFactory.handleNonLivingEntityDamageEvent(this, source, amount)) {
+                    return false;
+                }
+                // CraftBukkit end
                 Vec3 vec3 = source.getEntity().getLookVec();
 
-                if (vec3 != null)
-                {
+                if (vec3 != null) {
                     this.motionX = vec3.xCoord;
                     this.motionY = vec3.yCoord;
                     this.motionZ = vec3.zCoord;
@@ -297,25 +297,20 @@
                     this.accelerationZ = this.motionZ * 0.1D;
                 }
 
-                if (source.getEntity() instanceof EntityLivingBase)
-                {
-                    this.shootingEntity = (EntityLivingBase)source.getEntity();
+                if (source.getEntity() instanceof EntityLivingBase) {
+                    this.shootingEntity = (EntityLivingBase) source.getEntity();
                 }
 
                 return true;
-            }
-            else
-            {
+            } else {
                 return false;
             }
         }
     }
 
-    public float getBrightness(float p_70013_1_)
-    {
+    public float getBrightness(float p_70013_1_) {
         return 1.0F;
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getBrightnessForRender(float p_70070_1_)
-    {
-        return 15728880;
-    }
-}
+}
