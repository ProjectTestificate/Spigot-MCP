--- decompiled\net\minecraft\entity\projectile\EntityThrowable.java
+++ src\main\java\net\minecraft\entity\projectile\EntityThrowable.java
@@ -1,8 +1,9 @@
 package net.minecraft.entity.projectile;
 
 import java.util.List;
+
 import net.minecraft.block.Block;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.IProjectile;
 import net.minecraft.entity.player.EntityPlayer;
@@ -14,47 +15,42 @@
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+
 public abstract class EntityThrowable extends Entity implements IProjectile
 {
+
     private int xTile = -1;
     private int yTile = -1;
     private int zTile = -1;
     private Block inTile;
     protected boolean inGround;
     public int throwableShake;
-    private EntityLivingBase thrower;
-    private String throwerName;
+    public EntityLivingBase thrower; // SpigotMCP -- Apply access transformation
+    public String throwerName; // SpigotMCP -- Apply access transformation
     private int ticksInGround;
     private int ticksInAir;
     private static final String __OBFID = "CL_00001723";
 
     public EntityThrowable(World worldIn)
     {
         super(worldIn);
         this.setSize(0.25F, 0.25F);
     }
 
-    protected void entityInit() {}
-
-    @SideOnly(Side.CLIENT)
-    public boolean isInRangeToRenderDist(double distance)
+    protected void entityInit()
     {
-        double d1 = this.getEntityBoundingBox().getAverageEdgeLength() * 4.0D;
-        d1 *= 64.0D;
-        return distance < d1 * d1;
     }
 
     public EntityThrowable(World worldIn, EntityLivingBase throwerIn)
     {
         super(worldIn);
         this.thrower = throwerIn;
+        this.projectileSource = (org.bukkit.entity.LivingEntity)throwerIn.getBukkitEntity(); // CraftBukkit
         this.setSize(0.25F, 0.25F);
         this.setLocationAndAngles(throwerIn.posX, throwerIn.posY + (double)throwerIn.getEyeHeight(), throwerIn.posZ, throwerIn.rotationYaw, throwerIn.rotationPitch);
         this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
         this.posY -= 0.10000000149011612D;
         this.posZ -= (double)(MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
@@ -103,25 +99,10 @@
         this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(x, z) * 180.0D / Math.PI);
         this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(y, (double)f3) * 180.0D / Math.PI);
         this.ticksInGround = 0;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void setVelocity(double x, double y, double z)
-    {
-        this.motionX = x;
-        this.motionY = y;
-        this.motionZ = z;
-
-        if (this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F)
-        {
-            float f = MathHelper.sqrt_double(x * x + z * z);
-            this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(x, z) * 180.0D / Math.PI);
-            this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(y, (double)f) * 180.0D / Math.PI);
-        }
-    }
-
     public void onUpdate()
     {
         this.lastTickPosX = this.posX;
         this.lastTickPosY = this.posY;
         this.lastTickPosZ = this.posZ;
@@ -186,11 +167,11 @@
                     AxisAlignedBB axisalignedbb = entity1.getEntityBoundingBox().expand((double)f, (double)f, (double)f);
                     MovingObjectPosition movingobjectposition1 = axisalignedbb.calculateIntercept(vec3, vec31);
 
                     if (movingobjectposition1 != null)
                     {
-                        double d1 = vec3.distanceTo(movingobjectposition1.hitVec);
+                        double d1 = vec3.squareDistanceTo(movingobjectposition1.hitVec); // CraftBukkit - distance efficiency
 
                         if (d1 < d0 || d0 == 0.0D)
                         {
                             entity = entity1;
                             d0 = d1;
@@ -212,10 +193,18 @@
                 this.setInPortal();
             }
             else
             {
                 this.onImpact(movingobjectposition);
+
+                // CraftBukkit start
+                if (this.isDead)
+                {
+                    org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileHitEvent(this);
+                }
+
+                // CraftBukkit end
             }
         }
 
         this.posX += this.motionX;
         this.posY += this.motionY;
