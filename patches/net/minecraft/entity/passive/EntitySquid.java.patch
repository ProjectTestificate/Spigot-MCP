--- decompiled\net\minecraft\entity\passive\EntitySquid.java
+++ src\main\java\net\minecraft\entity\passive\EntitySquid.java
@@ -1,21 +1,21 @@
 package net.minecraft.entity.passive;
 
-import net.minecraft.block.material.Material;
 import net.minecraft.entity.SharedMonsterAttributes;
 import net.minecraft.entity.ai.EntityAIBase;
 import net.minecraft.init.Items;
 import net.minecraft.item.EnumDyeColor;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import org.bukkit.craftbukkit.TrigMath;
+
 public class EntitySquid extends EntityWaterMob
 {
+
     public float squidPitch;
     public float prevSquidPitch;
     public float squidYaw;
     public float prevSquidYaw;
     public float squidRotation;
@@ -88,14 +88,16 @@
         {
             this.entityDropItem(new ItemStack(Items.dye, 1, EnumDyeColor.BLACK.getDyeDamage()), 0.0F);
         }
     }
 
+    /* CraftBukkit start - Delegate to Entity to use existing inWater value
     public boolean isInWater()
     {
         return this.worldObj.handleMaterialAcceleration(this.getEntityBoundingBox().expand(0.0D, -0.6000000238418579D, 0.0D), Material.water, this);
     }
+    // CraftBukkit end */
 
     public void onLivingUpdate()
     {
         super.onLivingUpdate();
         this.prevSquidPitch = this.squidPitch;
@@ -155,14 +157,16 @@
                 this.motionY = (double)(this.randomMotionVecY * this.randomMotionSpeed);
                 this.motionZ = (double)(this.randomMotionVecZ * this.randomMotionSpeed);
             }
 
             f = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-            this.renderYawOffset += (-((float)Math.atan2(this.motionX, this.motionZ)) * 180.0F / (float)Math.PI - this.renderYawOffset) * 0.1F;
+            // CraftBukkit - Math -> TrigMath
+            this.renderYawOffset += (-((float)TrigMath.atan2(this.motionX, this.motionZ)) * 180.0F / (float)Math.PI - this.renderYawOffset) * 0.1F;
             this.rotationYaw = this.renderYawOffset;
             this.squidYaw = (float)((double)this.squidYaw + Math.PI * (double)this.field_70871_bB * 1.5D);
-            this.squidPitch += (-((float)Math.atan2((double)f, this.motionY)) * 180.0F / (float)Math.PI - this.squidPitch) * 0.1F;
+            // CraftBukkit - Math -> TrigMath
+            this.squidPitch += (-((float)TrigMath.atan2((double)f, this.motionY)) * 180.0F / (float)Math.PI - this.squidPitch) * 0.1F;
         }
         else
         {
             this.tentacleAngle = MathHelper.abs(MathHelper.sin(this.squidRotation)) * (float)Math.PI * 0.25F;
 
@@ -186,23 +190,10 @@
     public boolean getCanSpawnHere()
     {
         return this.posY > 45.0D && this.posY < 63.0D && super.getCanSpawnHere();
     }
 
-    @SideOnly(Side.CLIENT)
-    public void handleHealthUpdate(byte p_70103_1_)
-    {
-        if (p_70103_1_ == 19)
-        {
-            this.squidRotation = 0.0F;
-        }
-        else
-        {
-            super.handleHealthUpdate(p_70103_1_);
-        }
-    }
-
     public void func_175568_b(float p_175568_1_, float p_175568_2_, float p_175568_3_)
     {
         this.randomMotionVecX = p_175568_1_;
         this.randomMotionVecY = p_175568_2_;
         this.randomMotionVecZ = p_175568_3_;
@@ -213,10 +204,11 @@
         return this.randomMotionVecX != 0.0F || this.randomMotionVecY != 0.0F || this.randomMotionVecZ != 0.0F;
     }
 
     class AIMoveRandom extends EntityAIBase
     {
+
         private EntitySquid field_179476_a = EntitySquid.this;
         private static final String __OBFID = "CL_00002232";
 
         public boolean shouldExecute()
         {
