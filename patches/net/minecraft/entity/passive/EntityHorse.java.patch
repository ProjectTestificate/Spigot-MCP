--- decompiled\net\minecraft\entity\passive\EntityHorse.java
+++ src\main\java\net\minecraft\entity\passive\EntityHorse.java
@@ -1,10 +1,10 @@
 package net.minecraft.entity.passive;
 
-import com.google.common.base.Predicate;
 import java.util.Iterator;
 import java.util.List;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityAgeable;
 import net.minecraft.entity.EntityLivingBase;
@@ -34,47 +34,48 @@
 import net.minecraft.pathfinding.PathNavigateGround;
 import net.minecraft.potion.Potion;
 import net.minecraft.server.management.PreYggdrasilConverter;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.DamageSource;
-import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.StatCollector;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class EntityHorse extends EntityAnimal implements IInvBasic
-{
-    private static final Predicate horseBreedingSelector = new Predicate()
-    {
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+
+import com.google.common.base.Predicate;
+
+public class EntityHorse extends EntityAnimal implements IInvBasic {
+
+    private static final Predicate horseBreedingSelector = new Predicate() {
+
         private static final String __OBFID = "CL_00001642";
-        public boolean func_179873_a(Entity p_179873_1_)
-        {
-            return p_179873_1_ instanceof EntityHorse && ((EntityHorse)p_179873_1_).func_110205_ce();
+
+        public boolean func_179873_a(Entity p_179873_1_) {
+            return p_179873_1_ instanceof EntityHorse && ((EntityHorse) p_179873_1_).func_110205_ce();
         }
-        public boolean apply(Object p_apply_1_)
-        {
-            return this.func_179873_a((Entity)p_apply_1_);
+
+        public boolean apply(Object p_apply_1_) {
+            return this.func_179873_a((Entity) p_apply_1_);
         }
     };
-    private static final IAttribute horseJumpStrength = (new RangedAttribute((IAttribute)null, "horse.jumpStrength", 0.7D, 0.0D, 2.0D)).setDescription("Jump Strength").setShouldWatch(true);
-    private static final String[] horseArmorTextures = new String[] {null, "textures/entity/horse/armor/horse_armor_iron.png", "textures/entity/horse/armor/horse_armor_gold.png", "textures/entity/horse/armor/horse_armor_diamond.png"};
-    private static final String[] field_110273_bx = new String[] {"", "meo", "goo", "dio"};
-    private static final int[] armorValues = new int[] {0, 5, 7, 11};
-    private static final String[] horseTextures = new String[] {"textures/entity/horse/horse_white.png", "textures/entity/horse/horse_creamy.png", "textures/entity/horse/horse_chestnut.png", "textures/entity/horse/horse_brown.png", "textures/entity/horse/horse_black.png", "textures/entity/horse/horse_gray.png", "textures/entity/horse/horse_darkbrown.png"};
-    private static final String[] field_110269_bA = new String[] {"hwh", "hcr", "hch", "hbr", "hbl", "hgr", "hdb"};
-    private static final String[] horseMarkingTextures = new String[] {null, "textures/entity/horse/horse_markings_white.png", "textures/entity/horse/horse_markings_whitefield.png", "textures/entity/horse/horse_markings_whitedots.png", "textures/entity/horse/horse_markings_blackdots.png"};
-    private static final String[] field_110292_bC = new String[] {"", "wo_", "wmo", "wdo", "bdo"};
+    public static final IAttribute horseJumpStrength = (new RangedAttribute((IAttribute) null, "horse.jumpStrength", 0.7D, 0.0D, 2.0D)).setDescription("Jump Strength").setShouldWatch(true); // SpigotMCP -- Apply access transformation
+    private static final String[] horseArmorTextures = new String[]{null, "textures/entity/horse/armor/horse_armor_iron.png", "textures/entity/horse/armor/horse_armor_gold.png", "textures/entity/horse/armor/horse_armor_diamond.png"};
+    private static final String[] field_110273_bx = new String[]{"", "meo", "goo", "dio"};
+    private static final int[] armorValues = new int[]{0, 5, 7, 11};
+    private static final String[] horseTextures = new String[]{"textures/entity/horse/horse_white.png", "textures/entity/horse/horse_creamy.png", "textures/entity/horse/horse_chestnut.png", "textures/entity/horse/horse_brown.png", "textures/entity/horse/horse_black.png", "textures/entity/horse/horse_gray.png", "textures/entity/horse/horse_darkbrown.png"};
+    private static final String[] field_110269_bA = new String[]{"hwh", "hcr", "hch", "hbr", "hbl", "hgr", "hdb"};
+    private static final String[] horseMarkingTextures = new String[]{null, "textures/entity/horse/horse_markings_white.png", "textures/entity/horse/horse_markings_whitefield.png", "textures/entity/horse/horse_markings_whitedots.png", "textures/entity/horse/horse_markings_blackdots.png"};
+    private static final String[] field_110292_bC = new String[]{"", "wo_", "wmo", "wdo", "bdo"};
     private int eatingHaystackCounter;
     private int openMouthCounter;
     private int jumpRearingCounter;
     public int field_110278_bp;
     public int field_110279_bq;
     protected boolean horseJumping;
-    private AnimalChest horseChest;
+    public AnimalChest horseChest; // SpigotMCP -- Apply access transformation
     private boolean hasReproduced;
     protected int temper;
     protected float jumpPower;
     private boolean field_110294_bI;
     private float headLean;
@@ -85,19 +86,19 @@
     private float prevMouthOpenness;
     private int gallopTime;
     private String texturePrefix;
     private String[] field_110280_bR = new String[3];
     private boolean field_175508_bO = false;
+    public int maxDomestication = 100; // CraftBukkit - store max domestication value
     private static final String __OBFID = "CL_00001641";
 
-    public EntityHorse(World worldIn)
-    {
+    public EntityHorse(World worldIn) {
         super(worldIn);
         this.setSize(1.4F, 1.6F);
         this.isImmuneToFire = false;
         this.setChested(false);
-        ((PathNavigateGround)this.getNavigator()).func_179690_a(true);
+        ((PathNavigateGround) this.getNavigator()).func_179690_a(true);
         this.tasks.addTask(0, new EntityAISwimming(this));
         this.tasks.addTask(1, new EntityAIPanic(this, 1.2D));
         this.tasks.addTask(1, new EntityAIRunAroundLikeCrazy(this, 1.2D));
         this.tasks.addTask(2, new EntityAIMate(this, 1.0D));
         this.tasks.addTask(4, new EntityAIFollowParent(this, 1.0D));
@@ -105,54 +106,44 @@
         this.tasks.addTask(7, new EntityAIWatchClosest(this, EntityPlayer.class, 6.0F));
         this.tasks.addTask(8, new EntityAILookIdle(this));
         this.func_110226_cD();
     }
 
-    protected void entityInit()
-    {
+    protected void entityInit() {
         super.entityInit();
         this.dataWatcher.addObject(16, Integer.valueOf(0));
-        this.dataWatcher.addObject(19, Byte.valueOf((byte)0));
+        this.dataWatcher.addObject(19, Byte.valueOf((byte) 0));
         this.dataWatcher.addObject(20, Integer.valueOf(0));
         this.dataWatcher.addObject(21, String.valueOf(""));
         this.dataWatcher.addObject(22, Integer.valueOf(0));
     }
 
-    public void setHorseType(int p_110214_1_)
-    {
-        this.dataWatcher.updateObject(19, Byte.valueOf((byte)p_110214_1_));
+    public void setHorseType(int p_110214_1_) {
+        this.dataWatcher.updateObject(19, Byte.valueOf((byte) p_110214_1_));
         this.resetTexturePrefix();
     }
 
-    public int getHorseType()
-    {
+    public int getHorseType() {
         return this.dataWatcher.getWatchableObjectByte(19);
     }
 
-    public void setHorseVariant(int p_110235_1_)
-    {
+    public void setHorseVariant(int p_110235_1_) {
         this.dataWatcher.updateObject(20, Integer.valueOf(p_110235_1_));
         this.resetTexturePrefix();
     }
 
-    public int getHorseVariant()
-    {
+    public int getHorseVariant() {
         return this.dataWatcher.getWatchableObjectInt(20);
     }
 
-    public String getName()
-    {
-        if (this.hasCustomName())
-        {
+    public String getName() {
+        if (this.hasCustomName()) {
             return this.getCustomNameTag();
-        }
-        else
-        {
+        } else {
             int i = this.getHorseType();
 
-            switch (i)
-            {
+            switch (i) {
                 case 0:
                 default:
                     return StatCollector.translateToLocal("entity.horse.name");
                 case 1:
                     return StatCollector.translateToLocal("entity.donkey.name");
@@ -164,1188 +155,891 @@
                     return StatCollector.translateToLocal("entity.skeletonhorse.name");
             }
         }
     }
 
-    private boolean getHorseWatchableBoolean(int p_110233_1_)
-    {
+    private boolean getHorseWatchableBoolean(int p_110233_1_) {
         return (this.dataWatcher.getWatchableObjectInt(16) & p_110233_1_) != 0;
     }
 
-    private void setHorseWatchableBoolean(int p_110208_1_, boolean p_110208_2_)
-    {
+    private void setHorseWatchableBoolean(int p_110208_1_, boolean p_110208_2_) {
         int j = this.dataWatcher.getWatchableObjectInt(16);
 
-        if (p_110208_2_)
-        {
+        if (p_110208_2_) {
             this.dataWatcher.updateObject(16, Integer.valueOf(j | p_110208_1_));
-        }
-        else
-        {
+        } else {
             this.dataWatcher.updateObject(16, Integer.valueOf(j & ~p_110208_1_));
         }
     }
 
-    public boolean isAdultHorse()
-    {
+    public boolean isAdultHorse() {
         return !this.isChild();
     }
 
-    public boolean isTame()
-    {
+    public boolean isTame() {
         return this.getHorseWatchableBoolean(2);
     }
 
-    public boolean func_110253_bW()
-    {
+    public boolean func_110253_bW() {
         return this.isAdultHorse();
     }
 
-    public String func_152119_ch()
-    {
+    public String func_152119_ch() {
         return this.dataWatcher.getWatchableObjectString(21);
     }
 
-    public void func_152120_b(String p_152120_1_)
-    {
+    public void func_152120_b(String p_152120_1_) {
         this.dataWatcher.updateObject(21, p_152120_1_);
     }
 
-    public float getHorseSize()
-    {
+    public float getHorseSize() {
         int i = this.getGrowingAge();
-        return i >= 0 ? 1.0F : 0.5F + (float)(-24000 - i) / -24000.0F * 0.5F;
+        return i >= 0 ? 1.0F : 0.5F + (float) (-24000 - i) / -24000.0F * 0.5F;
     }
 
-    public void setScaleForAge(boolean p_98054_1_)
-    {
-        if (p_98054_1_)
-        {
+    public void setScaleForAge(boolean p_98054_1_) {
+        if (p_98054_1_) {
             this.setScale(this.getHorseSize());
-        }
-        else
-        {
+        } else {
             this.setScale(1.0F);
         }
     }
 
-    public boolean isHorseJumping()
-    {
+    public boolean isHorseJumping() {
         return this.horseJumping;
     }
 
-    public void setHorseTamed(boolean p_110234_1_)
-    {
+    public void setHorseTamed(boolean p_110234_1_) {
         this.setHorseWatchableBoolean(2, p_110234_1_);
     }
 
-    public void setHorseJumping(boolean p_110255_1_)
-    {
+    public void setHorseJumping(boolean p_110255_1_) {
         this.horseJumping = p_110255_1_;
     }
 
-    public boolean allowLeashing()
-    {
+    public boolean allowLeashing() {
         return !this.isUndead() && super.allowLeashing();
     }
 
-    protected void func_142017_o(float p_142017_1_)
-    {
-        if (p_142017_1_ > 6.0F && this.isEatingHaystack())
-        {
+    protected void func_142017_o(float p_142017_1_) {
+        if (p_142017_1_ > 6.0F && this.isEatingHaystack()) {
             this.setEatingHaystack(false);
         }
     }
 
-    public boolean isChested()
-    {
+    public boolean isChested() {
         return this.getHorseWatchableBoolean(8);
     }
 
-    public int func_110241_cb()
-    {
+    public int func_110241_cb() {
         return this.dataWatcher.getWatchableObjectInt(22);
     }
 
-    private int getHorseArmorIndex(ItemStack p_110260_1_)
-    {
-        if (p_110260_1_ == null)
-        {
+    private int getHorseArmorIndex(ItemStack p_110260_1_) {
+        if (p_110260_1_ == null) {
             return 0;
-        }
-        else
-        {
+        } else {
             Item item = p_110260_1_.getItem();
             return item == Items.iron_horse_armor ? 1 : (item == Items.golden_horse_armor ? 2 : (item == Items.diamond_horse_armor ? 3 : 0));
         }
     }
 
-    public boolean isEatingHaystack()
-    {
+    public boolean isEatingHaystack() {
         return this.getHorseWatchableBoolean(32);
     }
 
-    public boolean isRearing()
-    {
+    public boolean isRearing() {
         return this.getHorseWatchableBoolean(64);
     }
 
-    public boolean func_110205_ce()
-    {
+    public boolean func_110205_ce() {
         return this.getHorseWatchableBoolean(16);
     }
 
-    public boolean getHasReproduced()
-    {
+    public boolean getHasReproduced() {
         return this.hasReproduced;
     }
 
-    public void setHorseArmorStack(ItemStack p_146086_1_)
-    {
+    public void setHorseArmorStack(ItemStack p_146086_1_) {
         this.dataWatcher.updateObject(22, Integer.valueOf(this.getHorseArmorIndex(p_146086_1_)));
         this.resetTexturePrefix();
     }
 
-    public void func_110242_l(boolean p_110242_1_)
-    {
+    public void func_110242_l(boolean p_110242_1_) {
         this.setHorseWatchableBoolean(16, p_110242_1_);
     }
 
-    public void setChested(boolean p_110207_1_)
-    {
+    public void setChested(boolean p_110207_1_) {
         this.setHorseWatchableBoolean(8, p_110207_1_);
     }
 
-    public void setHasReproduced(boolean p_110221_1_)
-    {
+    public void setHasReproduced(boolean p_110221_1_) {
         this.hasReproduced = p_110221_1_;
     }
 
-    public void setHorseSaddled(boolean p_110251_1_)
-    {
+    public void setHorseSaddled(boolean p_110251_1_) {
         this.setHorseWatchableBoolean(4, p_110251_1_);
     }
 
-    public int getTemper()
-    {
+    public int getTemper() {
         return this.temper;
     }
 
-    public void setTemper(int p_110238_1_)
-    {
+    public void setTemper(int p_110238_1_) {
         this.temper = p_110238_1_;
     }
 
-    public int increaseTemper(int p_110198_1_)
-    {
+    public int increaseTemper(int p_110198_1_) {
         int j = MathHelper.clamp_int(this.getTemper() + p_110198_1_, 0, this.getMaxTemper());
         this.setTemper(j);
         return j;
     }
 
-    public boolean attackEntityFrom(DamageSource source, float amount)
-    {
+    public boolean attackEntityFrom(DamageSource source, float amount) {
         Entity entity = source.getEntity();
         return this.riddenByEntity != null && this.riddenByEntity.equals(entity) ? false : super.attackEntityFrom(source, amount);
     }
 
-    public int getTotalArmorValue()
-    {
+    public int getTotalArmorValue() {
         return armorValues[this.func_110241_cb()];
     }
 
-    public boolean canBePushed()
-    {
+    public boolean canBePushed() {
         return this.riddenByEntity == null;
     }
 
-    public boolean prepareChunkForSpawn()
-    {
+    public boolean prepareChunkForSpawn() {
         int i = MathHelper.floor_double(this.posX);
         int j = MathHelper.floor_double(this.posZ);
         this.worldObj.getBiomeGenForCoords(new BlockPos(i, 0, j));
         return true;
     }
 
-    public void dropChests()
-    {
-        if (!this.worldObj.isRemote && this.isChested())
-        {
+    public void dropChests() {
+        if (!this.worldObj.isRemote && this.isChested()) {
             this.dropItem(Item.getItemFromBlock(Blocks.chest), 1);
             this.setChested(false);
         }
     }
 
-    private void func_110266_cB()
-    {
+    private void func_110266_cB() {
         this.openHorseMouth();
 
-        if (!this.isSilent())
-        {
+        if (!this.isSilent()) {
             this.worldObj.playSoundAtEntity(this, "eating", 1.0F, 1.0F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F);
         }
     }
 
-    public void fall(float distance, float damageMultiplier)
-    {
-        if (distance > 1.0F)
-        {
+    public void fall(float distance, float damageMultiplier) {
+        if (distance > 1.0F) {
             this.playSound("mob.horse.land", 0.4F, 1.0F);
         }
 
         int i = MathHelper.ceiling_float_int((distance * 0.5F - 3.0F) * damageMultiplier);
 
-        if (i > 0)
-        {
-            this.attackEntityFrom(DamageSource.fall, (float)i);
+        if (i > 0) {
+            this.attackEntityFrom(DamageSource.fall, (float) i);
 
-            if (this.riddenByEntity != null)
-            {
-                this.riddenByEntity.attackEntityFrom(DamageSource.fall, (float)i);
+            if (this.riddenByEntity != null) {
+                this.riddenByEntity.attackEntityFrom(DamageSource.fall, (float) i);
             }
 
-            Block block = this.worldObj.getBlockState(new BlockPos(this.posX, this.posY - 0.2D - (double)this.prevRotationYaw, this.posZ)).getBlock();
+            Block block = this.worldObj.getBlockState(new BlockPos(this.posX, this.posY - 0.2D - (double) this.prevRotationYaw, this.posZ)).getBlock();
 
-            if (block.getMaterial() != Material.air && !this.isSilent())
-            {
+            if (block.getMaterial() != Material.air && !this.isSilent()) {
                 Block.SoundType soundtype = block.stepSound;
                 this.worldObj.playSoundAtEntity(this, soundtype.getStepSound(), soundtype.getVolume() * 0.5F, soundtype.getFrequency() * 0.75F);
             }
         }
     }
 
-    private int func_110225_cC()
-    {
+    private int func_110225_cC() {
         int i = this.getHorseType();
-        return this.isChested() && (i == 1 || i == 2) ? 17 : 2;
+        return this.isChested() /* && (i == 1 || i == 2) */ ? 17 : 2; // CraftBukkit - Remove type check
     }
 
-    private void func_110226_cD()
-    {
+    public void func_110226_cD() { // SpigotMCP -- Apply access transformation
         AnimalChest animalchest = this.horseChest;
-        this.horseChest = new AnimalChest("HorseChest", this.func_110225_cC());
+        this.horseChest = new AnimalChest("HorseChest", this.func_110225_cC(), this); // CraftBukkit - add this horse
         this.horseChest.setCustomName(this.getName());
 
-        if (animalchest != null)
-        {
+        if (animalchest != null) {
             animalchest.func_110132_b(this);
             int i = Math.min(animalchest.getSizeInventory(), this.horseChest.getSizeInventory());
 
-            for (int j = 0; j < i; ++j)
-            {
+            for (int j = 0; j < i; ++j) {
                 ItemStack itemstack = animalchest.getStackInSlot(j);
 
-                if (itemstack != null)
-                {
+                if (itemstack != null) {
                     this.horseChest.setInventorySlotContents(j, itemstack.copy());
                 }
             }
         }
 
         this.horseChest.func_110134_a(this);
         this.func_110232_cE();
     }
 
-    private void func_110232_cE()
-    {
-        if (!this.worldObj.isRemote)
-        {
+    private void func_110232_cE() {
+        if (!this.worldObj.isRemote) {
             this.setHorseSaddled(this.horseChest.getStackInSlot(0) != null);
 
-            if (this.canWearArmor())
-            {
+            if (this.canWearArmor()) {
                 this.setHorseArmorStack(this.horseChest.getStackInSlot(1));
             }
         }
     }
 
-    public void onInventoryChanged(InventoryBasic p_76316_1_)
-    {
+    public void onInventoryChanged(InventoryBasic p_76316_1_) {
         int i = this.func_110241_cb();
         boolean flag = this.isHorseSaddled();
         this.func_110232_cE();
 
-        if (this.ticksExisted > 20)
-        {
-            if (i == 0 && i != this.func_110241_cb())
-            {
+        if (this.ticksExisted > 20) {
+            if (i == 0 && i != this.func_110241_cb()) {
                 this.playSound("mob.horse.armor", 0.5F, 1.0F);
-            }
-            else if (i != this.func_110241_cb())
-            {
+            } else if (i != this.func_110241_cb()) {
                 this.playSound("mob.horse.armor", 0.5F, 1.0F);
             }
 
-            if (!flag && this.isHorseSaddled())
-            {
+            if (!flag && this.isHorseSaddled()) {
                 this.playSound("mob.horse.leather", 0.5F, 1.0F);
             }
         }
     }
 
-    public boolean getCanSpawnHere()
-    {
+    public boolean getCanSpawnHere() {
         this.prepareChunkForSpawn();
         return super.getCanSpawnHere();
     }
 
-    protected EntityHorse getClosestHorse(Entity p_110250_1_, double p_110250_2_)
-    {
+    protected EntityHorse getClosestHorse(Entity p_110250_1_, double p_110250_2_) {
         double d1 = Double.MAX_VALUE;
         Entity entity1 = null;
         List list = this.worldObj.func_175674_a(p_110250_1_, p_110250_1_.getEntityBoundingBox().addCoord(p_110250_2_, p_110250_2_, p_110250_2_), horseBreedingSelector);
         Iterator iterator = list.iterator();
 
-        while (iterator.hasNext())
-        {
-            Entity entity2 = (Entity)iterator.next();
+        while (iterator.hasNext()) {
+            Entity entity2 = (Entity) iterator.next();
             double d2 = entity2.getDistanceSq(p_110250_1_.posX, p_110250_1_.posY, p_110250_1_.posZ);
 
-            if (d2 < d1)
-            {
+            if (d2 < d1) {
                 entity1 = entity2;
                 d1 = d2;
             }
         }
 
-        return (EntityHorse)entity1;
+        return (EntityHorse) entity1;
     }
 
-    public double getHorseJumpStrength()
-    {
+    public double getHorseJumpStrength() {
         return this.getEntityAttribute(horseJumpStrength).getAttributeValue();
     }
 
-    protected String getDeathSound()
-    {
+    protected String getDeathSound() {
         this.openHorseMouth();
         int i = this.getHorseType();
         return i == 3 ? "mob.horse.zombie.death" : (i == 4 ? "mob.horse.skeleton.death" : (i != 1 && i != 2 ? "mob.horse.death" : "mob.horse.donkey.death"));
     }
 
-    protected Item getDropItem()
-    {
+    protected Item getDropItem() {
         boolean flag = this.rand.nextInt(4) == 0;
         int i = this.getHorseType();
         return i == 4 ? Items.bone : (i == 3 ? (flag ? null : Items.rotten_flesh) : Items.leather);
     }
 
-    protected String getHurtSound()
-    {
+    protected String getHurtSound() {
         this.openHorseMouth();
 
-        if (this.rand.nextInt(3) == 0)
-        {
+        if (this.rand.nextInt(3) == 0) {
             this.makeHorseRear();
         }
 
         int i = this.getHorseType();
         return i == 3 ? "mob.horse.zombie.hit" : (i == 4 ? "mob.horse.skeleton.hit" : (i != 1 && i != 2 ? "mob.horse.hit" : "mob.horse.donkey.hit"));
     }
 
-    public boolean isHorseSaddled()
-    {
+    public boolean isHorseSaddled() {
         return this.getHorseWatchableBoolean(4);
     }
 
-    protected String getLivingSound()
-    {
+    protected String getLivingSound() {
         this.openHorseMouth();
 
-        if (this.rand.nextInt(10) == 0 && !this.isMovementBlocked())
-        {
+        if (this.rand.nextInt(10) == 0 && !this.isMovementBlocked()) {
             this.makeHorseRear();
         }
 
         int i = this.getHorseType();
         return i == 3 ? "mob.horse.zombie.idle" : (i == 4 ? "mob.horse.skeleton.idle" : (i != 1 && i != 2 ? "mob.horse.idle" : "mob.horse.donkey.idle"));
     }
 
-    protected String getAngrySoundName()
-    {
+    protected String getAngrySoundName() {
         this.openHorseMouth();
         this.makeHorseRear();
         int i = this.getHorseType();
         return i != 3 && i != 4 ? (i != 1 && i != 2 ? "mob.horse.angry" : "mob.horse.donkey.angry") : null;
     }
 
-    protected void playStepSound(BlockPos p_180429_1_, Block p_180429_2_)
-    {
+    protected void playStepSound(BlockPos p_180429_1_, Block p_180429_2_) {
         Block.SoundType soundtype = p_180429_2_.stepSound;
 
-        if (this.worldObj.getBlockState(p_180429_1_.up()).getBlock() == Blocks.snow_layer)
-        {
+        if (this.worldObj.getBlockState(p_180429_1_.up()).getBlock() == Blocks.snow_layer) {
             soundtype = Blocks.snow_layer.stepSound;
         }
 
-        if (!p_180429_2_.getMaterial().isLiquid())
-        {
+        if (!p_180429_2_.getMaterial().isLiquid()) {
             int i = this.getHorseType();
 
-            if (this.riddenByEntity != null && i != 1 && i != 2)
-            {
+            if (this.riddenByEntity != null && i != 1 && i != 2) {
                 ++this.gallopTime;
 
-                if (this.gallopTime > 5 && this.gallopTime % 3 == 0)
-                {
+                if (this.gallopTime > 5 && this.gallopTime % 3 == 0) {
                     this.playSound("mob.horse.gallop", soundtype.getVolume() * 0.15F, soundtype.getFrequency());
 
-                    if (i == 0 && this.rand.nextInt(10) == 0)
-                    {
+                    if (i == 0 && this.rand.nextInt(10) == 0) {
                         this.playSound("mob.horse.breathe", soundtype.getVolume() * 0.6F, soundtype.getFrequency());
                     }
-                }
-                else if (this.gallopTime <= 5)
-                {
+                } else if (this.gallopTime <= 5) {
                     this.playSound("mob.horse.wood", soundtype.getVolume() * 0.15F, soundtype.getFrequency());
                 }
-            }
-            else if (soundtype == Block.soundTypeWood)
-            {
+            } else if (soundtype == Block.soundTypeWood) {
                 this.playSound("mob.horse.wood", soundtype.getVolume() * 0.15F, soundtype.getFrequency());
-            }
-            else
-            {
+            } else {
                 this.playSound("mob.horse.soft", soundtype.getVolume() * 0.15F, soundtype.getFrequency());
             }
         }
     }
 
-    protected void applyEntityAttributes()
-    {
+    protected void applyEntityAttributes() {
         super.applyEntityAttributes();
         this.getAttributeMap().registerAttribute(horseJumpStrength);
         this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setBaseValue(53.0D);
         this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setBaseValue(0.22499999403953552D);
     }
 
-    public int getMaxSpawnedInChunk()
-    {
+    public int getMaxSpawnedInChunk() {
         return 6;
     }
 
-    public int getMaxTemper()
-    {
-        return 100;
+    public int getMaxTemper() {
+        return this.maxDomestication; // CraftBukkit - return stored max domestication instead of 100
     }
 
-    protected float getSoundVolume()
-    {
+    protected float getSoundVolume() {
         return 0.8F;
     }
 
-    public int getTalkInterval()
-    {
+    public int getTalkInterval() {
         return 400;
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean func_110239_cn()
-    {
-        return this.getHorseType() == 0 || this.func_110241_cb() > 0;
-    }
-
-    private void resetTexturePrefix()
-    {
+    private void resetTexturePrefix() {
         this.texturePrefix = null;
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean func_175507_cI()
-    {
-        return this.field_175508_bO;
-    }
-
-    @SideOnly(Side.CLIENT)
-    private void setHorseTexturePaths()
-    {
-        this.texturePrefix = "horse/";
-        this.field_110280_bR[0] = null;
-        this.field_110280_bR[1] = null;
-        this.field_110280_bR[2] = null;
-        int i = this.getHorseType();
-        int j = this.getHorseVariant();
-        int k;
-
-        if (i == 0)
-        {
-            k = j & 255;
-            int l = (j & 65280) >> 8;
-
-            if (k >= horseTextures.length)
-            {
-                this.field_175508_bO = false;
-                return;
-            }
-
-            this.field_110280_bR[0] = horseTextures[k];
-            this.texturePrefix = this.texturePrefix + field_110269_bA[k];
-
-            if (l >= horseMarkingTextures.length)
-            {
-                this.field_175508_bO = false;
-                return;
-            }
-
-            this.field_110280_bR[1] = horseMarkingTextures[l];
-            this.texturePrefix = this.texturePrefix + field_110292_bC[l];
-        }
-        else
-        {
-            this.field_110280_bR[0] = "";
-            this.texturePrefix = this.texturePrefix + "_" + i + "_";
-        }
-
-        k = this.func_110241_cb();
-
-        if (k >= horseArmorTextures.length)
-        {
-            this.field_175508_bO = false;
-        }
-        else
-        {
-            this.field_110280_bR[2] = horseArmorTextures[k];
-            this.texturePrefix = this.texturePrefix + field_110273_bx[k];
-            this.field_175508_bO = true;
-        }
-    }
-
-    @SideOnly(Side.CLIENT)
-    public String getHorseTexture()
-    {
-        if (this.texturePrefix == null)
-        {
-            this.setHorseTexturePaths();
-        }
-
-        return this.texturePrefix;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public String[] getVariantTexturePaths()
-    {
-        if (this.texturePrefix == null)
-        {
-            this.setHorseTexturePaths();
-        }
-
-        return this.field_110280_bR;
-    }
-
-    public void openGUI(EntityPlayer playerEntity)
-    {
-        if (!this.worldObj.isRemote && (this.riddenByEntity == null || this.riddenByEntity == playerEntity) && this.isTame())
-        {
+    public void openGUI(EntityPlayer playerEntity) {
+        if (!this.worldObj.isRemote && (this.riddenByEntity == null || this.riddenByEntity == playerEntity) && this.isTame()) {
             this.horseChest.setCustomName(this.getName());
             playerEntity.displayGUIHorse(this, this.horseChest);
         }
     }
 
-    public boolean interact(EntityPlayer player)
-    {
+    public boolean interact(EntityPlayer player) {
         ItemStack itemstack = player.inventory.getCurrentItem();
 
-        if (itemstack != null && itemstack.getItem() == Items.spawn_egg)
-        {
+        if (itemstack != null && itemstack.getItem() == Items.spawn_egg) {
             return super.interact(player);
-        }
-        else if (!this.isTame() && this.isUndead())
-        {
+        } else if (!this.isTame() && this.isUndead()) {
             return false;
-        }
-        else if (this.isTame() && this.isAdultHorse() && player.isSneaking())
-        {
+        } else if (this.isTame() && this.isAdultHorse() && player.isSneaking()) {
             this.openGUI(player);
             return true;
-        }
-        else if (this.func_110253_bW() && this.riddenByEntity != null)
-        {
+        } else if (this.func_110253_bW() && this.riddenByEntity != null) {
             return super.interact(player);
-        }
-        else
-        {
-            if (itemstack != null)
-            {
+        } else {
+            if (itemstack != null) {
                 boolean flag = false;
 
-                if (this.canWearArmor())
-                {
+                if (this.canWearArmor()) {
                     byte b0 = -1;
 
-                    if (itemstack.getItem() == Items.iron_horse_armor)
-                    {
+                    if (itemstack.getItem() == Items.iron_horse_armor) {
                         b0 = 1;
-                    }
-                    else if (itemstack.getItem() == Items.golden_horse_armor)
-                    {
+                    } else if (itemstack.getItem() == Items.golden_horse_armor) {
                         b0 = 2;
-                    }
-                    else if (itemstack.getItem() == Items.diamond_horse_armor)
-                    {
+                    } else if (itemstack.getItem() == Items.diamond_horse_armor) {
                         b0 = 3;
                     }
 
-                    if (b0 >= 0)
-                    {
-                        if (!this.isTame())
-                        {
+                    if (b0 >= 0) {
+                        if (!this.isTame()) {
                             this.makeHorseRearWithSound();
                             return true;
                         }
 
                         this.openGUI(player);
                         return true;
                     }
                 }
 
-                if (!flag && !this.isUndead())
-                {
+                if (!flag && !this.isUndead()) {
                     float f = 0.0F;
                     short short1 = 0;
                     byte b1 = 0;
 
-                    if (itemstack.getItem() == Items.wheat)
-                    {
+                    if (itemstack.getItem() == Items.wheat) {
                         f = 2.0F;
                         short1 = 20;
                         b1 = 3;
-                    }
-                    else if (itemstack.getItem() == Items.sugar)
-                    {
+                    } else if (itemstack.getItem() == Items.sugar) {
                         f = 1.0F;
                         short1 = 30;
                         b1 = 3;
-                    }
-                    else if (Block.getBlockFromItem(itemstack.getItem()) == Blocks.hay_block)
-                    {
+                    } else if (Block.getBlockFromItem(itemstack.getItem()) == Blocks.hay_block) {
                         f = 20.0F;
                         short1 = 180;
-                    }
-                    else if (itemstack.getItem() == Items.apple)
-                    {
+                    } else if (itemstack.getItem() == Items.apple) {
                         f = 3.0F;
                         short1 = 60;
                         b1 = 3;
-                    }
-                    else if (itemstack.getItem() == Items.golden_carrot)
-                    {
+                    } else if (itemstack.getItem() == Items.golden_carrot) {
                         f = 4.0F;
                         short1 = 60;
                         b1 = 5;
 
-                        if (this.isTame() && this.getGrowingAge() == 0)
-                        {
+                        if (this.isTame() && this.getGrowingAge() == 0) {
                             flag = true;
                             this.setInLove(player);
                         }
-                    }
-                    else if (itemstack.getItem() == Items.golden_apple)
-                    {
+                    } else if (itemstack.getItem() == Items.golden_apple) {
                         f = 10.0F;
                         short1 = 240;
                         b1 = 10;
 
-                        if (this.isTame() && this.getGrowingAge() == 0)
-                        {
+                        if (this.isTame() && this.getGrowingAge() == 0) {
                             flag = true;
                             this.setInLove(player);
                         }
                     }
 
-                    if (this.getHealth() < this.getMaxHealth() && f > 0.0F)
-                    {
-                        this.heal(f);
+                    if (this.getHealth() < this.getMaxHealth() && f > 0.0F) {
+                        this.heal(f, EntityRegainHealthEvent.RegainReason.EATING); // CraftBukkit
                         flag = true;
                     }
 
-                    if (!this.isAdultHorse() && short1 > 0)
-                    {
+                    if (!this.isAdultHorse() && short1 > 0) {
                         this.addGrowth(short1);
                         flag = true;
                     }
 
-                    if (b1 > 0 && (flag || !this.isTame()) && b1 < this.getMaxTemper())
-                    {
+                    if (b1 > 0 && (flag || !this.isTame()) && b1 < this.getMaxTemper()) {
                         flag = true;
                         this.increaseTemper(b1);
                     }
 
-                    if (flag)
-                    {
+                    if (flag) {
                         this.func_110266_cB();
                     }
                 }
 
-                if (!this.isTame() && !flag)
-                {
-                    if (itemstack != null && itemstack.interactWithEntity(player, this))
-                    {
+                if (!this.isTame() && !flag) {
+                    if (itemstack != null && itemstack.interactWithEntity(player, this)) {
                         return true;
                     }
 
                     this.makeHorseRearWithSound();
                     return true;
                 }
 
-                if (!flag && this.canCarryChest() && !this.isChested() && itemstack.getItem() == Item.getItemFromBlock(Blocks.chest))
-                {
+                if (!flag && this.canCarryChest() && !this.isChested() && itemstack.getItem() == Item.getItemFromBlock(Blocks.chest)) {
                     this.setChested(true);
                     this.playSound("mob.chickenplop", 1.0F, (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
                     flag = true;
                     this.func_110226_cD();
                 }
 
-                if (!flag && this.func_110253_bW() && !this.isHorseSaddled() && itemstack.getItem() == Items.saddle)
-                {
+                if (!flag && this.func_110253_bW() && !this.isHorseSaddled() && itemstack.getItem() == Items.saddle) {
                     this.openGUI(player);
                     return true;
                 }
 
-                if (flag)
-                {
-                    if (!player.capabilities.isCreativeMode && --itemstack.stackSize == 0)
-                    {
-                        player.inventory.setInventorySlotContents(player.inventory.currentItem, (ItemStack)null);
+                if (flag) {
+                    if (!player.capabilities.isCreativeMode && --itemstack.stackSize == 0) {
+                        player.inventory.setInventorySlotContents(player.inventory.currentItem, (ItemStack) null);
                     }
 
                     return true;
                 }
             }
 
-            if (this.func_110253_bW() && this.riddenByEntity == null)
-            {
-                if (itemstack != null && itemstack.interactWithEntity(player, this))
-                {
+            if (this.func_110253_bW() && this.riddenByEntity == null) {
+                if (itemstack != null && itemstack.interactWithEntity(player, this)) {
                     return true;
-                }
-                else
-                {
+                } else {
                     this.func_110237_h(player);
                     return true;
                 }
-            }
-            else
-            {
+            } else {
                 return super.interact(player);
             }
         }
     }
 
-    private void func_110237_h(EntityPlayer p_110237_1_)
-    {
+    private void func_110237_h(EntityPlayer p_110237_1_) {
         p_110237_1_.rotationYaw = this.rotationYaw;
         p_110237_1_.rotationPitch = this.rotationPitch;
         this.setEatingHaystack(false);
         this.setRearing(false);
 
-        if (!this.worldObj.isRemote)
-        {
+        if (!this.worldObj.isRemote) {
             p_110237_1_.mountEntity(this);
         }
     }
 
-    public boolean canWearArmor()
-    {
+    public boolean canWearArmor() {
         return this.getHorseType() == 0;
     }
 
-    public boolean canCarryChest()
-    {
+    public boolean canCarryChest() {
         int i = this.getHorseType();
         return i == 2 || i == 1;
     }
 
-    protected boolean isMovementBlocked()
-    {
+    protected boolean isMovementBlocked() {
         return this.riddenByEntity != null && this.isHorseSaddled() ? true : this.isEatingHaystack() || this.isRearing();
     }
 
-    public boolean isUndead()
-    {
+    public boolean isUndead() {
         int i = this.getHorseType();
         return i == 3 || i == 4;
     }
 
-    public boolean isSterile()
-    {
+    public boolean isSterile() {
         return this.isUndead() || this.getHorseType() == 2;
     }
 
-    public boolean isBreedingItem(ItemStack stack)
-    {
+    public boolean isBreedingItem(ItemStack stack) {
         return false;
     }
 
-    private void func_110210_cH()
-    {
+    private void func_110210_cH() {
         this.field_110278_bp = 1;
     }
 
-    public void onDeath(DamageSource cause)
-    {
+    public void onDeath(DamageSource cause) {
         super.onDeath(cause);
 
+        /* CraftBukkit start - Handle chest dropping in dropDeathLoot below
         if (!this.worldObj.isRemote)
         {
             this.dropChestItems();
         }
+        // CraftBukkit end */
     }
 
-    public void onLivingUpdate()
-    {
-        if (this.rand.nextInt(200) == 0)
-        {
+    // CraftBukkit start - Add method
+    @Override
+    protected void dropFewItems(boolean flag, int i) {
+        super.dropFewItems(flag, i);
+
+        // Moved from die method above
+        if (!this.worldObj.isRemote) {
+            this.dropChestItems();
+        }
+    }
+    // CraftBukkit end
+
+    public void onLivingUpdate() {
+        if (this.rand.nextInt(200) == 0) {
             this.func_110210_cH();
         }
 
         super.onLivingUpdate();
 
-        if (!this.worldObj.isRemote)
-        {
-            if (this.rand.nextInt(900) == 0 && this.deathTime == 0)
-            {
-                this.heal(1.0F);
+        if (!this.worldObj.isRemote) {
+            if (this.rand.nextInt(900) == 0 && this.deathTime == 0) {
+                this.heal(1.0F, EntityRegainHealthEvent.RegainReason.REGEN); // CraftBukkit
             }
 
-            if (!this.isEatingHaystack() && this.riddenByEntity == null && this.rand.nextInt(300) == 0 && this.worldObj.getBlockState(new BlockPos(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY) - 1, MathHelper.floor_double(this.posZ))).getBlock() == Blocks.grass)
-            {
+            if (!this.isEatingHaystack() && this.riddenByEntity == null && this.rand.nextInt(300) == 0 && this.worldObj.getBlockState(new BlockPos(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY) - 1, MathHelper.floor_double(this.posZ))).getBlock() == Blocks.grass) {
                 this.setEatingHaystack(true);
             }
 
-            if (this.isEatingHaystack() && ++this.eatingHaystackCounter > 50)
-            {
+            if (this.isEatingHaystack() && ++this.eatingHaystackCounter > 50) {
                 this.eatingHaystackCounter = 0;
                 this.setEatingHaystack(false);
             }
 
-            if (this.func_110205_ce() && !this.isAdultHorse() && !this.isEatingHaystack())
-            {
+            if (this.func_110205_ce() && !this.isAdultHorse() && !this.isEatingHaystack()) {
                 EntityHorse entityhorse = this.getClosestHorse(this, 16.0D);
 
-                if (entityhorse != null && this.getDistanceSqToEntity(entityhorse) > 4.0D)
-                {
+                if (entityhorse != null && this.getDistanceSqToEntity(entityhorse) > 4.0D) {
                     this.navigator.getPathToEntityLiving(entityhorse);
                 }
             }
         }
     }
 
-    public void onUpdate()
-    {
+    public void onUpdate() {
         super.onUpdate();
 
-        if (this.worldObj.isRemote && this.dataWatcher.hasObjectChanged())
-        {
+        if (this.worldObj.isRemote && this.dataWatcher.hasObjectChanged()) {
             this.dataWatcher.func_111144_e();
             this.resetTexturePrefix();
         }
 
-        if (this.openMouthCounter > 0 && ++this.openMouthCounter > 30)
-        {
+        if (this.openMouthCounter > 0 && ++this.openMouthCounter > 30) {
             this.openMouthCounter = 0;
             this.setHorseWatchableBoolean(128, false);
         }
 
-        if (!this.worldObj.isRemote && this.jumpRearingCounter > 0 && ++this.jumpRearingCounter > 20)
-        {
+        if (!this.worldObj.isRemote && this.jumpRearingCounter > 0 && ++this.jumpRearingCounter > 20) {
             this.jumpRearingCounter = 0;
             this.setRearing(false);
         }
 
-        if (this.field_110278_bp > 0 && ++this.field_110278_bp > 8)
-        {
+        if (this.field_110278_bp > 0 && ++this.field_110278_bp > 8) {
             this.field_110278_bp = 0;
         }
 
-        if (this.field_110279_bq > 0)
-        {
+        if (this.field_110279_bq > 0) {
             ++this.field_110279_bq;
 
-            if (this.field_110279_bq > 300)
-            {
+            if (this.field_110279_bq > 300) {
                 this.field_110279_bq = 0;
             }
         }
 
         this.prevHeadLean = this.headLean;
 
-        if (this.isEatingHaystack())
-        {
+        if (this.isEatingHaystack()) {
             this.headLean += (1.0F - this.headLean) * 0.4F + 0.05F;
 
-            if (this.headLean > 1.0F)
-            {
+            if (this.headLean > 1.0F) {
                 this.headLean = 1.0F;
             }
-        }
-        else
-        {
+        } else {
             this.headLean += (0.0F - this.headLean) * 0.4F - 0.05F;
 
-            if (this.headLean < 0.0F)
-            {
+            if (this.headLean < 0.0F) {
                 this.headLean = 0.0F;
             }
         }
 
         this.prevRearingAmount = this.rearingAmount;
 
-        if (this.isRearing())
-        {
+        if (this.isRearing()) {
             this.prevHeadLean = this.headLean = 0.0F;
             this.rearingAmount += (1.0F - this.rearingAmount) * 0.4F + 0.05F;
 
-            if (this.rearingAmount > 1.0F)
-            {
+            if (this.rearingAmount > 1.0F) {
                 this.rearingAmount = 1.0F;
             }
-        }
-        else
-        {
+        } else {
             this.field_110294_bI = false;
             this.rearingAmount += (0.8F * this.rearingAmount * this.rearingAmount * this.rearingAmount - this.rearingAmount) * 0.6F - 0.05F;
 
-            if (this.rearingAmount < 0.0F)
-            {
+            if (this.rearingAmount < 0.0F) {
                 this.rearingAmount = 0.0F;
             }
         }
 
         this.prevMouthOpenness = this.mouthOpenness;
 
-        if (this.getHorseWatchableBoolean(128))
-        {
+        if (this.getHorseWatchableBoolean(128)) {
             this.mouthOpenness += (1.0F - this.mouthOpenness) * 0.7F + 0.05F;
 
-            if (this.mouthOpenness > 1.0F)
-            {
+            if (this.mouthOpenness > 1.0F) {
                 this.mouthOpenness = 1.0F;
             }
-        }
-        else
-        {
+        } else {
             this.mouthOpenness += (0.0F - this.mouthOpenness) * 0.7F - 0.05F;
 
-            if (this.mouthOpenness < 0.0F)
-            {
+            if (this.mouthOpenness < 0.0F) {
                 this.mouthOpenness = 0.0F;
             }
         }
     }
 
-    private void openHorseMouth()
-    {
-        if (!this.worldObj.isRemote)
-        {
+    private void openHorseMouth() {
+        if (!this.worldObj.isRemote) {
             this.openMouthCounter = 1;
             this.setHorseWatchableBoolean(128, true);
         }
     }
 
-    private boolean canMate()
-    {
+    private boolean canMate() {
         return this.riddenByEntity == null && this.ridingEntity == null && this.isTame() && this.isAdultHorse() && !this.isSterile() && this.getHealth() >= this.getMaxHealth() && this.isInLove();
     }
 
-    public void setEating(boolean eating)
-    {
+    public void setEating(boolean eating) {
         this.setHorseWatchableBoolean(32, eating);
     }
 
-    public void setEatingHaystack(boolean p_110227_1_)
-    {
+    public void setEatingHaystack(boolean p_110227_1_) {
         this.setEating(p_110227_1_);
     }
 
-    public void setRearing(boolean p_110219_1_)
-    {
-        if (p_110219_1_)
-        {
+    public void setRearing(boolean p_110219_1_) {
+        if (p_110219_1_) {
             this.setEatingHaystack(false);
         }
 
         this.setHorseWatchableBoolean(64, p_110219_1_);
     }
 
-    private void makeHorseRear()
-    {
-        if (!this.worldObj.isRemote)
-        {
+    private void makeHorseRear() {
+        if (!this.worldObj.isRemote) {
             this.jumpRearingCounter = 1;
             this.setRearing(true);
         }
     }
 
-    public void makeHorseRearWithSound()
-    {
+    public void makeHorseRearWithSound() {
         this.makeHorseRear();
         String s = this.getAngrySoundName();
 
-        if (s != null)
-        {
+        if (s != null) {
             this.playSound(s, this.getSoundVolume(), this.getSoundPitch());
         }
     }
 
-    public void dropChestItems()
-    {
+    public void dropChestItems() {
         this.dropItemsInChest(this, this.horseChest);
         this.dropChests();
     }
 
-    private void dropItemsInChest(Entity p_110240_1_, AnimalChest p_110240_2_)
-    {
-        if (p_110240_2_ != null && !this.worldObj.isRemote)
-        {
-            for (int i = 0; i < p_110240_2_.getSizeInventory(); ++i)
-            {
+    private void dropItemsInChest(Entity p_110240_1_, AnimalChest p_110240_2_) {
+        if (p_110240_2_ != null && !this.worldObj.isRemote) {
+            for (int i = 0; i < p_110240_2_.getSizeInventory(); ++i) {
                 ItemStack itemstack = p_110240_2_.getStackInSlot(i);
 
-                if (itemstack != null)
-                {
+                if (itemstack != null) {
                     this.entityDropItem(itemstack, 0.0F);
                 }
             }
         }
     }
 
-    public boolean setTamedBy(EntityPlayer p_110263_1_)
-    {
+    public boolean setTamedBy(EntityPlayer p_110263_1_) {
         this.func_152120_b(p_110263_1_.getUniqueID().toString());
         this.setHorseTamed(true);
         return true;
     }
 
-    public void moveEntityWithHeading(float p_70612_1_, float p_70612_2_)
-    {
-        if (this.riddenByEntity != null && this.riddenByEntity instanceof EntityLivingBase && this.isHorseSaddled())
-        {
+    public void moveEntityWithHeading(float p_70612_1_, float p_70612_2_) {
+        if (this.riddenByEntity != null && this.riddenByEntity instanceof EntityLivingBase && this.isHorseSaddled()) {
             this.prevRotationYaw = this.rotationYaw = this.riddenByEntity.rotationYaw;
             this.rotationPitch = this.riddenByEntity.rotationPitch * 0.5F;
             this.setRotation(this.rotationYaw, this.rotationPitch);
             this.rotationYawHead = this.renderYawOffset = this.rotationYaw;
-            p_70612_1_ = ((EntityLivingBase)this.riddenByEntity).moveStrafing * 0.5F;
-            p_70612_2_ = ((EntityLivingBase)this.riddenByEntity).moveForward;
+            p_70612_1_ = ((EntityLivingBase) this.riddenByEntity).moveStrafing * 0.5F;
+            p_70612_2_ = ((EntityLivingBase) this.riddenByEntity).moveForward;
 
-            if (p_70612_2_ <= 0.0F)
-            {
+            if (p_70612_2_ <= 0.0F) {
                 p_70612_2_ *= 0.25F;
                 this.gallopTime = 0;
             }
 
-            if (this.onGround && this.jumpPower == 0.0F && this.isRearing() && !this.field_110294_bI)
-            {
+            if (this.onGround && this.jumpPower == 0.0F && this.isRearing() && !this.field_110294_bI) {
                 p_70612_1_ = 0.0F;
                 p_70612_2_ = 0.0F;
             }
 
-            if (this.jumpPower > 0.0F && !this.isHorseJumping() && this.onGround)
-            {
-                this.motionY = this.getHorseJumpStrength() * (double)this.jumpPower;
+            if (this.jumpPower > 0.0F && !this.isHorseJumping() && this.onGround) {
+                this.motionY = this.getHorseJumpStrength() * (double) this.jumpPower;
 
-                if (this.isPotionActive(Potion.jump))
-                {
-                    this.motionY += (double)((float)(this.getActivePotionEffect(Potion.jump).getAmplifier() + 1) * 0.1F);
+                if (this.isPotionActive(Potion.jump)) {
+                    this.motionY += (double) ((float) (this.getActivePotionEffect(Potion.jump).getAmplifier() + 1) * 0.1F);
                 }
 
                 this.setHorseJumping(true);
                 this.isAirBorne = true;
 
-                if (p_70612_2_ > 0.0F)
-                {
-                    float f2 = MathHelper.sin(this.rotationYaw * (float)Math.PI / 180.0F);
-                    float f3 = MathHelper.cos(this.rotationYaw * (float)Math.PI / 180.0F);
-                    this.motionX += (double)(-0.4F * f2 * this.jumpPower);
-                    this.motionZ += (double)(0.4F * f3 * this.jumpPower);
+                if (p_70612_2_ > 0.0F) {
+                    float f2 = MathHelper.sin(this.rotationYaw * (float) Math.PI / 180.0F);
+                    float f3 = MathHelper.cos(this.rotationYaw * (float) Math.PI / 180.0F);
+                    this.motionX += (double) (-0.4F * f2 * this.jumpPower);
+                    this.motionZ += (double) (0.4F * f3 * this.jumpPower);
                     this.playSound("mob.horse.jump", 0.4F, 1.0F);
                 }
 
                 this.jumpPower = 0.0F;
             }
 
             this.stepHeight = 1.0F;
             this.jumpMovementFactor = this.getAIMoveSpeed() * 0.1F;
 
-            if (!this.worldObj.isRemote)
-            {
-                this.setAIMoveSpeed((float)this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).getAttributeValue());
+            if (!this.worldObj.isRemote) {
+                this.setAIMoveSpeed((float) this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).getAttributeValue());
                 super.moveEntityWithHeading(p_70612_1_, p_70612_2_);
             }
 
-            if (this.onGround)
-            {
+            if (this.onGround) {
                 this.jumpPower = 0.0F;
                 this.setHorseJumping(false);
             }
 
             this.prevLimbSwingAmount = this.limbSwingAmount;
             double d1 = this.posX - this.prevPosX;
             double d0 = this.posZ - this.prevPosZ;
             float f4 = MathHelper.sqrt_double(d1 * d1 + d0 * d0) * 4.0F;
 
-            if (f4 > 1.0F)
-            {
+            if (f4 > 1.0F) {
                 f4 = 1.0F;
             }
 
             this.limbSwingAmount += (f4 - this.limbSwingAmount) * 0.4F;
             this.limbSwing += this.limbSwingAmount;
-        }
-        else
-        {
+        } else {
             this.stepHeight = 0.5F;
             this.jumpMovementFactor = 0.02F;
             super.moveEntityWithHeading(p_70612_1_, p_70612_2_);
         }
     }
 
-    public void writeEntityToNBT(NBTTagCompound tagCompound)
-    {
+    public void writeEntityToNBT(NBTTagCompound tagCompound) {
         super.writeEntityToNBT(tagCompound);
         tagCompound.setBoolean("EatingHaystack", this.isEatingHaystack());
         tagCompound.setBoolean("ChestedHorse", this.isChested());
         tagCompound.setBoolean("HasReproduced", this.getHasReproduced());
         tagCompound.setBoolean("Bred", this.func_110205_ce());
         tagCompound.setInteger("Type", this.getHorseType());
         tagCompound.setInteger("Variant", this.getHorseVariant());
         tagCompound.setInteger("Temper", this.getTemper());
         tagCompound.setBoolean("Tame", this.isTame());
         tagCompound.setString("OwnerUUID", this.func_152119_ch());
+        tagCompound.setInteger("Bukkit.MaxDomestication", this.maxDomestication); // CraftBukkit
 
-        if (this.isChested())
-        {
+        if (this.isChested()) {
             NBTTagList nbttaglist = new NBTTagList();
 
-            for (int i = 2; i < this.horseChest.getSizeInventory(); ++i)
-            {
+            for (int i = 2; i < this.horseChest.getSizeInventory(); ++i) {
                 ItemStack itemstack = this.horseChest.getStackInSlot(i);
 
-                if (itemstack != null)
-                {
+                if (itemstack != null) {
                     NBTTagCompound nbttagcompound1 = new NBTTagCompound();
-                    nbttagcompound1.setByte("Slot", (byte)i);
+                    nbttagcompound1.setByte("Slot", (byte) i);
                     itemstack.writeToNBT(nbttagcompound1);
                     nbttaglist.appendTag(nbttagcompound1);
                 }
             }
 
             tagCompound.setTag("Items", nbttaglist);
         }
 
-        if (this.horseChest.getStackInSlot(1) != null)
-        {
+        if (this.horseChest.getStackInSlot(1) != null) {
             tagCompound.setTag("ArmorItem", this.horseChest.getStackInSlot(1).writeToNBT(new NBTTagCompound()));
         }
 
-        if (this.horseChest.getStackInSlot(0) != null)
-        {
+        if (this.horseChest.getStackInSlot(0) != null) {
             tagCompound.setTag("SaddleItem", this.horseChest.getStackInSlot(0).writeToNBT(new NBTTagCompound()));
         }
     }
 
-    public void readEntityFromNBT(NBTTagCompound tagCompund)
-    {
+    public void readEntityFromNBT(NBTTagCompound tagCompund) {
         super.readEntityFromNBT(tagCompund);
         this.setEatingHaystack(tagCompund.getBoolean("EatingHaystack"));
         this.func_110242_l(tagCompund.getBoolean("Bred"));
         this.setChested(tagCompund.getBoolean("ChestedHorse"));
         this.setHasReproduced(tagCompund.getBoolean("HasReproduced"));
@@ -1353,188 +1047,159 @@
         this.setHorseVariant(tagCompund.getInteger("Variant"));
         this.setTemper(tagCompund.getInteger("Temper"));
         this.setHorseTamed(tagCompund.getBoolean("Tame"));
         String s = "";
 
-        if (tagCompund.hasKey("OwnerUUID", 8))
-        {
+        if (tagCompund.hasKey("OwnerUUID", 8)) {
             s = tagCompund.getString("OwnerUUID");
-        }
-        else
-        {
+        } else {
             String s1 = tagCompund.getString("Owner");
+            // Spigot start
+            if (s1 == null || s1.isEmpty()) {
+                if (tagCompund.hasKey("OwnerName")) {
+                    String owner = tagCompund.getString("OwnerName");
+                    if (owner != null && !owner.isEmpty()) {
+                        s1 = owner;
+                    }
+                }
+            }
+            // Spigot end
             s = PreYggdrasilConverter.func_152719_a(s1);
         }
 
-        if (s.length() > 0)
-        {
+        if (s.length() > 0) {
             this.func_152120_b(s);
         }
 
+        // CraftBukkit start
+        if (tagCompund.hasKey("Bukkit.MaxDomestication")) {
+            this.maxDomestication = tagCompund.getInteger("Bukkit.MaxDomestication");
+        }
+        // CraftBukkit end
+
         IAttributeInstance iattributeinstance = this.getAttributeMap().getAttributeInstanceByName("Speed");
 
-        if (iattributeinstance != null)
-        {
+        if (iattributeinstance != null) {
             this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setBaseValue(iattributeinstance.getBaseValue() * 0.25D);
         }
 
-        if (this.isChested())
-        {
+        if (this.isChested()) {
             NBTTagList nbttaglist = tagCompund.getTagList("Items", 10);
             this.func_110226_cD();
 
-            for (int i = 0; i < nbttaglist.tagCount(); ++i)
-            {
+            for (int i = 0; i < nbttaglist.tagCount(); ++i) {
                 NBTTagCompound nbttagcompound1 = nbttaglist.getCompoundTagAt(i);
                 int j = nbttagcompound1.getByte("Slot") & 255;
 
-                if (j >= 2 && j < this.horseChest.getSizeInventory())
-                {
+                if (j >= 2 && j < this.horseChest.getSizeInventory()) {
                     this.horseChest.setInventorySlotContents(j, ItemStack.loadItemStackFromNBT(nbttagcompound1));
                 }
             }
         }
 
         ItemStack itemstack;
 
-        if (tagCompund.hasKey("ArmorItem", 10))
-        {
+        if (tagCompund.hasKey("ArmorItem", 10)) {
             itemstack = ItemStack.loadItemStackFromNBT(tagCompund.getCompoundTag("ArmorItem"));
 
-            if (itemstack != null && func_146085_a(itemstack.getItem()))
-            {
+            if (itemstack != null && func_146085_a(itemstack.getItem())) {
                 this.horseChest.setInventorySlotContents(1, itemstack);
             }
         }
 
-        if (tagCompund.hasKey("SaddleItem", 10))
-        {
+        if (tagCompund.hasKey("SaddleItem", 10)) {
             itemstack = ItemStack.loadItemStackFromNBT(tagCompund.getCompoundTag("SaddleItem"));
 
-            if (itemstack != null && itemstack.getItem() == Items.saddle)
-            {
+            if (itemstack != null && itemstack.getItem() == Items.saddle) {
                 this.horseChest.setInventorySlotContents(0, itemstack);
             }
-        }
-        else if (tagCompund.getBoolean("Saddle"))
-        {
+        } else if (tagCompund.getBoolean("Saddle")) {
             this.horseChest.setInventorySlotContents(0, new ItemStack(Items.saddle));
         }
 
         this.func_110232_cE();
     }
 
-    public boolean canMateWith(EntityAnimal otherAnimal)
-    {
-        if (otherAnimal == this)
-        {
+    public boolean canMateWith(EntityAnimal otherAnimal) {
+        if (otherAnimal == this) {
             return false;
-        }
-        else if (otherAnimal.getClass() != this.getClass())
-        {
+        } else if (otherAnimal.getClass() != this.getClass()) {
             return false;
-        }
-        else
-        {
-            EntityHorse entityhorse = (EntityHorse)otherAnimal;
+        } else {
+            EntityHorse entityhorse = (EntityHorse) otherAnimal;
 
-            if (this.canMate() && entityhorse.canMate())
-            {
+            if (this.canMate() && entityhorse.canMate()) {
                 int i = this.getHorseType();
                 int j = entityhorse.getHorseType();
                 return i == j || i == 0 && j == 1 || i == 1 && j == 0;
-            }
-            else
-            {
+            } else {
                 return false;
             }
         }
     }
 
-    public EntityAgeable createChild(EntityAgeable ageable)
-    {
-        EntityHorse entityhorse = (EntityHorse)ageable;
+    public EntityAgeable createChild(EntityAgeable ageable) {
+        EntityHorse entityhorse = (EntityHorse) ageable;
         EntityHorse entityhorse1 = new EntityHorse(this.worldObj);
         int i = this.getHorseType();
         int j = entityhorse.getHorseType();
         int k = 0;
 
-        if (i == j)
-        {
+        if (i == j) {
             k = i;
-        }
-        else if (i == 0 && j == 1 || i == 1 && j == 0)
-        {
+        } else if (i == 0 && j == 1 || i == 1 && j == 0) {
             k = 2;
         }
 
-        if (k == 0)
-        {
+        if (k == 0) {
             int i1 = this.rand.nextInt(9);
             int l;
 
-            if (i1 < 4)
-            {
+            if (i1 < 4) {
                 l = this.getHorseVariant() & 255;
-            }
-            else if (i1 < 8)
-            {
+            } else if (i1 < 8) {
                 l = entityhorse.getHorseVariant() & 255;
-            }
-            else
-            {
+            } else {
                 l = this.rand.nextInt(7);
             }
 
             int j1 = this.rand.nextInt(5);
 
-            if (j1 < 2)
-            {
+            if (j1 < 2) {
                 l |= this.getHorseVariant() & 65280;
-            }
-            else if (j1 < 4)
-            {
+            } else if (j1 < 4) {
                 l |= entityhorse.getHorseVariant() & 65280;
-            }
-            else
-            {
+            } else {
                 l |= this.rand.nextInt(5) << 8 & 65280;
             }
 
             entityhorse1.setHorseVariant(l);
         }
 
         entityhorse1.setHorseType(k);
-        double d1 = this.getEntityAttribute(SharedMonsterAttributes.maxHealth).getBaseValue() + ageable.getEntityAttribute(SharedMonsterAttributes.maxHealth).getBaseValue() + (double)this.func_110267_cL();
+        double d1 = this.getEntityAttribute(SharedMonsterAttributes.maxHealth).getBaseValue() + ageable.getEntityAttribute(SharedMonsterAttributes.maxHealth).getBaseValue() + (double) this.func_110267_cL();
         entityhorse1.getEntityAttribute(SharedMonsterAttributes.maxHealth).setBaseValue(d1 / 3.0D);
         double d2 = this.getEntityAttribute(horseJumpStrength).getBaseValue() + ageable.getEntityAttribute(horseJumpStrength).getBaseValue() + this.func_110245_cM();
         entityhorse1.getEntityAttribute(horseJumpStrength).setBaseValue(d2 / 3.0D);
         double d0 = this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).getBaseValue() + ageable.getEntityAttribute(SharedMonsterAttributes.movementSpeed).getBaseValue() + this.func_110203_cN();
         entityhorse1.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setBaseValue(d0 / 3.0D);
         return entityhorse1;
     }
 
-    public IEntityLivingData func_180482_a(DifficultyInstance p_180482_1_, IEntityLivingData p_180482_2_)
-    {
+    public IEntityLivingData func_180482_a(DifficultyInstance p_180482_1_, IEntityLivingData p_180482_2_) {
         Object p_180482_2_1 = super.func_180482_a(p_180482_1_, p_180482_2_);
         boolean flag = false;
         int i = 0;
         int l;
 
-        if (p_180482_2_1 instanceof EntityHorse.GroupData)
-        {
-            l = ((EntityHorse.GroupData)p_180482_2_1).field_111107_a;
-            i = ((EntityHorse.GroupData)p_180482_2_1).field_111106_b & 255 | this.rand.nextInt(5) << 8;
-        }
-        else
-        {
-            if (this.rand.nextInt(10) == 0)
-            {
+        if (p_180482_2_1 instanceof EntityHorse.GroupData) {
+            l = ((EntityHorse.GroupData) p_180482_2_1).field_111107_a;
+            i = ((EntityHorse.GroupData) p_180482_2_1).field_111106_b & 255 | this.rand.nextInt(5) << 8;
+        } else {
+            if (this.rand.nextInt(10) == 0) {
                 l = 1;
-            }
-            else
-            {
+            } else {
                 int j = this.rand.nextInt(7);
                 int k = this.rand.nextInt(5);
                 l = 0;
                 i = j | k << 8;
             }
@@ -1543,232 +1208,148 @@
         }
 
         this.setHorseType(l);
         this.setHorseVariant(i);
 
-        if (this.rand.nextInt(5) == 0)
-        {
+        if (this.rand.nextInt(5) == 0) {
             this.setGrowingAge(-24000);
         }
 
-        if (l != 4 && l != 3)
-        {
-            this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setBaseValue((double)this.func_110267_cL());
+        if (l != 4 && l != 3) {
+            this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setBaseValue((double) this.func_110267_cL());
 
-            if (l == 0)
-            {
+            if (l == 0) {
                 this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setBaseValue(this.func_110203_cN());
-            }
-            else
-            {
+            } else {
                 this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setBaseValue(0.17499999701976776D);
             }
-        }
-        else
-        {
+        } else {
             this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setBaseValue(15.0D);
             this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setBaseValue(0.20000000298023224D);
         }
 
-        if (l != 2 && l != 1)
-        {
+        if (l != 2 && l != 1) {
             this.getEntityAttribute(horseJumpStrength).setBaseValue(this.func_110245_cM());
-        }
-        else
-        {
+        } else {
             this.getEntityAttribute(horseJumpStrength).setBaseValue(0.5D);
         }
 
         this.setHealth(this.getMaxHealth());
-        return (IEntityLivingData)p_180482_2_1;
+        return (IEntityLivingData) p_180482_2_1;
     }
 
-    @SideOnly(Side.CLIENT)
-    public float getGrassEatingAmount(float p_110258_1_)
+    public void setJumpPower(int i) // SpigotMCP -- Use 'i'
     {
-        return this.prevHeadLean + (this.headLean - this.prevHeadLean) * p_110258_1_;
-    }
+        if (this.isHorseSaddled()) {
+            // CraftBukkit start - fire HorseJumpEvent, use event power
+            if (i < 0) {
+                i = 0;
+            }
 
-    @SideOnly(Side.CLIENT)
-    public float getRearingAmount(float p_110223_1_)
-    {
-        return this.prevRearingAmount + (this.rearingAmount - this.prevRearingAmount) * p_110223_1_;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public float func_110201_q(float p_110201_1_)
-    {
-        return this.prevMouthOpenness + (this.mouthOpenness - this.prevMouthOpenness) * p_110201_1_;
-    }
-
-    public void setJumpPower(int p_110206_1_)
-    {
-        if (this.isHorseSaddled())
-        {
-            if (p_110206_1_ < 0)
-            {
-                p_110206_1_ = 0;
+            float power;
+            if (i >= 90) {
+                power = 1.0F;
+            } else {
+                power = 0.4F + 0.4F * (float) i / 90.0F;
             }
-            else
-            {
+
+            org.bukkit.event.entity.HorseJumpEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callHorseJumpEvent(this, power);
+            if (!event.isCancelled()) {
                 this.field_110294_bI = true;
                 this.makeHorseRear();
+                this.jumpPower = power;
             }
-
-            if (p_110206_1_ >= 90)
-            {
-                this.jumpPower = 1.0F;
-            }
-            else
-            {
-                this.jumpPower = 0.4F + 0.4F * (float)p_110206_1_ / 90.0F;
-            }
+            // CraftBukkit end
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    protected void spawnHorseParticles(boolean p_110216_1_)
-    {
-        EnumParticleTypes enumparticletypes = p_110216_1_ ? EnumParticleTypes.HEART : EnumParticleTypes.SMOKE_NORMAL;
-
-        for (int i = 0; i < 7; ++i)
-        {
-            double d0 = this.rand.nextGaussian() * 0.02D;
-            double d1 = this.rand.nextGaussian() * 0.02D;
-            double d2 = this.rand.nextGaussian() * 0.02D;
-            this.worldObj.spawnParticle(enumparticletypes, this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, this.posY + 0.5D + (double)(this.rand.nextFloat() * this.height), this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, d0, d1, d2, new int[0]);
-        }
-    }
-
-    @SideOnly(Side.CLIENT)
-    public void handleHealthUpdate(byte p_70103_1_)
-    {
-        if (p_70103_1_ == 7)
-        {
-            this.spawnHorseParticles(true);
-        }
-        else if (p_70103_1_ == 6)
-        {
-            this.spawnHorseParticles(false);
-        }
-        else
-        {
-            super.handleHealthUpdate(p_70103_1_);
-        }
-    }
-
-    public void updateRiderPosition()
-    {
+    public void updateRiderPosition() {
         super.updateRiderPosition();
 
-        if (this.prevRearingAmount > 0.0F)
-        {
-            float f = MathHelper.sin(this.renderYawOffset * (float)Math.PI / 180.0F);
-            float f1 = MathHelper.cos(this.renderYawOffset * (float)Math.PI / 180.0F);
+        if (this.prevRearingAmount > 0.0F) {
+            float f = MathHelper.sin(this.renderYawOffset * (float) Math.PI / 180.0F);
+            float f1 = MathHelper.cos(this.renderYawOffset * (float) Math.PI / 180.0F);
             float f2 = 0.7F * this.prevRearingAmount;
             float f3 = 0.15F * this.prevRearingAmount;
-            this.riddenByEntity.setPosition(this.posX + (double)(f2 * f), this.posY + this.getMountedYOffset() + this.riddenByEntity.getYOffset() + (double)f3, this.posZ - (double)(f2 * f1));
+            this.riddenByEntity.setPosition(this.posX + (double) (f2 * f), this.posY + this.getMountedYOffset() + this.riddenByEntity.getYOffset() + (double) f3, this.posZ - (double) (f2 * f1));
 
-            if (this.riddenByEntity instanceof EntityLivingBase)
-            {
-                ((EntityLivingBase)this.riddenByEntity).renderYawOffset = this.renderYawOffset;
+            if (this.riddenByEntity instanceof EntityLivingBase) {
+                ((EntityLivingBase) this.riddenByEntity).renderYawOffset = this.renderYawOffset;
             }
         }
     }
 
-    private float func_110267_cL()
-    {
-        return 15.0F + (float)this.rand.nextInt(8) + (float)this.rand.nextInt(9);
+    private float func_110267_cL() {
+        return 15.0F + (float) this.rand.nextInt(8) + (float) this.rand.nextInt(9);
     }
 
-    private double func_110245_cM()
-    {
+    private double func_110245_cM() {
         return 0.4000000059604645D + this.rand.nextDouble() * 0.2D + this.rand.nextDouble() * 0.2D + this.rand.nextDouble() * 0.2D;
     }
 
-    private double func_110203_cN()
-    {
+    private double func_110203_cN() {
         return (0.44999998807907104D + this.rand.nextDouble() * 0.3D + this.rand.nextDouble() * 0.3D + this.rand.nextDouble() * 0.3D) * 0.25D;
     }
 
-    public static boolean func_146085_a(Item p_146085_0_)
-    {
+    public static boolean func_146085_a(Item p_146085_0_) {
         return p_146085_0_ == Items.iron_horse_armor || p_146085_0_ == Items.golden_horse_armor || p_146085_0_ == Items.diamond_horse_armor;
     }
 
-    public boolean isOnLadder()
-    {
+    public boolean isOnLadder() {
         return false;
     }
 
-    public float getEyeHeight()
-    {
+    public float getEyeHeight() {
         return this.height;
     }
 
-    public boolean replaceItemInInventory(int p_174820_1_, ItemStack p_174820_2_)
-    {
-        if (p_174820_1_ == 499 && this.canCarryChest())
-        {
-            if (p_174820_2_ == null && this.isChested())
-            {
+    public boolean replaceItemInInventory(int p_174820_1_, ItemStack p_174820_2_) {
+        if (p_174820_1_ == 499 && this.canCarryChest()) {
+            if (p_174820_2_ == null && this.isChested()) {
                 this.setChested(false);
                 this.func_110226_cD();
                 return true;
             }
 
-            if (p_174820_2_ != null && p_174820_2_.getItem() == Item.getItemFromBlock(Blocks.chest) && !this.isChested())
-            {
+            if (p_174820_2_ != null && p_174820_2_.getItem() == Item.getItemFromBlock(Blocks.chest) && !this.isChested()) {
                 this.setChested(true);
                 this.func_110226_cD();
                 return true;
             }
         }
 
         int j = p_174820_1_ - 400;
 
-        if (j >= 0 && j < 2 && j < this.horseChest.getSizeInventory())
-        {
-            if (j == 0 && p_174820_2_ != null && p_174820_2_.getItem() != Items.saddle)
-            {
+        if (j >= 0 && j < 2 && j < this.horseChest.getSizeInventory()) {
+            if (j == 0 && p_174820_2_ != null && p_174820_2_.getItem() != Items.saddle) {
                 return false;
-            }
-            else if (j == 1 && (p_174820_2_ != null && !func_146085_a(p_174820_2_.getItem()) || !this.canWearArmor()))
-            {
+            } else if (j == 1 && (p_174820_2_ != null && !func_146085_a(p_174820_2_.getItem()) || !this.canWearArmor())) {
                 return false;
-            }
-            else
-            {
+            } else {
                 this.horseChest.setInventorySlotContents(j, p_174820_2_);
                 this.func_110232_cE();
                 return true;
             }
-        }
-        else
-        {
+        } else {
             int k = p_174820_1_ - 500 + 2;
 
-            if (k >= 2 && k < this.horseChest.getSizeInventory())
-            {
+            if (k >= 2 && k < this.horseChest.getSizeInventory()) {
                 this.horseChest.setInventorySlotContents(k, p_174820_2_);
                 return true;
-            }
-            else
-            {
+            } else {
                 return false;
             }
         }
     }
 
-    public static class GroupData implements IEntityLivingData
-        {
-            public int field_111107_a;
-            public int field_111106_b;
-            private static final String __OBFID = "CL_00001643";
+    public static class GroupData implements IEntityLivingData {
 
-            public GroupData(int p_i1684_1_, int p_i1684_2_)
-            {
-                this.field_111107_a = p_i1684_1_;
-                this.field_111106_b = p_i1684_2_;
-            }
+        public int field_111107_a;
+        public int field_111106_b;
+        private static final String __OBFID = "CL_00001643";
+
+        public GroupData(int p_i1684_1_, int p_i1684_2_) {
+            this.field_111107_a = p_i1684_1_;
+            this.field_111106_b = p_i1684_2_;
         }
+    }
 }
