--- decompiled\net\minecraft\entity\passive\EntityOcelot.java
+++ src\main\java\net\minecraft\entity\passive\EntityOcelot.java
@@ -1,8 +1,7 @@
 package net.minecraft.entity.passive;
 
-import com.google.common.base.Predicate;
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityAgeable;
 import net.minecraft.entity.IEntityLivingData;
@@ -25,18 +24,23 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.pathfinding.PathNavigateGround;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.DamageSource;
+import net.minecraft.util.MathHelper;
 import net.minecraft.util.StatCollector;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.World;
 
+import com.google.common.base.Predicate;
+
 public class EntityOcelot extends EntityTameable
 {
+
     private EntityAIAvoidEntity field_175545_bm;
     private EntityAITempt aiTempt;
+    public boolean spawnBonus = true; // Spigot
     private static final String __OBFID = "CL_00001646";
 
     public EntityOcelot(World worldIn)
     {
         super(worldIn);
@@ -59,10 +63,42 @@
     {
         super.entityInit();
         this.dataWatcher.addObject(18, Byte.valueOf((byte)0));
     }
 
+    // Spigot start - When this ocelot begins standing, chests below this ocelot must be
+    // updated as if its contents have changed. We update chests if this ocelot is sitting
+    // knowing that it may be dead, gone, or standing after this method returns.
+    // Called each tick on each ocelot.
+    @Override
+    public void onUpdate()
+    {
+        if (this.worldObj.spigotConfig.altHopperTicking && this.isSitting())
+        {
+            int xi = MathHelper.floor_double(this.getEntityBoundingBox().minX);
+            int yi = MathHelper.floor_double(this.getEntityBoundingBox().minY) - 1;
+            int zi = MathHelper.floor_double(this.getEntityBoundingBox().minZ);
+            int xf = MathHelper.floor_double(this.getEntityBoundingBox().maxX);
+            int yf = MathHelper.floor_double(this.getEntityBoundingBox().maxY) - 1;
+            int zf = MathHelper.floor_double(this.getEntityBoundingBox().maxZ);
+
+            for (int a = xi; a <= xf; a++)
+            {
+                for (int c = zi; c <= zf; c++)
+                {
+                    for (int b = yi; b <= yf; b++)
+                    {
+                        this.worldObj.updateChestAndHoppers(new BlockPos(a, b, c));
+                    }
+                }
+            }
+        }
+
+        super.onUpdate();
+    }
+    // Spigot end
+
     public void updateAITasks()
     {
         if (this.getMoveHelper().isUpdating())
         {
             double d0 = this.getMoveHelper().getSpeed();
@@ -88,23 +124,25 @@
             this.setSneaking(false);
             this.setSprinting(false);
         }
     }
 
-    protected boolean canDespawn()
+    public boolean canDespawn()   // SpigotMCP -- Make public as bukkit assumes in same package
     {
-        return !this.isTamed() && this.ticksExisted > 2400;
+        return !this.isTamed() /*&& this.ticksExisted > 2400*/; // CraftBukkit
     }
 
     protected void applyEntityAttributes()
     {
         super.applyEntityAttributes();
         this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setBaseValue(10.0D);
         this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setBaseValue(0.30000001192092896D);
     }
 
-    public void fall(float distance, float damageMultiplier) {}
+    public void fall(float distance, float damageMultiplier)
+    {
+    }
 
     public void writeEntityToNBT(NBTTagCompound tagCompound)
     {
         super.writeEntityToNBT(tagCompound);
         tagCompound.setInteger("CatType", this.getTameSkin());
@@ -144,24 +182,31 @@
     public boolean attackEntityAsMob(Entity p_70652_1_)
     {
         return p_70652_1_.attackEntityFrom(DamageSource.causeMobDamage(this), 3.0F);
     }
 
+    /* CraftBukkit start
+    // Function disabled as it has no special function anymore after
+    //   setSitting is disabled.
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
         if (this.isEntityInvulnerable(source))
         {
             return false;
         }
         else
         {
-            this.aiSit.setSitting(false);
+             // CraftBukkit - moved into EntityLiving.damageEntity(DamageSource, float)
+             // this.aiSit.setSitting(false);
             return super.attackEntityFrom(source, amount);
         }
     }
+    // CraftBukkit end */
 
-    protected void dropFewItems(boolean p_70628_1_, int p_70628_2_) {}
+    protected void dropFewItems(boolean p_70628_1_, int p_70628_2_)
+    {
+    }
 
     public boolean interact(EntityPlayer player)
     {
         ItemStack itemstack = player.inventory.getCurrentItem();
 
@@ -184,11 +229,12 @@
                 player.inventory.setInventorySlotContents(player.inventory.currentItem, (ItemStack)null);
             }
 
             if (!this.worldObj.isRemote)
             {
-                if (this.rand.nextInt(3) == 0)
+                // CraftBukkit - added event call and isCancelled check
+                if (this.rand.nextInt(3) == 0 && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTameEvent(this, player).isCancelled())
                 {
                     this.setTamed(true);
                     this.setTameSkin(1 + this.worldObj.rand.nextInt(3));
                     this.setOwnerId(player.getUniqueID().toString());
                     this.playTameEffect(true);
@@ -323,18 +369,18 @@
 
     public IEntityLivingData func_180482_a(DifficultyInstance p_180482_1_, IEntityLivingData p_180482_2_)
     {
         p_180482_2_ = super.func_180482_a(p_180482_1_, p_180482_2_);
 
-        if (this.worldObj.rand.nextInt(7) == 0)
+        if (spawnBonus && this.worldObj.rand.nextInt(7) == 0) // Spigot
         {
             for (int i = 0; i < 2; ++i)
             {
                 EntityOcelot entityocelot = new EntityOcelot(this.worldObj);
                 entityocelot.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, 0.0F);
                 entityocelot.setGrowingAge(-24000);
-                this.worldObj.spawnEntityInWorld(entityocelot);
+                this.worldObj.addEntity(entityocelot, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.OCELOT_BABY); // CraftBukkit - add SpawnReason
             }
         }
 
         return p_180482_2_;
     }
