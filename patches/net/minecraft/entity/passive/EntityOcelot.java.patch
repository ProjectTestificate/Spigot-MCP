---a/net/minecraft/entity/passive/EntityOcelot.java
+++b/net/minecraft/entity/passive/EntityOcelot.java
@@ -1,6 +1,5 @@
 package net.minecraft.entity.passive;
 
-import com.google.common.base.Predicate;
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.entity.Entity;
@@ -27,20 +27,24 @@
 import net.minecraft.pathfinding.PathNavigateGround;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.DamageSource;
+import net.minecraft.util.MathHelper;
 import net.minecraft.util.StatCollector;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.World;
 
-public class EntityOcelot extends EntityTameable
-{
+import com.google.common.base.Predicate;
+
+public class EntityOcelot extends EntityTameable {
+
     private EntityAIAvoidEntity field_175545_bm;
     private EntityAITempt aiTempt;
+    public boolean spawnBonus = true; // Spigot
     private static final String __OBFID = "CL_00001646";
 
-    public EntityOcelot(World worldIn)
-    {
+    public EntityOcelot(World worldIn) {
         super(worldIn);
         this.setSize(0.6F, 0.7F);
-        ((PathNavigateGround)this.getNavigator()).func_179690_a(true);
+        ((PathNavigateGround) this.getNavigator()).func_179690_a(true);
         this.tasks.addTask(1, new EntityAISwimming(this));
         this.tasks.addTask(2, this.aiSit);
         this.tasks.addTask(3, this.aiTempt = new EntityAITempt(this, 0.6D, Items.fish, true));
@@ -52,101 +52,107 @@
         this.tasks.addTask(9, new EntityAIMate(this, 0.8D));
         this.tasks.addTask(10, new EntityAIWander(this, 0.8D));
         this.tasks.addTask(11, new EntityAIWatchClosest(this, EntityPlayer.class, 10.0F));
-        this.targetTasks.addTask(1, new EntityAITargetNonTamed(this, EntityChicken.class, false, (Predicate)null));
+        this.targetTasks.addTask(1, new EntityAITargetNonTamed(this, EntityChicken.class, false, (Predicate) null));
     }
 
-    protected void entityInit()
-    {
+    protected void entityInit() {
         super.entityInit();
-        this.dataWatcher.addObject(18, Byte.valueOf((byte)0));
+        this.dataWatcher.addObject(18, Byte.valueOf((byte) 0));
     }
 
-    public void updateAITasks()
-    {
-        if (this.getMoveHelper().isUpdating())
-        {
+    // Spigot start - When this ocelot begins standing, chests below this ocelot must be
+    // updated as if its contents have changed. We update chests if this ocelot is sitting
+    // knowing that it may be dead, gone, or standing after this method returns.
+    // Called each tick on each ocelot.
+    @Override
+    public void onUpdate() {
+        if (this.worldObj.spigotConfig.altHopperTicking && this.isSitting()) {
+            int xi = MathHelper.floor_double(this.getEntityBoundingBox().minX);
+            int yi = MathHelper.floor_double(this.getEntityBoundingBox().minY) - 1;
+            int zi = MathHelper.floor_double(this.getEntityBoundingBox().minZ);
+            int xf = MathHelper.floor_double(this.getEntityBoundingBox().maxX);
+            int yf = MathHelper.floor_double(this.getEntityBoundingBox().maxY) - 1;
+            int zf = MathHelper.floor_double(this.getEntityBoundingBox().maxZ);
+            for (int a = xi; a <= xf; a++) {
+                for (int c = zi; c <= zf; c++) {
+                    for (int b = yi; b <= yf; b++) {
+                        this.worldObj.updateChestAndHoppers(new BlockPos(a, b, c));
+                    }
+                }
+            }
+        }
+        super.onUpdate();
+    }
+    // Spigot end
+
+    public void updateAITasks() {
+        if (this.getMoveHelper().isUpdating()) {
             double d0 = this.getMoveHelper().getSpeed();
 
-            if (d0 == 0.6D)
-            {
+            if (d0 == 0.6D) {
                 this.setSneaking(true);
                 this.setSprinting(false);
-            }
-            else if (d0 == 1.33D)
-            {
+            } else if (d0 == 1.33D) {
                 this.setSneaking(false);
                 this.setSprinting(true);
-            }
-            else
-            {
+            } else {
                 this.setSneaking(false);
                 this.setSprinting(false);
             }
-        }
-        else
-        {
+        } else {
             this.setSneaking(false);
             this.setSprinting(false);
         }
     }
 
-    protected boolean canDespawn()
-    {
-        return !this.isTamed() && this.ticksExisted > 2400;
+    public boolean canDespawn() { // SpigotMCP -- Make public as bukkit assumes in same package
+        return !this.isTamed() /*&& this.ticksExisted > 2400*/; // CraftBukkit
     }
 
-    protected void applyEntityAttributes()
-    {
+    protected void applyEntityAttributes() {
         super.applyEntityAttributes();
         this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setBaseValue(10.0D);
         this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setBaseValue(0.30000001192092896D);
     }
 
-    public void fall(float distance, float damageMultiplier) {}
+    public void fall(float distance, float damageMultiplier) {
+    }
 
-    public void writeEntityToNBT(NBTTagCompound tagCompound)
-    {
+    public void writeEntityToNBT(NBTTagCompound tagCompound) {
         super.writeEntityToNBT(tagCompound);
         tagCompound.setInteger("CatType", this.getTameSkin());
     }
 
-    public void readEntityFromNBT(NBTTagCompound tagCompund)
-    {
+    public void readEntityFromNBT(NBTTagCompound tagCompund) {
         super.readEntityFromNBT(tagCompund);
         this.setTameSkin(tagCompund.getInteger("CatType"));
     }
 
-    protected String getLivingSound()
-    {
+    protected String getLivingSound() {
         return this.isTamed() ? (this.isInLove() ? "mob.cat.purr" : (this.rand.nextInt(4) == 0 ? "mob.cat.purreow" : "mob.cat.meow")) : "";
     }
 
-    protected String getHurtSound()
-    {
+    protected String getHurtSound() {
         return "mob.cat.hitt";
     }
 
-    protected String getDeathSound()
-    {
+    protected String getDeathSound() {
         return "mob.cat.hitt";
     }
 
-    protected float getSoundVolume()
-    {
+    protected float getSoundVolume() {
         return 0.4F;
     }
 
-    protected Item getDropItem()
-    {
+    protected Item getDropItem() {
         return Items.leather;
     }
 
-    public boolean attackEntityAsMob(Entity p_70652_1_)
-    {
+    public boolean attackEntityAsMob(Entity p_70652_1_) {
         return p_70652_1_.attackEntityFrom(DamageSource.causeMobDamage(this), 3.0F);
     }
 
+    /* CraftBukkit start
+    // Function disabled as it has no special function anymore after
+    //   setSitting is disabled.
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
         if (this.isEntityInvulnerable(source))
@@ -154,51 +154,45 @@
         }
         else
         {
-            this.aiSit.setSitting(false);
+             // CraftBukkit - moved into EntityLiving.damageEntity(DamageSource, float)
+             // this.aiSit.setSitting(false);
             return super.attackEntityFrom(source, amount);
         }
     }
+    // CraftBukkit end */
 
-    protected void dropFewItems(boolean p_70628_1_, int p_70628_2_) {}
+    protected void dropFewItems(boolean p_70628_1_, int p_70628_2_) {
+    }
 
-    public boolean interact(EntityPlayer player)
-    {
+    public boolean interact(EntityPlayer player) {
         ItemStack itemstack = player.inventory.getCurrentItem();
 
-        if (this.isTamed())
-        {
-            if (this.isOwner(player) && !this.worldObj.isRemote && !this.isBreedingItem(itemstack))
-            {
+        if (this.isTamed()) {
+            if (this.isOwner(player) && !this.worldObj.isRemote && !this.isBreedingItem(itemstack)) {
                 this.aiSit.setSitting(!this.isSitting());
             }
-        }
-        else if (this.aiTempt.isRunning() && itemstack != null && itemstack.getItem() == Items.fish && player.getDistanceSqToEntity(this) < 9.0D)
-        {
-            if (!player.capabilities.isCreativeMode)
-            {
+        } else if (this.aiTempt.isRunning() && itemstack != null && itemstack.getItem() == Items.fish && player.getDistanceSqToEntity(this) < 9.0D) {
+            if (!player.capabilities.isCreativeMode) {
                 --itemstack.stackSize;
             }
 
-            if (itemstack.stackSize <= 0)
-            {
-                player.inventory.setInventorySlotContents(player.inventory.currentItem, (ItemStack)null);
+            if (itemstack.stackSize <= 0) {
+                player.inventory.setInventorySlotContents(player.inventory.currentItem, (ItemStack) null);
             }
 
-            if (!this.worldObj.isRemote)
-            {
-                if (this.rand.nextInt(3) == 0)
-                {
+            if (!this.worldObj.isRemote) {
+                // CraftBukkit - added event call and isCancelled check
+                if (this.rand.nextInt(3) == 0 && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTameEvent(this, player).isCancelled()) {
                     this.setTamed(true);
                     this.setTameSkin(1 + this.worldObj.rand.nextInt(3));
                     this.setOwnerId(player.getUniqueID().toString());
                     this.playTameEffect(true);
                     this.aiSit.setSitting(true);
-                    this.worldObj.setEntityState(this, (byte)7);
-                }
-                else
-                {
+                    this.worldObj.setEntityState(this, (byte) 7);
+                } else {
                     this.playTameEffect(false);
-                    this.worldObj.setEntityState(this, (byte)6);
+                    this.worldObj.setEntityState(this, (byte) 6);
                 }
             }
 
@@ -208,12 +208,10 @@
         return super.interact(player);
     }
 
-    public EntityOcelot func_180493_b(EntityAgeable p_180493_1_)
-    {
+    public EntityOcelot func_180493_b(EntityAgeable p_180493_1_) {
         EntityOcelot entityocelot = new EntityOcelot(this.worldObj);
 
-        if (this.isTamed())
-        {
+        if (this.isTamed()) {
             entityocelot.setOwnerId(this.getOwnerId());
             entityocelot.setTamed(true);
             entityocelot.setTameSkin(this.getTameSkin());
@@ -222,62 +222,46 @@
         return entityocelot;
     }
 
-    public boolean isBreedingItem(ItemStack stack)
-    {
+    public boolean isBreedingItem(ItemStack stack) {
         return stack != null && stack.getItem() == Items.fish;
     }
 
-    public boolean canMateWith(EntityAnimal otherAnimal)
-    {
-        if (otherAnimal == this)
-        {
+    public boolean canMateWith(EntityAnimal otherAnimal) {
+        if (otherAnimal == this) {
             return false;
-        }
-        else if (!this.isTamed())
-        {
+        } else if (!this.isTamed()) {
             return false;
-        }
-        else if (!(otherAnimal instanceof EntityOcelot))
-        {
+        } else if (!(otherAnimal instanceof EntityOcelot)) {
             return false;
-        }
-        else
-        {
-            EntityOcelot entityocelot = (EntityOcelot)otherAnimal;
+        } else {
+            EntityOcelot entityocelot = (EntityOcelot) otherAnimal;
             return !entityocelot.isTamed() ? false : this.isInLove() && entityocelot.isInLove();
         }
     }
 
-    public int getTameSkin()
-    {
+    public int getTameSkin() {
         return this.dataWatcher.getWatchableObjectByte(18);
     }
 
-    public void setTameSkin(int skinId)
-    {
-        this.dataWatcher.updateObject(18, Byte.valueOf((byte)skinId));
+    public void setTameSkin(int skinId) {
+        this.dataWatcher.updateObject(18, Byte.valueOf((byte) skinId));
     }
 
-    public boolean getCanSpawnHere()
-    {
+    public boolean getCanSpawnHere() {
         return this.worldObj.rand.nextInt(3) != 0;
     }
 
-    public boolean handleLavaMovement()
-    {
-        if (this.worldObj.checkNoEntityCollision(this.getEntityBoundingBox(), this) && this.worldObj.getCollidingBoundingBoxes(this, this.getEntityBoundingBox()).isEmpty() && !this.worldObj.isAnyLiquid(this.getEntityBoundingBox()))
-        {
+    public boolean handleLavaMovement() {
+        if (this.worldObj.checkNoEntityCollision(this.getEntityBoundingBox(), this) && this.worldObj.getCollidingBoundingBoxes(this, this.getEntityBoundingBox()).isEmpty() && !this.worldObj.isAnyLiquid(this.getEntityBoundingBox())) {
             BlockPos blockpos = new BlockPos(this.posX, this.getEntityBoundingBox().minY, this.posZ);
 
-            if (blockpos.getY() < 63)
-            {
+            if (blockpos.getY() < 63) {
                 return false;
             }
 
             Block block = this.worldObj.getBlockState(blockpos.down()).getBlock();
 
-            if (block == Blocks.grass || block.getMaterial() == Material.leaves)
-            {
+            if (block == Blocks.grass || block.getMaterial() == Material.leaves) {
                 return true;
             }
         }
@@ -285,63 +285,54 @@
         return false;
     }
 
-    public String getName()
-    {
+    public String getName() {
         return this.hasCustomName() ? this.getCustomNameTag() : (this.isTamed() ? StatCollector.translateToLocal("entity.Cat.name") : super.getName());
     }
 
-    public void setTamed(boolean tamed)
-    {
+    public void setTamed(boolean tamed) {
         super.setTamed(tamed);
     }
 
-    protected void setupTamedAI()
-    {
-        if (this.field_175545_bm == null)
-        {
-            this.field_175545_bm = new EntityAIAvoidEntity(this, new Predicate()
-            {
+    protected void setupTamedAI() {
+        if (this.field_175545_bm == null) {
+            this.field_175545_bm = new EntityAIAvoidEntity(this, new Predicate() {
+
                 private static final String __OBFID = "CL_00002243";
-                public boolean func_179874_a(Entity p_179874_1_)
-                {
+
+                public boolean func_179874_a(Entity p_179874_1_) {
                     return p_179874_1_ instanceof EntityPlayer;
                 }
-                public boolean apply(Object p_apply_1_)
-                {
-                    return this.func_179874_a((Entity)p_apply_1_);
+
+                public boolean apply(Object p_apply_1_) {
+                    return this.func_179874_a((Entity) p_apply_1_);
                 }
             }, 16.0F, 0.8D, 1.33D);
         }
 
         this.tasks.removeTask(this.field_175545_bm);
 
-        if (!this.isTamed())
-        {
+        if (!this.isTamed()) {
             this.tasks.addTask(4, this.field_175545_bm);
         }
     }
 
-    public IEntityLivingData func_180482_a(DifficultyInstance p_180482_1_, IEntityLivingData p_180482_2_)
-    {
+    public IEntityLivingData func_180482_a(DifficultyInstance p_180482_1_, IEntityLivingData p_180482_2_) {
         p_180482_2_ = super.func_180482_a(p_180482_1_, p_180482_2_);
 
-        if (this.worldObj.rand.nextInt(7) == 0)
+        if (spawnBonus && this.worldObj.rand.nextInt(7) == 0) // Spigot
         {
-            for (int i = 0; i < 2; ++i)
-            {
+            for (int i = 0; i < 2; ++i) {
                 EntityOcelot entityocelot = new EntityOcelot(this.worldObj);
                 entityocelot.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, 0.0F);
                 entityocelot.setGrowingAge(-24000);
-                this.worldObj.spawnEntityInWorld(entityocelot);
+                this.worldObj.addEntity(entityocelot, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.OCELOT_BABY); // CraftBukkit - add SpawnReason
             }
         }
 
         return p_180482_2_;
     }
 
-    public EntityAgeable createChild(EntityAgeable ageable)
-    {
+    public EntityAgeable createChild(EntityAgeable ageable) {
         return this.func_180493_b(ageable);
     }
-}
+}
