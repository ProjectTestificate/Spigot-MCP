--- decompiled\net\minecraft\server\management\UserList.java
+++ src\main\java\net\minecraft\server\management\UserList.java
@@ -1,38 +1,41 @@
 package net.minecraft.server.management;
 
-import com.google.common.base.Charsets;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-import com.google.common.io.Files;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
 import java.io.BufferedReader;
 import java.io.BufferedWriter;
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+
 import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import com.google.common.base.Charsets;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import com.google.common.io.Files;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import com.google.gson.JsonSyntaxException;
+
 public class UserList
 {
+
     protected static final Logger logger = LogManager.getLogger();
     protected final Gson gson;
     private final File saveFile;
     private final Map values = Maps.newHashMap();
     private boolean lanServer = true;
@@ -104,21 +107,27 @@
         {
             logger.warn("Could not save the list after removing a user.", ioexception);
         }
     }
 
-    @SideOnly(Side.SERVER)
     public File getSaveFile()
     {
         return this.saveFile;
     }
 
     public String[] getKeys()
     {
         return (String[])this.values.keySet().toArray(new String[this.values.size()]);
     }
 
+    // CraftBukkit start
+    public Collection<UserListEntry> getValuesBukkit()   // SpigotMCP -- Rename to avoid conflict
+    {
+        return this.values.values();
+    }
+    // CraftBukkit end
+
     protected String getObjectKey(Object obj)
     {
         return obj.toString();
     }
 
@@ -159,11 +168,11 @@
     protected Map getValues()
     {
         return this.values;
     }
 
-    public void writeChanges() throws IOException
+    public void writeChanges() throws IOException   // CraftBukkit - Added throws // SpigotMCP NOTE -- Already added by mcp
     {
         Collection collection = this.values.values();
         String s = this.gson.toJson(collection);
         BufferedWriter bufferedwriter = null;
 
@@ -176,27 +185,38 @@
         {
             IOUtils.closeQuietly(bufferedwriter);
         }
     }
 
-    @SideOnly(Side.SERVER)
     public boolean hasEntries()
     {
         return this.values.size() < 1;
     }
 
-    @SideOnly(Side.SERVER)
-    public void readSavedFile() throws IOException
+    public void readSavedFile() throws IOException   // CraftBukkit - Added throws // SpigotMCP NOTE -- Already added by mcp
     {
         Collection collection = null;
         BufferedReader bufferedreader = null;
 
         try
         {
             bufferedreader = Files.newReader(this.saveFile, Charsets.UTF_8);
             collection = (Collection)this.gson.fromJson(bufferedreader, saveFileFormat);
+            // Spigot Start
         }
+        catch (FileNotFoundException ex)
+        {
+            org.bukkit.Bukkit.getLogger().log(java.util.logging.Level.INFO, "Unable to find file {0}, creating it.", this.saveFile);
+        }
+        catch (JsonSyntaxException ex)
+        {
+            org.bukkit.Bukkit.getLogger().log(java.util.logging.Level.WARNING, "Unable to read file {0}, backing it up to {0}.backup and creating new copy.", this.saveFile);
+            File backup = new File(this.saveFile + ".backup");
+            this.saveFile.renameTo(backup);
+            this.saveFile.delete();
+            // Spigot End
+        }
         finally
         {
             IOUtils.closeQuietly(bufferedreader);
         }
 
@@ -217,13 +237,16 @@
         }
     }
 
     class Serializer implements JsonDeserializer, JsonSerializer
     {
+
         private static final String __OBFID = "CL_00001874";
 
-        private Serializer() {}
+        private Serializer()
+        {
+        }
 
         public JsonElement serializeEntry(UserListEntry p_152751_1_, Type p_152751_2_, JsonSerializationContext p_152751_3_)
         {
             JsonObject jsonobject = new JsonObject();
             p_152751_1_.onSerialization(jsonobject);
