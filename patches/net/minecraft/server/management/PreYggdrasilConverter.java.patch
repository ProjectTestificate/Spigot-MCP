--- decompiled\net\minecraft\server\management\PreYggdrasilConverter.java
+++ src\main\java\net\minecraft\server\management\PreYggdrasilConverter.java
@@ -1,19 +1,10 @@
 package net.minecraft.server.management;
 
-import com.google.common.base.Charsets;
-import com.google.common.base.Predicate;
-import com.google.common.collect.Iterators;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-import com.google.common.io.Files;
-import com.mojang.authlib.Agent;
-import com.mojang.authlib.GameProfile;
-import com.mojang.authlib.ProfileLookupCallback;
-import com.mojang.authlib.yggdrasil.ProfileNotFoundException;
 import java.io.File;
-import java.io.FileNotFoundException;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
 import java.io.IOException;
 import java.text.ParseException;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Date;
@@ -21,22 +12,37 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.UUID;
+
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.nbt.CompressedStreamTools;
+import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.dedicated.DedicatedServer;
 import net.minecraft.server.dedicated.PropertyManager;
 import net.minecraft.util.StringUtils;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.spigotmc.SpigotConfig;
 
+import com.google.common.base.Charsets;
+import com.google.common.base.Predicate;
+import com.google.common.collect.Iterators;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import com.google.common.io.Files;
+import com.mojang.authlib.Agent;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.ProfileLookupCallback;
+import com.mojang.authlib.yggdrasil.ProfileNotFoundException;
+
 public class PreYggdrasilConverter
 {
+
     private static final Logger LOGGER = LogManager.getLogger();
     public static final File OLD_IPBAN_FILE = new File("banned-ips.txt");
     public static final File OLD_PLAYERBAN_FILE = new File("banned-players.txt");
     public static final File OLD_OPS_FILE = new File("ops.txt");
     public static final File OLD_WHITELIST_FILE = new File("white-list.txt");
@@ -55,11 +61,11 @@
             {
                 return this.func_152733_a((String)p_apply_1_);
             }
         }), String.class);
 
-        if (server.isServerInOnlineMode())
+        if (server.isServerInOnlineMode() || SpigotConfig.bungee)    // Spigot: bungee = online mode, for now.
         {
             server.getGameProfileRepository().findProfilesByNames(astring, Agent.MINECRAFT, callback);
         }
         else
         {
@@ -115,12 +121,12 @@
         {
             return p_152719_0_;
         }
     }
 
-    @SideOnly(Side.SERVER)
-    static List readFile(File inFile, Map read) throws IOException
+
+    static List readFile(File inFile, Map read) throws IOException   // CraftBukkit - Added throws // SpigotMCP NOTE -- Already added
     {
         List list = Files.readLines(inFile, Charsets.UTF_8);
         Iterator iterator = list.iterator();
 
         while (iterator.hasNext())
@@ -136,11 +142,11 @@
         }
 
         return list;
     }
 
-    @SideOnly(Side.SERVER)
+
     public static boolean convertUserBanlist(final MinecraftServer server) throws IOException
     {
         final UserListBans userlistbans = new UserListBans(ServerConfigurationManager.FILE_PLAYERBANS);
 
         if (OLD_PLAYERBAN_FILE.exists() && OLD_PLAYERBAN_FILE.isFile())
@@ -148,15 +154,18 @@
             if (userlistbans.getSaveFile().exists())
             {
                 try
                 {
                     userlistbans.readSavedFile();
+                    // CraftBukkit start - FileNotFoundException -> IOException, don't print stacetrace
                 }
-                catch (FileNotFoundException filenotfoundexception)
+                catch (IOException filenotfoundexception)
                 {
-                    LOGGER.warn("Could not load existing file " + userlistbans.getSaveFile().getName(), filenotfoundexception);
+                    LOGGER.warn("Could not load existing file " + userlistbans.getSaveFile().getName() + ", " + filenotfoundexception.getMessage());
                 }
+
+                // CraftBukkit end
             }
 
             try
             {
                 final HashMap hashmap = Maps.newHashMap();
@@ -213,11 +222,11 @@
         {
             return true;
         }
     }
 
-    @SideOnly(Side.SERVER)
+
     public static boolean convertIpBanlist(MinecraftServer server) throws IOException
     {
         BanList banlist = new BanList(ServerConfigurationManager.FILE_IPBANS);
 
         if (OLD_IPBAN_FILE.exists() && OLD_IPBAN_FILE.isFile())
@@ -225,15 +234,18 @@
             if (banlist.getSaveFile().exists())
             {
                 try
                 {
                     banlist.readSavedFile();
+                    // CraftBukkit start - FileNotFoundException -> IOException, don't print stacetrace
                 }
-                catch (FileNotFoundException filenotfoundexception)
+                catch (IOException filenotfoundexception)
                 {
-                    LOGGER.warn("Could not load existing file " + banlist.getSaveFile().getName(), filenotfoundexception);
+                    LOGGER.warn("Could not load existing file " + banlist.getSaveFile().getName() + ", " + filenotfoundexception.getMessage());
                 }
+
+                // CraftBukkit end
             }
 
             try
             {
                 HashMap hashmap = Maps.newHashMap();
@@ -265,11 +277,11 @@
         {
             return true;
         }
     }
 
-    @SideOnly(Side.SERVER)
+
     public static boolean convertOplist(final MinecraftServer server) throws IOException
     {
         final UserListOps userlistops = new UserListOps(ServerConfigurationManager.FILE_OPS);
 
         if (OLD_OPS_FILE.exists() && OLD_OPS_FILE.isFile())
@@ -277,15 +289,18 @@
             if (userlistops.getSaveFile().exists())
             {
                 try
                 {
                     userlistops.readSavedFile();
+                    // CraftBukkit start - FileNotFoundException -> IOException, don't print stacetrace
                 }
-                catch (FileNotFoundException filenotfoundexception)
+                catch (IOException filenotfoundexception)
                 {
-                    LOGGER.warn("Could not load existing file " + userlistops.getSaveFile().getName(), filenotfoundexception);
+                    LOGGER.warn("Could not load existing file " + userlistops.getSaveFile().getName() + ", " + filenotfoundexception.getMessage());
                 }
+
+                // CraftBukkit end
             }
 
             try
             {
                 List list = Files.readLines(OLD_OPS_FILE, Charsets.UTF_8);
@@ -327,11 +342,11 @@
         {
             return true;
         }
     }
 
-    @SideOnly(Side.SERVER)
+
     public static boolean convertWhitelist(final MinecraftServer server) throws IOException
     {
         final UserListWhitelist userlistwhitelist = new UserListWhitelist(ServerConfigurationManager.FILE_WHITELIST);
 
         if (OLD_WHITELIST_FILE.exists() && OLD_WHITELIST_FILE.isFile())
@@ -339,15 +354,18 @@
             if (userlistwhitelist.getSaveFile().exists())
             {
                 try
                 {
                     userlistwhitelist.readSavedFile();
+                    // CraftBukkit start - FileNotFoundException -> IOException, don't print stacetrace
                 }
-                catch (FileNotFoundException filenotfoundexception)
+                catch (IOException filenotfoundexception)
                 {
-                    LOGGER.warn("Could not load existing file " + userlistwhitelist.getSaveFile().getName(), filenotfoundexception);
+                    LOGGER.warn("Could not load existing file " + userlistwhitelist.getSaveFile().getName() + ", " + filenotfoundexception.getMessage());
                 }
+
+                // CraftBukkit end
             }
 
             try
             {
                 List list = Files.readLines(OLD_WHITELIST_FILE, Charsets.UTF_8);
@@ -389,11 +407,11 @@
         {
             return true;
         }
     }
 
-    @SideOnly(Side.SERVER)
+
     public static boolean convertSaveFiles(final DedicatedServer server, PropertyManager p_152723_1_)
     {
         final File file1 = getPlayersDirectory(p_152723_1_);
         final File file2 = new File(file1.getParentFile(), "playerdata");
         final File file3 = new File(file1.getParentFile(), "unknownplayers");
@@ -457,10 +475,43 @@
                     }
                     private void func_152743_a(File p_152743_1_, String p_152743_2_, String p_152743_3_)
                     {
                         File file7 = new File(file1, p_152743_2_ + ".dat");
                         File file6 = new File(p_152743_1_, p_152743_3_ + ".dat");
+                        // CraftBukkit start - Use old file name to seed lastKnownName
+                        NBTTagCompound root = null;
+
+                        try
+                        {
+                            root = CompressedStreamTools.readCompressed(new FileInputStream(file1));
+                        }
+                        catch (Exception exception)
+                        {
+                            exception.printStackTrace();
+                        }
+
+                        if (root != null)
+                        {
+                            if (!root.hasKey("bukkit"))
+                            {
+                                root.setTag("bukkit", new NBTTagCompound());
+                            }
+
+                            NBTTagCompound data = root.getCompoundTag("bukkit");
+                            data.setString("lastKnownName", p_152743_2_);
+
+                            try
+                            {
+                                CompressedStreamTools.writeCompressed(root, new FileOutputStream(file2));
+                            }
+                            catch (Exception exception)
+                            {
+                                exception.printStackTrace();
+                            }
+                        }
+
+                        // CraftBukkit end
                         PreYggdrasilConverter.mkdir(p_152743_1_);
 
                         if (!file7.renameTo(file6))
                         {
                             throw new PreYggdrasilConverter.ConversionError("Could not convert file for " + p_152743_2_, null);
@@ -502,11 +553,11 @@
         {
             return true;
         }
     }
 
-    @SideOnly(Side.SERVER)
+
     private static void mkdir(File dir)
     {
         if (dir.exists())
         {
             if (!dir.isDirectory())
@@ -518,19 +569,19 @@
         {
             throw new PreYggdrasilConverter.ConversionError("Can\'t create directory " + dir.getName() + " in world save directory.", null);
         }
     }
 
-    @SideOnly(Side.SERVER)
+
     public static boolean tryConvert(PropertyManager properties)
     {
         boolean flag = hasUnconvertableFiles(properties);
         flag = flag && hasUnconvertablePlayerFiles(properties);
         return flag;
     }
 
-    @SideOnly(Side.SERVER)
+
     private static boolean hasUnconvertableFiles(PropertyManager properties)
     {
         boolean flag = false;
 
         if (OLD_PLAYERBAN_FILE.exists() && OLD_PLAYERBAN_FILE.isFile())
@@ -590,11 +641,11 @@
 
             return false;
         }
     }
 
-    @SideOnly(Side.SERVER)
+
     private static boolean hasUnconvertablePlayerFiles(PropertyManager properties)
     {
         File file1 = getPlayersDirectory(properties);
 
         if (file1.exists() && file1.isDirectory() && (file1.list().length > 0 || !file1.delete()))
@@ -608,26 +659,26 @@
         {
             return true;
         }
     }
 
-    @SideOnly(Side.SERVER)
+
     private static File getPlayersDirectory(PropertyManager properties)
     {
         String s = properties.getStringProperty("level-name", "world");
-        File file1 = new File(s);
+        File file1 = new File(MinecraftServer.getServer().server.getWorldContainer(), s); // CraftBukkit - Respect container setting
         return new File(file1, "players");
     }
 
-    @SideOnly(Side.SERVER)
+
     private static void backupConverted(File convertedFile)
     {
         File file2 = new File(convertedFile.getName() + ".converted");
         convertedFile.renameTo(file2);
     }
 
-    @SideOnly(Side.SERVER)
+
     private static Date parseDate(String input, Date defaultValue)
     {
         Date date1;
 
         try
@@ -640,13 +691,14 @@
         }
 
         return date1;
     }
 
-    @SideOnly(Side.SERVER)
+
     static class ConversionError extends RuntimeException
         {
+
             private static final String __OBFID = "CL_00001905";
 
             private ConversionError(String message, Throwable cause)
             {
                 super(message, cause);
