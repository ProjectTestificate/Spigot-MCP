--- decompiled\net\minecraft\server\management\ItemInWorldManager.java
+++ src\main\java\net\minecraft\server\management\ItemInWorldManager.java
@@ -1,29 +1,44 @@
 package net.minecraft.server.management;
 
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockChest;
+import net.minecraft.block.BlockCommandBlock;
+import net.minecraft.block.BlockDoor;
+import net.minecraft.block.BlockDoor.EnumDoorHalf;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
+import net.minecraft.enchantment.EnchantmentHelper;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
+import net.minecraft.init.Blocks;
 import net.minecraft.inventory.IInventory;
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.ItemSword;
 import net.minecraft.network.play.server.S23PacketBlockChange;
 import net.minecraft.network.play.server.S38PacketPlayerListItem;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.tileentity.TileEntityChest;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.world.ILockableContainer;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.WorldSettings;
+import net.minecraft.world.WorldSettings.GameType;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.Event;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.block.BlockBreakEvent;
+import org.bukkit.event.block.BlockDamageEvent;
+import org.bukkit.event.player.PlayerInteractEvent;
+
 public class ItemInWorldManager
 {
+
     public World theWorld;
     public EntityPlayerMP thisPlayerMP;
     private WorldSettings.GameType gameType;
     private boolean isDestroyingBlock;
     private int initialDamage;
@@ -77,11 +92,11 @@
         this.setGameType(this.gameType);
     }
 
     public void updateBlockRemoving()
     {
-        ++this.curblockDamage;
+        this.curblockDamage = MinecraftServer.currentTick; // CraftBukkit
         float f;
         int j;
 
         if (this.receivedFinishDiggingPacket)
         {
@@ -135,10 +150,29 @@
         }
     }
 
     public void onBlockClicked(BlockPos pos, EnumFacing side)
     {
+        // CraftBukkit start
+        PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.thisPlayerMP, Action.LEFT_CLICK_BLOCK, pos, side, this.thisPlayerMP.inventory.getCurrentItem());
+
+        if (event.isCancelled())
+        {
+            // Let the client know the block still exists
+            this.thisPlayerMP.playerNetServerHandler.sendPacket(new S23PacketBlockChange(this.theWorld, pos));
+            // Update any tile entity data for this block
+            TileEntity tileentity = this.theWorld.getTileEntity(pos);
+
+            if (tileentity != null)
+            {
+                this.thisPlayerMP.playerNetServerHandler.sendPacket(tileentity.getDescriptionPacket());
+            }
+
+            return;
+        }
+
+        // CraftBukkit end
         if (this.isCreative())
         {
             if (!this.theWorld.extinguishFire((EntityPlayer)null, pos, side))
             {
                 this.tryHarvestBlock(pos);
@@ -169,20 +203,67 @@
                         return;
                     }
                 }
             }
 
-            this.theWorld.extinguishFire((EntityPlayer)null, pos, side);
+            // this.theWorld.extinguishFire((EntityPlayer) null, pos, side); // CraftBukkit - Moved down
             this.initialDamage = this.curblockDamage;
             float f = 1.0F;
 
-            if (block.getMaterial() != Material.air)
+            // CraftBukkit start - Swings at air do *NOT* exist.
+            if (event.useInteractedBlock() == Event.Result.DENY)
             {
+                // If we denied a door from opening, we need to send a correcting update to the client, as it already opened the door.
+                IBlockState data = this.theWorld.getBlockState(pos);
+
+                if (block == Blocks.oak_door)
+                {
+                    // For some reason *BOTH* the bottom/top part have to be marked updated.
+                    boolean bottom = data.getValue(BlockDoor.HALF) == EnumDoorHalf.LOWER;
+                    this.thisPlayerMP.playerNetServerHandler.sendPacket(new S23PacketBlockChange(this.theWorld, pos));
+                    this.thisPlayerMP.playerNetServerHandler.sendPacket(new S23PacketBlockChange(this.theWorld, bottom ? pos.up() : pos.down()));
+                }
+                else if (block == Blocks.trapdoor)
+                {
+                    this.thisPlayerMP.playerNetServerHandler.sendPacket(new S23PacketBlockChange(this.theWorld, pos));
+                }
+            }
+            else if (block.getMaterial() != Material.air)
+            {
                 block.onBlockClicked(this.theWorld, pos, this.thisPlayerMP);
                 f = block.getPlayerRelativeBlockHardness(this.thisPlayerMP, this.thisPlayerMP.worldObj, pos);
+                // Allow fire punching to be blocked
+                this.theWorld.extinguishFire((EntityPlayer)null, pos, side);
             }
 
+            if (event.useItemInHand() == Event.Result.DENY)
+            {
+                // If we 'insta destroyed' then the client needs to be informed.
+                if (f > 1.0f)
+                {
+                    this.thisPlayerMP.playerNetServerHandler.sendPacket(new S23PacketBlockChange(this.theWorld, pos));
+                }
+
+                return;
+            }
+
+            BlockDamageEvent blockEvent = CraftEventFactory.callBlockDamageEvent(this.thisPlayerMP, pos.getX(), pos.getY(), pos.getZ(), this.thisPlayerMP.inventory.getCurrentItem(), f >= 1.0f);
+
+            if (blockEvent.isCancelled())
+            {
+                // Let the client know the block still exists
+                this.thisPlayerMP.playerNetServerHandler.sendPacket(new S23PacketBlockChange(this.theWorld, pos));
+                return;
+            }
+
+            if (blockEvent.getInstaBreak())
+            {
+                f = 2.0f;
+            }
+
+            // CraftBukkit end
+
             if (block.getMaterial() != Material.air && f >= 1.0F)
             {
                 this.tryHarvestBlock(pos);
             }
             else
@@ -192,16 +273,19 @@
                 int i = (int)(f * 10.0F);
                 this.theWorld.sendBlockBreakProgress(this.thisPlayerMP.getEntityId(), pos, i);
                 this.durabilityRemainingOnBlock = i;
             }
         }
+
+        theWorld.spigotConfig.antiXrayInstance.updateNearbyBlocks(theWorld, pos); // Spigot
     }
 
     public void blockRemoving(BlockPos pos)
     {
         if (pos.equals(this.field_180240_f))
         {
+            this.curblockDamage = MinecraftServer.currentTick; // CraftBukkit
             int i = this.curblockDamage - this.initialDamage;
             Block block = this.theWorld.getBlockState(pos).getBlock();
 
             if (block.getMaterial() != Material.air)
             {
@@ -219,11 +303,18 @@
                     this.receivedFinishDiggingPacket = true;
                     this.field_180241_i = pos;
                     this.initialBlockDamage = this.initialDamage;
                 }
             }
+
+            // CraftBukkit start - Force block reset to client
         }
+        else
+        {
+            this.thisPlayerMP.playerNetServerHandler.sendPacket(new S23PacketBlockChange(this.theWorld, pos));
+            // CraftBukkit end
+        }
     }
 
     public void cancelDestroyingBlock()
     {
         this.isDestroyingBlock = false;
@@ -244,19 +335,92 @@
         return flag;
     }
 
     public boolean tryHarvestBlock(BlockPos pos)
     {
-        if (this.gameType.isCreative() && this.thisPlayerMP.getHeldItem() != null && this.thisPlayerMP.getHeldItem().getItem() instanceof ItemSword)
+        // CraftBukkit start - fire BlockBreakEvent
+        BlockBreakEvent event = null;
+
+        if (this.thisPlayerMP != null)   // SpigotMCP replace instanceof with != null
         {
+            org.bukkit.block.Block block = this.theWorld.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+            // Sword + Creative mode pre-cancel
+            boolean isSwordNoBreak = this.gameType.isCreative() && this.thisPlayerMP.getHeldItem() != null && this.thisPlayerMP.getHeldItem().getItem() instanceof ItemSword;
+
+            // Tell client the block is gone immediately then process events
+            // Don't tell the client if its a creative sword break because its not broken!
+            if (theWorld.getTileEntity(pos) == null && !isSwordNoBreak)
+            {
+                S23PacketBlockChange packet = new S23PacketBlockChange(this.theWorld, pos);
+                packet.field_148883_d = Blocks.air.getDefaultState();
+                this.thisPlayerMP.playerNetServerHandler.sendPacket(packet);
+            }
+
+            event = new BlockBreakEvent(block, this.thisPlayerMP.getBukkitEntity());
+            // Sword + Creative mode pre-cancel
+            event.setCancelled(isSwordNoBreak);
+            // Calculate default block experience
+            IBlockState nmsData = this.theWorld.getBlockState(pos);
+            Block nmsBlock = nmsData.getBlock();
+
+            if (nmsBlock != null && !event.isCancelled() && !this.isCreative() && this.thisPlayerMP.canHarvestBlock(nmsBlock))
+            {
+                // Copied from block.a(World world, EntityHuman entityhuman, BlockPosition blockposition, IBlockData iblockdata, TileEntity tileentity)
+                if (!(nmsBlock.canSilkHarvest() && EnchantmentHelper.getSilkTouchModifier(this.thisPlayerMP)))
+                {
+                    int data = block.getData();
+                    int bonusLevel = EnchantmentHelper.getFortuneModifier(this.thisPlayerMP);
+                    event.setExpToDrop(nmsBlock.getExpDrop(this.theWorld, nmsData, bonusLevel));
+                }
+            }
+
+            this.theWorld.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
+            {
+                if (isSwordNoBreak)
+                {
+                    return false;
+                }
+
+                // Let the client know the block still exists
+                this.thisPlayerMP.playerNetServerHandler.sendPacket(new S23PacketBlockChange(this.theWorld, pos));
+                // Update any tile entity data for this block
+                TileEntity tileentity = this.theWorld.getTileEntity(pos);
+
+                if (tileentity != null)
+                {
+                    this.thisPlayerMP.playerNetServerHandler.sendPacket(tileentity.getDescriptionPacket());
+                }
+
+                return false;
+            }
+        }
+
+        if (false && this.gameType.isCreative() && this.thisPlayerMP.getHeldItem() != null && this.thisPlayerMP.getHeldItem().getItem() instanceof ItemSword)
+        {
+            // CraftBukkit end
             return false;
         }
         else
         {
             IBlockState iblockstate = this.theWorld.getBlockState(pos);
+
+            if (iblockstate.getBlock() == Blocks.air)
+                return false; // CraftBukkit - A plugin set block to air without cancelling
+
             TileEntity tileentity = this.theWorld.getTileEntity(pos);
 
+            // CraftBukkit start - Special case skulls, their item data comes from a tile entity
+            if (iblockstate.getBlock() == Blocks.skull && !this.isCreative())
+            {
+                iblockstate.getBlock().dropBlockAsItemWithChance(theWorld, pos, iblockstate, 1.0F, 0);
+                return this.removeBlock(pos);
+            }
+
+            // CraftBukkit end
+
             if (this.gameType.isAdventure())
             {
                 if (this.gameType == WorldSettings.GameType.SPECTATOR)
                 {
                     return false;
@@ -304,10 +468,17 @@
                 {
                     iblockstate.getBlock().harvestBlock(this.theWorld, this.thisPlayerMP, pos, iblockstate, tileentity);
                 }
             }
 
+            // CraftBukkit start - Drop event experience
+            if (flag1 && event != null)
+            {
+                iblockstate.getBlock().dropXpOnBlockBreak(this.theWorld, pos, event.getExpToDrop());
+            }
+
+            // CraftBukkit end
             return flag1;
         }
     }
 
     public boolean tryUseItem(EntityPlayer player, World worldIn, ItemStack stack)
@@ -353,70 +524,145 @@
                 return true;
             }
         }
     }
 
-    public boolean activateBlockOrUseItem(EntityPlayer player, World worldIn, ItemStack stack, BlockPos pos, EnumFacing side, float p_180236_6_, float p_180236_7_, float p_180236_8_)
+    // CraftBukkit start
+    public boolean interactResult = false;
+    public boolean firedInteract = false;
+    // CraftBukkit end
+
+    public boolean activateBlockOrUseItem(EntityPlayer entityhuman, World world, ItemStack itemstack, BlockPos blockposition, EnumFacing enumdirection, float f, float f1, float f2)   // SpigotMCP -- Use Bukkit parameter names
     {
-        if (this.gameType == WorldSettings.GameType.SPECTATOR)
-        {
+        /* CraftBukkit start - whole method
+        if (this.gameType == WorldSettings.GameType.SPECTATOR) {
             TileEntity tileentity = worldIn.getTileEntity(pos);
 
-            if (tileentity instanceof ILockableContainer)
-            {
+            if (tileentity instanceof ILockableContainer) {
                 Block block = worldIn.getBlockState(pos).getBlock();
-                ILockableContainer ilockablecontainer = (ILockableContainer)tileentity;
+                ILockableContainer ilockablecontainer = (ILockableContainer) tileentity;
 
-                if (ilockablecontainer instanceof TileEntityChest && block instanceof BlockChest)
-                {
-                    ilockablecontainer = ((BlockChest)block).getLockableContainer(worldIn, pos);
+                if (ilockablecontainer instanceof TileEntityChest && block instanceof BlockChest) {
+                    ilockablecontainer = ((BlockChest) block).getLockableContainer(worldIn, pos);
                 }
 
-                if (ilockablecontainer != null)
-                {
+                if (ilockablecontainer != null) {
                     player.displayGUIChest(ilockablecontainer);
                     return true;
                 }
-            }
-            else if (tileentity instanceof IInventory)
-            {
-                player.displayGUIChest((IInventory)tileentity);
+            } else if (tileentity instanceof IInventory) {
+                player.displayGUIChest((IInventory) tileentity);
                 return true;
             }
 
             return false;
-        }
-        else
-        {
-            if (!player.isSneaking() || player.getHeldItem() == null)
-            {
+        } else {
+            if (!player.isSneaking() || player.getHeldItem() == null) {
                 IBlockState iblockstate = worldIn.getBlockState(pos);
 
-                if (iblockstate.getBlock().onBlockActivated(worldIn, pos, iblockstate, player, side, p_180236_6_, p_180236_7_, p_180236_8_))
-                {
+                if (iblockstate.getBlock().onBlockActivated(worldIn, pos, iblockstate, player, side, p_180236_6_, p_180236_7_, p_180236_8_)) {
                     return true;
                 }
             }
 
-            if (stack == null)
-            {
+            if (stack == null) {
                 return false;
-            }
-            else if (this.isCreative())
-            {
+            } else if (this.isCreative()) {
                 int j = stack.getMetadata();
                 int i = stack.stackSize;
                 boolean flag = stack.onItemUse(player, worldIn, pos, side, p_180236_6_, p_180236_7_, p_180236_8_);
                 stack.setItemDamage(j);
                 stack.stackSize = i;
                 return flag;
+            } else {
+                return stack.onItemUse(player, worldIn, pos, side, p_180236_6_, p_180236_7_, p_180236_8_);
             }
-            else
+        }
+        // Interract event */
+        IBlockState blockdata = world.getBlockState(blockposition);
+        boolean result = false;
+
+        if (blockdata.getBlock() != Blocks.air)
+        {
+            boolean cancelledBlock = false;
+
+            if (this.gameType == GameType.SPECTATOR)
             {
-                return stack.onItemUse(player, worldIn, pos, side, p_180236_6_, p_180236_7_, p_180236_8_);
+                TileEntity tileentity = world.getTileEntity(blockposition);
+                cancelledBlock = !(tileentity instanceof ILockableContainer || tileentity instanceof IInventory);
             }
+
+            if (!entityhuman.getBukkitEntity().isOp() && itemstack != null && Block.getBlockFromItem(itemstack.getItem()) instanceof BlockCommandBlock)
+            {
+                cancelledBlock = true;
+            }
+
+            PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(entityhuman, Action.RIGHT_CLICK_BLOCK, blockposition, enumdirection, itemstack, cancelledBlock);
+            firedInteract = true;
+            interactResult = event.useItemInHand() == Event.Result.DENY;
+
+            if (event.useInteractedBlock() == Event.Result.DENY)
+            {
+                // If we denied a door from opening, we need to send a correcting update to the client, as it already opened the door.
+                if (blockdata.getBlock() instanceof BlockDoor)
+                {
+                    boolean bottom = blockdata.getValue(BlockDoor.HALF) == EnumDoorHalf.LOWER;
+                    ((EntityPlayerMP)entityhuman).playerNetServerHandler.sendPacket(new S23PacketBlockChange(world, bottom ? blockposition.up() : blockposition.down()));
+                }
+
+                result = (event.useItemInHand() != Event.Result.ALLOW);
+            }
+            else if (this.gameType == GameType.SPECTATOR)
+            {
+                TileEntity tileentity = world.getTileEntity(blockposition);
+
+                if (tileentity instanceof ILockableContainer)
+                {
+                    Block block = world.getBlockState(blockposition).getBlock();
+                    ILockableContainer itileinventory = (ILockableContainer)tileentity;
+
+                    if (itileinventory instanceof TileEntityChest && block instanceof BlockChest)
+                    {
+                        itileinventory = ((BlockChest)block).getLockableContainer(world, blockposition);
+                    }
+
+                    if (itileinventory != null)
+                    {
+                        entityhuman.displayGUIChest(itileinventory);
+                        return true;
+                    }
+                }
+                else if (tileentity instanceof IInventory)
+                {
+                    entityhuman.displayGUIChest((IInventory)tileentity);
+                    return true;
+                }
+
+                return false;
+            }
+            else if (!entityhuman.isSneaking() || itemstack == null)
+            {
+                result = blockdata.getBlock().onBlockActivated(world, blockposition, blockdata, entityhuman, enumdirection, f, f1, f2);
+            }
+
+            if (itemstack != null && !result)
+            {
+                int j1 = itemstack.getMetadata();
+                int k1 = itemstack.stackSize;
+                result = itemstack.onItemUse(entityhuman, world, blockposition, enumdirection, f, f1, f2);
+
+                // The item count should not decrement in Creative mode.
+                if (this.isCreative())
+                {
+                    itemstack.setItemDamage(j1);
+                    itemstack.stackSize = k1;
+                }
+            }
         }
+
+        return result;
+        // CraftBukkit end
     }
 
     public void setWorld(WorldServer serverWorld)
     {
         this.theWorld = serverWorld;
