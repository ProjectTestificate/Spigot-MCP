--- decompiled\net\minecraft\server\management\PlayerManager.java
+++ src\main\java\net\minecraft\server\management\PlayerManager.java
@@ -1,11 +1,16 @@
 package net.minecraft.server.management;
 
-import com.google.common.collect.Lists;
 import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
 import java.util.Iterator;
+import java.util.LinkedList;
 import java.util.List;
+import java.util.Queue;
+import java.util.concurrent.ConcurrentLinkedQueue;
+
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.network.Packet;
 import net.minecraft.network.play.server.S21PacketChunkData;
 import net.minecraft.network.play.server.S22PacketMultiBlockChange;
 import net.minecraft.network.play.server.S23PacketBlockChange;
@@ -15,30 +20,37 @@
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.ChunkCoordIntPair;
 import net.minecraft.world.WorldProvider;
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.chunk.Chunk;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
+import org.bukkit.entity.Player;
 
+import com.google.common.collect.Lists;
+
 public class PlayerManager
 {
+
     private static final Logger pmLogger = LogManager.getLogger();
     private final WorldServer theWorldServer;
     private final List players = Lists.newArrayList();
     private final LongHashMap playerInstances = new LongHashMap();
-    private final List playerInstancesToUpdate = Lists.newArrayList();
-    private final List playerInstanceList = Lists.newArrayList();
+    private final Queue playerInstancesToUpdate = new ConcurrentLinkedQueue<>(); // CraftBukkit ArrayList -> ConcurrentLinkedQueue
+    private final Queue playerInstanceList = new ConcurrentLinkedQueue(); // CraftBukkit ArrayList -> ConcurrentLinkedQueue
     private int playerViewRadius;
     private long previousTotalWorldTime;
     private final int[][] xzDirectionsConst = new int[][] {{1, 0}, {0, 1}, { -1, 0}, {0, -1}};
+    private boolean wasNotEmpty; // CraftBukkit - add field
     private static final String __OBFID = "CL_00001434";
 
-    public PlayerManager(WorldServer serverWorld)
+    public PlayerManager(WorldServer serverWorld, int viewDistance)   // Spigot -- add view distance
     {
         this.theWorldServer = serverWorld;
-        this.setPlayerViewRadius(serverWorld.getMinecraftServer().getConfigurationManager().getViewDistance());
+        this.setPlayerViewRadius(viewDistance); // Spigot
     }
 
     public WorldServer getMinecraftServer()
     {
         return this.theWorldServer;
@@ -51,38 +63,55 @@
         PlayerManager.PlayerInstance playerinstance;
 
         if (i - this.previousTotalWorldTime > 8000L)
         {
             this.previousTotalWorldTime = i;
+            // CraftBukkit start - Use iterator
+            Iterator iterator = this.playerInstanceList.iterator();
 
-            for (j = 0; j < this.playerInstanceList.size(); ++j)
+            while (iterator.hasNext())
             {
-                playerinstance = (PlayerManager.PlayerInstance)this.playerInstanceList.get(j);
+                playerinstance = (PlayerManager.PlayerInstance)iterator.next();
                 playerinstance.onUpdate();
                 playerinstance.processChunk();
             }
         }
         else
         {
-            for (j = 0; j < this.playerInstancesToUpdate.size(); ++j)
+            Iterator iterator = this.playerInstanceList.iterator();
+
+            while (iterator.hasNext())
             {
-                playerinstance = (PlayerManager.PlayerInstance)this.playerInstancesToUpdate.get(j);
+                playerinstance = (PlayerManager.PlayerInstance)iterator.next();
                 playerinstance.onUpdate();
+                iterator.remove();
+                // CraftBukkit end
             }
         }
 
-        this.playerInstancesToUpdate.clear();
+        // this.playerInstancesToUpdate.clear(); // CraftBukkit - Removals are already covered
 
         if (this.players.isEmpty())
         {
+            if (!wasNotEmpty) return; // CraftBukkit - Only do unload when we go from non-empty to empty
+
             WorldProvider worldprovider = this.theWorldServer.provider;
 
             if (!worldprovider.canRespawnHere())
             {
                 this.theWorldServer.theChunkProviderServer.unloadAllChunks();
             }
+
+            // CraftBukkit start
+            wasNotEmpty = false;
         }
+        else
+        {
+            wasNotEmpty = true;
+        }
+
+        // CraftBukkit end
     }
 
     public boolean hasPlayerInstance(int p_152621_1_, int p_152621_2_)
     {
         long k = (long)p_152621_1_ + 2147483647L | (long)p_152621_2_ + 2147483647L << 32;
@@ -102,10 +131,24 @@
         }
 
         return playerinstance;
     }
 
+    // CraftBukkit start - add method
+    public final boolean isChunkInUse(int x, int z)
+    {
+        PlayerInstance pi = getPlayerInstance(x, z, false);
+
+        if (pi != null)
+        {
+            return (pi.playersWatchingChunk.size() > 0);
+        }
+
+        return false;
+    }
+    // CraftBukkit end
+
     public void markBlockForUpdate(BlockPos p_180244_1_)
     {
         int i = p_180244_1_.getX() >> 4;
         int j = p_180244_1_.getZ() >> 4;
         PlayerManager.PlayerInstance playerinstance = this.getPlayerInstance(i, j, false);
@@ -120,19 +163,29 @@
     {
         int i = (int)p_72683_1_.posX >> 4;
         int j = (int)p_72683_1_.posZ >> 4;
         p_72683_1_.managedPosX = p_72683_1_.posX;
         p_72683_1_.managedPosZ = p_72683_1_.posZ;
+        // CraftBukkit start - Load nearby chunks first
+        List<ChunkCoordIntPair> chunkList = new LinkedList();
 
         for (int k = i - this.playerViewRadius; k <= i + this.playerViewRadius; ++k)
         {
             for (int l = j - this.playerViewRadius; l <= j + this.playerViewRadius; ++l)
             {
-                this.getPlayerInstance(k, l, true).addPlayer(p_72683_1_);
+                chunkList.add(new ChunkCoordIntPair(k, l));
             }
         }
 
+        Collections.sort(chunkList, new ChunkCoordComparator(p_72683_1_));
+
+        for (ChunkCoordIntPair pair : chunkList)
+        {
+            this.getPlayerInstance(pair.chunkXPos, pair.chunkZPos, true).addPlayer(p_72683_1_);
+        }
+
+        // CraftBukkit end
         this.players.add(p_72683_1_);
         this.filterChunkLoadQueue(p_72683_1_);
     }
 
     public void filterChunkLoadQueue(EntityPlayerMP p_72691_1_)
@@ -230,20 +283,21 @@
             int k = (int)p_72685_1_.managedPosX >> 4;
             int l = (int)p_72685_1_.managedPosZ >> 4;
             int i1 = this.playerViewRadius;
             int j1 = i - k;
             int k1 = j - l;
+            List<ChunkCoordIntPair> chunksToLoad = new LinkedList(); // CraftBukkit
 
             if (j1 != 0 || k1 != 0)
             {
                 for (int l1 = i - i1; l1 <= i + i1; ++l1)
                 {
                     for (int i2 = j - i1; i2 <= j + i1; ++i2)
                     {
                         if (!this.overlaps(l1, i2, k, l, i1))
                         {
-                            this.getPlayerInstance(l1, i2, true).addPlayer(p_72685_1_);
+                            chunksToLoad.add(new ChunkCoordIntPair(l1, i2)); // CraftBukkit
                         }
 
                         if (!this.overlaps(l1 - j1, i2 - k1, i, j, i1))
                         {
                             PlayerManager.PlayerInstance playerinstance = this.getPlayerInstance(l1 - j1, i2 - k1, false);
@@ -257,10 +311,24 @@
                 }
 
                 this.filterChunkLoadQueue(p_72685_1_);
                 p_72685_1_.managedPosX = p_72685_1_.posX;
                 p_72685_1_.managedPosZ = p_72685_1_.posZ;
+                // CraftBukkit start - send nearest chunks first
+                Collections.sort(chunksToLoad, new ChunkCoordComparator(p_72685_1_));
+
+                for (ChunkCoordIntPair pair : chunksToLoad)
+                {
+                    this.getPlayerInstance(pair.chunkXPos, pair.chunkZPos, true).addPlayer(p_72685_1_);
+                }
+
+                if (j1 > 1 || j1 < -1 || k1 > 1 || k1 < -1)
+                {
+                    Collections.sort(p_72685_1_.loadedChunks, new ChunkCoordComparator(p_72685_1_));
+                }
+
+                // CraftBukkit end
             }
         }
     }
 
     public boolean isPlayerWatchingChunk(EntityPlayerMP p_72694_1_, int p_72694_2_, int p_72694_3_)
@@ -326,25 +394,39 @@
         return p_72686_0_ * 16 - 16;
     }
 
     class PlayerInstance
     {
+
         private final List playersWatchingChunk = Lists.newArrayList();
         private final ChunkCoordIntPair chunkCoords;
         private short[] locationOfBlockChange = new short[64];
         private int numBlocksToUpdate;
         private int flagsYAreasToUpdate;
         private long previousWorldTime;
         private static final String __OBFID = "CL_00001435";
 
+        // CraftBukkit start - add fields
+        private final HashMap<EntityPlayerMP, Runnable> players = new HashMap<EntityPlayerMP, Runnable>();
+        private boolean loaded = false;
+        private Runnable loadedRunnable = new Runnable()
+        {
+            public void run()
+            {
+                PlayerInstance.this.loaded = true;
+            }
+        };
+        // CraftBukkit end
+
         public PlayerInstance(int p_i1518_2_, int p_i1518_3_)
         {
             this.chunkCoords = new ChunkCoordIntPair(p_i1518_2_, p_i1518_3_);
             PlayerManager.this.getMinecraftServer().theChunkProviderServer.loadChunk(p_i1518_2_, p_i1518_3_);
+            getMinecraftServer().theChunkProviderServer.getChunkAt(p_i1518_2_, p_i1518_3_, loadedRunnable); // CraftBukkit
         }
 
-        public void addPlayer(EntityPlayerMP p_73255_1_)
+        public void addPlayer(final EntityPlayerMP p_73255_1_)   // CraftBukkit - added final to argument
         {
             if (this.playersWatchingChunk.contains(p_73255_1_))
             {
                 PlayerManager.pmLogger.debug("Failed to add player. {} already is in chunk {}, {}", new Object[] {p_73255_1_, Integer.valueOf(this.chunkCoords.chunkXPos), Integer.valueOf(this.chunkCoords.chunkZPos)});
             }
@@ -354,25 +436,66 @@
                 {
                     this.previousWorldTime = PlayerManager.this.theWorldServer.getTotalWorldTime();
                 }
 
                 this.playersWatchingChunk.add(p_73255_1_);
-                p_73255_1_.loadedChunks.add(this.chunkCoords);
+                // CraftBukkit start - use async chunk io
+                Runnable playerRunnable;
+
+                if (this.loaded)
+                {
+                    playerRunnable = null;
+                    p_73255_1_.loadedChunks.add(this.chunkCoords);
+                }
+                else
+                {
+                    playerRunnable = new Runnable()
+                    {
+                        public void run()
+                        {
+                            p_73255_1_.loadedChunks.add(PlayerInstance.this.chunkCoords);
+                        }
+                    };
+                    getMinecraftServer().theChunkProviderServer.getChunkAt(this.chunkCoords.chunkXPos, this.chunkCoords.chunkZPos, playerRunnable);
+                }
+
+                this.players.put(p_73255_1_, playerRunnable);
+                // CraftBukkit end
             }
         }
 
         public void removePlayer(EntityPlayerMP p_73252_1_)
         {
             if (this.playersWatchingChunk.contains(p_73252_1_))
             {
+                // CraftBukkit start - If we haven't loaded yet don't load the chunk just so we can clean it up
+                if (!this.loaded)
+                {
+                    ChunkIOExecutor.dropQueuedChunkLoad(getMinecraftServer(), this.chunkCoords.chunkXPos, this.chunkCoords.chunkZPos, this.players.get(p_73252_1_));
+                    this.playersWatchingChunk.remove(p_73252_1_);
+                    this.players.remove(p_73252_1_);
+
+                    if (this.playersWatchingChunk.isEmpty())
+                    {
+                        ChunkIOExecutor.dropQueuedChunkLoad(getMinecraftServer(), this.chunkCoords.chunkXPos, this.chunkCoords.chunkZPos, this.loadedRunnable);
+                        long i = (long)this.chunkCoords.chunkXPos + 2147483647L | (long)this.chunkCoords.chunkZPos + 2147483647L << 32;
+                        PlayerManager.this.playerInstances.remove(i);
+                        PlayerManager.this.playerInstanceList.remove(this);
+                    }
+
+                    return;
+                }
+
+                // CraftBukkit end
                 Chunk chunk = PlayerManager.this.theWorldServer.getChunkFromChunkCoords(this.chunkCoords.chunkXPos, this.chunkCoords.chunkZPos);
 
                 if (chunk.isPopulated())
                 {
                     p_73252_1_.playerNetServerHandler.sendPacket(new S21PacketChunkData(chunk, true, 0));
                 }
 
+                this.players.remove(p_73252_1_); // CraftBukkit
                 this.playersWatchingChunk.remove(p_73252_1_);
                 p_73252_1_.loadedChunks.remove(this.chunkCoords);
 
                 if (this.playersWatchingChunk.isEmpty())
                 {
@@ -520,6 +643,64 @@
                     this.sendToAllPlayersWatchingChunk(packet);
                 }
             }
         }
     }
+
+    // CraftBukkit start - Sorter to load nearby chunks first
+    private static class ChunkCoordComparator implements java.util.Comparator<ChunkCoordIntPair>
+        {
+
+            private int x;
+            private int z;
+
+            public ChunkCoordComparator(EntityPlayerMP entityplayer)
+            {
+                x = (int)entityplayer.posX >> 4;
+                z = (int)entityplayer.posZ >> 4;
+            }
+
+            public int compare(ChunkCoordIntPair a, ChunkCoordIntPair b)
+            {
+                if (a.equals(b))
+                {
+                    return 0;
+                }
+
+                // Subtract current position to set center point
+                int ax = a.chunkXPos - this.x;
+                int az = a.chunkZPos - this.z;
+                int bx = b.chunkXPos - this.x;
+                int bz = b.chunkZPos - this.z;
+                int result = ((ax - bx) * (ax + bx)) + ((az - bz) * (az + bz));
+
+                if (result != 0)
+                {
+                    return result;
+                }
+
+                if (ax < 0)
+                {
+                    if (bx < 0)
+                    {
+                        return bz - az;
+                    }
+                    else
+                    {
+                        return -1;
+                    }
+                }
+                else
+                {
+                    if (bx < 0)
+                    {
+                        return 1;
+                    }
+                    else
+                    {
+                        return az - bz;
+                    }
+                }
+            }
+        }
+    // CraftBukkit End
 }
