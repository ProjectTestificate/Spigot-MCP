--- decompiled\net\minecraft\server\network\NetHandlerHandshakeTCP.java
+++ src\main\java\net\minecraft\server\network\NetHandlerHandshakeTCP.java
@@ -1,18 +1,34 @@
 package net.minecraft.server.network;
 
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.util.HashMap;
+
 import net.minecraft.network.EnumConnectionState;
 import net.minecraft.network.NetworkManager;
 import net.minecraft.network.handshake.INetHandlerHandshakeServer;
 import net.minecraft.network.handshake.client.C00Handshake;
 import net.minecraft.network.login.server.S00PacketDisconnect;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.ChatComponentText;
 import net.minecraft.util.IChatComponent;
 
+import org.apache.logging.log4j.LogManager;
+
+import com.google.gson.Gson;
+import com.mojang.authlib.properties.Property;
+
 public class NetHandlerHandshakeTCP implements INetHandlerHandshakeServer
 {
+
+    private static final Gson gson = new Gson(); // Spigot
+    // CraftBukkit start - add fields
+    private static final HashMap<InetAddress, Long> throttleTracker = new HashMap<InetAddress, Long>();
+    private static int throttleCounter = 0;
+    // CraftBukkit end
+
     private final MinecraftServer server;
     private final NetworkManager networkManager;
     private static final String __OBFID = "CL_00001456";
 
     public NetHandlerHandshakeTCP(MinecraftServer serverIn, NetworkManager netManager)
@@ -27,25 +43,99 @@
         {
             case 1:
                 this.networkManager.setConnectionState(EnumConnectionState.LOGIN);
                 ChatComponentText chatcomponenttext;
 
+                // CraftBukkit start - Connection throttle
+                try
+                {
+                    long currentTime = System.currentTimeMillis();
+                    long connectionThrottle = MinecraftServer.getServer().server.getConnectionThrottle();
+                    InetAddress address = ((java.net.InetSocketAddress)this.networkManager.getRemoteAddress()).getAddress();
+
+                    synchronized (throttleTracker)
+                    {
+                        if (throttleTracker.containsKey(address) && !"127.0.0.1".equals(address.getHostAddress()) && currentTime - throttleTracker.get(address) < connectionThrottle)
+                        {
+                            throttleTracker.put(address, currentTime);
+                            chatcomponenttext = new ChatComponentText("Connection throttled! Please wait before reconnecting.");
+                            this.networkManager.sendPacket(new S00PacketDisconnect(chatcomponenttext));
+                            this.networkManager.closeChannel(chatcomponenttext);
+                            return;
+                        }
+
+                        throttleTracker.put(address, currentTime);
+                        throttleCounter++;
+
+                        if (throttleCounter > 200)
+                        {
+                            throttleCounter = 0;
+                            // Cleanup stale entries
+                            java.util.Iterator iter = throttleTracker.entrySet().iterator();
+
+                            while (iter.hasNext())
+                            {
+                                java.util.Map.Entry<InetAddress, Long> entry = (java.util.Map.Entry)iter.next();
+
+                                if (entry.getValue() > connectionThrottle)
+                                {
+                                    iter.remove();
+                                }
+                            }
+                        }
+                    }
+                }
+                catch (Throwable t)
+                {
+                    LogManager.getLogger().debug("Failed to check connection throttle", t);
+                }
+
+                // CraftBukkit end
+
                 if (packetIn.getProtocolVersion() > 47)
                 {
-                    chatcomponenttext = new ChatComponentText("Outdated server! I\'m still on 1.8");
+                    chatcomponenttext = new ChatComponentText(java.text.MessageFormat.format(org.spigotmc.SpigotConfig.outdatedServerMessage, "1.8")); // Spigot
                     this.networkManager.sendPacket(new S00PacketDisconnect(chatcomponenttext));
                     this.networkManager.closeChannel(chatcomponenttext);
                 }
                 else if (packetIn.getProtocolVersion() < 47)
                 {
-                    chatcomponenttext = new ChatComponentText("Outdated client! Please use 1.8");
+                    chatcomponenttext = new ChatComponentText(java.text.MessageFormat.format(org.spigotmc.SpigotConfig.outdatedServerMessage, "1.8")); // Spigot
                     this.networkManager.sendPacket(new S00PacketDisconnect(chatcomponenttext));
                     this.networkManager.closeChannel(chatcomponenttext);
                 }
                 else
                 {
                     this.networkManager.setNetHandler(new NetHandlerLoginServer(this.server, this.networkManager));
+
+                    // Spigot Start
+                    if (org.spigotmc.SpigotConfig.bungee)
+                    {
+                        String[] split = packetIn.ip.split("\00");
+
+                        if (split.length == 3 || split.length == 4)
+                        {
+                            packetIn.ip = split[0];
+                            networkManager.socketAddress = new InetSocketAddress(split[1], ((java.net.InetSocketAddress)networkManager.getRemoteAddress()).getPort());
+                            networkManager.spoofedUUID = com.mojang.util.UUIDTypeAdapter.fromString(split[2]);
+                        }
+                        else
+                        {
+                            chatcomponenttext = new ChatComponentText("If you wish to use IP forwarding, please enable it in your BungeeCord config as well!");
+                            this.networkManager.sendPacket(new S00PacketDisconnect(chatcomponenttext));
+                            this.networkManager.closeChannel(chatcomponenttext);
+                            return;
+                        }
+
+                        if (split.length == 4)
+                        {
+                            networkManager.spoofedProfile = gson.fromJson(split[3], Property[].class);
+                        }
+                    }
+
+                    // Spigot End
+                    ((NetHandlerLoginServer)this.networkManager.getNetHandler()).hostname = packetIn.ip + ":" + packetIn.port; // CraftBukkit - set hostname
                 }
 
                 break;
             case 2:
                 this.networkManager.setConnectionState(EnumConnectionState.STATUS);
@@ -54,14 +144,17 @@
             default:
                 throw new UnsupportedOperationException("Invalid intention " + packetIn.getRequestedState());
         }
     }
 
-    public void onDisconnect(IChatComponent reason) {}
+    public void onDisconnect(IChatComponent reason)
+    {
+    }
 
     static final class SwitchEnumConnectionState
         {
+
             static final int[] VALUES = new int[EnumConnectionState.values().length];
             private static final String __OBFID = "CL_00001457";
 
             static
             {
