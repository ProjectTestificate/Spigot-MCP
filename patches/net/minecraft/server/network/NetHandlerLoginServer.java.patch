--- decompiled\net\minecraft\server\network\NetHandlerLoginServer.java
+++ src\main\java\net\minecraft\server\network\NetHandlerLoginServer.java
@@ -1,21 +1,19 @@
 package net.minecraft.server.network;
 
-import com.google.common.base.Charsets;
-import com.mojang.authlib.GameProfile;
-import com.mojang.authlib.exceptions.AuthenticationUnavailableException;
-import io.netty.channel.ChannelFuture;
-import io.netty.channel.ChannelFutureListener;
-import io.netty.util.concurrent.Future;
-import io.netty.util.concurrent.GenericFutureListener;
 import java.math.BigInteger;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
 import java.security.PrivateKey;
 import java.util.Arrays;
 import java.util.Random;
 import java.util.UUID;
 import java.util.concurrent.atomic.AtomicInteger;
+
 import javax.crypto.SecretKey;
+
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.network.NetworkManager;
 import net.minecraft.network.login.INetHandlerLoginServer;
 import net.minecraft.network.login.client.C00PacketLoginStart;
 import net.minecraft.network.login.client.C01PacketEncryptionResponse;
 import net.minecraft.network.login.server.S00PacketDisconnect;
@@ -25,16 +23,31 @@
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.gui.IUpdatePlayerListBox;
 import net.minecraft.util.ChatComponentText;
 import net.minecraft.util.CryptManager;
 import net.minecraft.util.IChatComponent;
+
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.util.Waitable;
+import org.bukkit.event.player.AsyncPlayerPreLoginEvent;
+import org.bukkit.event.player.PlayerPreLoginEvent;
 
+import com.google.common.base.Charsets;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.exceptions.AuthenticationUnavailableException;
+import com.mojang.authlib.properties.Property;
+
+import io.netty.channel.ChannelFuture;
+import io.netty.channel.ChannelFutureListener;
+import io.netty.util.concurrent.GenericFutureListener;
+
 public class NetHandlerLoginServer implements INetHandlerLoginServer, IUpdatePlayerListBox
 {
+
     private static final AtomicInteger AUTHENTICATOR_THREAD_ID = new AtomicInteger(0);
     private static final Logger logger = LogManager.getLogger();
     private static final Random RANDOM = new Random();
     private final byte[] verifyToken = new byte[4];
     private final MinecraftServer server;
@@ -43,10 +56,11 @@
     private int connectionTimer;
     private GameProfile loginGameProfile;
     private String serverId;
     private SecretKey secretKey;
     private static final String __OBFID = "CL_00001458";
+    public String hostname = ""; // CraftBukkit - add field
 
     public NetHandlerLoginServer(MinecraftServer p_i45298_1_, NetworkManager p_i45298_2_)
     {
         this.currentLoginState = NetHandlerLoginServer.LoginState.HELLO;
         this.serverId = "";
@@ -81,22 +95,52 @@
         {
             logger.error("Error whilst disconnecting player", exception);
         }
     }
 
-    public void tryAcceptPlayer()
+    // Spigot start
+    public void initUUID()
     {
-        if (!this.loginGameProfile.isComplete())
+        UUID uuid;
+
+        if (networkManager.spoofedUUID != null)
         {
-            this.loginGameProfile = this.getOfflineProfile(this.loginGameProfile);
+            uuid = networkManager.spoofedUUID;
         }
+        else
+        {
+            uuid = UUID.nameUUIDFromBytes(("OfflinePlayer:" + this.loginGameProfile.getName()).getBytes(Charsets.UTF_8));
+        }
 
-        String s = this.server.getConfigurationManager().allowUserToConnect(this.networkManager.getRemoteAddress(), this.loginGameProfile);
+        this.loginGameProfile = new GameProfile(uuid, this.loginGameProfile.getName());
 
+        if (networkManager.spoofedProfile != null)
+        {
+            for (Property property : networkManager.spoofedProfile)
+            {
+                this.loginGameProfile.getProperties().put(property.getName(), property);
+            }
+        }
+    }
+    // Spigot end
+
+    public void tryAcceptPlayer()
+    {
+        // Spigot start - Moved to initUUID
+        /*
+        if (!this.loginGameProfile.isComplete()) {
+            this.loginGameProfile = this.getOfflineProfile(this.loginGameProfile);
+        }
+        */
+        // Spigot end
+        // CraftBukkit start - fire PlayerLoginEvent
+        EntityPlayerMP s = this.server.getConfigurationManager().attemptLogin(this, this.loginGameProfile, hostname);
+
         if (s != null)
         {
-            this.closeConnection(s);
+            // this.closeConnection(s);
+            // CraftBukkit end
         }
         else
         {
             this.currentLoginState = NetHandlerLoginServer.LoginState.ACCEPTED;
 
@@ -111,11 +155,11 @@
                     }
                 }, new GenericFutureListener[0]);
             }
 
             this.networkManager.sendPacket(new S02PacketLoginSuccess(this.loginGameProfile));
-            this.server.getConfigurationManager().initializeConnectionToPlayer(this.networkManager, this.server.getConfigurationManager().createPlayerForUser(this.loginGameProfile));
+            this.server.getConfigurationManager().initializeConnectionToPlayer(this.networkManager, this.server.getConfigurationManager().createPlayerForUser(this.loginGameProfile, s)); // CraftBukkit - add player reference
         }
     }
 
     public void onDisconnect(IChatComponent reason)
     {
@@ -137,11 +181,11 @@
             this.currentLoginState = NetHandlerLoginServer.LoginState.KEY;
             this.networkManager.sendPacket(new S01PacketEncryptionRequest(this.serverId, this.server.getKeyPair().getPublic(), this.verifyToken));
         }
         else
         {
-            this.currentLoginState = NetHandlerLoginServer.LoginState.READY_TO_ACCEPT;
+            new ThreadPlayerLookupUUID("User Authenticator #" + AUTHENTICATOR_THREAD_ID.incrementAndGet()); // Spigot // SpigotMCP -- Use regular inner classes
         }
     }
 
     public void processEncryptionResponse(C01PacketEncryptionResponse packetIn)
     {
@@ -155,55 +199,11 @@
         else
         {
             this.secretKey = packetIn.getSecretKey(privatekey);
             this.currentLoginState = NetHandlerLoginServer.LoginState.AUTHENTICATING;
             this.networkManager.enableEncryption(this.secretKey);
-            (new Thread("User Authenticator #" + AUTHENTICATOR_THREAD_ID.incrementAndGet())
-            {
-                private static final String __OBFID = "CL_00002268";
-                public void run()
-                {
-                    GameProfile gameprofile = NetHandlerLoginServer.this.loginGameProfile;
-
-                    try
-                    {
-                        String s = (new BigInteger(CryptManager.getServerIdHash(NetHandlerLoginServer.this.serverId, NetHandlerLoginServer.this.server.getKeyPair().getPublic(), NetHandlerLoginServer.this.secretKey))).toString(16);
-                        NetHandlerLoginServer.this.loginGameProfile = NetHandlerLoginServer.this.server.getMinecraftSessionService().hasJoinedServer(new GameProfile((UUID)null, gameprofile.getName()), s);
-
-                        if (NetHandlerLoginServer.this.loginGameProfile != null)
-                        {
-                            NetHandlerLoginServer.logger.info("UUID of player " + NetHandlerLoginServer.this.loginGameProfile.getName() + " is " + NetHandlerLoginServer.this.loginGameProfile.getId());
-                            NetHandlerLoginServer.this.currentLoginState = NetHandlerLoginServer.LoginState.READY_TO_ACCEPT;
-                        }
-                        else if (NetHandlerLoginServer.this.server.isSinglePlayer())
-                        {
-                            NetHandlerLoginServer.logger.warn("Failed to verify username but will let them in anyway!");
-                            NetHandlerLoginServer.this.loginGameProfile = NetHandlerLoginServer.this.getOfflineProfile(gameprofile);
-                            NetHandlerLoginServer.this.currentLoginState = NetHandlerLoginServer.LoginState.READY_TO_ACCEPT;
-                        }
-                        else
-                        {
-                            NetHandlerLoginServer.this.closeConnection("Failed to verify username!");
-                            NetHandlerLoginServer.logger.error("Username \'" + NetHandlerLoginServer.this.loginGameProfile.getName() + "\' tried to join with an invalid session");
-                        }
-                    }
-                    catch (AuthenticationUnavailableException authenticationunavailableexception)
-                    {
-                        if (NetHandlerLoginServer.this.server.isSinglePlayer())
-                        {
-                            NetHandlerLoginServer.logger.warn("Authentication servers are down but will let them in anyway!");
-                            NetHandlerLoginServer.this.loginGameProfile = NetHandlerLoginServer.this.getOfflineProfile(gameprofile);
-                            NetHandlerLoginServer.this.currentLoginState = NetHandlerLoginServer.LoginState.READY_TO_ACCEPT;
-                        }
-                        else
-                        {
-                            NetHandlerLoginServer.this.closeConnection("Authentication servers are down. Please try again later, sorry!");
-                            NetHandlerLoginServer.logger.error("Couldn\'t verify username because servers are unavailable");
-                        }
-                    }
-                }
-            }).start();
+            new ThreadPlayerLookupUUID("User Authenticator #" + AUTHENTICATOR_THREAD_ID.incrementAndGet()).start(); // SpigotMCP -- Use regular inner class
         }
     }
 
     protected GameProfile getOfflineProfile(GameProfile original)
     {
@@ -219,6 +219,134 @@
         READY_TO_ACCEPT,
         ACCEPTED;
 
         private static final String __OBFID = "CL_00001463";
     }
+
+    // SpigotMCP Start -- Convert anonomous inner class to inner class
+    public class ThreadPlayerLookupUUID extends Thread
+    {
+
+        private static final String __OBFID = "CL_00002268";
+
+        public ThreadPlayerLookupUUID(String s)
+        {
+            super(s);
+        }
+
+        public void run()
+        {
+            GameProfile gameprofile = NetHandlerLoginServer.this.loginGameProfile;
+
+            try
+            {
+                // Spigot Start
+                if (!NetHandlerLoginServer.this.server.isServerInOnlineMode())
+                {
+                    NetHandlerLoginServer.this.initUUID();
+                    fireLoginEvents();
+                    return;
+                }
+
+                // Spigot End
+                String s = (new BigInteger(CryptManager.getServerIdHash(NetHandlerLoginServer.this.serverId, NetHandlerLoginServer.this.server.getKeyPair().getPublic(), NetHandlerLoginServer.this.secretKey))).toString(16);
+                NetHandlerLoginServer.this.loginGameProfile = NetHandlerLoginServer.this.server.getMinecraftSessionService().hasJoinedServer(new GameProfile((UUID)null, gameprofile.getName()), s);
+
+                if (NetHandlerLoginServer.this.loginGameProfile != null)
+                {
+                    fireLoginEvents(); // Spigot
+                }
+                else if (NetHandlerLoginServer.this.server.isSinglePlayer())
+                {
+                    NetHandlerLoginServer.logger.warn("Failed to verify username but will let them in anyway!");
+                    NetHandlerLoginServer.this.loginGameProfile = NetHandlerLoginServer.this.getOfflineProfile(gameprofile);
+                    NetHandlerLoginServer.this.currentLoginState = NetHandlerLoginServer.LoginState.READY_TO_ACCEPT;
+                }
+                else
+                {
+                    NetHandlerLoginServer.this.closeConnection("Failed to verify username!");
+                    NetHandlerLoginServer.logger.error("Username \'" + gameprofile.getName() + "\' tried to join with an invalid session"); // CraftBukkit - fix null pointer
+                }
+            }
+            catch (AuthenticationUnavailableException authenticationunavailableexception)
+            {
+                if (NetHandlerLoginServer.this.server.isSinglePlayer())
+                {
+                    NetHandlerLoginServer.logger.warn("Authentication servers are down but will let them in anyway!");
+                    NetHandlerLoginServer.this.loginGameProfile = NetHandlerLoginServer.this.getOfflineProfile(gameprofile);
+                    NetHandlerLoginServer.this.currentLoginState = NetHandlerLoginServer.LoginState.READY_TO_ACCEPT;
+                }
+                else
+                {
+                    NetHandlerLoginServer.this.closeConnection("Authentication servers are down. Please try again later, sorry!");
+                    NetHandlerLoginServer.logger.error("Couldn\'t verify username because servers are unavailable");
+                }
+
+                // CraftBukkit start - catch all exceptions
+            }
+            catch (Exception exception)
+            {
+                NetHandlerLoginServer.this.closeConnection("Failed to verify username!");
+                NetHandlerLoginServer.this.server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + gameprofile.getName(), exception);
+                // CraftBukkit end
+            }
+        }
+
+        // Spigot start -- refractor login logic to seperate method
+        private void fireLoginEvents() throws Exception
+        {
+            // CraftBukkit start - fire PlayerPreLoginEvent
+            if (!NetHandlerLoginServer.this.networkManager.isChannelOpen())
+            {
+                return;
+            }
+
+            String playerName = NetHandlerLoginServer.this.loginGameProfile.getName();
+            InetAddress address = ((InetSocketAddress)NetHandlerLoginServer.this.networkManager.getRemoteAddress()).getAddress();
+            UUID uniqueId = NetHandlerLoginServer.this.loginGameProfile.getId();
+            final CraftServer server = NetHandlerLoginServer.this.server.server;
+            AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, uniqueId);
+            server.getPluginManager().callEvent(asyncEvent);
+
+            if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0)
+            {
+                final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address, uniqueId);
+
+                if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED)
+                {
+                    event.disallow(asyncEvent.getResult(), asyncEvent.getKickMessage());
+                }
+
+                Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<PlayerPreLoginEvent.Result>()
+                {
+                    @Override
+                    protected PlayerPreLoginEvent.Result evaluate()
+                    {
+                        server.getPluginManager().callEvent(event);
+                        return event.getResult();
+                    }
+                };
+                NetHandlerLoginServer.this.server.processQueue.add(waitable);
+
+                if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED)
+                {
+                    NetHandlerLoginServer.this.closeConnection(event.getKickMessage());
+                    return;
+                }
+            }
+            else
+            {
+                if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED)
+                {
+                    NetHandlerLoginServer.this.closeConnection(asyncEvent.getKickMessage());
+                    return;
+                }
+            }
+
+            // CraftBukkit end
+            NetHandlerLoginServer.logger.info("UUID of player " + NetHandlerLoginServer.this.loginGameProfile.getName() + " is " + NetHandlerLoginServer.this.loginGameProfile.getId());
+            NetHandlerLoginServer.this.currentLoginState = LoginState.READY_TO_ACCEPT;
+        }
+        // Spigot End
+    }
+    // SpigotMCP End
 }
