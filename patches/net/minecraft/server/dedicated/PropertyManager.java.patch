--- decompiled\net\minecraft\server\dedicated\PropertyManager.java
+++ src\main\java\net\minecraft\server\dedicated\PropertyManager.java
@@ -3,20 +3,21 @@
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.util.Properties;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-@SideOnly(Side.SERVER)
+import joptsimple.OptionSet;
+
 public class PropertyManager
 {
+
     private static final Logger LOGGER = LogManager.getLogger();
-    private final Properties serverProperties = new Properties();
+    public Properties serverProperties = new Properties(); // SpigotMCP -- Apply access transform
     private final File serverPropertiesFile;
     private static final String __OBFID = "CL_00001782";
 
     public PropertyManager(File propertiesFile)
     {
@@ -56,10 +57,30 @@
             LOGGER.warn(propertiesFile + " does not exist");
             this.generateNewProperties();
         }
     }
 
+    // CraftBukkit start
+    private OptionSet options = null;
+
+    public PropertyManager(final OptionSet options)
+    {
+        this((File)options.valueOf("config"));
+        this.options = options;
+    }
+
+    private <T> T getOverride(String name, T value)
+    {
+        if ((this.options != null) && (this.options.has(name)) && !name.equals("online-mode"))   // Spigot
+        {
+            return (T)this.options.valueOf(name);
+        }
+
+        return value;
+    }
+    // CraftBukkit end
+
     public void generateNewProperties()
     {
         LOGGER.info("Generating new properties file");
         this.saveProperties();
     }
@@ -68,10 +89,17 @@
     {
         FileOutputStream fileoutputstream = null;
 
         try
         {
+            // CraftBukkit start - Don't attempt writing to file if it's read only
+            if (this.serverPropertiesFile.exists() && !this.serverPropertiesFile.canWrite())
+            {
+                return;
+            }
+
+            // CraftBukkit end
             fileoutputstream = new FileOutputStream(this.serverPropertiesFile);
             this.serverProperties.store(fileoutputstream, "Minecraft server properties");
         }
         catch (Exception exception)
         {
@@ -106,52 +134,52 @@
             this.serverProperties.setProperty(key, defaultValue);
             this.saveProperties();
             this.saveProperties();
         }
 
-        return this.serverProperties.getProperty(key, defaultValue);
+        return getOverride(key, this.serverProperties.getProperty(key, defaultValue)); // CraftBukkit
     }
 
     public int getIntProperty(String key, int defaultValue)
     {
         try
         {
-            return Integer.parseInt(this.getStringProperty(key, "" + defaultValue));
+            return getOverride(key, Integer.parseInt(this.getStringProperty(key, "" + defaultValue))); // CraftBukkit
         }
         catch (Exception exception)
         {
             this.serverProperties.setProperty(key, "" + defaultValue);
             this.saveProperties();
-            return defaultValue;
+            return getOverride(key, defaultValue); // CraftBukkit
         }
     }
 
     public long getLongProperty(String key, long defaultValue)
     {
         try
         {
-            return Long.parseLong(this.getStringProperty(key, "" + defaultValue));
+            return getOverride(key, Long.parseLong(this.getStringProperty(key, "" + defaultValue))); // CraftBukkit
         }
         catch (Exception exception)
         {
             this.serverProperties.setProperty(key, "" + defaultValue);
             this.saveProperties();
-            return defaultValue;
+            return getOverride(key, defaultValue); // CraftBukkit
         }
     }
 
     public boolean getBooleanProperty(String key, boolean defaultValue)
     {
         try
         {
-            return Boolean.parseBoolean(this.getStringProperty(key, "" + defaultValue));
+            return getOverride(key, Boolean.parseBoolean(this.getStringProperty(key, "" + defaultValue))); // CraftBukkit
         }
         catch (Exception exception)
         {
             this.serverProperties.setProperty(key, "" + defaultValue);
             this.saveProperties();
-            return defaultValue;
+            return getOverride(key, defaultValue); // CraftBukkit
         }
     }
 
     public void setProperty(String key, Object value)
     {
