--- decompiled\net\minecraft\server\dedicated\PropertyManager.java
+++ src\main\java\net\minecraft\server\dedicated\PropertyManager.java
@@ -3,158 +3,142 @@
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.util.Properties;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-@SideOnly(Side.SERVER)
-public class PropertyManager
-{
+import joptsimple.OptionSet;
+
+public class PropertyManager {
+
     private static final Logger LOGGER = LogManager.getLogger();
-    private final Properties serverProperties = new Properties();
+    public Properties serverProperties = new Properties(); // SpigotMCP -- Apply access transform
     private final File serverPropertiesFile;
     private static final String __OBFID = "CL_00001782";
 
-    public PropertyManager(File propertiesFile)
-    {
+    public PropertyManager(File propertiesFile) {
         this.serverPropertiesFile = propertiesFile;
 
-        if (propertiesFile.exists())
-        {
+        if (propertiesFile.exists()) {
             FileInputStream fileinputstream = null;
 
-            try
-            {
+            try {
                 fileinputstream = new FileInputStream(propertiesFile);
                 this.serverProperties.load(fileinputstream);
-            }
-            catch (Exception exception)
-            {
+            } catch (Exception exception) {
                 LOGGER.warn("Failed to load " + propertiesFile, exception);
                 this.generateNewProperties();
-            }
-            finally
-            {
-                if (fileinputstream != null)
-                {
-                    try
-                    {
+            } finally {
+                if (fileinputstream != null) {
+                    try {
                         fileinputstream.close();
-                    }
-                    catch (IOException ioexception)
-                    {
+                    } catch (IOException ioexception) {
                         ;
                     }
                 }
             }
-        }
-        else
-        {
+        } else {
             LOGGER.warn(propertiesFile + " does not exist");
             this.generateNewProperties();
         }
     }
 
-    public void generateNewProperties()
-    {
+    // CraftBukkit start
+    private OptionSet options = null;
+
+    public PropertyManager(final OptionSet options) {
+        this((File) options.valueOf("config"));
+
+        this.options = options;
+    }
+
+    private <T> T getOverride(String name, T value) {
+        if ((this.options != null) && (this.options.has(name)) && !name.equals("online-mode")) { // Spigot
+            return (T) this.options.valueOf(name);
+        }
+
+        return value;
+    }
+    // CraftBukkit end
+
+    public void generateNewProperties() {
         LOGGER.info("Generating new properties file");
         this.saveProperties();
     }
 
-    public void saveProperties()
-    {
+    public void saveProperties() {
         FileOutputStream fileoutputstream = null;
 
-        try
-        {
+        try {
+            // CraftBukkit start - Don't attempt writing to file if it's read only
+            if (this.serverPropertiesFile.exists() && !this.serverPropertiesFile.canWrite()) {
+                return;
+            }
+            // CraftBukkit end
+
             fileoutputstream = new FileOutputStream(this.serverPropertiesFile);
             this.serverProperties.store(fileoutputstream, "Minecraft server properties");
-        }
-        catch (Exception exception)
-        {
+        } catch (Exception exception) {
             LOGGER.warn("Failed to save " + this.serverPropertiesFile, exception);
             this.generateNewProperties();
-        }
-        finally
-        {
-            if (fileoutputstream != null)
-            {
-                try
-                {
+        } finally {
+            if (fileoutputstream != null) {
+                try {
                     fileoutputstream.close();
-                }
-                catch (IOException ioexception)
-                {
+                } catch (IOException ioexception) {
                     ;
                 }
             }
         }
     }
 
-    public File getPropertiesFile()
-    {
+    public File getPropertiesFile() {
         return this.serverPropertiesFile;
     }
 
-    public String getStringProperty(String key, String defaultValue)
-    {
-        if (!this.serverProperties.containsKey(key))
-        {
+    public String getStringProperty(String key, String defaultValue) {
+        if (!this.serverProperties.containsKey(key)) {
             this.serverProperties.setProperty(key, defaultValue);
             this.saveProperties();
             this.saveProperties();
         }
 
-        return this.serverProperties.getProperty(key, defaultValue);
+        return getOverride(key, this.serverProperties.getProperty(key, defaultValue)); // CraftBukkit
     }
 
-    public int getIntProperty(String key, int defaultValue)
-    {
-        try
-        {
-            return Integer.parseInt(this.getStringProperty(key, "" + defaultValue));
-        }
-        catch (Exception exception)
-        {
+    public int getIntProperty(String key, int defaultValue) {
+        try {
+            return getOverride(key, Integer.parseInt(this.getStringProperty(key, "" + defaultValue))); // CraftBukkit
+        } catch (Exception exception) {
             this.serverProperties.setProperty(key, "" + defaultValue);
             this.saveProperties();
-            return defaultValue;
+            return getOverride(key, defaultValue); // CraftBukkit
         }
     }
 
-    public long getLongProperty(String key, long defaultValue)
-    {
-        try
-        {
-            return Long.parseLong(this.getStringProperty(key, "" + defaultValue));
-        }
-        catch (Exception exception)
-        {
+    public long getLongProperty(String key, long defaultValue) {
+        try {
+            return getOverride(key, Long.parseLong(this.getStringProperty(key, "" + defaultValue))); // CraftBukkit
+        } catch (Exception exception) {
             this.serverProperties.setProperty(key, "" + defaultValue);
             this.saveProperties();
-            return defaultValue;
+            return getOverride(key, defaultValue); // CraftBukkit
         }
     }
 
-    public boolean getBooleanProperty(String key, boolean defaultValue)
-    {
-        try
-        {
-            return Boolean.parseBoolean(this.getStringProperty(key, "" + defaultValue));
-        }
-        catch (Exception exception)
-        {
+    public boolean getBooleanProperty(String key, boolean defaultValue) {
+        try {
+            return getOverride(key, Boolean.parseBoolean(this.getStringProperty(key, "" + defaultValue))); // CraftBukkit
+        } catch (Exception exception) {
             this.serverProperties.setProperty(key, "" + defaultValue);
             this.saveProperties();
-            return defaultValue;
+            return getOverride(key, defaultValue); // CraftBukkit
         }
     }
 
-    public void setProperty(String key, Object value)
-    {
+    public void setProperty(String key, Object value) {
         this.serverProperties.setProperty(key, "" + value);
     }
 }
