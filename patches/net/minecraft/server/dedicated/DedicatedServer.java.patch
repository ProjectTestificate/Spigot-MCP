--- decompiled\net\minecraft\server\dedicated\DedicatedServer.java
+++ src\main\java\net\minecraft\server\dedicated\DedicatedServer.java
@@ -1,19 +1,19 @@
 package net.minecraft.server.dedicated;
 
-import com.google.common.collect.Lists;
-import java.io.BufferedReader;
 import java.io.File;
 import java.io.IOException;
-import java.io.InputStreamReader;
+import java.io.PrintStream;
 import java.net.InetAddress;
 import java.net.Proxy;
 import java.util.Collections;
 import java.util.List;
 import java.util.Random;
 import java.util.concurrent.Callable;
 import java.util.concurrent.TimeUnit;
+import java.util.logging.Handler;
+
 import net.minecraft.command.ICommandSender;
 import net.minecraft.command.ServerCommand;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.network.rcon.IServer;
@@ -30,32 +30,53 @@
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.EnumDifficulty;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldSettings;
 import net.minecraft.world.WorldType;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+import net.minecraft.world.chunk.storage.AnvilSaveConverter;
+
+import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.apache.logging.log4j.core.Appender;
+import org.apache.logging.log4j.core.appender.ConsoleAppender;
+import org.bukkit.craftbukkit.LoggerOutputStream;
+import org.bukkit.craftbukkit.SpigotTimings;
+import org.bukkit.craftbukkit.command.CraftRemoteConsoleCommandSender;
+import org.bukkit.craftbukkit.util.ForwardLogHandler;
+import org.bukkit.craftbukkit.util.TerminalConsoleWriterThread;
+import org.bukkit.event.server.ServerCommandEvent;
+import org.spigotmc.SpigotConfig;
 
-@SideOnly(Side.SERVER)
+import com.google.common.collect.Lists;
+
+import jline.console.ConsoleReader;
+import joptsimple.OptionSet;
+
+import static org.bukkit.craftbukkit.Main.useConsole;
+import static org.bukkit.craftbukkit.Main.useJline;
+
 public class DedicatedServer extends MinecraftServer implements IServer
 {
+
     private static final Logger logger = LogManager.getLogger();
-    private final List pendingCommandList = Collections.synchronizedList(Lists.newArrayList());
+    public final List pendingCommandList = Collections.synchronizedList(Lists.newArrayList());
     private RConThreadQuery theRConThreadQuery;
     private RConThreadMain theRConThreadMain;
-    private PropertyManager settings;
+    public PropertyManager settings; // SpigotMCP -- Apply access transformation
     private ServerEula eula;
     private boolean canSpawnStructures;
     private WorldSettings.GameType gameType;
     private boolean guiIsEnabled;
     private static final String __OBFID = "CL_00001784";
 
-    public DedicatedServer(File workDir)
+    // CraftBukkit start - Signature changed
+    public DedicatedServer(OptionSet options)
     {
-        super(workDir, Proxy.NO_PROXY, USER_CACHE_FILE);
+        super(options, Proxy.NO_PROXY, USER_CACHE_FILE);
+        // super(workDir, Proxy.NO_PROXY, USER_CACHE_FILE);
+        // CraftBukkit end
         Thread thread = new Thread("Server Infinisleeper")
         {
             private static final String __OBFID = "CL_00001787";
             {
                 this.setDaemon(true);
@@ -79,48 +100,104 @@
                 }
             }
         };
     }
 
-    protected boolean startServer() throws IOException
+    protected boolean startServer() throws IOException   // CraftBukkit - throws UnknownHostException // SpigotMCP NOTE -- MCP already added supperclass
     {
         Thread thread = new Thread("Server console handler")
         {
             private static final String __OBFID = "CL_00001786";
             public void run()
             {
-                BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in));
+                // CraftBukkit start
+                if (!useConsole)
+                {
+                    return;
+                }
+
+                // CraftBukkit end
+                ConsoleReader bufferedreader = DedicatedServer.this.reader; // CraftBukkit
                 String s4;
 
                 try
                 {
-                    while (!DedicatedServer.this.isServerStopped() && DedicatedServer.this.isServerRunning() && (s4 = bufferedreader.readLine()) != null)
+                    // CraftBukkit start - JLine disabling compatibility
+                    while (!DedicatedServer.this.isServerStopped() && DedicatedServer.this.isServerRunning())
                     {
-                        DedicatedServer.this.addPendingCommand(s4, DedicatedServer.this);
+                        if (useJline)
+                        {
+                            s4 = bufferedreader.readLine(">", null);
+                        }
+                        else
+                        {
+                            s4 = bufferedreader.readLine();
+                        }
+
+                        if (s4 != null && s4.trim().length() > 0)   // Trim to filter lines which are just spaces
+                        {
+                            DedicatedServer.this.addPendingCommand(s4, DedicatedServer.this);
+                        }
+
+                        // CraftBukkit end
                     }
                 }
                 catch (IOException ioexception1)
                 {
                     DedicatedServer.logger.error("Exception handling console input", ioexception1);
                 }
             }
         };
         thread.setDaemon(true);
         thread.start();
+        // CraftBukkit start - TODO: handle command-line logging arguments
+        java.util.logging.Logger global = java.util.logging.Logger.getLogger("");
+        global.setUseParentHandlers(false);
+
+        for (Handler handler : global.getHandlers())
+        {
+            global.removeHandler(handler);
+        }
+
+        global.addHandler(new ForwardLogHandler());
+        final org.apache.logging.log4j.core.Logger logger = ((org.apache.logging.log4j.core.Logger)LogManager.getRootLogger());
+
+        for (Appender appender : logger.getAppenders().values())
+        {
+            if (appender instanceof ConsoleAppender)
+            {
+                logger.removeAppender(appender);
+            }
+        }
+
+        new Thread(new TerminalConsoleWriterThread(System.out, this.reader)).start();
+        System.setOut(new PrintStream(new LoggerOutputStream(logger, Level.INFO), true));
+        System.setErr(new PrintStream(new LoggerOutputStream(logger, Level.WARN), true));
+        // CraftBukkit end
         logger.info("Starting minecraft server version 1.8");
 
         if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L)
         {
             logger.warn("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
         }
 
         logger.info("Loading properties");
-        this.settings = new PropertyManager(new File("server.properties"));
+        this.settings = new PropertyManager(this.options); // CraftBukkit - CLI argument support
         this.eula = new ServerEula(new File("eula.txt"));
+        // Spigot Start
+        boolean eulaAgreed = Boolean.getBoolean("com.mojang.eula.agree");
 
-        if (!this.eula.hasAcceptedEULA())
+        if (eulaAgreed)
         {
+            System.err.println("You have used the Spigot command line EULA agreement flag.");
+            System.err.println("By using this setting you are indicating your agreement to Mojang's EULA (https://account.mojang.com/documents/minecraft_eula).");
+            System.err.println("If you do not agree to the above EULA please stop your server and remove this flag immediately.");
+        }
+
+        // Spigot End
+        if (!this.eula.hasAcceptedEULA() && !eulaAgreed)   // Spigot
+        {
             logger.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
             this.eula.createEULAFile();
             return false;
         }
         else
@@ -167,26 +244,42 @@
             if (this.getServerPort() < 0)
             {
                 this.setServerPort(this.settings.getIntProperty("server-port", 25565));
             }
 
+            // Spigot start
+            this.setConfigManager(new DedicatedPlayerList(this));
+            SpigotConfig.init();
+            SpigotConfig.registerCommands();
+            // Spigot end
             logger.info("Generating keypair");
             this.setKeyPair(CryptManager.generateKeyPair());
             logger.info("Starting Minecraft server on " + (this.getServerHostname().length() == 0 ? "*" : this.getServerHostname()) + ":" + this.getServerPort());
 
-            try
+            // Spigot Start
+            if (!org.spigotmc.SpigotConfig.lateBind)
             {
-                this.getNetworkSystem().addLanEndpoint(inetaddress, this.getServerPort());
+                try
+                {
+                    this.getNetworkSystem().addLanEndpoint(inetaddress, this.getServerPort());
+                }
+                catch (IOException ioexception)   // CraftBukkit - IOException -> Throwable
+                {
+                    logger.warn("**** FAILED TO BIND TO PORT!");
+                    logger.warn("The exception was: {}", new Object[] {ioexception.toString()});
+                    logger.warn("Perhaps a server is already running on that port?");
+                    return false;
+                }
             }
-            catch (IOException ioexception)
-            {
-                logger.warn("**** FAILED TO BIND TO PORT!");
-                logger.warn("The exception was: {}", new Object[] {ioexception.toString()});
-                logger.warn("Perhaps a server is already running on that port?");
-                return false;
-            }
 
+            // Spigot End
+            // Spigot Start - Move DedicatedPlayerList up and bring plugin loading from CraftServer to here
+            // this.setConfigManager((ServerConfigurationManager) (new DedicatedPlayerList(this))); // CraftBukkit
+            server.loadPlugins();
+            server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
+            // Spigot End
+
             if (!this.isServerInOnlineMode())
             {
                 logger.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
                 logger.warn("The server will make no attempt to authenticate usernames. Beware.");
                 logger.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
@@ -202,11 +295,12 @@
             {
                 return false;
             }
             else
             {
-                this.setConfigManager(new DedicatedPlayerList(this));
+                // this.setConfigManager(new DedicatedPlayerList(this)); // CraftBukkit - moved up
+                this.anvilConverterForAnvilFile = new AnvilSaveConverter(server.getWorldContainer()); // CraftBukkit - moved from MinecraftServer constructor
                 long j = System.nanoTime();
 
                 if (this.getFolderName() == null)
                 {
                     this.setFolderName(this.settings.getStringProperty("level-name", "world"));
@@ -266,14 +360,45 @@
                 if (this.settings.getBooleanProperty("enable-rcon", false))
                 {
                     logger.info("Starting remote control listener");
                     this.theRConThreadMain = new RConThreadMain(this);
                     this.theRConThreadMain.startThread();
+                    this.remoteConsole = new CraftRemoteConsoleCommandSender(); // CraftBukkit
                 }
 
-                if (this.getMaxTickTime() > 0L)
+                // CraftBukkit start
+                if (this.server.getBukkitSpawnRadius() > -1)
                 {
+                    DedicatedServer.logger.info("'settings.spawn-radius' in bukkit.yml has been moved to 'spawn-protection' in server.properties. I will move your config for you.");
+                    this.settings.serverProperties.remove("spawn-protection");
+                    this.settings.getIntProperty("spawn-protection", this.server.getBukkitSpawnRadius());
+                    this.server.removeBukkitSpawnRadius();
+                    this.settings.saveProperties();
+                }
+
+                // CraftBukkit end
+
+                // Spigot Start
+                if (org.spigotmc.SpigotConfig.lateBind)
+                {
+                    try
+                    {
+                        this.getNetworkSystem().addLanEndpoint(inetaddress, this.getServerPort());
+                    }
+                    catch (Throwable ioexception)   // CraftBukkit - IOException -> Throwable
+                    {
+                        DedicatedServer.logger.warn("**** FAILED TO BIND TO PORT!");
+                        DedicatedServer.logger.warn("The exception was: {}", new Object[] {ioexception.toString()});
+                        DedicatedServer.logger.warn("Perhaps a server is already running on that port?");
+                        return false;
+                    }
+                }
+
+                // Spigot End
+
+                if (false && this.getMaxTickTime() > 0L)   // Spigot - disable
+                {
                     Thread thread1 = new Thread(new ServerHangWatchdog(this));
                     thread1.setName("Server Watchdog");
                     thread1.setDaemon(true);
                     thread1.start();
                 }
@@ -281,10 +406,17 @@
                 return true;
             }
         }
     }
 
+    // CraftBukkit start
+    public PropertyManager getPropertyManager()
+    {
+        return this.settings;
+    }
+    // CraftBukkit end
+
     public void setGameType(WorldSettings.GameType gameMode)
     {
         super.setGameType(gameMode);
         this.gameType = gameMode;
     }
@@ -309,23 +441,21 @@
         return this.settings.getBooleanProperty("hardcore", false);
     }
 
     protected void finalTick(CrashReport report)
     {
-        while (this.isServerRunning())
-        {
+        /* CraftBukkit start - not sure why you would want to continue running commands once the server crashed
+        while (this.isServerRunning()) {
             this.executePendingCommands();
 
-            try
-            {
+            try {
                 Thread.sleep(10L);
-            }
-            catch (InterruptedException interruptedexception)
-            {
+            } catch (InterruptedException interruptedexception) {
                 ;
             }
         }
+        // CraftBukkit end */
     }
 
     public CrashReport addServerInfoToCrashReport(CrashReport report)
     {
         report = super.addServerInfoToCrashReport(report);
@@ -387,15 +517,25 @@
         this.pendingCommandList.add(new ServerCommand(input, sender));
     }
 
     public void executePendingCommands()
     {
+        SpigotTimings.serverCommandTimer.startTiming(); // Spigot
+
         while (!this.pendingCommandList.isEmpty())
         {
             ServerCommand servercommand = (ServerCommand)this.pendingCommandList.remove(0);
-            this.getCommandManager().executeCommand(servercommand.sender, servercommand.input);
+            // CraftBukkit start - ServerCommand for preprocessing
+            ServerCommandEvent event = new ServerCommandEvent(console, servercommand.input);
+            server.getPluginManager().callEvent(event);
+            servercommand = new ServerCommand(event.getCommand(), servercommand.sender);
+            // this.getCommandManager().executeCommand(servercommand.sender, servercommand.input);
+            server.dispatchServerCommand(console, servercommand);
+            // CraftBukkit end
         }
+
+        SpigotTimings.serverCommandTimer.stopTiming(); // Spigot
     }
 
     public boolean isDedicatedServer()
     {
         return true;
@@ -529,10 +669,11 @@
         return this.settings.getIntProperty("network-compression-threshold", super.getNetworkCompressionTreshold());
     }
 
     protected boolean convertFiles() throws IOException
     {
+        server.getLogger().info("**** Beginning UUID conversion, this may take A LONG time ****"); // Spigot, let the user know whats up!
         boolean flag = false;
         int i;
 
         for (i = 0; !flag && i <= 2; ++i)
         {
