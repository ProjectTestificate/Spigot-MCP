---a/net/minecraft/util/FoodStats.java
+++b/net/minecraft/util/FoodStats.java
@@ -1,83 +1,104 @@
 package net.minecraft.util;
 
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.item.ItemFood;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
+import net.minecraft.network.play.server.S06PacketUpdateHealth;
 import net.minecraft.world.EnumDifficulty;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class FoodStats
-{
-    private int foodLevel = 20;
-    private float foodSaturationLevel = 5.0F;
-    private float foodExhaustionLevel;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason;
+import org.bukkit.event.entity.FoodLevelChangeEvent;
+
+public class FoodStats {
+
+    public int foodLevel = 20; // SpigotMCP -- Apply access transform
+    public float foodSaturationLevel = 5.0F; // SpigotMCP -- Apply access transform
+    public float foodExhaustionLevel; // SpigotMCP -- Apply access transform
     private int foodTimer;
+    private EntityPlayer entityhuman; // CraftBukkit
     private int prevFoodLevel = 20;
     private static final String __OBFID = "CL_00001729";
 
-    public void addStats(int foodLevelIn, float foodSaturationModifier)
-    {
+    public FoodStats() {
+        throw new AssertionError("Whoopsie, we missed the bukkit.");
+    } // CraftBukkit - throw an error
+
+    // CraftBukkit start - added EntityHuman constructor
+    public FoodStats(EntityPlayer entityhuman) {
+        org.apache.commons.lang.Validate.notNull(entityhuman);
+        this.entityhuman = entityhuman;
+    }
+    // CraftBukkit end
+
+    public void addStats(int foodLevelIn, float foodSaturationModifier) {
         this.foodLevel = Math.min(foodLevelIn + this.foodLevel, 20);
-        this.foodSaturationLevel = Math.min(this.foodSaturationLevel + (float)foodLevelIn * foodSaturationModifier * 2.0F, (float)this.foodLevel);
+        this.foodSaturationLevel = Math.min(this.foodSaturationLevel + (float) foodLevelIn * foodSaturationModifier * 2.0F, (float) this.foodLevel);
     }
 
-    public void addStats(ItemFood p_151686_1_, ItemStack p_151686_2_)
-    {
-        this.addStats(p_151686_1_.getHealAmount(p_151686_2_), p_151686_1_.getSaturationModifier(p_151686_2_));
+    public void addStats(ItemFood p_151686_1_, ItemStack p_151686_2_) {
+        // CraftBukkit start
+        int oldFoodLevel = foodLevel;
+
+        FoodLevelChangeEvent event = CraftEventFactory.callFoodLevelChangeEvent(entityhuman, p_151686_1_.getHealAmount(p_151686_2_) + oldFoodLevel);
+
+        if (!event.isCancelled()) {
+            this.addStats(event.getFoodLevel() - oldFoodLevel, p_151686_1_.getSaturationModifier(p_151686_2_));
+        }
+
+        ((EntityPlayerMP) entityhuman).playerNetServerHandler.sendPacket(new S06PacketUpdateHealth(((EntityPlayerMP) entityhuman).getBukkitEntity().getScaledHealth(), entityhuman.getFoodStats().foodLevel, entityhuman.getFoodStats().foodSaturationLevel));
+        // CraftBukkit end
     }
 
-    public void onUpdate(EntityPlayer player)
-    {
+    public void onUpdate(EntityPlayer player) {
         EnumDifficulty enumdifficulty = player.worldObj.getDifficulty();
         this.prevFoodLevel = this.foodLevel;
 
-        if (this.foodExhaustionLevel > 4.0F)
-        {
+        if (this.foodExhaustionLevel > 4.0F) {
             this.foodExhaustionLevel -= 4.0F;
 
-            if (this.foodSaturationLevel > 0.0F)
-            {
+            if (this.foodSaturationLevel > 0.0F) {
                 this.foodSaturationLevel = Math.max(this.foodSaturationLevel - 1.0F, 0.0F);
+            } else if (enumdifficulty != EnumDifficulty.PEACEFUL) {
+                // CraftBukkit start
+                FoodLevelChangeEvent event = CraftEventFactory.callFoodLevelChangeEvent(entityhuman, Math.max(this.foodLevel - 1, 0));
+
+                if (!event.isCancelled()) {
+                    this.foodLevel = event.getFoodLevel();
+                }
+
+                ((EntityPlayerMP) entityhuman).playerNetServerHandler.sendPacket(new S06PacketUpdateHealth(((EntityPlayerMP) entityhuman).getBukkitEntity().getScaledHealth(), this.foodLevel, this.foodSaturationLevel));
+                // CraftBukkit end
             }
-            else if (enumdifficulty != EnumDifficulty.PEACEFUL)
-            {
-                this.foodLevel = Math.max(this.foodLevel - 1, 0);
-            }
         }
 
-        if (player.worldObj.getGameRules().getGameRuleBooleanValue("naturalRegeneration") && this.foodLevel >= 18 && player.shouldHeal())
-        {
+        if (player.worldObj.getGameRules().getGameRuleBooleanValue("naturalRegeneration") && this.foodLevel >= 18 && player.shouldHeal()) {
             ++this.foodTimer;
 
-            if (this.foodTimer >= 80)
-            {
-                player.heal(1.0F);
-                this.addExhaustion(3.0F);
+            if (this.foodTimer >= 80) {
+                // CraftBukkit - added RegainReason
+                player.heal(1.0F, RegainReason.SATIATED);
+                this.addExhaustion(entityhuman.worldObj.spigotConfig.regenExhaustion);  // Spigot - Change to use configurable value
                 this.foodTimer = 0;
             }
-        }
-        else if (this.foodLevel <= 0)
-        {
+        } else if (this.foodLevel <= 0) {
             ++this.foodTimer;
 
-            if (this.foodTimer >= 80)
-            {
-                if (player.getHealth() > 10.0F || enumdifficulty == EnumDifficulty.HARD || player.getHealth() > 1.0F && enumdifficulty == EnumDifficulty.NORMAL)
-                {
+            if (this.foodTimer >= 80) {
+                if (player.getHealth() > 10.0F || enumdifficulty == EnumDifficulty.HARD || player.getHealth() > 1.0F && enumdifficulty == EnumDifficulty.NORMAL) {
                     player.attackEntityFrom(DamageSource.starve, 1.0F);
                 }
 
                 this.foodTimer = 0;
             }
-        }
-        else
-        {
+        } else {
             this.foodTimer = 0;
         }
     }
 
-    public void readNBT(NBTTagCompound p_75112_1_)
-    {
-        if (p_75112_1_.hasKey("foodLevel", 99))
-        {
+    public void readNBT(NBTTagCompound p_75112_1_) {
+        if (p_75112_1_.hasKey("foodLevel", 99)) {
             this.foodLevel = p_75112_1_.getInteger("foodLevel");
             this.foodTimer = p_75112_1_.getInteger("foodTickTimer");
             this.foodSaturationLevel = p_75112_1_.getFloat("foodSaturationLevel");
@@ -89,43 +89,30 @@
         }
     }
 
-    public void writeNBT(NBTTagCompound p_75117_1_)
-    {
+    public void writeNBT(NBTTagCompound p_75117_1_) {
         p_75117_1_.setInteger("foodLevel", this.foodLevel);
         p_75117_1_.setInteger("foodTickTimer", this.foodTimer);
         p_75117_1_.setFloat("foodSaturationLevel", this.foodSaturationLevel);
         p_75117_1_.setFloat("foodExhaustionLevel", this.foodExhaustionLevel);
     }
 
-    public int getFoodLevel()
-    {
+    public int getFoodLevel() {
         return this.foodLevel;
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getPrevFoodLevel()
-    {
-        return this.prevFoodLevel;
-    }
-
-    public boolean needFood()
-    {
+    public boolean needFood() {
         return this.foodLevel < 20;
     }
 
-    public void addExhaustion(float p_75113_1_)
-    {
+    public void addExhaustion(float p_75113_1_) {
         this.foodExhaustionLevel = Math.min(this.foodExhaustionLevel + p_75113_1_, 40.0F);
     }
 
-    public float getSaturationLevel()
-    {
+    public float getSaturationLevel() {
         return this.foodSaturationLevel;
     }
 
-    public void setFoodLevel(int foodLevelIn)
-    {
+    public void setFoodLevel(int foodLevelIn) {
         this.foodLevel = foodLevelIn;
     }
-
-    @SideOnly(Side.CLIENT)
-    public void setFoodSaturationLevel(float foodSaturationLevelIn)
-    {
-        this.foodSaturationLevel = foodSaturationLevelIn;
-    }
-}
+}
