--- decompiled\net\minecraft\util\EnumFacing.java
+++ src\main\java\net\minecraft\util\EnumFacing.java
@@ -1,16 +1,15 @@
 package net.minecraft.util;
 
-import com.google.common.base.Predicate;
-import com.google.common.collect.Iterators;
-import com.google.common.collect.Maps;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Random;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import com.google.common.base.Predicate;
+import com.google.common.collect.Iterators;
+import com.google.common.collect.Maps;
+
 public enum EnumFacing implements IStringSerializable
 {
     DOWN(0, 1, -1, "down", EnumFacing.AxisDirection.NEGATIVE, EnumFacing.Axis.Y, new Vec3i(0, -1, 0)),
     UP(1, 0, -1, "up", EnumFacing.AxisDirection.POSITIVE, EnumFacing.Axis.Y, new Vec3i(0, 1, 0)),
     NORTH(2, 3, 2, "north", EnumFacing.AxisDirection.NEGATIVE, EnumFacing.Axis.Z, new Vec3i(0, 0, -1)),
@@ -22,12 +21,12 @@
     private final int horizontalIndex;
     private final String name;
     private final EnumFacing.Axis axis;
     private final EnumFacing.AxisDirection axisDirection;
     private final Vec3i directionVec;
-    private static final EnumFacing[] VALUES = new EnumFacing[6];
-    private static final EnumFacing[] HORIZONTALS = new EnumFacing[4];
+    public static final EnumFacing[] VALUES = new EnumFacing[6];
+    public static final EnumFacing[] HORIZONTALS = new EnumFacing[4];
     private static final Map NAME_LOOKUP = Maps.newHashMap();
 
     private static final String __OBFID = "CL_00001201";
 
     private EnumFacing(int indexIn, int oppositeIn, int horizontalIndexIn, String nameIn, EnumFacing.AxisDirection axisDirectionIn, EnumFacing.Axis axisIn, Vec3i directionVecIn)
@@ -59,41 +58,10 @@
     public EnumFacing getOpposite()
     {
         return getFront(this.opposite);
     }
 
-    @SideOnly(Side.CLIENT)
-    public EnumFacing rotateAround(EnumFacing.Axis axis)
-    {
-        switch (EnumFacing.SwitchPlane.AXIS_LOOKUP[axis.ordinal()])
-        {
-            case 1:
-                if (this != WEST && this != EAST)
-                {
-                    return this.rotateX();
-                }
-
-                return this;
-            case 2:
-                if (this != UP && this != DOWN)
-                {
-                    return this.rotateY();
-                }
-
-                return this;
-            case 3:
-                if (this != NORTH && this != SOUTH)
-                {
-                    return this.rotateZ();
-                }
-
-                return this;
-            default:
-                throw new IllegalStateException("Unable to get CW facing for axis " + axis);
-        }
-    }
-
     public EnumFacing rotateY()
     {
         switch (EnumFacing.SwitchPlane.FACING_LOOKUP[this.ordinal()])
         {
             case 1:
@@ -107,49 +75,10 @@
             default:
                 throw new IllegalStateException("Unable to get Y-rotated facing of " + this);
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    private EnumFacing rotateX()
-    {
-        switch (EnumFacing.SwitchPlane.FACING_LOOKUP[this.ordinal()])
-        {
-            case 1:
-                return DOWN;
-            case 2:
-            case 4:
-            default:
-                throw new IllegalStateException("Unable to get X-rotated facing of " + this);
-            case 3:
-                return UP;
-            case 5:
-                return NORTH;
-            case 6:
-                return SOUTH;
-        }
-    }
-
-    @SideOnly(Side.CLIENT)
-    private EnumFacing rotateZ()
-    {
-        switch (EnumFacing.SwitchPlane.FACING_LOOKUP[this.ordinal()])
-        {
-            case 2:
-                return DOWN;
-            case 3:
-            default:
-                throw new IllegalStateException("Unable to get Z-rotated facing of " + this);
-            case 4:
-                return UP;
-            case 5:
-                return EAST;
-            case 6:
-                return WEST;
-        }
-    }
-
     public EnumFacing rotateYCCW()
     {
         switch (EnumFacing.SwitchPlane.FACING_LOOKUP[this.ordinal()])
         {
             case 1:
@@ -188,16 +117,10 @@
     public EnumFacing.Axis getAxis()
     {
         return this.axis;
     }
 
-    @SideOnly(Side.CLIENT)
-    public static EnumFacing byName(String name)
-    {
-        return name == null ? null : (EnumFacing)NAME_LOOKUP.get(name.toLowerCase());
-    }
-
     public static EnumFacing getFront(int index)
     {
         return VALUES[MathHelper.abs_int(index % VALUES.length)];
     }
 
@@ -214,49 +137,20 @@
     public static EnumFacing random(Random rand)
     {
         return values()[rand.nextInt(values().length)];
     }
 
-    @SideOnly(Side.CLIENT)
-    public static EnumFacing getFacingFromVector(float p_176737_0_, float p_176737_1_, float p_176737_2_)
-    {
-        EnumFacing enumfacing = NORTH;
-        float f3 = Float.MIN_VALUE;
-        EnumFacing[] aenumfacing = values();
-        int i = aenumfacing.length;
-
-        for (int j = 0; j < i; ++j)
-        {
-            EnumFacing enumfacing1 = aenumfacing[j];
-            float f4 = p_176737_0_ * (float)enumfacing1.directionVec.getX() + p_176737_1_ * (float)enumfacing1.directionVec.getY() + p_176737_2_ * (float)enumfacing1.directionVec.getZ();
-
-            if (f4 > f3)
-            {
-                f3 = f4;
-                enumfacing = enumfacing1;
-            }
-        }
-
-        return enumfacing;
-    }
-
     public String toString()
     {
         return this.name;
     }
 
     public String getName()
     {
         return this.name;
     }
 
-    @SideOnly(Side.CLIENT)
-    public Vec3i getDirectionVec()
-    {
-        return this.directionVec;
-    }
-
     static
     {
         EnumFacing[] var0 = values();
         int var1 = var0.length;
 
@@ -272,33 +166,28 @@
 
             NAME_LOOKUP.put(var3.getName2().toLowerCase(), var3);
         }
     }
 
-    public static enum Axis implements Predicate, IStringSerializable {
+    public static enum Axis implements Predicate, IStringSerializable
+    {
         X("x", EnumFacing.Plane.HORIZONTAL),
         Y("y", EnumFacing.Plane.VERTICAL),
         Z("z", EnumFacing.Plane.HORIZONTAL);
         private static final Map NAME_LOOKUP = Maps.newHashMap();
         private final String name;
         private final EnumFacing.Plane plane;
 
-        private static final EnumFacing.Axis[] $VALUES = new EnumFacing.Axis[]{X, Y, Z};
+        private static final EnumFacing.Axis[] $VALUES = new EnumFacing.Axis[] {X, Y, Z};
         private static final String __OBFID = "CL_00002321";
 
         private Axis(String name, EnumFacing.Plane plane)
         {
             this.name = name;
             this.plane = plane;
         }
 
-        @SideOnly(Side.CLIENT)
-        public static EnumFacing.Axis byName(String name)
-        {
-            return name == null ? null : (EnumFacing.Axis)NAME_LOOKUP.get(name.toLowerCase());
-        }
-
         public String getName2()
         {
             return this.name;
         }
 
@@ -348,17 +237,18 @@
                 NAME_LOOKUP.put(var3.getName2().toLowerCase(), var3);
             }
         }
     }
 
-    public static enum AxisDirection {
+    public static enum AxisDirection
+    {
         POSITIVE(1, "Towards positive"),
         NEGATIVE(-1, "Towards negative");
         private final int offset;
         private final String description;
 
-        private static final EnumFacing.AxisDirection[] $VALUES = new EnumFacing.AxisDirection[]{POSITIVE, NEGATIVE};
+        private static final EnumFacing.AxisDirection[] $VALUES = new EnumFacing.AxisDirection[] {POSITIVE, NEGATIVE};
         private static final String __OBFID = "CL_00002320";
 
         private AxisDirection(int offset, String description)
         {
             this.offset = offset;
@@ -374,15 +264,16 @@
         {
             return this.description;
         }
     }
 
-    public static enum Plane implements Predicate, Iterable {
+    public static enum Plane implements Predicate, Iterable
+    {
         HORIZONTAL,
         VERTICAL;
 
-        private static final EnumFacing.Plane[] $VALUES = new EnumFacing.Plane[]{HORIZONTAL, VERTICAL};
+        private static final EnumFacing.Plane[] $VALUES = new EnumFacing.Plane[] {HORIZONTAL, VERTICAL};
         private static final String __OBFID = "CL_00002319";
 
         public EnumFacing[] facings()
         {
             switch (EnumFacing.SwitchPlane.PLANE_LOOKUP[this.ordinal()])
@@ -418,10 +309,11 @@
         }
     }
 
     static final class SwitchPlane
         {
+
             static final int[] AXIS_LOOKUP;
 
             static final int[] FACING_LOOKUP;
 
             static final int[] PLANE_LOOKUP = new int[EnumFacing.Plane.values().length];
