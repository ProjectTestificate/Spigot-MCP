---a/net/minecraft/util/WeightedRandomChestContent.java
+++b/net/minecraft/util/WeightedRandomChestContent.java
@@ -1,51 +1,47 @@
 package net.minecraft.util;
 
-import com.google.common.collect.Lists;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Random;
+
 import net.minecraft.inventory.IInventory;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.tileentity.TileEntityDispenser;
 
-public class WeightedRandomChestContent extends WeightedRandom.Item
-{
-    private ItemStack theItemId;
-    private int theMinimumChanceToGenerateItem;
-    private int theMaximumChanceToGenerateItem;
+import com.google.common.collect.Lists;
+
+public class WeightedRandomChestContent extends WeightedRandom.Item {
+
+    public ItemStack theItemId;
+    public int theMinimumChanceToGenerateItem;
+    public int theMaximumChanceToGenerateItem;
     private static final String __OBFID = "CL_00001505";
 
-    public WeightedRandomChestContent(Item p_i45311_1_, int p_i45311_2_, int minimumChance, int maximumChance, int itemWeightIn)
-    {
+    public WeightedRandomChestContent(Item p_i45311_1_, int p_i45311_2_, int minimumChance, int maximumChance, int itemWeightIn) {
         super(itemWeightIn);
         this.theItemId = new ItemStack(p_i45311_1_, 1, p_i45311_2_);
         this.theMinimumChanceToGenerateItem = minimumChance;
         this.theMaximumChanceToGenerateItem = maximumChance;
     }
 
-    public WeightedRandomChestContent(ItemStack stack, int minimumChance, int maximumChance, int itemWeightIn)
-    {
+    public WeightedRandomChestContent(ItemStack stack, int minimumChance, int maximumChance, int itemWeightIn) {
         super(itemWeightIn);
         this.theItemId = stack;
         this.theMinimumChanceToGenerateItem = minimumChance;
         this.theMaximumChanceToGenerateItem = maximumChance;
     }
 
-    public static void generateChestContents(Random random, List p_177630_1_, IInventory p_177630_2_, int p_177630_3_)
-    {
-        for (int j = 0; j < p_177630_3_; ++j)
-        {
-            WeightedRandomChestContent weightedrandomchestcontent = (WeightedRandomChestContent)WeightedRandom.getRandomItem(random, p_177630_1_);
+    public static void generateChestContents(Random random, List p_177630_1_, IInventory p_177630_2_, int p_177630_3_) {
+        for (int j = 0; j < p_177630_3_; ++j) {
+            WeightedRandomChestContent weightedrandomchestcontent = (WeightedRandomChestContent) WeightedRandom.getRandomItem(random, p_177630_1_);
             int k = weightedrandomchestcontent.theMinimumChanceToGenerateItem + random.nextInt(weightedrandomchestcontent.theMaximumChanceToGenerateItem - weightedrandomchestcontent.theMinimumChanceToGenerateItem + 1);
 
-            if (weightedrandomchestcontent.theItemId.getMaxStackSize() >= k)
-            {
+            if (weightedrandomchestcontent.theItemId.getMaxStackSize() >= k) {
                 ItemStack itemstack = weightedrandomchestcontent.theItemId.copy();
                 itemstack.stackSize = k;
                 p_177630_2_.setInventorySlotContents(random.nextInt(p_177630_2_.getSizeInventory()), itemstack);
-            }
-            else
-            {
-                for (int l = 0; l < k; ++l)
-                {
+            } else {
+                for (int l = 0; l < k; ++l) {
                     ItemStack itemstack1 = weightedrandomchestcontent.theItemId.copy();
                     itemstack1.stackSize = 1;
                     p_177630_2_.setInventorySlotContents(random.nextInt(p_177630_2_.getSizeInventory()), itemstack1);
@@ -58,23 +58,18 @@
         }
     }
 
-    public static void generateDispenserContents(Random random, List p_177631_1_, TileEntityDispenser dispenser, int p_177631_3_)
-    {
-        for (int j = 0; j < p_177631_3_; ++j)
-        {
-            WeightedRandomChestContent weightedrandomchestcontent = (WeightedRandomChestContent)WeightedRandom.getRandomItem(random, p_177631_1_);
+    public static void generateDispenserContents(Random random, List p_177631_1_, TileEntityDispenser dispenser, int p_177631_3_) {
+        for (int j = 0; j < p_177631_3_; ++j) {
+            WeightedRandomChestContent weightedrandomchestcontent = (WeightedRandomChestContent) WeightedRandom.getRandomItem(random, p_177631_1_);
             int k = weightedrandomchestcontent.theMinimumChanceToGenerateItem + random.nextInt(weightedrandomchestcontent.theMaximumChanceToGenerateItem - weightedrandomchestcontent.theMinimumChanceToGenerateItem + 1);
 
-            if (weightedrandomchestcontent.theItemId.getMaxStackSize() >= k)
-            {
+            if (weightedrandomchestcontent.theItemId.getMaxStackSize() >= k) {
                 ItemStack itemstack = weightedrandomchestcontent.theItemId.copy();
                 itemstack.stackSize = k;
                 dispenser.setInventorySlotContents(random.nextInt(dispenser.getSizeInventory()), itemstack);
-            }
-            else
-            {
-                for (int l = 0; l < k; ++l)
-                {
+            } else {
+                for (int l = 0; l < k; ++l) {
                     ItemStack itemstack1 = weightedrandomchestcontent.theItemId.copy();
                     itemstack1.stackSize = 1;
                     dispenser.setInventorySlotContents(random.nextInt(dispenser.getSizeInventory()), itemstack1);
@@ -83,11 +83,9 @@
         }
     }
 
-    public static List func_177629_a(List p_177629_0_, WeightedRandomChestContent ... p_177629_1_)
-    {
+    public static List func_177629_a(List p_177629_0_, WeightedRandomChestContent... p_177629_1_) {
         ArrayList arraylist = Lists.newArrayList(p_177629_0_);
         Collections.addAll(arraylist, p_177629_1_);
         return arraylist;
     }
-}
+}
