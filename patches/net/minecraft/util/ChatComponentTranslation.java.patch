--- decompiled\net\minecraft\util\ChatComponentTranslation.java
+++ src\main\java\net\minecraft\util\ChatComponentTranslation.java
@@ -1,282 +1,228 @@
 package net.minecraft.util;
 
-import com.google.common.collect.Iterators;
-import com.google.common.collect.Lists;
 import java.util.Arrays;
 import java.util.IllegalFormatException;
 import java.util.Iterator;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-public class ChatComponentTranslation extends ChatComponentStyle
-{
+import com.google.common.collect.Iterators;
+import com.google.common.collect.Lists;
+
+public class ChatComponentTranslation extends ChatComponentStyle {
+
     private final String key;
     private final Object[] formatArgs;
     private final Object syncLock = new Object();
     private long lastTranslationUpdateTimeInMilliseconds = -1L;
     List children = Lists.newArrayList();
     public static final Pattern stringVariablePattern = Pattern.compile("%(?:(\\d+)\\$)?([A-Za-z%]|$)");
     private static final String __OBFID = "CL_00001270";
 
-    public ChatComponentTranslation(String translationKey, Object ... args)
-    {
+    public ChatComponentTranslation(String translationKey, Object... args) {
         this.key = translationKey;
         this.formatArgs = args;
         Object[] aobject = args;
         int i = args.length;
 
-        for (int j = 0; j < i; ++j)
-        {
+        for (int j = 0; j < i; ++j) {
             Object object1 = aobject[j];
 
-            if (object1 instanceof IChatComponent)
-            {
-                ((IChatComponent)object1).getChatStyle().setParentStyle(this.getChatStyle());
+            if (object1 instanceof IChatComponent) {
+                ((IChatComponent) object1).getChatStyle().setParentStyle(this.getChatStyle());
             }
         }
     }
 
-    synchronized void ensureInitialized()
-    {
+    synchronized void ensureInitialized() {
         Object object = this.syncLock;
 
-        synchronized (this.syncLock)
-        {
+        synchronized (this.syncLock) {
             long i = StatCollector.getLastTranslationUpdateTimeInMilliseconds();
 
-            if (i == this.lastTranslationUpdateTimeInMilliseconds)
-            {
+            if (i == this.lastTranslationUpdateTimeInMilliseconds) {
                 return;
             }
 
             this.lastTranslationUpdateTimeInMilliseconds = i;
             this.children.clear();
         }
 
-        try
-        {
+        try {
             this.initializeFromFormat(StatCollector.translateToLocal(this.key));
-        }
-        catch (ChatComponentTranslationFormatException chatcomponenttranslationformatexception1)
-        {
+        } catch (ChatComponentTranslationFormatException chatcomponenttranslationformatexception1) {
             this.children.clear();
 
-            try
-            {
+            try {
                 this.initializeFromFormat(StatCollector.translateToFallback(this.key));
-            }
-            catch (ChatComponentTranslationFormatException chatcomponenttranslationformatexception)
-            {
+            } catch (ChatComponentTranslationFormatException chatcomponenttranslationformatexception) {
                 throw chatcomponenttranslationformatexception1;
             }
         }
     }
 
-    protected void initializeFromFormat(String format)
-    {
+    protected void initializeFromFormat(String format) {
         boolean flag = false;
         Matcher matcher = stringVariablePattern.matcher(format);
         int i = 0;
         int j = 0;
 
-        try
-        {
+        try {
             int l;
 
-            for (; matcher.find(j); j = l)
-            {
+            for (; matcher.find(j); j = l) {
                 int k = matcher.start();
                 l = matcher.end();
 
-                if (k > j)
-                {
+                if (k > j) {
                     ChatComponentText chatcomponenttext = new ChatComponentText(String.format(format.substring(j, k), new Object[0]));
                     chatcomponenttext.getChatStyle().setParentStyle(this.getChatStyle());
                     this.children.add(chatcomponenttext);
                 }
 
                 String s3 = matcher.group(2);
                 String s1 = format.substring(k, l);
 
-                if ("%".equals(s3) && "%%".equals(s1))
-                {
+                if ("%".equals(s3) && "%%".equals(s1)) {
                     ChatComponentText chatcomponenttext2 = new ChatComponentText("%");
                     chatcomponenttext2.getChatStyle().setParentStyle(this.getChatStyle());
                     this.children.add(chatcomponenttext2);
-                }
-                else
-                {
-                    if (!"s".equals(s3))
-                    {
+                } else {
+                    if (!"s".equals(s3)) {
                         throw new ChatComponentTranslationFormatException(this, "Unsupported format: \'" + s1 + "\'");
                     }
 
                     String s2 = matcher.group(1);
                     int i1 = s2 != null ? Integer.parseInt(s2) - 1 : i++;
 
-                    if (i1 < this.formatArgs.length)
-                    {
+                    if (i1 < this.formatArgs.length) {
                         this.children.add(this.getFormatArgumentAsComponent(i1));
                     }
                 }
             }
 
-            if (j < format.length())
-            {
+            if (j < format.length()) {
                 ChatComponentText chatcomponenttext1 = new ChatComponentText(String.format(format.substring(j), new Object[0]));
                 chatcomponenttext1.getChatStyle().setParentStyle(this.getChatStyle());
                 this.children.add(chatcomponenttext1);
             }
-        }
-        catch (IllegalFormatException illegalformatexception)
-        {
+        } catch (IllegalFormatException illegalformatexception) {
             throw new ChatComponentTranslationFormatException(this, illegalformatexception);
         }
     }
 
-    private IChatComponent getFormatArgumentAsComponent(int index)
-    {
-        if (index >= this.formatArgs.length)
-        {
+    private IChatComponent getFormatArgumentAsComponent(int index) {
+        if (index >= this.formatArgs.length) {
             throw new ChatComponentTranslationFormatException(this, index);
-        }
-        else
-        {
+        } else {
             Object object = this.formatArgs[index];
             Object object1;
 
-            if (object instanceof IChatComponent)
-            {
-                object1 = (IChatComponent)object;
-            }
-            else
-            {
+            if (object instanceof IChatComponent) {
+                object1 = (IChatComponent) object;
+            } else {
                 object1 = new ChatComponentText(object == null ? "null" : object.toString());
-                ((IChatComponent)object1).getChatStyle().setParentStyle(this.getChatStyle());
+                ((IChatComponent) object1).getChatStyle().setParentStyle(this.getChatStyle());
             }
 
-            return (IChatComponent)object1;
+            return (IChatComponent) object1;
         }
     }
 
-    public IChatComponent setChatStyle(ChatStyle style)
-    {
+    public IChatComponent setChatStyle(ChatStyle style) {
         super.setChatStyle(style);
         Object[] aobject = this.formatArgs;
         int i = aobject.length;
 
-        for (int j = 0; j < i; ++j)
-        {
+        for (int j = 0; j < i; ++j) {
             Object object = aobject[j];
 
-            if (object instanceof IChatComponent)
-            {
-                ((IChatComponent)object).getChatStyle().setParentStyle(this.getChatStyle());
+            if (object instanceof IChatComponent) {
+                ((IChatComponent) object).getChatStyle().setParentStyle(this.getChatStyle());
             }
         }
 
-        if (this.lastTranslationUpdateTimeInMilliseconds > -1L)
-        {
+        if (this.lastTranslationUpdateTimeInMilliseconds > -1L) {
             Iterator iterator = this.children.iterator();
 
-            while (iterator.hasNext())
-            {
-                IChatComponent ichatcomponent = (IChatComponent)iterator.next();
+            while (iterator.hasNext()) {
+                IChatComponent ichatcomponent = (IChatComponent) iterator.next();
                 ichatcomponent.getChatStyle().setParentStyle(style);
             }
         }
 
         return this;
     }
 
-    public Iterator iterator()
-    {
+    public Iterator iterator() {
         this.ensureInitialized();
         return Iterators.concat(createDeepCopyIterator(this.children), createDeepCopyIterator(this.siblings));
     }
 
-    public String getUnformattedTextForChat()
-    {
+    public String getUnformattedTextForChat() {
         this.ensureInitialized();
         StringBuilder stringbuilder = new StringBuilder();
         Iterator iterator = this.children.iterator();
 
-        while (iterator.hasNext())
-        {
-            IChatComponent ichatcomponent = (IChatComponent)iterator.next();
+        while (iterator.hasNext()) {
+            IChatComponent ichatcomponent = (IChatComponent) iterator.next();
             stringbuilder.append(ichatcomponent.getUnformattedTextForChat());
         }
 
         return stringbuilder.toString();
     }
 
-    public ChatComponentTranslation createCopy()
-    {
+    public ChatComponentTranslation createCopy() {
         Object[] aobject = new Object[this.formatArgs.length];
 
-        for (int i = 0; i < this.formatArgs.length; ++i)
-        {
-            if (this.formatArgs[i] instanceof IChatComponent)
-            {
-                aobject[i] = ((IChatComponent)this.formatArgs[i]).createCopy();
-            }
-            else
-            {
+        for (int i = 0; i < this.formatArgs.length; ++i) {
+            if (this.formatArgs[i] instanceof IChatComponent) {
+                aobject[i] = ((IChatComponent) this.formatArgs[i]).createCopy();
+            } else {
                 aobject[i] = this.formatArgs[i];
             }
         }
 
         ChatComponentTranslation chatcomponenttranslation = new ChatComponentTranslation(this.key, aobject);
         chatcomponenttranslation.setChatStyle(this.getChatStyle().createShallowCopy());
         Iterator iterator = this.getSiblings().iterator();
 
-        while (iterator.hasNext())
-        {
-            IChatComponent ichatcomponent = (IChatComponent)iterator.next();
+        while (iterator.hasNext()) {
+            IChatComponent ichatcomponent = (IChatComponent) iterator.next();
             chatcomponenttranslation.appendSibling(ichatcomponent.createCopy());
         }
 
         return chatcomponenttranslation;
     }
 
-    public boolean equals(Object p_equals_1_)
-    {
-        if (this == p_equals_1_)
-        {
+    public boolean equals(Object p_equals_1_) {
+        if (this == p_equals_1_) {
             return true;
-        }
-        else if (!(p_equals_1_ instanceof ChatComponentTranslation))
-        {
+        } else if (!(p_equals_1_ instanceof ChatComponentTranslation)) {
             return false;
-        }
-        else
-        {
-            ChatComponentTranslation chatcomponenttranslation = (ChatComponentTranslation)p_equals_1_;
+        } else {
+            ChatComponentTranslation chatcomponenttranslation = (ChatComponentTranslation) p_equals_1_;
             return Arrays.equals(this.formatArgs, chatcomponenttranslation.formatArgs) && this.key.equals(chatcomponenttranslation.key) && super.equals(p_equals_1_);
         }
     }
 
-    public int hashCode()
-    {
+    public int hashCode() {
         int i = super.hashCode();
         i = 31 * i + this.key.hashCode();
         i = 31 * i + Arrays.hashCode(this.formatArgs);
         return i;
     }
 
-    public String toString()
-    {
+    public String toString() {
         return "TranslatableComponent{key=\'" + this.key + '\'' + ", args=" + Arrays.toString(this.formatArgs) + ", siblings=" + this.siblings + ", style=" + this.getChatStyle() + '}';
     }
 
-    public String getKey()
-    {
+    public String getKey() {
         return this.key;
     }
 
-    public Object[] getFormatArgs()
-    {
+    public Object[] getFormatArgs() {
         return this.formatArgs;
     }
 }
