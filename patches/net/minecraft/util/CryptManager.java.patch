--- decompiled\net\minecraft\util\CryptManager.java
+++ src\main\java\net\minecraft\util\CryptManager.java
@@ -11,43 +11,28 @@
 import java.security.NoSuchAlgorithmException;
 import java.security.PrivateKey;
 import java.security.PublicKey;
 import java.security.spec.InvalidKeySpecException;
 import java.security.spec.X509EncodedKeySpec;
+
 import javax.crypto.BadPaddingException;
 import javax.crypto.Cipher;
 import javax.crypto.IllegalBlockSizeException;
-import javax.crypto.KeyGenerator;
 import javax.crypto.NoSuchPaddingException;
 import javax.crypto.SecretKey;
 import javax.crypto.spec.IvParameterSpec;
 import javax.crypto.spec.SecretKeySpec;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class CryptManager
 {
+
     private static final Logger field_180198_a = LogManager.getLogger();
     private static final String __OBFID = "CL_00001483";
 
-    @SideOnly(Side.CLIENT)
-    public static SecretKey createNewSharedKey()
-    {
-        try
-        {
-            KeyGenerator keygenerator = KeyGenerator.getInstance("AES");
-            keygenerator.init(128);
-            return keygenerator.generateKey();
-        }
-        catch (NoSuchAlgorithmException nosuchalgorithmexception)
-        {
-            throw new Error(nosuchalgorithmexception);
-        }
-    }
-
     public static KeyPair generateKeyPair()
     {
         try
         {
             KeyPairGenerator keypairgenerator = KeyPairGenerator.getInstance("RSA");
@@ -73,11 +58,11 @@
             unsupportedencodingexception.printStackTrace();
             return null;
         }
     }
 
-    private static byte[] digestOperation(String p_75893_0_, byte[] ... p_75893_1_)
+    private static byte[] digestOperation(String p_75893_0_, byte[]... p_75893_1_)
     {
         try
         {
             MessageDigest messagedigest = MessageDigest.getInstance(p_75893_0_);
             byte[][] abyte1 = p_75893_1_;
@@ -122,16 +107,10 @@
     public static SecretKey decryptSharedKey(PrivateKey p_75887_0_, byte[] p_75887_1_)
     {
         return new SecretKeySpec(decryptData(p_75887_0_, p_75887_1_), "AES");
     }
 
-    @SideOnly(Side.CLIENT)
-    public static byte[] encryptData(Key p_75894_0_, byte[] p_75894_1_)
-    {
-        return cipherOperation(1, p_75894_0_, p_75894_1_);
-    }
-
     public static byte[] decryptData(Key p_75889_0_, byte[] p_75889_1_)
     {
         return cipherOperation(2, p_75889_0_, p_75889_1_);
     }
 
