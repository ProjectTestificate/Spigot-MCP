--- decompiled\net\minecraft\util\Cartesian.java
+++ src\main\java\net\minecraft\util\Cartesian.java
@@ -1,210 +1,179 @@
 package net.minecraft.util;
 
-import com.google.common.base.Function;
-import com.google.common.collect.Iterables;
-import com.google.common.collect.Lists;
-import com.google.common.collect.UnmodifiableIterator;
 import java.lang.reflect.Array;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.NoSuchElementException;
 
-public class Cartesian
-{
+import com.google.common.base.Function;
+import com.google.common.collect.Iterables;
+import com.google.common.collect.Lists;
+import com.google.common.collect.UnmodifiableIterator;
+
+public class Cartesian {
+
     private static final String __OBFID = "CL_00002327";
 
-    public static Iterable cartesianProduct(Class clazz, Iterable sets)
-    {
-        return new Cartesian.Product(clazz, (Iterable[])toArray(Iterable.class, sets), null);
+    public static Iterable cartesianProduct(Class clazz, Iterable sets) {
+        return new Cartesian.Product(clazz, (Iterable[]) toArray(Iterable.class, sets), null);
     }
 
-    public static Iterable cartesianProduct(Iterable sets)
-    {
+    public static Iterable cartesianProduct(Iterable sets) {
         return arraysAsLists(cartesianProduct(Object.class, sets));
     }
 
-    private static Iterable arraysAsLists(Iterable arrays)
-    {
+    private static Iterable arraysAsLists(Iterable arrays) {
         return Iterables.transform(arrays, new Cartesian.GetList(null));
     }
 
-    private static Object[] toArray(Class clazz, Iterable it)
-    {
+    private static Object[] toArray(Class clazz, Iterable it) {
         ArrayList arraylist = Lists.newArrayList();
         Iterator iterator = it.iterator();
 
-        while (iterator.hasNext())
-        {
+        while (iterator.hasNext()) {
             Object object = iterator.next();
             arraylist.add(object);
         }
 
-        return (Object[])arraylist.toArray(createArray(clazz, arraylist.size()));
+        return (Object[]) arraylist.toArray(createArray(clazz, arraylist.size()));
     }
 
-    private static Object[] createArray(Class p_179319_0_, int p_179319_1_)
-    {
-        return (Object[])((Object[])Array.newInstance(p_179319_0_, p_179319_1_));
+    private static Object[] createArray(Class p_179319_0_, int p_179319_1_) {
+        return (Object[]) ((Object[]) Array.newInstance(p_179319_0_, p_179319_1_));
     }
 
-    static class GetList implements Function
-        {
-            private static final String __OBFID = "CL_00002325";
+    static class GetList implements Function {
 
-            private GetList() {}
+        private static final String __OBFID = "CL_00002325";
 
-            public List apply(Object[] array)
-            {
-                return Arrays.asList((Object[])array);
-            }
+        private GetList() {
+        }
 
-            public Object apply(Object p_apply_1_)
-            {
-                return this.apply((Object[])p_apply_1_);
-            }
+        public List apply(Object[] array) {
+            return Arrays.asList((Object[]) array);
+        }
 
-            GetList(Object p_i46022_1_)
-            {
-                this();
-            }
+        public Object apply(Object p_apply_1_) {
+            return this.apply((Object[]) p_apply_1_);
         }
 
-    static class Product implements Iterable
-        {
-            private final Class clazz;
-            private final Iterable[] iterables;
-            private static final String __OBFID = "CL_00002324";
+        GetList(Object p_i46022_1_) {
+            this();
+        }
+    }
 
-            private Product(Class clazz, Iterable[] iterables)
-            {
-                this.clazz = clazz;
-                this.iterables = iterables;
-            }
+    static class Product implements Iterable {
 
-            public Iterator iterator()
-            {
-                return (Iterator)(this.iterables.length <= 0 ? Collections.singletonList((Object[])Cartesian.createArray(this.clazz, 0)).iterator() : new Cartesian.Product.ProductIterator(this.clazz, this.iterables, null));
-            }
+        private final Class clazz;
+        private final Iterable[] iterables;
+        private static final String __OBFID = "CL_00002324";
 
-            Product(Class p_i46021_1_, Iterable[] p_i46021_2_, Object p_i46021_3_)
-            {
-                this(p_i46021_1_, p_i46021_2_);
-            }
+        private Product(Class clazz, Iterable[] iterables) {
+            this.clazz = clazz;
+            this.iterables = iterables;
+        }
 
-            static class ProductIterator extends UnmodifiableIterator
-                {
-                    private int index;
-                    private final Iterable[] iterables;
-                    private final Iterator[] iterators;
-                    private final Object[] results;
-                    private static final String __OBFID = "CL_00002323";
+        public Iterator iterator() {
+            return (Iterator) (this.iterables.length <= 0 ? Collections.singletonList((Object[]) Cartesian.createArray(this.clazz, 0)).iterator() : new Cartesian.Product.ProductIterator(this.clazz, this.iterables, null));
+        }
 
-                    private ProductIterator(Class clazz, Iterable[] iterables)
-                    {
-                        this.index = -2;
-                        this.iterables = iterables;
-                        this.iterators = (Iterator[])Cartesian.createArray(Iterator.class, this.iterables.length);
+        Product(Class p_i46021_1_, Iterable[] p_i46021_2_, Object p_i46021_3_) {
+            this(p_i46021_1_, p_i46021_2_);
+        }
 
-                        for (int i = 0; i < this.iterables.length; ++i)
-                        {
-                            this.iterators[i] = iterables[i].iterator();
-                        }
+        static class ProductIterator extends UnmodifiableIterator {
 
-                        this.results = Cartesian.createArray(clazz, this.iterators.length);
-                    }
+            private int index;
+            private final Iterable[] iterables;
+            private final Iterator[] iterators;
+            private final Object[] results;
+            private static final String __OBFID = "CL_00002323";
 
-                    private void endOfData()
-                    {
-                        this.index = -1;
-                        Arrays.fill(this.iterators, (Object)null);
-                        Arrays.fill(this.results, (Object)null);
-                    }
+            private ProductIterator(Class clazz, Iterable[] iterables) {
+                this.index = -2;
+                this.iterables = iterables;
+                this.iterators = (Iterator[]) Cartesian.createArray(Iterator.class, this.iterables.length);
 
-                    public boolean hasNext()
-                    {
-                        if (this.index == -2)
-                        {
-                            this.index = 0;
-                            Iterator[] aiterator = this.iterators;
-                            int i = aiterator.length;
+                for (int i = 0; i < this.iterables.length; ++i) {
+                    this.iterators[i] = iterables[i].iterator();
+                }
 
-                            for (int j = 0; j < i; ++j)
-                            {
-                                Iterator iterator1 = aiterator[j];
+                this.results = Cartesian.createArray(clazz, this.iterators.length);
+            }
 
-                                if (!iterator1.hasNext())
-                                {
-                                    this.endOfData();
-                                    break;
-                                }
-                            }
+            private void endOfData() {
+                this.index = -1;
+                Arrays.fill(this.iterators, (Object) null);
+                Arrays.fill(this.results, (Object) null);
+            }
 
-                            return true;
-                        }
-                        else
-                        {
-                            if (this.index >= this.iterators.length)
-                            {
-                                for (this.index = this.iterators.length - 1; this.index >= 0; --this.index)
-                                {
-                                    Iterator iterator = this.iterators[this.index];
+            public boolean hasNext() {
+                if (this.index == -2) {
+                    this.index = 0;
+                    Iterator[] aiterator = this.iterators;
+                    int i = aiterator.length;
 
-                                    if (iterator.hasNext())
-                                    {
-                                        break;
-                                    }
+                    for (int j = 0; j < i; ++j) {
+                        Iterator iterator1 = aiterator[j];
 
-                                    if (this.index == 0)
-                                    {
-                                        this.endOfData();
-                                        break;
-                                    }
+                        if (!iterator1.hasNext()) {
+                            this.endOfData();
+                            break;
+                        }
+                    }
 
-                                    iterator = this.iterables[this.index].iterator();
-                                    this.iterators[this.index] = iterator;
+                    return true;
+                } else {
+                    if (this.index >= this.iterators.length) {
+                        for (this.index = this.iterators.length - 1; this.index >= 0; --this.index) {
+                            Iterator iterator = this.iterators[this.index];
 
-                                    if (!iterator.hasNext())
-                                    {
-                                        this.endOfData();
-                                        break;
-                                    }
-                                }
+                            if (iterator.hasNext()) {
+                                break;
                             }
 
-                            return this.index >= 0;
-                        }
-                    }
-
-                    public Object[] next0()
-                    {
-                        if (!this.hasNext())
-                        {
-                            throw new NoSuchElementException();
-                        }
-                        else
-                        {
-                            while (this.index < this.iterators.length)
-                            {
-                                this.results[this.index] = this.iterators[this.index].next();
-                                ++this.index;
+                            if (this.index == 0) {
+                                this.endOfData();
+                                break;
                             }
 
-                            return (Object[])this.results.clone();
+                            iterator = this.iterables[this.index].iterator();
+                            this.iterators[this.index] = iterator;
+
+                            if (!iterator.hasNext()) {
+                                this.endOfData();
+                                break;
+                            }
                         }
                     }
 
-                    public Object next()
-                    {
-                        return this.next0();
-                    }
+                    return this.index >= 0;
+                }
+            }
 
-                    ProductIterator(Class p_i46019_1_, Iterable[] p_i46019_2_, Object p_i46019_3_)
-                    {
-                        this(p_i46019_1_, p_i46019_2_);
+            public Object[] next0() {
+                if (!this.hasNext()) {
+                    throw new NoSuchElementException();
+                } else {
+                    while (this.index < this.iterators.length) {
+                        this.results[this.index] = this.iterators[this.index].next();
+                        ++this.index;
                     }
+
+                    return (Object[]) this.results.clone();
                 }
+            }
+
+            public Object next() {
+                return this.next0();
+            }
+
+            ProductIterator(Class p_i46019_1_, Iterable[] p_i46019_2_, Object p_i46019_3_) {
+                this(p_i46019_1_, p_i46019_2_);
+            }
         }
+    }
 }
