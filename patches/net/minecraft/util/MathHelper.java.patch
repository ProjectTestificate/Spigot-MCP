--- decompiled\net\minecraft\util\MathHelper.java
+++ src\main\java\net\minecraft\util\MathHelper.java
@@ -1,14 +1,14 @@
 package net.minecraft.util;
 
 import java.util.Random;
 import java.util.UUID;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+
 public class MathHelper
 {
+
     public static final float SQRT_2 = sqrt_float(2.0F);
     private static final float[] SIN_TABLE = new float[65536];
     private static final int[] multiplyDeBruijnBitPosition;
     private static final String __OBFID = "CL_00001496";
 
@@ -36,16 +36,10 @@
     {
         int i = (int)p_76141_0_;
         return p_76141_0_ < (float)i ? i - 1 : i;
     }
 
-    @SideOnly(Side.CLIENT)
-    public static int truncateDoubleToInt(double p_76140_0_)
-    {
-        return (int)(p_76140_0_ + 1024.0D) - 1024;
-    }
-
     public static int floor_double(double p_76128_0_)
     {
         int i = (int)p_76128_0_;
         return p_76128_0_ < (double)i ? i - 1 : i;
     }
@@ -54,16 +48,10 @@
     {
         long i = (long)p_76124_0_;
         return p_76124_0_ < (double)i ? i - 1L : i;
     }
 
-    @SideOnly(Side.CLIENT)
-    public static int func_154353_e(double p_154353_0_)
-    {
-        return (int)(p_154353_0_ >= 0.0D ? p_154353_0_ : -p_154353_0_ + 1.0D);
-    }
-
     public static float abs(float p_76135_0_)
     {
         return p_76135_0_ >= 0.0F ? p_76135_0_ : -p_76135_0_;
     }
 
@@ -117,16 +105,10 @@
         }
 
         return p_76132_0_ > p_76132_2_ ? p_76132_0_ : p_76132_2_;
     }
 
-    @SideOnly(Side.CLIENT)
-    public static int bucketInt(int p_76137_0_, int p_76137_1_)
-    {
-        return p_76137_0_ < 0 ? -((-p_76137_0_ - 1) / p_76137_1_) - 1 : p_76137_0_ / p_76137_1_;
-    }
-
     public static int getRandomIntegerInRange(Random p_76136_0_, int p_76136_1_, int p_76136_2_)
     {
         return p_76136_1_ >= p_76136_2_ ? p_76136_1_ : p_76136_0_.nextInt(p_76136_2_ - p_76136_1_ + 1) + p_76136_1_;
     }
 
@@ -153,22 +135,10 @@
         }
 
         return (double)i / (double)p_76127_0_.length;
     }
 
-    @SideOnly(Side.CLIENT)
-    public static boolean func_180185_a(float p_180185_0_, float p_180185_1_)
-    {
-        return abs(p_180185_1_ - p_180185_0_) < 1.0E-5F;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public static int normalizeAngle(int p_180184_0_, int p_180184_1_)
-    {
-        return (p_180184_0_ % p_180184_1_ + p_180184_1_) % p_180184_1_;
-    }
-
     public static float wrapAngleTo180_float(float p_76142_0_)
     {
         p_76142_0_ %= 360.0F;
 
         if (p_76142_0_ >= 180.0F)
@@ -282,60 +252,17 @@
             int k = p_154354_0_ % p_154354_1_;
             return k == 0 ? p_154354_0_ : p_154354_0_ + p_154354_1_ - k;
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public static int func_180183_b(float p_180183_0_, float p_180183_1_, float p_180183_2_)
-    {
-        return func_180181_b(floor_float(p_180183_0_ * 255.0F), floor_float(p_180183_1_ * 255.0F), floor_float(p_180183_2_ * 255.0F));
-    }
-
-    @SideOnly(Side.CLIENT)
-    public static int func_180181_b(int p_180181_0_, int p_180181_1_, int p_180181_2_)
-    {
-        int l = (p_180181_0_ << 8) + p_180181_1_;
-        l = (l << 8) + p_180181_2_;
-        return l;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public static int func_180188_d(int p_180188_0_, int p_180188_1_)
-    {
-        int k = (p_180188_0_ & 16711680) >> 16;
-        int l = (p_180188_1_ & 16711680) >> 16;
-        int i1 = (p_180188_0_ & 65280) >> 8;
-        int j1 = (p_180188_1_ & 65280) >> 8;
-        int k1 = (p_180188_0_ & 255) >> 0;
-        int l1 = (p_180188_1_ & 255) >> 0;
-        int i2 = (int)((float)k * (float)l / 255.0F);
-        int j2 = (int)((float)i1 * (float)j1 / 255.0F);
-        int k2 = (int)((float)k1 * (float)l1 / 255.0F);
-        return p_180188_0_ & -16777216 | i2 << 16 | j2 << 8 | k2;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public static long getPositionRandom(Vec3i pos)
-    {
-        return getCoordinateRandom(pos.getX(), pos.getY(), pos.getZ());
-    }
-
     public static UUID getRandomUuid(Random p_180182_0_)
     {
         long i = p_180182_0_.nextLong() & -61441L | 16384L;
         long j = p_180182_0_.nextLong() & 4611686018427387903L | Long.MIN_VALUE;
         return new UUID(i, j);
     }
 
-    @SideOnly(Side.CLIENT)
-    public static long getCoordinateRandom(int x, int y, int z)
-    {
-        long l = (long)(x * 3129871) ^ (long)z * 116129781L ^ (long)y;
-        l = l * l * 42317861L + l * 11L;
-        return l;
-    }
-
     static
     {
         for (int var0 = 0; var0 < 65536; ++var0)
         {
             SIN_TABLE[var0] = (float)Math.sin((double)var0 * Math.PI * 2.0D / 65536.0D);
