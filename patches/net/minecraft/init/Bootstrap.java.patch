--- decompiled\net\minecraft\init\Bootstrap.java
+++ src\main\java\net\minecraft\init\Bootstrap.java
@@ -1,11 +1,11 @@
 package net.minecraft.init;
 
-import com.mojang.authlib.GameProfile;
 import java.io.PrintStream;
 import java.util.Random;
 import java.util.UUID;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockCommandBlock;
 import net.minecraft.block.BlockDispenser;
 import net.minecraft.block.BlockFire;
 import net.minecraft.block.BlockLiquid;
@@ -19,11 +19,10 @@
 import net.minecraft.dispenser.IBehaviorDispenseItem;
 import net.minecraft.dispenser.IBlockSource;
 import net.minecraft.dispenser.IPosition;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLiving;
-import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.IProjectile;
 import net.minecraft.entity.item.EntityBoat;
 import net.minecraft.entity.item.EntityExpBottle;
 import net.minecraft.entity.item.EntityFireworkRocket;
 import net.minecraft.entity.item.EntityTNTPrimed;
@@ -48,17 +47,23 @@
 import net.minecraft.tileentity.TileEntitySkull;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.LoggingPrintStream;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource;
+import org.bukkit.event.block.BlockDispenseEvent;
+import org.bukkit.util.Vector;
 
+import com.mojang.authlib.GameProfile;
+
 public class Bootstrap
 {
+
     private static final PrintStream SYSOUT = System.out;
     private static boolean alreadyRegistered = false;
     private static final Logger LOGGER = LogManager.getLogger();
     private static final String __OBFID = "CL_00001397";
 
@@ -130,11 +135,11 @@
                     }
                     protected float func_82500_b()
                     {
                         return super.func_82500_b() * 1.25F;
                     }
-                }).dispense(source, stack): this.field_150843_b.dispense(source, stack);
+                }).dispense(source, stack) : this.field_150843_b.dispense(source, stack);
             }
         });
         BlockDispenser.dispenseBehaviorRegistry.putObject(Items.spawn_egg, new BehaviorDefaultDispenseItem()
         {
             private static final String __OBFID = "CL_00001410";
@@ -142,18 +147,53 @@
             {
                 EnumFacing enumfacing = BlockDispenser.getFacing(source.getBlockMetadata());
                 double d0 = source.getX() + (double)enumfacing.getFrontOffsetX();
                 double d1 = (double)((float)source.getBlockPos().getY() + 0.2F);
                 double d2 = source.getZ() + (double)enumfacing.getFrontOffsetZ();
-                Entity entity = ItemMonsterPlacer.spawnCreature(source.getWorld(), stack.getMetadata(), d0, d1, d2);
+                // Entity entity = ItemMonsterPlacer.spawnCreature(source.getWorld(), stack.getMetadata(), d0, d1, d2);
+                // CraftBukkit start
+                World world = source.getWorld();
+                ItemStack itemstack1 = stack.splitStack(1);
+                org.bukkit.block.Block block = world.getWorld().getBlockAt(source.getBlockPos().getX(), source.getBlockPos().getY(), source.getBlockPos().getZ());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new Vector(d0, d1, d2));
 
-                if (entity instanceof EntityLivingBase && stack.hasDisplayName())
+                if (!BlockDispenser.eventFired)
                 {
+                    world.getServer().getPluginManager().callEvent(event);
+                }
+
+                if (event.isCancelled())
+                {
+                    stack.stackSize++;
+                    return stack;
+                }
+
+                if (!event.getItem().equals(craftItem))
+                {
+                    stack.stackSize++;
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem idispensebehavior = (IBehaviorDispenseItem)BlockDispenser.dispenseBehaviorRegistry.getObject(eventStack.getItem());
+
+                    if (idispensebehavior != IBehaviorDispenseItem.itemDispenseBehaviorProvider && idispensebehavior != this)
+                    {
+                        idispensebehavior.dispense(source, eventStack);
+                        return stack;
+                    }
+                }
+
+                itemstack1 = CraftItemStack.asNMSCopy(event.getItem());
+                Entity entity = ItemMonsterPlacer.spawnCreature(source.getWorld(), stack.getMetadata(), event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DISPENSE_EGG);
+
+                if (entity instanceof EntityLiving && stack.hasDisplayName())
+                {
                     ((EntityLiving)entity).setCustomNameTag(stack.getDisplayName());
                 }
 
-                stack.splitStack(1);
+                // stack.splitStack(1); // Handled during event processing
+                // CraftBukkit end
                 return stack;
             }
         });
         BlockDispenser.dispenseBehaviorRegistry.putObject(Items.fireworks, new BehaviorDefaultDispenseItem()
         {
@@ -162,13 +202,45 @@
             {
                 EnumFacing enumfacing = BlockDispenser.getFacing(source.getBlockMetadata());
                 double d0 = source.getX() + (double)enumfacing.getFrontOffsetX();
                 double d1 = (double)((float)source.getBlockPos().getY() + 0.2F);
                 double d2 = source.getZ() + (double)enumfacing.getFrontOffsetZ();
-                EntityFireworkRocket entityfireworkrocket = new EntityFireworkRocket(source.getWorld(), d0, d1, d2, stack);
-                source.getWorld().spawnEntityInWorld(entityfireworkrocket);
-                stack.splitStack(1);
+                // CraftBukkit start
+                World world = source.getWorld();
+                ItemStack itemstack1 = stack.splitStack(1);
+                org.bukkit.block.Block block = world.getWorld().getBlockAt(source.getBlockPos().getX(), source.getBlockPos().getY(), source.getBlockPos().getZ());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new Vector(d0, d1, d2));
+
+                if (!BlockDispenser.eventFired)
+                {
+                    world.getServer().getPluginManager().callEvent(event);
+                }
+
+                if (event.isCancelled())
+                {
+                    stack.stackSize++;
+                    return stack;
+                }
+
+                if (!event.getItem().equals(craftItem))
+                {
+                    stack.stackSize++;
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem idispensebehavior = (IBehaviorDispenseItem)BlockDispenser.dispenseBehaviorRegistry.getObject(eventStack.getItem());
+
+                    if (idispensebehavior != IBehaviorDispenseItem.itemDispenseBehaviorProvider && idispensebehavior != this)
+                    {
+                        idispensebehavior.dispense(source, eventStack);
+                        return stack;
+                    }
+                }
+
+                EntityFireworkRocket entityfireworks = new EntityFireworkRocket(source.getWorld(), d0, d1, d2, stack);
+                source.getWorld().spawnEntityInWorld(entityfireworks);
+                // stack.splitStack(1); // Handled during event processing
                 return stack;
             }
             protected void playDispenseSound(IBlockSource source)
             {
                 source.getWorld().playAuxSFX(1002, source.getBlockPos(), 0);
@@ -187,12 +259,46 @@
                 World world = source.getWorld();
                 Random random = world.rand;
                 double d3 = random.nextGaussian() * 0.05D + (double)enumfacing.getFrontOffsetX();
                 double d4 = random.nextGaussian() * 0.05D + (double)enumfacing.getFrontOffsetY();
                 double d5 = random.nextGaussian() * 0.05D + (double)enumfacing.getFrontOffsetZ();
-                world.spawnEntityInWorld(new EntitySmallFireball(world, d0, d1, d2, d3, d4, d5));
-                stack.splitStack(1);
+                // CraftBukkit start
+                ItemStack itemstack1 = stack.splitStack(1);
+                org.bukkit.block.Block block = world.getWorld().getBlockAt(source.getBlockPos().getX(), source.getBlockPos().getY(), source.getBlockPos().getZ());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new Vector(d3, d4, d5));
+
+                if (!BlockDispenser.eventFired)
+                {
+                    world.getServer().getPluginManager().callEvent(event);
+                }
+
+                if (event.isCancelled())
+                {
+                    stack.stackSize++;
+                    return stack;
+                }
+
+                if (!event.getItem().equals(craftItem))
+                {
+                    stack.stackSize++;
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem idispensebehavior = (IBehaviorDispenseItem)BlockDispenser.dispenseBehaviorRegistry.getObject(eventStack.getItem());
+
+                    if (idispensebehavior != IBehaviorDispenseItem.itemDispenseBehaviorProvider && idispensebehavior != this)
+                    {
+                        idispensebehavior.dispense(source, eventStack);
+                        return stack;
+                    }
+                }
+
+                EntitySmallFireball entitysmallfireball = new EntitySmallFireball(world, d0, d1, d2, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ());
+                entitysmallfireball.projectileSource = new CraftBlockProjectileSource((TileEntityDispenser)source.getBlockTileEntity());
+                world.spawnEntityInWorld(entitysmallfireball);
+                // stack.splitStack(1); // Handled during event processing
+                // CraftBukkit end
                 return stack;
             }
             protected void playDispenseSound(IBlockSource source)
             {
                 source.getWorld().playAuxSFX(1009, source.getBlockPos(), 0);
@@ -225,13 +331,46 @@
                     }
 
                     d3 = 0.0D;
                 }
 
-                EntityBoat entityboat = new EntityBoat(world, d0, d1 + d3, d2);
+                // EntityBoat entityboat = new EntityBoat(world, d0, d1 + d3, d2);
+                // CraftBukkit start
+                ItemStack itemstack1 = stack.splitStack(1);
+                org.bukkit.block.Block block = world.getWorld().getBlockAt(source.getBlockPos().getX(), source.getBlockPos().getY(), source.getBlockPos().getZ());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new Vector(d0, d1 + d3, d2));
+
+                if (!BlockDispenser.eventFired)
+                {
+                    world.getServer().getPluginManager().callEvent(event);
+                }
+
+                if (event.isCancelled())
+                {
+                    stack.stackSize++;
+                    return stack;
+                }
+
+                if (!event.getItem().equals(craftItem))
+                {
+                    stack.stackSize++;
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem idispensebehavior = (IBehaviorDispenseItem)BlockDispenser.dispenseBehaviorRegistry.getObject(eventStack.getItem());
+
+                    if (idispensebehavior != IBehaviorDispenseItem.itemDispenseBehaviorProvider && idispensebehavior != this)
+                    {
+                        idispensebehavior.dispense(source, eventStack);
+                        return stack;
+                    }
+                }
+
+                EntityBoat entityboat = new EntityBoat(world, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ());
+                // CraftBukkit end
                 world.spawnEntityInWorld(entityboat);
-                stack.splitStack(1);
+                // stack.splitStack(1); // CraftBukkit - handled during event processing
                 return stack;
             }
             protected void playDispenseSound(IBlockSource source)
             {
                 source.getWorld().playAuxSFX(1000, source.getBlockPos(), 0);
@@ -243,15 +382,66 @@
             private static final String __OBFID = "CL_00001399";
             public ItemStack dispenseStack(IBlockSource source, ItemStack stack)
             {
                 ItemBucket itembucket = (ItemBucket)stack.getItem();
                 BlockPos blockpos = source.getBlockPos().offset(BlockDispenser.getFacing(source.getBlockMetadata()));
+                // CraftBukkit start
+                World world = source.getWorld();
+                int x = blockpos.getX();
+                int y = blockpos.getY();
+                int z = blockpos.getZ();
 
+                if (world.isAirBlock(blockpos) || !world.getBlockState(blockpos).getBlock().getMaterial().isSolid())
+                {
+                    org.bukkit.block.Block block = world.getWorld().getBlockAt(source.getBlockPos().getX(), source.getBlockPos().getY(), source.getBlockPos().getZ());
+                    CraftItemStack craftItem = CraftItemStack.asCraftMirror(stack);
+                    BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new Vector(x, y, z));
+
+                    if (!BlockDispenser.eventFired)
+                    {
+                        world.getServer().getPluginManager().callEvent(event);
+                    }
+
+                    if (event.isCancelled())
+                    {
+                        return stack;
+                    }
+
+                    if (!event.getItem().equals(craftItem))
+                    {
+                        // Chain to handler for new item
+                        ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                        IBehaviorDispenseItem idispensebehavior = (IBehaviorDispenseItem)BlockDispenser.dispenseBehaviorRegistry.getObject(eventStack.getItem());
+
+                        if (idispensebehavior != IBehaviorDispenseItem.itemDispenseBehaviorProvider && idispensebehavior != this)
+                        {
+                            idispensebehavior.dispense(source, eventStack);
+                            return stack;
+                        }
+                    }
+
+                    itembucket = (ItemBucket)CraftItemStack.asNMSCopy(event.getItem()).getItem();
+                }
+
+                // CraftBukkit end
+
                 if (itembucket.tryPlaceContainedLiquid(source.getWorld(), blockpos))
                 {
-                    stack.setItem(Items.bucket);
-                    stack.stackSize = 1;
+                    // CraftBukkit start - Handle stacked buckets
+                    Item item = Items.bucket;
+
+                    if (--stack.stackSize == 0)
+                    {
+                        stack.setItem(Items.bucket);
+                        stack.stackSize = 1;
+                    }
+                    else if (((TileEntityDispenser)source.getBlockTileEntity()).addItemStack(new ItemStack(item)) < 0)
+                    {
+                        this.field_150841_b.dispense(source, new ItemStack(item));
+                    }
+
+                    // CraftBukkit end
                     return stack;
                 }
                 else
                 {
                     return this.field_150841_b.dispense(source, stack);
@@ -285,10 +475,39 @@
                     }
 
                     item = Items.lava_bucket;
                 }
 
+                // CraftBukkit start
+                org.bukkit.block.Block bukkitBlock = world.getWorld().getBlockAt(source.getBlockPos().getX(), source.getBlockPos().getY(), source.getBlockPos().getZ());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(stack);
+                BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new Vector(blockpos.getX(), blockpos.getY(), blockpos.getZ()));
+
+                if (!BlockDispenser.eventFired)
+                {
+                    world.getServer().getPluginManager().callEvent(event);
+                }
+
+                if (event.isCancelled())
+                {
+                    return stack;
+                }
+
+                if (!event.getItem().equals(craftItem))
+                {
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem idispensebehavior = (IBehaviorDispenseItem)BlockDispenser.dispenseBehaviorRegistry.getObject(eventStack.getItem());
+
+                    if (idispensebehavior != IBehaviorDispenseItem.itemDispenseBehaviorProvider && idispensebehavior != this)
+                    {
+                        idispensebehavior.dispense(source, eventStack);
+                        return stack;
+                    }
+                }
+
+                // CraftBukkit end
                 world.setBlockToAir(blockpos);
 
                 if (--stack.stackSize == 0)
                 {
                     stack.setItem(item);
@@ -308,20 +527,55 @@
             private static final String __OBFID = "CL_00001401";
             protected ItemStack dispenseStack(IBlockSource source, ItemStack stack)
             {
                 World world = source.getWorld();
                 BlockPos blockpos = source.getBlockPos().offset(BlockDispenser.getFacing(source.getBlockMetadata()));
+                // CraftBukkit start
+                org.bukkit.block.Block block = world.getWorld().getBlockAt(source.getBlockPos().getX(), source.getBlockPos().getY(), source.getBlockPos().getZ());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(stack);
+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new Vector(0, 0, 0));
 
-                if (world.isAirBlock(blockpos))
+                if (!BlockDispenser.eventFired)
                 {
-                    world.setBlockState(blockpos, Blocks.fire.getDefaultState());
+                    world.getServer().getPluginManager().callEvent(event);
+                }
 
-                    if (stack.attemptDamageItem(1, world.rand))
+                if (event.isCancelled())
+                {
+                    return stack;
+                }
+
+                if (!event.getItem().equals(craftItem))
+                {
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem idispensebehavior = (IBehaviorDispenseItem)BlockDispenser.dispenseBehaviorRegistry.getObject(eventStack.getItem());
+
+                    if (idispensebehavior != IBehaviorDispenseItem.itemDispenseBehaviorProvider && idispensebehavior != this)
                     {
-                        stack.stackSize = 0;
+                        idispensebehavior.dispense(source, eventStack);
+                        return stack;
                     }
                 }
+
+                // CraftBukkit end
+
+                if (world.isAirBlock(blockpos))
+                {
+                    // CraftBukkit start - Ignition by dispensing flint and steel
+                    if (!org.bukkit.craftbukkit.event.CraftEventFactory.callBlockIgniteEvent(world, blockpos.getX(), blockpos.getY(), blockpos.getZ(), source.getBlockPos().getX(), source.getBlockPos().getY(), source.getBlockPos().getZ()).isCancelled())
+                    {
+                        world.setBlockState(blockpos, Blocks.fire.getDefaultState());
+
+                        if (stack.attemptDamageItem(1, world.rand))
+                        {
+                            stack.stackSize = 0;
+                        }
+                    }
+
+                    // CraftBukkit end
+                }
                 else if (world.getBlockState(blockpos).getBlock() == Blocks.tnt)
                 {
                     Blocks.tnt.onBlockDestroyedByPlayer(world, blockpos, Blocks.tnt.getDefaultState().withProperty(BlockTNT.EXPLODE, Boolean.valueOf(true)));
                     world.setBlockToAir(blockpos);
                 }
@@ -352,11 +606,40 @@
             {
                 if (EnumDyeColor.WHITE == EnumDyeColor.byDyeDamage(stack.getMetadata()))
                 {
                     World world = source.getWorld();
                     BlockPos blockpos = source.getBlockPos().offset(BlockDispenser.getFacing(source.getBlockMetadata()));
+                    // CraftBukkit start
+                    org.bukkit.block.Block block = world.getWorld().getBlockAt(source.getBlockPos().getX(), source.getBlockPos().getY(), source.getBlockPos().getZ());
+                    CraftItemStack craftItem = CraftItemStack.asCraftMirror(stack); // Spigot
+                    BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new Vector(0, 0, 0));
 
+                    if (!BlockDispenser.eventFired)
+                    {
+                        world.getServer().getPluginManager().callEvent(event);
+                    }
+
+                    if (event.isCancelled())
+                    {
+                        return stack;
+                    }
+
+                    if (!event.getItem().equals(craftItem))
+                    {
+                        // Chain to handler for new item
+                        ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                        IBehaviorDispenseItem idispensebehavior = (IBehaviorDispenseItem)BlockDispenser.dispenseBehaviorRegistry.getObject(eventStack.getItem());
+
+                        if (idispensebehavior != IBehaviorDispenseItem.itemDispenseBehaviorProvider && idispensebehavior != this)
+                        {
+                            idispensebehavior.dispense(source, eventStack);
+                            return stack;
+                        }
+                    }
+
+                    // CraftBukkit end
+
                     if (ItemDye.applyBonemeal(stack, world, blockpos))
                     {
                         if (!world.isRemote)
                         {
                             world.playAuxSFX(2005, blockpos, 0);
@@ -391,14 +674,47 @@
             private static final String __OBFID = "CL_00001403";
             protected ItemStack dispenseStack(IBlockSource source, ItemStack stack)
             {
                 World world = source.getWorld();
                 BlockPos blockpos = source.getBlockPos().offset(BlockDispenser.getFacing(source.getBlockMetadata()));
-                EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double)blockpos.getX() + 0.5D, (double)blockpos.getY(), (double)blockpos.getZ() + 0.5D, (EntityLivingBase)null);
+                // EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double)blockpos.getX() + 0.5D, (double)blockpos.getY(), (double)blockpos.getZ() + 0.5D, (EntityLivingBase)null);
+                // CraftBukkit start
+                ItemStack itemstack1 = stack.splitStack(1);
+                org.bukkit.block.Block block = world.getWorld().getBlockAt(source.getBlockPos().getX(), source.getBlockPos().getY(), source.getBlockPos().getZ());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new Vector(blockpos.getX() + 0.5, blockpos.getY() + 0.5, blockpos.getZ() + 0.5));
+
+                if (!BlockDispenser.eventFired)
+                {
+                    world.getServer().getPluginManager().callEvent(event);
+                }
+
+                if (event.isCancelled())
+                {
+                    stack.stackSize++;
+                    return stack;
+                }
+
+                if (!event.getItem().equals(craftItem))
+                {
+                    stack.stackSize++;
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem idispensebehavior = (IBehaviorDispenseItem)BlockDispenser.dispenseBehaviorRegistry.getObject(eventStack.getItem());
+
+                    if (idispensebehavior != IBehaviorDispenseItem.itemDispenseBehaviorProvider && idispensebehavior != this)
+                    {
+                        idispensebehavior.dispense(source, eventStack);
+                        return stack;
+                    }
+                }
+
+                EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), (EntityLiving)null);
+                // CraftBukkit end
                 world.spawnEntityInWorld(entitytntprimed);
                 world.playSoundAtEntity(entitytntprimed, "game.tnt.primed", 1.0F, 1.0F);
-                --stack.stackSize;
+                // --stack.stackSize; // CraftBukkit - handled above
                 return stack;
             }
         });
         BlockDispenser.dispenseBehaviorRegistry.putObject(Items.skull, new BehaviorDefaultDispenseItem()
         {
@@ -515,11 +831,11 @@
             protected ItemStack dispenseStack(IBlockSource source, ItemStack stack)
             {
                 World world = source.getWorld();
                 BlockPos blockpos = source.getBlockPos().offset(BlockDispenser.getFacing(source.getBlockMetadata()));
 
-                if (world.isAirBlock(blockpos))
+                if (world.isAirBlock(blockpos) && false) // Craftbukkit - yeah... no
                 {
                     if (!world.isRemote)
                     {
                         IBlockState iblockstate = Blocks.command_block.getDefaultState().withProperty(BlockCommandBlock.TRIGGERED, Boolean.valueOf(false));
                         world.setBlockState(blockpos, iblockstate, 3);
@@ -530,12 +846,16 @@
                     --stack.stackSize;
                 }
 
                 return stack;
             }
-            protected void playDispenseSound(IBlockSource source) {}
-            protected void spawnDispenseParticles(IBlockSource source, EnumFacing facingIn) {}
+            protected void playDispenseSound(IBlockSource source)
+            {
+            }
+            protected void spawnDispenseParticles(IBlockSource source, EnumFacing facingIn)
+            {
+            }
         });
     }
 
     public static void register()
     {
@@ -559,12 +879,6 @@
     private static void redirectOutputToLog()
     {
         System.setErr(new LoggingPrintStream("STDERR", System.err));
         System.setOut(new LoggingPrintStream("STDOUT", SYSOUT));
     }
-
-    @SideOnly(Side.CLIENT)
-    public static void printToSYSOUT(String p_179870_0_)
-    {
-        SYSOUT.println(p_179870_0_);
-    }
 }
