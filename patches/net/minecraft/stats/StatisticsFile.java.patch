---a/net/minecraft/stats/StatisticsFile.java
+++b/net/minecraft/stats/StatisticsFile.java
@@ -1,11 +1,5 @@
 package net.minecraft.stats;
 
-import com.google.common.collect.Maps;
-import com.google.common.collect.Sets;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonParser;
 import java.io.File;
 import java.io.IOException;
 import java.lang.reflect.Constructor;
@@ -13,9 +13,7 @@
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Map;
-import java.util.Set;
 import java.util.Map.Entry;
+import java.util.Set;
+
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.network.play.server.S37PacketStatistics;
@@ -22,10 +22,13 @@
 import net.minecraft.util.ChatComponentTranslation;
 import net.minecraft.util.IJsonSerializable;
 import net.minecraft.util.TupleIntJsonSerializable;
+
 import org.apache.commons.io.FileUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.spigotmc.SpigotConfig;
 
-public class StatisticsFile extends StatFileWriter
-{
+import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonParser;
+
+public class StatisticsFile extends StatFileWriter {
+
     private static final Logger logger = LogManager.getLogger();
     private final MinecraftServer mcServer;
     private final File statsFile;
@@ -36,200 +36,162 @@
     private boolean field_150886_g = false;
     private static final String __OBFID = "CL_00001471";
 
-    public StatisticsFile(MinecraftServer serverIn, File statsFileIn)
-    {
+    public StatisticsFile(MinecraftServer serverIn, File statsFileIn) {
         this.mcServer = serverIn;
         this.statsFile = statsFileIn;
+        // Spigot start
+        for (String name : SpigotConfig.forcedStats.keySet()) {
+            TupleIntJsonSerializable wrapper = new TupleIntJsonSerializable();
+            wrapper.setIntegerValue(org.spigotmc.SpigotConfig.forcedStats.get(name));
+            statsData.put(StatList.getOneShotStat(name), wrapper);
+        }
+        // Spigot end
     }
 
-    public void readStatFile()
-    {
-        if (this.statsFile.isFile())
-        {
-            try
-            {
+    public void readStatFile() {
+        if (this.statsFile.isFile()) {
+            try {
                 this.statsData.clear();
                 this.statsData.putAll(this.parseJson(FileUtils.readFileToString(this.statsFile)));
-            }
-            catch (IOException ioexception)
-            {
+            } catch (IOException ioexception) {
                 logger.error("Couldn\'t read statistics file " + this.statsFile, ioexception);
-            }
-            catch (JsonParseException jsonparseexception)
-            {
+            } catch (JsonParseException jsonparseexception) {
                 logger.error("Couldn\'t parse statistics file " + this.statsFile, jsonparseexception);
             }
         }
     }
 
-    public void saveStatFile()
-    {
-        try
-        {
+    public void saveStatFile() {
+        if (org.spigotmc.SpigotConfig.disableStatSaving) return; // Spigot
+        try {
             FileUtils.writeStringToFile(this.statsFile, dumpJson(this.statsData));
-        }
-        catch (IOException ioexception)
-        {
+        } catch (IOException ioexception) {
             logger.error("Couldn\'t save stats", ioexception);
         }
     }
 
-    public void func_150873_a(EntityPlayer p_150873_1_, StatBase p_150873_2_, int p_150873_3_)
-    {
+    public void func_150873_a(EntityPlayer p_150873_1_, StatBase p_150873_2_, int p_150873_3_) {
+        if (org.spigotmc.SpigotConfig.disableStatSaving) return; // Spigot
         int j = p_150873_2_.isAchievement() ? this.readStat(p_150873_2_) : 0;
         super.func_150873_a(p_150873_1_, p_150873_2_, p_150873_3_);
         this.field_150888_e.add(p_150873_2_);
 
-        if (p_150873_2_.isAchievement() && j == 0 && p_150873_3_ > 0)
-        {
+        if (p_150873_2_.isAchievement() && j == 0 && p_150873_3_ > 0) {
             this.field_150886_g = true;
 
-            if (this.mcServer.isAnnouncingPlayerAchievements())
-            {
-                this.mcServer.getConfigurationManager().sendChatMsg(new ChatComponentTranslation("chat.type.achievement", new Object[] {p_150873_1_.getDisplayName(), p_150873_2_.func_150955_j()}));
+            if (this.mcServer.isAnnouncingPlayerAchievements()) {
+                this.mcServer.getConfigurationManager().sendChatMsg(new ChatComponentTranslation("chat.type.achievement", new Object[]{p_150873_1_.getDisplayName(), p_150873_2_.func_150955_j()}));
             }
         }
 
-        if (p_150873_2_.isAchievement() && j > 0 && p_150873_3_ == 0)
-        {
+        if (p_150873_2_.isAchievement() && j > 0 && p_150873_3_ == 0) {
             this.field_150886_g = true;
 
-            if (this.mcServer.isAnnouncingPlayerAchievements())
-            {
-                this.mcServer.getConfigurationManager().sendChatMsg(new ChatComponentTranslation("chat.type.achievement.taken", new Object[] {p_150873_1_.getDisplayName(), p_150873_2_.func_150955_j()}));
+            if (this.mcServer.isAnnouncingPlayerAchievements()) {
+                this.mcServer.getConfigurationManager().sendChatMsg(new ChatComponentTranslation("chat.type.achievement.taken", new Object[]{p_150873_1_.getDisplayName(), p_150873_2_.func_150955_j()}));
             }
         }
     }
 
-    public Set func_150878_c()
-    {
+    public Set func_150878_c() {
         HashSet hashset = Sets.newHashSet(this.field_150888_e);
         this.field_150888_e.clear();
         this.field_150886_g = false;
         return hashset;
     }
 
-    public Map parseJson(String p_150881_1_)
-    {
+    public Map parseJson(String p_150881_1_) {
         JsonElement jsonelement = (new JsonParser()).parse(p_150881_1_);
 
-        if (!jsonelement.isJsonObject())
-        {
+        if (!jsonelement.isJsonObject()) {
             return Maps.newHashMap();
-        }
-        else
-        {
+        } else {
             JsonObject jsonobject = jsonelement.getAsJsonObject();
             HashMap hashmap = Maps.newHashMap();
             Iterator iterator = jsonobject.entrySet().iterator();
 
-            while (iterator.hasNext())
-            {
-                Entry entry = (Entry)iterator.next();
-                StatBase statbase = StatList.getOneShotStat((String)entry.getKey());
+            while (iterator.hasNext()) {
+                Entry entry = (Entry) iterator.next();
+                StatBase statbase = StatList.getOneShotStat((String) entry.getKey());
 
-                if (statbase != null)
-                {
+                if (statbase != null) {
                     TupleIntJsonSerializable tupleintjsonserializable = new TupleIntJsonSerializable();
 
-                    if (((JsonElement)entry.getValue()).isJsonPrimitive() && ((JsonElement)entry.getValue()).getAsJsonPrimitive().isNumber())
-                    {
-                        tupleintjsonserializable.setIntegerValue(((JsonElement)entry.getValue()).getAsInt());
-                    }
-                    else if (((JsonElement)entry.getValue()).isJsonObject())
-                    {
-                        JsonObject jsonobject1 = ((JsonElement)entry.getValue()).getAsJsonObject();
+                    if (((JsonElement) entry.getValue()).isJsonPrimitive() && ((JsonElement) entry.getValue()).getAsJsonPrimitive().isNumber()) {
+                        tupleintjsonserializable.setIntegerValue(((JsonElement) entry.getValue()).getAsInt());
+                    } else if (((JsonElement) entry.getValue()).isJsonObject()) {
+                        JsonObject jsonobject1 = ((JsonElement) entry.getValue()).getAsJsonObject();
 
-                        if (jsonobject1.has("value") && jsonobject1.get("value").isJsonPrimitive() && jsonobject1.get("value").getAsJsonPrimitive().isNumber())
-                        {
+                        if (jsonobject1.has("value") && jsonobject1.get("value").isJsonPrimitive() && jsonobject1.get("value").getAsJsonPrimitive().isNumber()) {
                             tupleintjsonserializable.setIntegerValue(jsonobject1.getAsJsonPrimitive("value").getAsInt());
                         }
 
-                        if (jsonobject1.has("progress") && statbase.func_150954_l() != null)
-                        {
-                            try
-                            {
+                        if (jsonobject1.has("progress") && statbase.func_150954_l() != null) {
+                            try {
                                 Constructor constructor = statbase.func_150954_l().getConstructor(new Class[0]);
-                                IJsonSerializable ijsonserializable = (IJsonSerializable)constructor.newInstance(new Object[0]);
+                                IJsonSerializable ijsonserializable = (IJsonSerializable) constructor.newInstance(new Object[0]);
                                 ijsonserializable.func_152753_a(jsonobject1.get("progress"));
                                 tupleintjsonserializable.setJsonSerializableValue(ijsonserializable);
-                            }
-                            catch (Throwable throwable)
-                            {
+                            } catch (Throwable throwable) {
                                 logger.warn("Invalid statistic progress in " + this.statsFile, throwable);
                             }
                         }
                     }
 
                     hashmap.put(statbase, tupleintjsonserializable);
+                } else {
+                    logger.warn("Invalid statistic in " + this.statsFile + ": Don\'t know what " + (String) entry.getKey() + " is");
                 }
-                else
-                {
-                    logger.warn("Invalid statistic in " + this.statsFile + ": Don\'t know what " + (String)entry.getKey() + " is");
-                }
             }
 
             return hashmap;
         }
     }
 
-    public static String dumpJson(Map p_150880_0_)
-    {
+    public static String dumpJson(Map p_150880_0_) {
         JsonObject jsonobject = new JsonObject();
         Iterator iterator = p_150880_0_.entrySet().iterator();
 
-        while (iterator.hasNext())
-        {
-            Entry entry = (Entry)iterator.next();
+        while (iterator.hasNext()) {
+            Entry entry = (Entry) iterator.next();
 
-            if (((TupleIntJsonSerializable)entry.getValue()).getJsonSerializableValue() != null)
-            {
+            if (((TupleIntJsonSerializable) entry.getValue()).getJsonSerializableValue() != null) {
                 JsonObject jsonobject1 = new JsonObject();
-                jsonobject1.addProperty("value", Integer.valueOf(((TupleIntJsonSerializable)entry.getValue()).getIntegerValue()));
+                jsonobject1.addProperty("value", Integer.valueOf(((TupleIntJsonSerializable) entry.getValue()).getIntegerValue()));
 
-                try
-                {
-                    jsonobject1.add("progress", ((TupleIntJsonSerializable)entry.getValue()).getJsonSerializableValue().getSerializableElement());
+                try {
+                    jsonobject1.add("progress", ((TupleIntJsonSerializable) entry.getValue()).getJsonSerializableValue().getSerializableElement());
+                } catch (Throwable throwable) {
+                    logger.warn("Couldn\'t save statistic " + ((StatBase) entry.getKey()).getStatName() + ": error serializing progress", throwable);
                 }
-                catch (Throwable throwable)
-                {
-                    logger.warn("Couldn\'t save statistic " + ((StatBase)entry.getKey()).getStatName() + ": error serializing progress", throwable);
-                }
 
-                jsonobject.add(((StatBase)entry.getKey()).statId, jsonobject1);
+                jsonobject.add(((StatBase) entry.getKey()).statId, jsonobject1);
+            } else {
+                jsonobject.addProperty(((StatBase) entry.getKey()).statId, Integer.valueOf(((TupleIntJsonSerializable) entry.getValue()).getIntegerValue()));
             }
-            else
-            {
-                jsonobject.addProperty(((StatBase)entry.getKey()).statId, Integer.valueOf(((TupleIntJsonSerializable)entry.getValue()).getIntegerValue()));
-            }
         }
 
         return jsonobject.toString();
     }
 
-    public void func_150877_d()
-    {
+    public void func_150877_d() {
         Iterator iterator = this.statsData.keySet().iterator();
 
-        while (iterator.hasNext())
-        {
-            StatBase statbase = (StatBase)iterator.next();
+        while (iterator.hasNext()) {
+            StatBase statbase = (StatBase) iterator.next();
             this.field_150888_e.add(statbase);
         }
     }
 
-    public void func_150876_a(EntityPlayerMP p_150876_1_)
-    {
+    public void func_150876_a(EntityPlayerMP p_150876_1_) {
         int i = this.mcServer.getTickCounter();
         HashMap hashmap = Maps.newHashMap();
 
-        if (this.field_150886_g || i - this.field_150885_f > 300)
-        {
+        if (this.field_150886_g || i - this.field_150885_f > 300) {
             this.field_150885_f = i;
             Iterator iterator = this.func_150878_c().iterator();
 
-            while (iterator.hasNext())
-            {
-                StatBase statbase = (StatBase)iterator.next();
+            while (iterator.hasNext()) {
+                StatBase statbase = (StatBase) iterator.next();
                 hashmap.put(statbase, Integer.valueOf(this.readStat(statbase)));
             }
         }
@@ -238,17 +238,14 @@
         p_150876_1_.playerNetServerHandler.sendPacket(new S37PacketStatistics(hashmap));
     }
 
-    public void func_150884_b(EntityPlayerMP p_150884_1_)
-    {
+    public void func_150884_b(EntityPlayerMP p_150884_1_) {
         HashMap hashmap = Maps.newHashMap();
         Iterator iterator = AchievementList.achievementList.iterator();
 
-        while (iterator.hasNext())
-        {
-            Achievement achievement = (Achievement)iterator.next();
+        while (iterator.hasNext()) {
+            Achievement achievement = (Achievement) iterator.next();
 
-            if (this.hasAchievementUnlocked(achievement))
-            {
+            if (this.hasAchievementUnlocked(achievement)) {
                 hashmap.put(achievement, Integer.valueOf(this.readStat(achievement)));
                 this.field_150888_e.remove(achievement);
             }
@@ -257,9 +257,7 @@
         p_150884_1_.playerNetServerHandler.sendPacket(new S37PacketStatistics(hashmap));
     }
 
-    public boolean func_150879_e()
-    {
+    public boolean func_150879_e() {
         return this.field_150886_g;
     }
-}
+}
