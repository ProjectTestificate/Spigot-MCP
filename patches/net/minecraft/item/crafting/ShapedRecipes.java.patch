---a/net/minecraft/item/crafting/ShapedRecipes.java
+++b/net/minecraft/item/crafting/ShapedRecipes.java
@@ -1,40 +1,102 @@
 package net.minecraft.item.crafting;
 
+import java.util.Arrays;
+import java.util.List;
+
 import net.minecraft.inventory.InventoryCrafting;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.world.World;
 
-public class ShapedRecipes implements IRecipe
-{
-    private final int recipeWidth;
-    private final int recipeHeight;
-    private final ItemStack[] recipeItems;
-    private final ItemStack recipeOutput;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.inventory.CraftShapedRecipe;
+import org.bukkit.inventory.ShapedRecipe;
+
+public class ShapedRecipes implements IRecipe {
+
+    public final int recipeWidth;
+    public final int recipeHeight;
+    public final ItemStack[] recipeItems;
+    public ItemStack recipeOutput; // Spigot
     private boolean field_92101_f;
     private static final String __OBFID = "CL_00000093";
 
-    public ShapedRecipes(int width, int height, ItemStack[] p_i1917_3_, ItemStack output)
-    {
+    public ShapedRecipes(int width, int height, ItemStack[] p_i1917_3_, ItemStack output) {
         this.recipeWidth = width;
         this.recipeHeight = height;
         this.recipeItems = p_i1917_3_;
         this.recipeOutput = output;
     }
 
-    public ItemStack getRecipeOutput()
-    {
+    // CraftBukkit start
+    public ShapedRecipe toBukkitRecipe() {
+        CraftItemStack result = CraftItemStack.asCraftMirror(this.recipeOutput);
+        CraftShapedRecipe recipe = new CraftShapedRecipe(result, this);
+        switch (this.recipeHeight) {
+            case 1:
+                switch (this.recipeWidth) {
+                    case 1:
+                        recipe.shape("a");
+                        break;
+                    case 2:
+                        recipe.shape("ab");
+                        break;
+                    case 3:
+                        recipe.shape("abc");
+                        break;
+                }
+                break;
+            case 2:
+                switch (this.recipeWidth) {
+                    case 1:
+                        recipe.shape("a", "b");
+                        break;
+                    case 2:
+                        recipe.shape("ab", "cd");
+                        break;
+                    case 3:
+                        recipe.shape("abc", "def");
+                        break;
+                }
+                break;
+            case 3:
+                switch (this.recipeWidth) {
+                    case 1:
+                        recipe.shape("a", "b", "c");
+                        break;
+                    case 2:
+                        recipe.shape("ab", "cd", "ef");
+                        break;
+                    case 3:
+                        recipe.shape("abc", "def", "ghi");
+                        break;
+                }
+                break;
+        }
+        char c = 'a';
+        for (ItemStack stack : this.recipeItems) {
+            if (stack != null) {
+                recipe.setIngredient(c, org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(stack.getItem()), stack.getMetadata());
+            }
+            c++;
+        }
+        return recipe;
+    }
+    // CraftBukkit end
+
+    public ItemStack getRecipeOutput() {
         return this.recipeOutput;
     }
 
-    public ItemStack[] getRemainingItems(InventoryCrafting p_179532_1_)
-    {
+    public ItemStack[] getRemainingItems(InventoryCrafting p_179532_1_) {
         ItemStack[] aitemstack = new ItemStack[p_179532_1_.getSizeInventory()];
 
-        for (int i = 0; i < aitemstack.length; ++i)
-        {
+        for (int i = 0; i < aitemstack.length; ++i) {
             ItemStack itemstack = p_179532_1_.getStackInSlot(i);
 
-            if (itemstack != null && itemstack.getItem().hasContainerItem())
-            {
+            if (itemstack != null && itemstack.getItem().hasContainerItem()) {
                 aitemstack[i] = new ItemStack(itemstack.getItem().getContainerItem());
             }
         }
@@ -44,25 +44,17 @@
         return aitemstack;
     }
 
-    public boolean matches(InventoryCrafting p_77569_1_, World worldIn)
-    {
-        for (int i = 0; i <= 3 - this.recipeWidth; ++i)
-        {
-            for (int j = 0; j <= 3 - this.recipeHeight; ++j)
-            {
-                if (this.checkMatch(p_77569_1_, i, j, true))
-                {
+    public boolean matches(InventoryCrafting p_77569_1_, World worldIn) {
+        for (int i = 0; i <= 3 - this.recipeWidth; ++i) {
+            for (int j = 0; j <= 3 - this.recipeHeight; ++j) {
+                if (this.checkMatch(p_77569_1_, i, j, true)) {
                     return true;
                 }
 
-                if (this.checkMatch(p_77569_1_, i, j, false))
-                {
+                if (this.checkMatch(p_77569_1_, i, j, false)) {
                     return true;
                 }
             }
@@ -65,48 +65,35 @@
         return false;
     }
 
-    private boolean checkMatch(InventoryCrafting p_77573_1_, int p_77573_2_, int p_77573_3_, boolean p_77573_4_)
-    {
-        for (int k = 0; k < 3; ++k)
-        {
-            for (int l = 0; l < 3; ++l)
-            {
+    private boolean checkMatch(InventoryCrafting p_77573_1_, int p_77573_2_, int p_77573_3_, boolean p_77573_4_) {
+        for (int k = 0; k < 3; ++k) {
+            for (int l = 0; l < 3; ++l) {
                 int i1 = k - p_77573_2_;
                 int j1 = l - p_77573_3_;
                 ItemStack itemstack = null;
 
-                if (i1 >= 0 && j1 >= 0 && i1 < this.recipeWidth && j1 < this.recipeHeight)
-                {
-                    if (p_77573_4_)
-                    {
+                if (i1 >= 0 && j1 >= 0 && i1 < this.recipeWidth && j1 < this.recipeHeight) {
+                    if (p_77573_4_) {
                         itemstack = this.recipeItems[this.recipeWidth - i1 - 1 + j1 * this.recipeWidth];
-                    }
-                    else
-                    {
+                    } else {
                         itemstack = this.recipeItems[i1 + j1 * this.recipeWidth];
                     }
                 }
 
                 ItemStack itemstack1 = p_77573_1_.getStackInRowAndColumn(k, l);
 
-                if (itemstack1 != null || itemstack != null)
-                {
-                    if (itemstack1 == null && itemstack != null || itemstack1 != null && itemstack == null)
-                    {
+                if (itemstack1 != null || itemstack != null) {
+                    if (itemstack1 == null && itemstack != null || itemstack1 != null && itemstack == null) {
                         return false;
                     }
 
-                    if (itemstack.getItem() != itemstack1.getItem())
-                    {
+                    if (itemstack.getItem() != itemstack1.getItem()) {
                         return false;
                     }
 
-                    if (itemstack.getMetadata() != 32767 && itemstack.getMetadata() != itemstack1.getMetadata())
-                    {
+                    if (itemstack.getMetadata() != 32767 && itemstack.getMetadata() != itemstack1.getMetadata()) {
                         return false;
                     }
                 }
@@ -112,18 +112,14 @@
         return true;
     }
 
-    public ItemStack getCraftingResult(InventoryCrafting p_77572_1_)
-    {
+    public ItemStack getCraftingResult(InventoryCrafting p_77572_1_) {
         ItemStack itemstack = this.getRecipeOutput().copy();
 
-        if (this.field_92101_f)
-        {
-            for (int i = 0; i < p_77572_1_.getSizeInventory(); ++i)
-            {
+        if (this.field_92101_f) {
+            for (int i = 0; i < p_77572_1_.getSizeInventory(); ++i) {
                 ItemStack itemstack1 = p_77572_1_.getStackInSlot(i);
 
-                if (itemstack1 != null && itemstack1.hasTagCompound())
-                {
-                    itemstack.setTagCompound((NBTTagCompound)itemstack1.getTagCompound().copy());
+                if (itemstack1 != null && itemstack1.hasTagCompound()) {
+                    itemstack.setTagCompound((NBTTagCompound) itemstack1.getTagCompound().copy());
                 }
             }
         }
@@ -132,15 +132,12 @@
         return itemstack;
     }
 
-    public int getRecipeSize()
-    {
+    public int getRecipeSize() {
         return this.recipeWidth * this.recipeHeight;
     }
 
-    public ShapedRecipes func_92100_c()
-    {
+    public ShapedRecipes func_92100_c() {
         this.field_92101_f = true;
         return this;
     }
-}
+
+    // Spigot start
+    public List getIngredients() {
+        return Arrays.asList(recipeItems);
+    }
+    // Spigot end
+}
