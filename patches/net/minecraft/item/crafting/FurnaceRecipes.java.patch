--- decompiled\net\minecraft\item\crafting\FurnaceRecipes.java
+++ src\main\java\net\minecraft\item\crafting\FurnaceRecipes.java
@@ -1,33 +1,37 @@
 package net.minecraft.item.crafting;
 
-import com.google.common.collect.Maps;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Map.Entry;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockStoneBrick;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.Items;
 import net.minecraft.item.EnumDyeColor;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemFishFood;
 import net.minecraft.item.ItemStack;
 
+import com.google.common.collect.Maps;
+
 public class FurnaceRecipes
 {
+
     private static final FurnaceRecipes smeltingBase = new FurnaceRecipes();
-    private Map smeltingList = Maps.newHashMap();
+    public Map smeltingList = Maps.newHashMap(); // SpigotMCP -- Apply access transformation
     private Map experienceList = Maps.newHashMap();
     private static final String __OBFID = "CL_00000085";
+    public Map customRecipes = Maps.newHashMap(); // CraftBukkit - add field
 
     public static FurnaceRecipes instance()
     {
         return smeltingBase;
     }
 
-    private FurnaceRecipes()
+    public FurnaceRecipes()   // SpigotMCP -- Apply access transformation
     {
         this.addSmeltingRecipeForBlock(Blocks.iron_ore, new ItemStack(Items.iron_ingot), 0.7F);
         this.addSmeltingRecipeForBlock(Blocks.gold_ore, new ItemStack(Items.gold_ingot), 1.0F);
         this.addSmeltingRecipeForBlock(Blocks.diamond_ore, new ItemStack(Items.diamond), 1.0F);
         this.addSmeltingRecipeForBlock(Blocks.sand, new ItemStack(Blocks.glass), 0.1F);
@@ -64,10 +68,17 @@
         this.addSmeltingRecipeForBlock(Blocks.redstone_ore, new ItemStack(Items.redstone), 0.7F);
         this.addSmeltingRecipeForBlock(Blocks.lapis_ore, new ItemStack(Items.dye, 1, EnumDyeColor.BLUE.getDyeDamage()), 0.2F);
         this.addSmeltingRecipeForBlock(Blocks.quartz_ore, new ItemStack(Items.quartz), 0.2F);
     }
 
+    // CraftBukkit start - add method
+    public void registerRecipe(ItemStack itemstack, ItemStack itemstack1)
+    {
+        this.customRecipes.put(itemstack, itemstack1);
+    }
+    // CraftBukkit end
+
     public void addSmeltingRecipeForBlock(Block input, ItemStack stack, float experience)
     {
         this.addSmelting(Item.getItemFromBlock(input), stack, experience);
     }
 
@@ -82,18 +93,32 @@
         this.experienceList.put(stack, Float.valueOf(experience));
     }
 
     public ItemStack getSmeltingResult(ItemStack stack)
     {
-        Iterator iterator = this.smeltingList.entrySet().iterator();
+        // CraftBukkit start - initialize to customRecipes
+        boolean vanilla = false;
+        Iterator iterator = this.customRecipes.entrySet().iterator();
+        // CraftBukkit end
         Entry entry;
 
         do
         {
             if (!iterator.hasNext())
             {
-                return null;
+                // CraftBukkit start - fall back to vanilla recipes
+                if (!vanilla && !smeltingList.isEmpty())
+                {
+                    iterator = this.smeltingList.entrySet().iterator();
+                    vanilla = true;
+                }
+                else
+                {
+                    return null;
+                }
+
+                // CraftBukkit end
             }
 
             entry = (Entry)iterator.next();
         }
         while (!this.compareItemStacks(stack, (ItemStack)entry.getKey()));
