--- decompiled\net\minecraft\item\crafting\RecipesArmorDyes.java
+++ src\main\java\net\minecraft\item\crafting\RecipesArmorDyes.java
@@ -1,47 +1,47 @@
 package net.minecraft.item.crafting;
 
-import com.google.common.collect.Lists;
 import java.util.ArrayList;
+
 import net.minecraft.entity.passive.EntitySheep;
 import net.minecraft.init.Items;
 import net.minecraft.inventory.InventoryCrafting;
 import net.minecraft.item.EnumDyeColor;
 import net.minecraft.item.ItemArmor;
 import net.minecraft.item.ItemStack;
 import net.minecraft.world.World;
 
-public class RecipesArmorDyes implements IRecipe
-{
+import com.google.common.collect.Lists;
+
+public class RecipesArmorDyes extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
+
     private static final String __OBFID = "CL_00000079";
 
-    public boolean matches(InventoryCrafting p_77569_1_, World worldIn)
-    {
+    // CraftBukkit start - Delegate to new parent class with bogus info
+    public RecipesArmorDyes() {
+        super(new ItemStack(Items.leather_helmet, 0, 0), java.util.Arrays.asList(new ItemStack(Items.dye, 0, 5)));
+    }
+    // CraftBukkit end
+
+    public boolean matches(InventoryCrafting p_77569_1_, World worldIn) {
         ItemStack itemstack = null;
         ArrayList arraylist = Lists.newArrayList();
 
-        for (int i = 0; i < p_77569_1_.getSizeInventory(); ++i)
-        {
+        for (int i = 0; i < p_77569_1_.getSizeInventory(); ++i) {
             ItemStack itemstack1 = p_77569_1_.getStackInSlot(i);
 
-            if (itemstack1 != null)
-            {
-                if (itemstack1.getItem() instanceof ItemArmor)
-                {
-                    ItemArmor itemarmor = (ItemArmor)itemstack1.getItem();
+            if (itemstack1 != null) {
+                if (itemstack1.getItem() instanceof ItemArmor) {
+                    ItemArmor itemarmor = (ItemArmor) itemstack1.getItem();
 
-                    if (itemarmor.getArmorMaterial() != ItemArmor.ArmorMaterial.LEATHER || itemstack != null)
-                    {
+                    if (itemarmor.getArmorMaterial() != ItemArmor.ArmorMaterial.LEATHER || itemstack != null) {
                         return false;
                     }
 
                     itemstack = itemstack1;
-                }
-                else
-                {
-                    if (itemstack1.getItem() != Items.dye)
-                    {
+                } else {
+                    if (itemstack1.getItem() != Items.dye) {
                         return false;
                     }
 
                     arraylist.add(itemstack1);
                 }
@@ -49,12 +49,11 @@
         }
 
         return itemstack != null && !arraylist.isEmpty();
     }
 
-    public ItemStack getCraftingResult(InventoryCrafting p_77572_1_)
-    {
+    public ItemStack getCraftingResult(InventoryCrafting p_77572_1_) {
         ItemStack itemstack = null;
         int[] aint = new int[3];
         int i = 0;
         int j = 0;
         ItemArmor itemarmor = null;
@@ -62,102 +61,86 @@
         int l;
         float f;
         float f1;
         int l1;
 
-        for (k = 0; k < p_77572_1_.getSizeInventory(); ++k)
-        {
+        for (k = 0; k < p_77572_1_.getSizeInventory(); ++k) {
             ItemStack itemstack1 = p_77572_1_.getStackInSlot(k);
 
-            if (itemstack1 != null)
-            {
-                if (itemstack1.getItem() instanceof ItemArmor)
-                {
-                    itemarmor = (ItemArmor)itemstack1.getItem();
+            if (itemstack1 != null) {
+                if (itemstack1.getItem() instanceof ItemArmor) {
+                    itemarmor = (ItemArmor) itemstack1.getItem();
 
-                    if (itemarmor.getArmorMaterial() != ItemArmor.ArmorMaterial.LEATHER || itemstack != null)
-                    {
+                    if (itemarmor.getArmorMaterial() != ItemArmor.ArmorMaterial.LEATHER || itemstack != null) {
                         return null;
                     }
 
                     itemstack = itemstack1.copy();
                     itemstack.stackSize = 1;
 
-                    if (itemarmor.hasColor(itemstack1))
-                    {
+                    if (itemarmor.hasColor(itemstack1)) {
                         l = itemarmor.getColor(itemstack);
-                        f = (float)(l >> 16 & 255) / 255.0F;
-                        f1 = (float)(l >> 8 & 255) / 255.0F;
-                        float f2 = (float)(l & 255) / 255.0F;
-                        i = (int)((float)i + Math.max(f, Math.max(f1, f2)) * 255.0F);
-                        aint[0] = (int)((float)aint[0] + f * 255.0F);
-                        aint[1] = (int)((float)aint[1] + f1 * 255.0F);
-                        aint[2] = (int)((float)aint[2] + f2 * 255.0F);
+                        f = (float) (l >> 16 & 255) / 255.0F;
+                        f1 = (float) (l >> 8 & 255) / 255.0F;
+                        float f2 = (float) (l & 255) / 255.0F;
+                        i = (int) ((float) i + Math.max(f, Math.max(f1, f2)) * 255.0F);
+                        aint[0] = (int) ((float) aint[0] + f * 255.0F);
+                        aint[1] = (int) ((float) aint[1] + f1 * 255.0F);
+                        aint[2] = (int) ((float) aint[2] + f2 * 255.0F);
                         ++j;
                     }
-                }
-                else
-                {
-                    if (itemstack1.getItem() != Items.dye)
-                    {
+                } else {
+                    if (itemstack1.getItem() != Items.dye) {
                         return null;
                     }
 
                     float[] afloat = EntitySheep.func_175513_a(EnumDyeColor.byDyeDamage(itemstack1.getMetadata()));
-                    int j1 = (int)(afloat[0] * 255.0F);
-                    int k1 = (int)(afloat[1] * 255.0F);
-                    l1 = (int)(afloat[2] * 255.0F);
+                    int j1 = (int) (afloat[0] * 255.0F);
+                    int k1 = (int) (afloat[1] * 255.0F);
+                    l1 = (int) (afloat[2] * 255.0F);
                     i += Math.max(j1, Math.max(k1, l1));
                     aint[0] += j1;
                     aint[1] += k1;
                     aint[2] += l1;
                     ++j;
                 }
             }
         }
 
-        if (itemarmor == null)
-        {
+        if (itemarmor == null) {
             return null;
-        }
-        else
-        {
+        } else {
             k = aint[0] / j;
             int i1 = aint[1] / j;
             l = aint[2] / j;
-            f = (float)i / (float)j;
-            f1 = (float)Math.max(k, Math.max(i1, l));
-            k = (int)((float)k * f / f1);
-            i1 = (int)((float)i1 * f / f1);
-            l = (int)((float)l * f / f1);
+            f = (float) i / (float) j;
+            f1 = (float) Math.max(k, Math.max(i1, l));
+            k = (int) ((float) k * f / f1);
+            i1 = (int) ((float) i1 * f / f1);
+            l = (int) ((float) l * f / f1);
             l1 = (k << 8) + i1;
             l1 = (l1 << 8) + l;
             itemarmor.setColor(itemstack, l1);
             return itemstack;
         }
     }
 
-    public int getRecipeSize()
-    {
+    public int getRecipeSize() {
         return 10;
     }
 
-    public ItemStack getRecipeOutput()
-    {
+    public ItemStack getRecipeOutput() {
         return null;
     }
 
-    public ItemStack[] getRemainingItems(InventoryCrafting p_179532_1_)
-    {
+    public ItemStack[] getRemainingItems(InventoryCrafting p_179532_1_) {
         ItemStack[] aitemstack = new ItemStack[p_179532_1_.getSizeInventory()];
 
-        for (int i = 0; i < aitemstack.length; ++i)
-        {
+        for (int i = 0; i < aitemstack.length; ++i) {
             ItemStack itemstack = p_179532_1_.getStackInSlot(i);
 
-            if (itemstack != null && itemstack.getItem().hasContainerItem())
-            {
+            if (itemstack != null && itemstack.getItem().hasContainerItem()) {
                 aitemstack[i] = new ItemStack(itemstack.getItem().getContainerItem());
             }
         }
 
         return aitemstack;
