--- decompiled\net\minecraft\item\crafting\RecipesMapCloning.java
+++ src\main\java\net\minecraft\item\crafting\RecipesMapCloning.java
@@ -3,38 +3,36 @@
 import net.minecraft.init.Items;
 import net.minecraft.inventory.InventoryCrafting;
 import net.minecraft.item.ItemStack;
 import net.minecraft.world.World;
 
-public class RecipesMapCloning implements IRecipe
-{
+public class RecipesMapCloning extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
+
     private static final String __OBFID = "CL_00000087";
 
-    public boolean matches(InventoryCrafting p_77569_1_, World worldIn)
-    {
+    // CraftBukkit start - Delegate to new parent class
+    public RecipesMapCloning() {
+        super(new ItemStack(Items.map, 0, -1), java.util.Arrays.asList(new ItemStack(Items.map, 0, 0)));
+    }
+    // CraftBukkit end
+
+    public boolean matches(InventoryCrafting p_77569_1_, World worldIn) {
         int i = 0;
         ItemStack itemstack = null;
 
-        for (int j = 0; j < p_77569_1_.getSizeInventory(); ++j)
-        {
+        for (int j = 0; j < p_77569_1_.getSizeInventory(); ++j) {
             ItemStack itemstack1 = p_77569_1_.getStackInSlot(j);
 
-            if (itemstack1 != null)
-            {
-                if (itemstack1.getItem() == Items.filled_map)
-                {
-                    if (itemstack != null)
-                    {
+            if (itemstack1 != null) {
+                if (itemstack1.getItem() == Items.filled_map) {
+                    if (itemstack != null) {
                         return false;
                     }
 
                     itemstack = itemstack1;
-                }
-                else
-                {
-                    if (itemstack1.getItem() != Items.map)
-                    {
+                } else {
+                    if (itemstack1.getItem() != Items.map) {
                         return false;
                     }
 
                     ++i;
                 }
@@ -42,79 +40,62 @@
         }
 
         return itemstack != null && i > 0;
     }
 
-    public ItemStack getCraftingResult(InventoryCrafting p_77572_1_)
-    {
+    public ItemStack getCraftingResult(InventoryCrafting p_77572_1_) {
         int i = 0;
         ItemStack itemstack = null;
 
-        for (int j = 0; j < p_77572_1_.getSizeInventory(); ++j)
-        {
+        for (int j = 0; j < p_77572_1_.getSizeInventory(); ++j) {
             ItemStack itemstack1 = p_77572_1_.getStackInSlot(j);
 
-            if (itemstack1 != null)
-            {
-                if (itemstack1.getItem() == Items.filled_map)
-                {
-                    if (itemstack != null)
-                    {
+            if (itemstack1 != null) {
+                if (itemstack1.getItem() == Items.filled_map) {
+                    if (itemstack != null) {
                         return null;
                     }
 
                     itemstack = itemstack1;
-                }
-                else
-                {
-                    if (itemstack1.getItem() != Items.map)
-                    {
+                } else {
+                    if (itemstack1.getItem() != Items.map) {
                         return null;
                     }
 
                     ++i;
                 }
             }
         }
 
-        if (itemstack != null && i >= 1)
-        {
+        if (itemstack != null && i >= 1) {
             ItemStack itemstack2 = new ItemStack(Items.filled_map, i + 1, itemstack.getMetadata());
 
-            if (itemstack.hasDisplayName())
-            {
+            if (itemstack.hasDisplayName()) {
                 itemstack2.setStackDisplayName(itemstack.getDisplayName());
             }
 
             return itemstack2;
-        }
-        else
-        {
+        } else {
             return null;
         }
     }
 
-    public int getRecipeSize()
-    {
+    public int getRecipeSize() {
         return 9;
     }
 
-    public ItemStack getRecipeOutput()
-    {
+    public ItemStack getRecipeOutput() {
         return null;
     }
 
-    public ItemStack[] getRemainingItems(InventoryCrafting p_179532_1_)
-    {
+    public ItemStack[] getRemainingItems(InventoryCrafting p_179532_1_) {
         ItemStack[] aitemstack = new ItemStack[p_179532_1_.getSizeInventory()];
 
-        for (int i = 0; i < aitemstack.length; ++i)
-        {
+        for (int i = 0; i < aitemstack.length; ++i) {
             ItemStack itemstack = p_179532_1_.getStackInSlot(i);
 
-            if (itemstack != null && itemstack.getItem().hasContainerItem())
-            {
+            if (itemstack != null && itemstack.getItem().hasContainerItem()) {
                 aitemstack[i] = new ItemStack(itemstack.getItem().getContainerItem());
             }
         }
 
         return aitemstack;
