--- decompiled\net\minecraft\item\crafting\CraftingManager.java
+++ src\main\java\net\minecraft\item\crafting\CraftingManager.java
@@ -1,15 +1,14 @@
 package net.minecraft.item.crafting;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockPlanks;
 import net.minecraft.block.BlockStone;
 import net.minecraft.block.BlockStoneSlab;
 import net.minecraft.block.BlockStoneSlabNew;
@@ -20,22 +19,33 @@
 import net.minecraft.item.EnumDyeColor;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.world.World;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.inventory.InventoryView;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
 public class CraftingManager
 {
+
     private static final CraftingManager instance = new CraftingManager();
-    private final List recipes = Lists.newArrayList();
+    public List recipes = Lists.newArrayList(); // SpigotMCP -- Apply access transformtion
     private static final String __OBFID = "CL_00000090";
+    // CraftBukkit start
+    public IRecipe lastRecipe;
+    public InventoryView lastCraftView;
+    // CraftBukkit end
 
     public static CraftingManager getInstance()
     {
         return instance;
     }
 
-    private CraftingManager()
+    public CraftingManager()   // SpigotMCP -- Apply access transformation
     {
         (new RecipesTools()).addRecipes(this);
         (new RecipesWeapons()).addRecipes(this);
         (new RecipesIngots()).addRecipes(this);
         (new RecipesFood()).addRecipes(this);
@@ -181,10 +191,30 @@
         this.addShapelessRecipe(new ItemStack(Items.fire_charge, 3), new Object[] {Items.gunpowder, Items.blaze_powder, Items.coal});
         this.addShapelessRecipe(new ItemStack(Items.fire_charge, 3), new Object[] {Items.gunpowder, Items.blaze_powder, new ItemStack(Items.coal, 1, 1)});
         this.addRecipe(new ItemStack(Blocks.daylight_detector), new Object[] {"GGG", "QQQ", "WWW", 'G', Blocks.glass, 'Q', Items.quartz, 'W', Blocks.wooden_slab});
         this.addRecipe(new ItemStack(Blocks.hopper), new Object[] {"I I", "ICI", " I ", 'I', Items.iron_ingot, 'C', Blocks.chest});
         this.addRecipe(new ItemStack(Items.armor_stand, 1), new Object[] {"///", " / ", "/_/", '/', Items.stick, '_', new ItemStack(Blocks.stone_slab, 1, BlockStoneSlab.EnumType.STONE.getMetadata())});
+        /* CraftBukkit Start - moved below
+        Collections.sort(this.recipes, new Comparator() {
+
+            private static final String __OBFID = "CL_00000091";
+
+            public int compare(IRecipe p_compare_1_, IRecipe p_compare_2_) {
+                return p_compare_1_ instanceof ShapelessRecipes && p_compare_2_ instanceof ShapedRecipes ? 1 : (p_compare_2_ instanceof ShapelessRecipes && p_compare_1_ instanceof ShapedRecipes ? -1 : (p_compare_2_.getRecipeSize() < p_compare_1_.getRecipeSize() ? -1 : (p_compare_2_.getRecipeSize() > p_compare_1_.getRecipeSize() ? 1 : 0)));
+            }
+
+            public int compare(Object p_compare_1_, Object p_compare_2_) {
+                return this.compare((IRecipe) p_compare_1_, (IRecipe) p_compare_2_);
+            }
+        });
+        */ // CraftBukkit End
+    }
+
+    // CraftBukkit start
+    public void sort()
+    {
+        // SpigotMCP Start -- Use annonomous inner class
         Collections.sort(this.recipes, new Comparator()
         {
             private static final String __OBFID = "CL_00000091";
             public int compare(IRecipe p_compare_1_, IRecipe p_compare_2_)
             {
@@ -193,13 +223,15 @@
             public int compare(Object p_compare_1_, Object p_compare_2_)
             {
                 return this.compare((IRecipe)p_compare_1_, (IRecipe)p_compare_2_);
             }
         });
+        // SpigotMCP End
     }
+    // CraftBukkit end
 
-    public ShapedRecipes addRecipe(ItemStack stack, Object ... recipeComponents)
+    public ShapedRecipes addRecipe(ItemStack stack, Object... recipeComponents)
     {
         String s = "";
         int i = 0;
         int j = 0;
         int k = 0;
@@ -269,11 +301,11 @@
         ShapedRecipes shapedrecipes = new ShapedRecipes(j, k, aitemstack, stack);
         this.recipes.add(shapedrecipes);
         return shapedrecipes;
     }
 
-    public void addShapelessRecipe(ItemStack stack, Object ... recipeComponents)
+    public void addShapelessRecipe(ItemStack stack, Object... recipeComponents)
     {
         ArrayList arraylist = Lists.newArrayList();
         Object[] aobject = recipeComponents;
         int i = recipeComponents.length;
 
@@ -315,18 +347,23 @@
 
         do
         {
             if (!iterator.hasNext())
             {
+                p_82787_1_.currentRecipe = null; // CraftBukkit - Clear recipe when no recipe is found
                 return null;
             }
 
             irecipe = (IRecipe)iterator.next();
         }
         while (!irecipe.matches(p_82787_1_, worldIn));
 
-        return irecipe.getCraftingResult(p_82787_1_);
+        // CraftBukkit start - INVENTORY_PRE_CRAFT event
+        p_82787_1_.currentRecipe = irecipe;
+        ItemStack result = irecipe.getCraftingResult(p_82787_1_);
+        return CraftEventFactory.callPreCraftEvent(p_82787_1_, result, lastCraftView, false);
+        // CraftBukkit end
     }
 
     public ItemStack[] func_180303_b(InventoryCrafting p_180303_1_, World worldIn)
     {
         Iterator iterator = this.recipes.iterator();
