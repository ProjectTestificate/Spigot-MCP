---a/net/minecraft/item/crafting/RecipeRepairItem.java
+++b/net/minecraft/item/crafting/RecipeRepairItem.java
@@ -1,33 +1,37 @@
 package net.minecraft.item.crafting;
 
-import com.google.common.collect.Lists;
 import java.util.ArrayList;
+
+import net.minecraft.init.Items;
 import net.minecraft.inventory.InventoryCrafting;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.world.World;
 
-public class RecipeRepairItem implements IRecipe
-{
+import com.google.common.collect.Lists;
+
+public class RecipeRepairItem extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
+
     private static final String __OBFID = "CL_00002156";
 
-    public boolean matches(InventoryCrafting p_77569_1_, World worldIn)
-    {
+    // CraftBukkit start - Delegate to new parent class
+    public RecipeRepairItem() {
+        super(new ItemStack(Items.leather_helmet), java.util.Arrays.asList(new ItemStack(Items.leather_helmet)));
+    }
+    // CraftBukkit end
+
+    public boolean matches(InventoryCrafting p_77569_1_, World worldIn) {
         ArrayList arraylist = Lists.newArrayList();
 
-        for (int i = 0; i < p_77569_1_.getSizeInventory(); ++i)
-        {
+        for (int i = 0; i < p_77569_1_.getSizeInventory(); ++i) {
             ItemStack itemstack = p_77569_1_.getStackInSlot(i);
 
-            if (itemstack != null)
-            {
+            if (itemstack != null) {
                 arraylist.add(itemstack);
 
-                if (arraylist.size() > 1)
-                {
-                    ItemStack itemstack1 = (ItemStack)arraylist.get(0);
+                if (arraylist.size() > 1) {
+                    ItemStack itemstack1 = (ItemStack) arraylist.get(0);
 
-                    if (itemstack.getItem() != itemstack1.getItem() || itemstack1.stackSize != 1 || itemstack.stackSize != 1 || !itemstack1.getItem().isDamageable())
-                    {
+                    if (itemstack.getItem() != itemstack1.getItem() || itemstack1.stackSize != 1 || itemstack.stackSize != 1 || !itemstack1.getItem().isDamageable()) {
                         return false;
                     }
                 }
@@ -38,46 +38,38 @@
         return arraylist.size() == 2;
     }
 
-    public ItemStack getCraftingResult(InventoryCrafting p_77572_1_)
-    {
+    public ItemStack getCraftingResult(InventoryCrafting p_77572_1_) {
         ArrayList arraylist = Lists.newArrayList();
         ItemStack itemstack;
 
-        for (int i = 0; i < p_77572_1_.getSizeInventory(); ++i)
-        {
+        for (int i = 0; i < p_77572_1_.getSizeInventory(); ++i) {
             itemstack = p_77572_1_.getStackInSlot(i);
 
-            if (itemstack != null)
-            {
+            if (itemstack != null) {
                 arraylist.add(itemstack);
 
-                if (arraylist.size() > 1)
-                {
-                    ItemStack itemstack1 = (ItemStack)arraylist.get(0);
+                if (arraylist.size() > 1) {
+                    ItemStack itemstack1 = (ItemStack) arraylist.get(0);
 
-                    if (itemstack.getItem() != itemstack1.getItem() || itemstack1.stackSize != 1 || itemstack.stackSize != 1 || !itemstack1.getItem().isDamageable())
-                    {
+                    if (itemstack.getItem() != itemstack1.getItem() || itemstack1.stackSize != 1 || itemstack.stackSize != 1 || !itemstack1.getItem().isDamageable()) {
                         return null;
                     }
                 }
             }
         }
 
-        if (arraylist.size() == 2)
-        {
-            ItemStack itemstack2 = (ItemStack)arraylist.get(0);
-            itemstack = (ItemStack)arraylist.get(1);
+        if (arraylist.size() == 2) {
+            ItemStack itemstack2 = (ItemStack) arraylist.get(0);
+            itemstack = (ItemStack) arraylist.get(1);
 
-            if (itemstack2.getItem() == itemstack.getItem() && itemstack2.stackSize == 1 && itemstack.stackSize == 1 && itemstack2.getItem().isDamageable())
-            {
+            if (itemstack2.getItem() == itemstack.getItem() && itemstack2.stackSize == 1 && itemstack.stackSize == 1 && itemstack2.getItem().isDamageable()) {
                 Item item = itemstack2.getItem();
                 int j = item.getMaxDamage() - itemstack2.getItemDamage();
                 int k = item.getMaxDamage() - itemstack.getItemDamage();
                 int l = j + k + item.getMaxDamage() * 5 / 100;
                 int i1 = item.getMaxDamage() - l;
 
-                if (i1 < 0)
-                {
+                if (i1 < 0) {
                     i1 = 0;
                 }
 
@@ -88,31 +88,25 @@
         return null;
     }
 
-    public int getRecipeSize()
-    {
+    public int getRecipeSize() {
         return 4;
     }
 
-    public ItemStack getRecipeOutput()
-    {
+    public ItemStack getRecipeOutput() {
         return null;
     }
 
-    public ItemStack[] getRemainingItems(InventoryCrafting p_179532_1_)
-    {
+    public ItemStack[] getRemainingItems(InventoryCrafting p_179532_1_) {
         ItemStack[] aitemstack = new ItemStack[p_179532_1_.getSizeInventory()];
 
-        for (int i = 0; i < aitemstack.length; ++i)
-        {
+        for (int i = 0; i < aitemstack.length; ++i) {
             ItemStack itemstack = p_179532_1_.getStackInSlot(i);
 
-            if (itemstack != null && itemstack.getItem().hasContainerItem())
-            {
+            if (itemstack != null && itemstack.getItem().hasContainerItem()) {
                 aitemstack[i] = new ItemStack(itemstack.getItem().getContainerItem());
             }
         }
 
         return aitemstack;
     }
-}
+}
