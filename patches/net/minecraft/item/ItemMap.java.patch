--- decompiled\net\minecraft\item\ItemMap.java
+++ src\main\java\net\minecraft\item\ItemMap.java
@@ -1,11 +1,7 @@
 package net.minecraft.item;
 
-import com.google.common.collect.HashMultiset;
-import com.google.common.collect.Iterables;
-import com.google.common.collect.Multisets;
-import java.util.List;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockDirt;
 import net.minecraft.block.BlockStone;
 import net.minecraft.block.material.MapColor;
 import net.minecraft.block.state.IBlockState;
@@ -15,62 +11,60 @@
 import net.minecraft.init.Items;
 import net.minecraft.network.Packet;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
+import net.minecraft.world.WorldServer;
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.storage.MapData;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import org.bukkit.Bukkit;
+import org.bukkit.event.server.MapInitializeEvent;
+
+import com.google.common.collect.HashMultiset;
+import com.google.common.collect.Iterables;
+import com.google.common.collect.Multisets;
+
 public class ItemMap extends ItemMapBase
 {
+
     private static final String __OBFID = "CL_00000047";
 
     protected ItemMap()
     {
         this.setHasSubtypes(true);
     }
 
-    @SideOnly(Side.CLIENT)
-    public static MapData loadMapData(int mapId, World worldIn)
-    {
-        String s = "map_" + mapId;
-        MapData mapdata = (MapData)worldIn.loadItemData(MapData.class, s);
-
-        if (mapdata == null)
-        {
-            mapdata = new MapData(s);
-            worldIn.setItemData(s, mapdata);
-        }
-
-        return mapdata;
-    }
-
     public MapData getMapData(ItemStack stack, World worldIn)
     {
+        World worldMain = worldIn.getServer().getServer().worlds.get(0); // CraftBukkit - store reference to primary world
         String s = "map_" + stack.getMetadata();
-        MapData mapdata = (MapData)worldIn.loadItemData(MapData.class, s);
+        MapData mapdata = (MapData)worldMain.loadItemData(MapData.class, s); // CraftBukkit - use primary world for maps
 
         if (mapdata == null && !worldIn.isRemote)
         {
-            stack.setItemDamage(worldIn.getUniqueDataId("map"));
+            stack.setItemDamage(worldMain.getUniqueDataId("map")); // CraftBukkit - use primary world for maps
             s = "map_" + stack.getMetadata();
             mapdata = new MapData(s);
             mapdata.scale = 3;
             mapdata.func_176054_a((double)worldIn.getWorldInfo().getSpawnX(), (double)worldIn.getWorldInfo().getSpawnZ(), mapdata.scale);
-            mapdata.dimension = (byte)worldIn.provider.getDimensionId();
+            mapdata.dimension = (byte)((WorldServer)worldIn).dimension;  // CraftBukkit - fixes Bukkit multiworld maps
             mapdata.markDirty();
-            worldIn.setItemData(s, mapdata);
+            worldMain.setItemData(s, mapdata); // CraftBukkit - use primary world for maps
+            // CraftBukkit start
+            MapInitializeEvent event = new MapInitializeEvent(mapdata.mapView);
+            Bukkit.getServer().getPluginManager().callEvent(event);
+            // CraftBukkit end
         }
 
         return mapdata;
     }
 
     public void updateMapData(World worldIn, Entity viewer, MapData data)
     {
-        if (worldIn.provider.getDimensionId() == data.dimension && viewer instanceof EntityPlayer)
+        // CraftBukkit - world.worldProvider -> ((WorldServer) world)
+        if (((WorldServer)worldIn).dimension == data.dimension && viewer instanceof EntityPlayer)
         {
             int i = 1 << data.scale;
             int j = data.xCenter;
             int k = data.zCenter;
             int l = MathHelper.floor_double(viewer.posX - (double)j) / i + 64;
@@ -248,10 +242,11 @@
     public void onCreated(ItemStack stack, World worldIn, EntityPlayer playerIn)
     {
         if (stack.hasTagCompound() && stack.getTagCompound().getBoolean("map_is_scaling"))
         {
             MapData mapdata = Items.filled_map.getMapData(stack, worldIn);
+            worldIn = worldIn.getServer().getServer().worlds.get(0); // CraftBukkit - use primary world for maps
             stack.setItemDamage(worldIn.getUniqueDataId("map"));
             MapData mapdata1 = new MapData("map_" + stack.getMetadata());
             mapdata1.scale = (byte)(mapdata.scale + 1);
 
             if (mapdata1.scale > 4)
@@ -261,27 +256,12 @@
 
             mapdata1.func_176054_a((double)mapdata.xCenter, (double)mapdata.zCenter, mapdata1.scale);
             mapdata1.dimension = mapdata.dimension;
             mapdata1.markDirty();
             worldIn.setItemData("map_" + stack.getMetadata(), mapdata1);
+            // CraftBukkit start
+            MapInitializeEvent event = new MapInitializeEvent(mapdata1.mapView);
+            Bukkit.getServer().getPluginManager().callEvent(event);
+            // CraftBukkit end
         }
     }
-
-    @SideOnly(Side.CLIENT)
-    public void addInformation(ItemStack stack, EntityPlayer playerIn, List tooltip, boolean advanced)
-    {
-        MapData mapdata = this.getMapData(stack, playerIn.worldObj);
-
-        if (advanced)
-        {
-            if (mapdata == null)
-            {
-                tooltip.add("Unknown map");
-            }
-            else
-            {
-                tooltip.add("Scaling at 1:" + (1 << mapdata.scale));
-                tooltip.add("(Level " + mapdata.scale + "/" + 4 + ")");
-            }
-        }
-    }
 }
