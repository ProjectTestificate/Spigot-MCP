---a/net/minecraft/item/ItemPotion.java
+++b/net/minecraft/item/ItemPotion.java
@@ -1,72 +1,56 @@
 package net.minecraft.item;
 
-import com.google.common.collect.HashMultimap;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import java.util.Map.Entry;
+
 import net.minecraft.creativetab.CreativeTabs;
-import net.minecraft.entity.ai.attributes.AttributeModifier;
-import net.minecraft.entity.ai.attributes.IAttribute;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.projectile.EntityPotion;
 import net.minecraft.init.Items;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
-import net.minecraft.potion.Potion;
 import net.minecraft.potion.PotionEffect;
 import net.minecraft.potion.PotionHelper;
 import net.minecraft.stats.StatList;
-import net.minecraft.util.EnumChatFormatting;
 import net.minecraft.util.StatCollector;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class ItemPotion extends Item
-{
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
+public class ItemPotion extends Item {
+
     private Map effectCache = Maps.newHashMap();
     private static final Map SUB_ITEMS_CACHE = Maps.newLinkedHashMap();
     private static final String __OBFID = "CL_00000055";
 
-    public ItemPotion()
-    {
+    public ItemPotion() {
         this.setMaxStackSize(1);
         this.setHasSubtypes(true);
         this.setMaxDamage(0);
         this.setCreativeTab(CreativeTabs.tabBrewing);
     }
 
-    public List getEffects(ItemStack stack)
-    {
-        if (stack.hasTagCompound() && stack.getTagCompound().hasKey("CustomPotionEffects", 9))
-        {
+    public List getEffects(ItemStack stack) {
+        if (stack.hasTagCompound() && stack.getTagCompound().hasKey("CustomPotionEffects", 9)) {
             ArrayList arraylist = Lists.newArrayList();
             NBTTagList nbttaglist = stack.getTagCompound().getTagList("CustomPotionEffects", 10);
 
-            for (int i = 0; i < nbttaglist.tagCount(); ++i)
-            {
+            for (int i = 0; i < nbttaglist.tagCount(); ++i) {
                 NBTTagCompound nbttagcompound = nbttaglist.getCompoundTagAt(i);
                 PotionEffect potioneffect = PotionEffect.readCustomPotionEffectFromNBT(nbttagcompound);
 
-                if (potioneffect != null)
-                {
+                if (potioneffect != null) {
                     arraylist.add(potioneffect);
                 }
             }
 
             return arraylist;
-        }
-        else
-        {
-            List list = (List)this.effectCache.get(Integer.valueOf(stack.getMetadata()));
+        } else {
+            List list = (List) this.effectCache.get(Integer.valueOf(stack.getMetadata()));
 
-            if (list == null)
-            {
+            if (list == null) {
                 list = PotionHelper.getPotionEffects(stack.getMetadata(), false);
                 this.effectCache.put(Integer.valueOf(stack.getMetadata()), list);
             }
@@ -74,13 +74,11 @@
         }
     }
 
-    public List getEffects(int meta)
-    {
-        List list = (List)this.effectCache.get(Integer.valueOf(meta));
+    public List getEffects(int meta) {
+        List list = (List) this.effectCache.get(Integer.valueOf(meta));
 
-        if (list == null)
-        {
+        if (list == null) {
             list = PotionHelper.getPotionEffects(meta, false);
             this.effectCache.put(Integer.valueOf(meta), list);
         }
@@ -87,25 +87,19 @@
         return list;
     }
 
-    public ItemStack onItemUseFinish(ItemStack stack, World worldIn, EntityPlayer playerIn)
-    {
-        if (!playerIn.capabilities.isCreativeMode)
-        {
+    public ItemStack onItemUseFinish(ItemStack stack, World worldIn, EntityPlayer playerIn) {
+        if (!playerIn.capabilities.isCreativeMode) {
             --stack.stackSize;
         }
 
-        if (!worldIn.isRemote)
-        {
+        if (!worldIn.isRemote) {
             List list = this.getEffects(stack);
 
-            if (list != null)
-            {
+            if (list != null) {
                 Iterator iterator = list.iterator();
 
-                while (iterator.hasNext())
-                {
-                    PotionEffect potioneffect = (PotionEffect)iterator.next();
+                while (iterator.hasNext()) {
+                    PotionEffect potioneffect = (PotionEffect) iterator.next();
                     playerIn.addPotionEffect(new PotionEffect(potioneffect));
                 }
             }
@@ -112,10 +112,8 @@
 
         playerIn.triggerAchievement(StatList.objectUseStats[Item.getIdFromItem(this)]);
 
-        if (!playerIn.capabilities.isCreativeMode)
-        {
-            if (stack.stackSize <= 0)
-            {
+        if (!playerIn.capabilities.isCreativeMode) {
+            if (stack.stackSize <= 0) {
                 return new ItemStack(Items.glass_bottle);
             }
 
@@ -125,90 +125,60 @@
         return stack;
     }
 
-    public int getMaxItemUseDuration(ItemStack stack)
-    {
+    public int getMaxItemUseDuration(ItemStack stack) {
         return 32;
     }
 
-    public EnumAction getItemUseAction(ItemStack stack)
-    {
+    public EnumAction getItemUseAction(ItemStack stack) {
         return EnumAction.DRINK;
     }
 
-    public ItemStack onItemRightClick(ItemStack itemStackIn, World worldIn, EntityPlayer playerIn)
-    {
-        if (isSplash(itemStackIn.getMetadata()))
-        {
-            if (!playerIn.capabilities.isCreativeMode)
-            {
+    public ItemStack onItemRightClick(ItemStack itemStackIn, World worldIn, EntityPlayer playerIn) {
+        if (isSplash(itemStackIn.getMetadata())) {
+            if (!playerIn.capabilities.isCreativeMode) {
                 --itemStackIn.stackSize;
             }
 
             worldIn.playSoundAtEntity(playerIn, "random.bow", 0.5F, 0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
 
-            if (!worldIn.isRemote)
-            {
+            if (!worldIn.isRemote) {
                 worldIn.spawnEntityInWorld(new EntityPotion(worldIn, playerIn, itemStackIn));
             }
 
             playerIn.triggerAchievement(StatList.objectUseStats[Item.getIdFromItem(this)]);
             return itemStackIn;
-        }
-        else
-        {
+        } else {
             playerIn.setItemInUse(itemStackIn, this.getMaxItemUseDuration(itemStackIn));
             return itemStackIn;
         }
     }
 
-    public static boolean isSplash(int meta)
-    {
+    public static boolean isSplash(int meta) {
         return (meta & 16384) != 0;
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getColorFromDamage(int meta)
-    {
-        return PotionHelper.getLiquidColor(meta, false);
-    }
-
-    @SideOnly(Side.CLIENT)
-    public int getColorFromItemStack(ItemStack stack, int renderPass)
-    {
-        return renderPass > 0 ? 16777215 : this.getColorFromDamage(stack.getMetadata());
-    }
-
-    public String getItemStackDisplayName(ItemStack stack)
-    {
-        if (stack.getMetadata() == 0)
-        {
+    public String getItemStackDisplayName(ItemStack stack) {
+        if (stack.getMetadata() == 0) {
             return StatCollector.translateToLocal("item.emptyPotion.name").trim();
-        }
-        else
-        {
+        } else {
             String s = "";
 
-            if (isSplash(stack.getMetadata()))
-            {
+            if (isSplash(stack.getMetadata())) {
                 s = StatCollector.translateToLocal("potion.prefix.grenade").trim() + " ";
             }
 
             List list = Items.potionitem.getEffects(stack);
             String s1;
 
-            if (list != null && !list.isEmpty())
-            {
-                s1 = ((PotionEffect)list.get(0)).getEffectName();
+            if (list != null && !list.isEmpty()) {
+                s1 = ((PotionEffect) list.get(0)).getEffectName();
                 s1 = s1 + ".postfix";
                 return s + StatCollector.translateToLocal(s1).trim();
-            }
-            else
-            {
+            } else {
                 s1 = PotionHelper.getPotionPrefix(stack.getMetadata());
                 return StatCollector.translateToLocal(s1).trim() + " " + super.getItemStackDisplayName(stack);
             }
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean isEffectInstant(int meta)
-    {
-        List list = this.getEffects(meta);
-
-        if (list != null && !list.isEmpty())
-        {
-            Iterator iterator = list.iterator();
-            PotionEffect potioneffect;
-
-            do
-            {
-                if (!iterator.hasNext())
-                {
-                    return false;
-                }
-
-                potioneffect = (PotionEffect)iterator.next();
-            }
-            while (!Potion.potionTypes[potioneffect.getPotionID()].isInstant());
-
-            return true;
-        }
-        else
-        {
-            return false;
-        }
-    }
-
-    @SideOnly(Side.CLIENT)
-    public void addInformation(ItemStack stack, EntityPlayer playerIn, List tooltip, boolean advanced)
-    {
-        if (stack.getMetadata() != 0)
-        {
-            List list1 = Items.potionitem.getEffects(stack);
-            HashMultimap hashmultimap = HashMultimap.create();
-            Iterator iterator1;
-
-            if (list1 != null && !list1.isEmpty())
-            {
-                iterator1 = list1.iterator();
-
-                while (iterator1.hasNext())
-                {
-                    PotionEffect potioneffect = (PotionEffect)iterator1.next();
-                    String s1 = StatCollector.translateToLocal(potioneffect.getEffectName()).trim();
-                    Potion potion = Potion.potionTypes[potioneffect.getPotionID()];
-                    Map map = potion.getAttributeModifierMap();
-
-                    if (map != null && map.size() > 0)
-                    {
-                        Iterator iterator = map.entrySet().iterator();
-
-                        while (iterator.hasNext())
-                        {
-                            Entry entry = (Entry)iterator.next();
-                            AttributeModifier attributemodifier = (AttributeModifier)entry.getValue();
-                            AttributeModifier attributemodifier1 = new AttributeModifier(attributemodifier.getName(), potion.getAttributeModifierAmount(potioneffect.getAmplifier(), attributemodifier), attributemodifier.getOperation());
-                            hashmultimap.put(((IAttribute)entry.getKey()).getAttributeUnlocalizedName(), attributemodifier1);
-                        }
-                    }
-
-                    if (potioneffect.getAmplifier() > 0)
-                    {
-                        s1 = s1 + " " + StatCollector.translateToLocal("potion.potency." + potioneffect.getAmplifier()).trim();
-                    }
-
-                    if (potioneffect.getDuration() > 20)
-                    {
-                        s1 = s1 + " (" + Potion.getDurationString(potioneffect) + ")";
-                    }
-
-                    if (potion.isBadEffect())
-                    {
-                        tooltip.add(EnumChatFormatting.RED + s1);
-                    }
-                    else
-                    {
-                        tooltip.add(EnumChatFormatting.GRAY + s1);
-                    }
-                }
-            }
-            else
-            {
-                String s = StatCollector.translateToLocal("potion.empty").trim();
-                tooltip.add(EnumChatFormatting.GRAY + s);
-            }
-
-            if (!hashmultimap.isEmpty())
-            {
-                tooltip.add("");
-                tooltip.add(EnumChatFormatting.DARK_PURPLE + StatCollector.translateToLocal("potion.effects.whenDrank"));
-                iterator1 = hashmultimap.entries().iterator();
-
-                while (iterator1.hasNext())
-                {
-                    Entry entry1 = (Entry)iterator1.next();
-                    AttributeModifier attributemodifier2 = (AttributeModifier)entry1.getValue();
-                    double d0 = attributemodifier2.getAmount();
-                    double d1;
-
-                    if (attributemodifier2.getOperation() != 1 && attributemodifier2.getOperation() != 2)
-                    {
-                        d1 = attributemodifier2.getAmount();
-                    }
-                    else
-                    {
-                        d1 = attributemodifier2.getAmount() * 100.0D;
-                    }
-
-                    if (d0 > 0.0D)
-                    {
-                        tooltip.add(EnumChatFormatting.BLUE + StatCollector.translateToLocalFormatted("attribute.modifier.plus." + attributemodifier2.getOperation(), new Object[] {ItemStack.DECIMALFORMAT.format(d1), StatCollector.translateToLocal("attribute.name." + (String)entry1.getKey())}));
-                    }
-                    else if (d0 < 0.0D)
-                    {
-                        d1 *= -1.0D;
-                        tooltip.add(EnumChatFormatting.RED + StatCollector.translateToLocalFormatted("attribute.modifier.take." + attributemodifier2.getOperation(), new Object[] {ItemStack.DECIMALFORMAT.format(d1), StatCollector.translateToLocal("attribute.name." + (String)entry1.getKey())}));
-                    }
-                }
-            }
-        }
-    }
-
-    @SideOnly(Side.CLIENT)
-    public boolean hasEffect(ItemStack stack)
-    {
-        List list = this.getEffects(stack);
-        return list != null && !list.isEmpty();
-    }
-
-    @SideOnly(Side.CLIENT)
-    public void getSubItems(Item itemIn, CreativeTabs tab, List subItems)
-    {
-        super.getSubItems(itemIn, tab, subItems);
-        int j;
-
-        if (SUB_ITEMS_CACHE.isEmpty())
-        {
-            for (int i = 0; i <= 15; ++i)
-            {
-                for (j = 0; j <= 1; ++j)
-                {
-                    int k;
-
-                    if (j == 0)
-                    {
-                        k = i | 8192;
-                    }
-                    else
-                    {
-                        k = i | 16384;
-                    }
-
-                    for (int l = 0; l <= 2; ++l)
-                    {
-                        int i1 = k;
-
-                        if (l != 0)
-                        {
-                            if (l == 1)
-                            {
-                                i1 = k | 32;
-                            }
-                            else if (l == 2)
-                            {
-                                i1 = k | 64;
-                            }
-                        }
-
-                        List list1 = PotionHelper.getPotionEffects(i1, false);
-
-                        if (list1 != null && !list1.isEmpty())
-                        {
-                            SUB_ITEMS_CACHE.put(list1, Integer.valueOf(i1));
-                        }
-                    }
-                }
-            }
-        }
-
-        Iterator iterator = SUB_ITEMS_CACHE.values().iterator();
-
-        while (iterator.hasNext())
-        {
-            j = ((Integer)iterator.next()).intValue();
-            subItems.add(new ItemStack(itemIn, 1, j));
-        }
-    }
-}
+}
