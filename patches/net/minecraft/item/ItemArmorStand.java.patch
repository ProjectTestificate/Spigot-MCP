---a/net/minecraft/item/ItemArmorStand.java
+++b/net/minecraft/item/ItemArmorStand.java
@@ -2,6 +2,7 @@
 
 import java.util.List;
 import java.util.Random;
+
 import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.item.EntityArmorStand;
@@ -14,65 +14,50 @@
 import net.minecraft.util.Rotations;
 import net.minecraft.world.World;
 
-public class ItemArmorStand extends Item
-{
+public class ItemArmorStand extends Item {
+
     private static final String __OBFID = "CL_00002182";
 
-    public ItemArmorStand()
-    {
+    public ItemArmorStand() {
         this.setCreativeTab(CreativeTabs.tabDecorations);
     }
 
-    public boolean onItemUse(ItemStack stack, EntityPlayer playerIn, World worldIn, BlockPos pos, EnumFacing side, float hitX, float hitY, float hitZ)
-    {
-        if (side == EnumFacing.DOWN)
-        {
+    public boolean onItemUse(ItemStack stack, EntityPlayer playerIn, World worldIn, BlockPos pos, EnumFacing side, float hitX, float hitY, float hitZ) {
+        if (side == EnumFacing.DOWN) {
             return false;
-        }
-        else
-        {
+        } else {
             boolean flag = worldIn.getBlockState(pos).getBlock().isReplaceable(worldIn, pos);
             BlockPos blockpos1 = flag ? pos : pos.offset(side);
 
-            if (!playerIn.canPlayerEdit(blockpos1, side, stack))
-            {
+            if (!playerIn.canPlayerEdit(blockpos1, side, stack)) {
                 return false;
-            }
-            else
-            {
+            } else {
                 BlockPos blockpos2 = blockpos1.up();
                 boolean flag1 = !worldIn.isAirBlock(blockpos1) && !worldIn.getBlockState(blockpos1).getBlock().isReplaceable(worldIn, blockpos1);
                 flag1 |= !worldIn.isAirBlock(blockpos2) && !worldIn.getBlockState(blockpos2).getBlock().isReplaceable(worldIn, blockpos2);
 
-                if (flag1)
-                {
+                if (flag1) {
                     return false;
-                }
-                else
-                {
-                    double d0 = (double)blockpos1.getX();
-                    double d1 = (double)blockpos1.getY();
-                    double d2 = (double)blockpos1.getZ();
-                    List list = worldIn.getEntitiesWithinAABBExcludingEntity((Entity)null, AxisAlignedBB.fromBounds(d0, d1, d2, d0 + 1.0D, d1 + 2.0D, d2 + 1.0D));
+                } else {
+                    double d0 = (double) blockpos1.getX();
+                    double d1 = (double) blockpos1.getY();
+                    double d2 = (double) blockpos1.getZ();
+                    List list = worldIn.getEntitiesWithinAABBExcludingEntity((Entity) null, AxisAlignedBB.fromBounds(d0, d1, d2, d0 + 1.0D, d1 + 2.0D, d2 + 1.0D));
 
-                    if (list.size() > 0)
-                    {
+                    if (list.size() > 0) {
                         return false;
-                    }
-                    else
-                    {
-                        if (!worldIn.isRemote)
-                        {
+                    } else {
+                        if (!worldIn.isRemote) {
                             worldIn.setBlockToAir(blockpos1);
                             worldIn.setBlockToAir(blockpos2);
                             EntityArmorStand entityarmorstand = new EntityArmorStand(worldIn, d0 + 0.5D, d1, d2 + 0.5D);
-                            float f3 = (float)MathHelper.floor_float((MathHelper.wrapAngleTo180_float(playerIn.rotationYaw - 180.0F) + 22.5F) / 45.0F) * 45.0F;
+                            float f3 = (float) MathHelper.floor_float((MathHelper.wrapAngleTo180_float(playerIn.rotationYaw - 180.0F) + 22.5F) / 45.0F) * 45.0F;
                             entityarmorstand.setLocationAndAngles(d0 + 0.5D, d1, d2 + 0.5D, f3, 0.0F);
                             this.applyRandomRotations(entityarmorstand, worldIn.rand);
                             NBTTagCompound nbttagcompound = stack.getTagCompound();
 
-                            if (nbttagcompound != null && nbttagcompound.hasKey("EntityTag", 10))
-                            {
+                            if (nbttagcompound != null && nbttagcompound.hasKey("EntityTag", 10)) {
                                 NBTTagCompound nbttagcompound1 = new NBTTagCompound();
                                 entityarmorstand.writeToNBTOptional(nbttagcompound1);
                                 nbttagcompound1.merge(nbttagcompound.getCompoundTag("EntityTag"));
@@ -90,8 +90,7 @@
         }
     }
 
-    private void applyRandomRotations(EntityArmorStand armorStand, Random rand)
-    {
+    private void applyRandomRotations(EntityArmorStand armorStand, Random rand) {
         Rotations rotations = armorStand.getHeadRotation();
         float f = rand.nextFloat() * 5.0F;
         float f1 = rand.nextFloat() * 20.0F - 10.0F;
@@ -102,4 +102,4 @@
         rotations1 = new Rotations(rotations.getX(), rotations.getY() + f, rotations.getZ());
         armorStand.setBodyRotation(rotations1);
     }
-}
+}
