---a/net/minecraft/item/ItemSkull.java
+++b/net/minecraft/item/ItemSkull.java
@@ -1,10 +1,6 @@
 package net.minecraft.item;
 
-import com.mojang.authlib.GameProfile;
-import java.util.List;
 import java.util.UUID;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockSkull;
 import net.minecraft.block.state.IBlockState;
@@ -18,90 +18,74 @@
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.StatCollector;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class ItemSkull extends Item
-{
-    private static final String[] skullTypes = new String[] {"skeleton", "wither", "zombie", "char", "creeper"};
+import com.google.common.base.Predicate;
+import com.mojang.authlib.GameProfile;
+
+public class ItemSkull extends Item {
+
+    private static final String[] skullTypes = new String[]{"skeleton", "wither", "zombie", "char", "creeper"};
     private static final String __OBFID = "CL_00000067";
 
-    public ItemSkull()
-    {
+    public ItemSkull() {
         this.setCreativeTab(CreativeTabs.tabDecorations);
         this.setMaxDamage(0);
         this.setHasSubtypes(true);
     }
 
-    public boolean onItemUse(ItemStack stack, EntityPlayer playerIn, World worldIn, BlockPos pos, EnumFacing side, float hitX, float hitY, float hitZ)
-    {
-        if (side == EnumFacing.DOWN)
-        {
+    public boolean onItemUse(ItemStack stack, EntityPlayer playerIn, World worldIn, BlockPos pos, EnumFacing side, float hitX, float hitY, float hitZ) {
+        if (side == EnumFacing.DOWN) {
             return false;
-        }
-        else
-        {
+        } else {
             IBlockState iblockstate = worldIn.getBlockState(pos);
             Block block = iblockstate.getBlock();
             boolean flag = block.isReplaceable(worldIn, pos);
 
-            if (!flag)
-            {
-                if (!worldIn.getBlockState(pos).getBlock().getMaterial().isSolid())
-                {
+            if (!flag) {
+                if (!worldIn.getBlockState(pos).getBlock().getMaterial().isSolid()) {
                     return false;
                 }
 
                 pos = pos.offset(side);
             }
 
-            if (!playerIn.canPlayerEdit(pos, side, stack))
-            {
+            if (!playerIn.canPlayerEdit(pos, side, stack)) {
                 return false;
-            }
-            else if (!Blocks.skull.canPlaceBlockAt(worldIn, pos))
-            {
+            } else if (!Blocks.skull.canPlaceBlockAt(worldIn, pos)) {
                 return false;
-            }
-            else
-            {
-                if (!worldIn.isRemote)
-                {
+            } else {
+                if (!worldIn.isRemote) {
+                    // Spigot Start
+                    if (!Blocks.skull.canPlaceBlockAt(worldIn, pos)) {
+                        return false;
+                    }
+                    // Spigot End
                     worldIn.setBlockState(pos, Blocks.skull.getDefaultState().withProperty(BlockSkull.FACING, side), 3);
                     int i = 0;
 
-                    if (side == EnumFacing.UP)
-                    {
-                        i = MathHelper.floor_double((double)(playerIn.rotationYaw * 16.0F / 360.0F) + 0.5D) & 15;
+                    if (side == EnumFacing.UP) {
+                        i = MathHelper.floor_double((double) (playerIn.rotationYaw * 16.0F / 360.0F) + 0.5D) & 15;
                     }
 
                     TileEntity tileentity = worldIn.getTileEntity(pos);
 
-                    if (tileentity instanceof TileEntitySkull)
-                    {
-                        TileEntitySkull tileentityskull = (TileEntitySkull)tileentity;
+                    if (tileentity instanceof TileEntitySkull) {
+                        TileEntitySkull tileentityskull = (TileEntitySkull) tileentity;
 
-                        if (stack.getMetadata() == 3)
-                        {
+                        if (stack.getMetadata() == 3) {
                             GameProfile gameprofile = null;
 
-                            if (stack.hasTagCompound())
-                            {
+                            if (stack.hasTagCompound()) {
                                 NBTTagCompound nbttagcompound = stack.getTagCompound();
 
-                                if (nbttagcompound.hasKey("SkullOwner", 10))
-                                {
+                                if (nbttagcompound.hasKey("SkullOwner", 10)) {
                                     gameprofile = NBTUtil.readGameProfileFromNBT(nbttagcompound.getCompoundTag("SkullOwner"));
+                                } else if (nbttagcompound.hasKey("SkullOwner", 8) && nbttagcompound.getString("SkullOwner").length() > 0) {
+                                    gameprofile = new GameProfile((UUID) null, nbttagcompound.getString("SkullOwner"));
                                 }
-                                else if (nbttagcompound.hasKey("SkullOwner", 8) && nbttagcompound.getString("SkullOwner").length() > 0)
-                                {
-                                    gameprofile = new GameProfile((UUID)null, nbttagcompound.getString("SkullOwner"));
-                                }
                             }
 
                             tileentityskull.setPlayerProfile(gameprofile);
-                        }
-                        else
-                        {
+                        } else {
                             tileentityskull.setType(stack.getMetadata());
                         }
 
@@ -118,56 +118,30 @@
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public void getSubItems(Item itemIn, CreativeTabs tab, List subItems)
-    {
-        for (int i = 0; i < skullTypes.length; ++i)
-        {
-            subItems.add(new ItemStack(itemIn, 1, i));
-        }
-    }
-
-    public int getMetadata(int damage)
-    {
+    public int getMetadata(int damage) {
         return damage;
     }
 
-    public String getUnlocalizedName(ItemStack stack)
-    {
+    public String getUnlocalizedName(ItemStack stack) {
         int i = stack.getMetadata();
 
-        if (i < 0 || i >= skullTypes.length)
-        {
+        if (i < 0 || i >= skullTypes.length) {
             i = 0;
         }
 
         return super.getUnlocalizedName() + "." + skullTypes[i];
     }
 
-    public String getItemStackDisplayName(ItemStack stack)
-    {
-        if (stack.getMetadata() == 3 && stack.hasTagCompound())
-        {
-            if (stack.getTagCompound().hasKey("SkullOwner", 8))
-            {
-                return StatCollector.translateToLocalFormatted("item.skull.player.name", new Object[] {stack.getTagCompound().getString("SkullOwner")});
+    public String getItemStackDisplayName(ItemStack stack) {
+        if (stack.getMetadata() == 3 && stack.hasTagCompound()) {
+            if (stack.getTagCompound().hasKey("SkullOwner", 8)) {
+                return StatCollector.translateToLocalFormatted("item.skull.player.name", new Object[]{stack.getTagCompound().getString("SkullOwner")});
             }
 
-            if (stack.getTagCompound().hasKey("SkullOwner", 10))
-            {
+            if (stack.getTagCompound().hasKey("SkullOwner", 10)) {
                 NBTTagCompound nbttagcompound = stack.getTagCompound().getCompoundTag("SkullOwner");
 
-                if (nbttagcompound.hasKey("Name", 8))
-                {
-                    return StatCollector.translateToLocalFormatted("item.skull.player.name", new Object[] {nbttagcompound.getString("Name")});
+                if (nbttagcompound.hasKey("Name", 8)) {
+                    return StatCollector.translateToLocalFormatted("item.skull.player.name", new Object[]{nbttagcompound.getString("Name")});
                 }
             }
         }
@@ -167,21 +167,26 @@
         return super.getItemStackDisplayName(stack);
     }
 
-    public boolean updateItemStackNBT(NBTTagCompound nbt)
-    {
+    public boolean updateItemStackNBT(final NBTTagCompound nbt) { // Spigot - make final
         super.updateItemStackNBT(nbt);
 
-        if (nbt.hasKey("SkullOwner", 8) && nbt.getString("SkullOwner").length() > 0)
-        {
-            GameProfile gameprofile = new GameProfile((UUID)null, nbt.getString("SkullOwner"));
-            gameprofile = TileEntitySkull.updateGameprofile(gameprofile);
+        if (nbt.hasKey("SkullOwner", 8) && nbt.getString("SkullOwner").length() > 0) {
+            GameProfile gameprofile = new GameProfile((UUID) null, nbt.getString("SkullOwner"));
+
+            // Spigot start
+            TileEntitySkull.updateGameprofile(gameprofile, new Predicate<GameProfile>() {
+
+                @Override
+                public boolean apply(GameProfile gameprofile) {
+                    nbt.setTag("SkullOwner", NBTUtil.writeGameProfile(new NBTTagCompound(), gameprofile));
+                    return false;
+                }
+            });
+            // Spigot end
             nbt.setTag("SkullOwner", NBTUtil.writeGameProfile(new NBTTagCompound(), gameprofile));
             return true;
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
-}
+}
