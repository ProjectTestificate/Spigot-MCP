---a/net/minecraft/item/ItemBlock.java
+++b/net/minecraft/item/ItemBlock.java
@@ -1,10 +1,8 @@
 package net.minecraft.item;
 
-import java.util.List;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockSnow;
 import net.minecraft.block.state.IBlockState;
-import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
@@ -13,97 +13,74 @@
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class ItemBlock extends Item
-{
-    protected final Block block;
+
+public class ItemBlock extends Item {
+
+    public final Block block;
     private static final String __OBFID = "CL_00001772";
 
-    public ItemBlock(Block block)
-    {
+    public ItemBlock(Block block) {
         this.block = block;
     }
 
-    public ItemBlock setUnlocalizedName(String unlocalizedName)
-    {
+    public ItemBlock setUnlocalizedName(String unlocalizedName) {
         super.setUnlocalizedName(unlocalizedName);
         return this;
     }
 
-    public boolean onItemUse(ItemStack stack, EntityPlayer playerIn, World worldIn, BlockPos pos, EnumFacing side, float hitX, float hitY, float hitZ)
-    {
+    public boolean onItemUse(ItemStack stack, EntityPlayer playerIn, World worldIn, BlockPos pos, EnumFacing side, float hitX, float hitY, float hitZ) {
         IBlockState iblockstate = worldIn.getBlockState(pos);
         Block block = iblockstate.getBlock();
 
-        if (block == Blocks.snow_layer && ((Integer)iblockstate.getValue(BlockSnow.LAYERS)).intValue() < 1)
-        {
+        if (block == Blocks.snow_layer && ((Integer) iblockstate.getValue(BlockSnow.LAYERS)).intValue() < 1) {
             side = EnumFacing.UP;
-        }
-        else if (!block.isReplaceable(worldIn, pos))
-        {
+        } else if (!block.isReplaceable(worldIn, pos)) {
             pos = pos.offset(side);
         }
 
-        if (stack.stackSize == 0)
-        {
+        if (stack.stackSize == 0) {
             return false;
-        }
-        else if (!playerIn.canPlayerEdit(pos, side, stack))
-        {
+        } else if (!playerIn.canPlayerEdit(pos, side, stack)) {
             return false;
-        }
-        else if (pos.getY() == 255 && this.block.getMaterial().isSolid())
-        {
+        } else if (pos.getY() == 255 && this.block.getMaterial().isSolid()) {
             return false;
-        }
-        else if (worldIn.canBlockBePlaced(this.block, pos, false, side, (Entity)null, stack))
-        {
+        } else if (worldIn.canBlockBePlaced(this.block, pos, false, side, (Entity) null, stack)) {
             int i = this.getMetadata(stack.getMetadata());
             IBlockState iblockstate1 = this.block.onBlockPlaced(worldIn, pos, side, hitX, hitY, hitZ, i, playerIn);
 
-            if (worldIn.setBlockState(pos, iblockstate1, 3))
-            {
+            if (worldIn.setBlockState(pos, iblockstate1, 3)) {
                 iblockstate1 = worldIn.getBlockState(pos);
 
-                if (iblockstate1.getBlock() == this.block)
-                {
+                if (iblockstate1.getBlock() == this.block) {
                     setTileEntityNBT(worldIn, pos, stack);
                     this.block.onBlockPlacedBy(worldIn, pos, iblockstate1, playerIn, stack);
                 }
 
-                worldIn.playSoundEffect((double)((float)pos.getX() + 0.5F), (double)((float)pos.getY() + 0.5F), (double)((float)pos.getZ() + 0.5F), this.block.stepSound.getPlaceSound(), (this.block.stepSound.getVolume() + 1.0F) / 2.0F, this.block.stepSound.getFrequency() * 0.8F);
+                worldIn.playSoundEffect((double) ((float) pos.getX() + 0.5F), (double) ((float) pos.getY() + 0.5F), (double) ((float) pos.getZ() + 0.5F), this.block.stepSound.getPlaceSound(), (this.block.stepSound.getVolume() + 1.0F) / 2.0F, this.block.stepSound.getFrequency() * 0.8F);
                 --stack.stackSize;
             }
 
             return true;
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
 
-    public static boolean setTileEntityNBT(World worldIn, BlockPos pos, ItemStack stack)
-    {
-        if (stack.hasTagCompound() && stack.getTagCompound().hasKey("BlockEntityTag", 10))
-        {
+    public static boolean setTileEntityNBT(World worldIn, BlockPos pos, ItemStack stack) {
+        if (stack.hasTagCompound() && stack.getTagCompound().hasKey("BlockEntityTag", 10)) {
             TileEntity tileentity = worldIn.getTileEntity(pos);
 
-            if (tileentity != null)
-            {
+            if (tileentity != null) {
                 NBTTagCompound nbttagcompound = new NBTTagCompound();
-                NBTTagCompound nbttagcompound1 = (NBTTagCompound)nbttagcompound.copy();
+                NBTTagCompound nbttagcompound1 = (NBTTagCompound) nbttagcompound.copy();
                 tileentity.writeToNBT(nbttagcompound);
-                NBTTagCompound nbttagcompound2 = (NBTTagCompound)stack.getTagCompound().getTag("BlockEntityTag");
+                NBTTagCompound nbttagcompound2 = (NBTTagCompound) stack.getTagCompound().getTag("BlockEntityTag");
                 nbttagcompound.merge(nbttagcompound2);
                 nbttagcompound.setInteger("x", pos.getX());
                 nbttagcompound.setInteger("y", pos.getY());
                 nbttagcompound.setInteger("z", pos.getZ());
 
-                if (!nbttagcompound.equals(nbttagcompound1))
-                {
+                if (!nbttagcompound.equals(nbttagcompound1)) {
                     tileentity.readFromNBT(nbttagcompound);
                     tileentity.markDirty();
                     return true;
@@ -114,65 +114,15 @@
         return false;
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean canPlaceBlockOnSide(World worldIn, BlockPos pos, EnumFacing side, EntityPlayer player, ItemStack stack)
-    {
-        Block block = worldIn.getBlockState(pos).getBlock();
-
-        if (block == Blocks.snow_layer)
-        {
-            side = EnumFacing.UP;
-        }
-        else if (!block.isReplaceable(worldIn, pos))
-        {
-            pos = pos.offset(side);
-        }
-
-        return worldIn.canBlockBePlaced(this.block, pos, false, side, (Entity)null, stack);
-    }
-
-    public String getUnlocalizedName(ItemStack stack)
-    {
+    public String getUnlocalizedName(ItemStack stack) {
         return this.block.getUnlocalizedName();
     }
 
-    public String getUnlocalizedName()
-    {
+    public String getUnlocalizedName() {
         return this.block.getUnlocalizedName();
     }
 
-    @SideOnly(Side.CLIENT)
-    public CreativeTabs getCreativeTab()
-    {
-        return this.block.getCreativeTabToDisplayOn();
-    }
-
-    @SideOnly(Side.CLIENT)
-    public void getSubItems(Item itemIn, CreativeTabs tab, List subItems)
-    {
-        this.block.getSubBlocks(itemIn, tab, subItems);
-    }
-
-    public Block getBlock()
-    {
+    public Block getBlock() {
         return this.block;
     }
-}
+}
