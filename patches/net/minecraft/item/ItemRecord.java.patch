--- decompiled\net\minecraft\item\ItemRecord.java
+++ src\main\java\net\minecraft\item\ItemRecord.java
@@ -1,78 +1,50 @@
 package net.minecraft.item;
 
-import com.google.common.collect.Maps;
-import java.util.List;
 import java.util.Map;
+
 import net.minecraft.block.BlockJukebox;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
-import net.minecraft.util.StatCollector;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class ItemRecord extends Item
-{
+import com.google.common.collect.Maps;
+
+public class ItemRecord extends Item {
+
     private static final Map RECORDS = Maps.newHashMap();
     public final String recordName;
     private static final String __OBFID = "CL_00000057";
 
-    protected ItemRecord(String name)
-    {
+    protected ItemRecord(String name) {
         this.recordName = name;
         this.maxStackSize = 1;
         this.setCreativeTab(CreativeTabs.tabMisc);
         RECORDS.put("records." + name, this);
     }
 
-    public boolean onItemUse(ItemStack stack, EntityPlayer playerIn, World worldIn, BlockPos pos, EnumFacing side, float hitX, float hitY, float hitZ)
-    {
+    public boolean onItemUse(ItemStack stack, EntityPlayer playerIn, World worldIn, BlockPos pos, EnumFacing side, float hitX, float hitY, float hitZ) {
         IBlockState iblockstate = worldIn.getBlockState(pos);
 
-        if (iblockstate.getBlock() == Blocks.jukebox && !((Boolean)iblockstate.getValue(BlockJukebox.HAS_RECORD)).booleanValue())
-        {
-            if (worldIn.isRemote)
-            {
+        if (iblockstate.getBlock() == Blocks.jukebox && !((Boolean) iblockstate.getValue(BlockJukebox.HAS_RECORD)).booleanValue()) {
+            if (worldIn.isRemote) {
                 return true;
-            }
-            else
-            {
-                ((BlockJukebox)Blocks.jukebox).insertRecord(worldIn, pos, iblockstate, stack);
-                worldIn.playAuxSFXAtEntity((EntityPlayer)null, 1005, pos, Item.getIdFromItem(this));
+            } else {
+                ((BlockJukebox) Blocks.jukebox).insertRecord(worldIn, pos, iblockstate, stack);
+                worldIn.playAuxSFXAtEntity((EntityPlayer) null, 1005, pos, Item.getIdFromItem(this));
                 --stack.stackSize;
                 return true;
             }
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public void addInformation(ItemStack stack, EntityPlayer playerIn, List tooltip, boolean advanced)
-    {
-        tooltip.add(this.getRecordNameLocal());
-    }
-
-    @SideOnly(Side.CLIENT)
-    public String getRecordNameLocal()
-    {
-        return StatCollector.translateToLocal("item.record." + this.recordName + ".desc");
-    }
-
-    public EnumRarity getRarity(ItemStack stack)
-    {
+    public EnumRarity getRarity(ItemStack stack) {
         return EnumRarity.RARE;
     }
 
-    @SideOnly(Side.CLIENT)
-    public static ItemRecord getRecord(String name)
-    {
-        return (ItemRecord)RECORDS.get(name);
-    }
 }
