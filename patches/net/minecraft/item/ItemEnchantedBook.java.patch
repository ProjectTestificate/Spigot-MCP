---a/net/minecraft/item/ItemEnchantedBook.java
+++b/net/minecraft/item/ItemEnchantedBook.java
@@ -1,75 +1,39 @@
 package net.minecraft.item;
 
-import java.util.List;
 import java.util.Random;
-import net.minecraft.enchantment.Enchantment;
+
 import net.minecraft.enchantment.EnchantmentData;
 import net.minecraft.enchantment.EnchantmentHelper;
-import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Items;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.util.WeightedRandomChestContent;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class ItemEnchantedBook extends Item
-{
-    private static final String __OBFID = "CL_00000025";
 
-    @SideOnly(Side.CLIENT)
-    public boolean hasEffect(ItemStack stack)
-    {
-        return true;
-    }
+public class ItemEnchantedBook extends Item {
 
-    public boolean isItemTool(ItemStack stack)
-    {
+    private static final String __OBFID = "CL_00000025";
+
+    public boolean isItemTool(ItemStack stack) {
         return false;
     }
 
-    public EnumRarity getRarity(ItemStack stack)
-    {
+    public EnumRarity getRarity(ItemStack stack) {
         return this.getEnchantments(stack).tagCount() > 0 ? EnumRarity.UNCOMMON : super.getRarity(stack);
     }
 
-    public NBTTagList getEnchantments(ItemStack stack)
-    {
+    public NBTTagList getEnchantments(ItemStack stack) {
         NBTTagCompound nbttagcompound = stack.getTagCompound();
-        return nbttagcompound != null && nbttagcompound.hasKey("StoredEnchantments", 9) ? (NBTTagList)nbttagcompound.getTag("StoredEnchantments") : new NBTTagList();
+        return nbttagcompound != null && nbttagcompound.hasKey("StoredEnchantments", 9) ? (NBTTagList) nbttagcompound.getTag("StoredEnchantments") : new NBTTagList();
     }
 
-    @SideOnly(Side.CLIENT)
-    public void addInformation(ItemStack stack, EntityPlayer playerIn, List tooltip, boolean advanced)
-    {
-        super.addInformation(stack, playerIn, tooltip, advanced);
+    public void addEnchantment(ItemStack stack, EnchantmentData enchantment) {
         NBTTagList nbttaglist = this.getEnchantments(stack);
-
-        if (nbttaglist != null)
-        {
-            for (int i = 0; i < nbttaglist.tagCount(); ++i)
-            {
-                short short1 = nbttaglist.getCompoundTagAt(i).getShort("id");
-                short short2 = nbttaglist.getCompoundTagAt(i).getShort("lvl");
-
-                if (Enchantment.getEnchantmentById(short1) != null)
-                {
-                    tooltip.add(Enchantment.getEnchantmentById(short1).getTranslatedName(short2));
-                }
-            }
-        }
-    }
-
-    public void addEnchantment(ItemStack stack, EnchantmentData enchantment)
-    {
-        NBTTagList nbttaglist = this.getEnchantments(stack);
         boolean flag = true;
 
-        for (int i = 0; i < nbttaglist.tagCount(); ++i)
-        {
+        for (int i = 0; i < nbttaglist.tagCount(); ++i) {
             NBTTagCompound nbttagcompound = nbttaglist.getCompoundTagAt(i);
 
-            if (nbttagcompound.getShort("id") == enchantment.enchantmentobj.effectId)
-            {
-                if (nbttagcompound.getShort("lvl") < enchantment.enchantmentLevel)
-                {
-                    nbttagcompound.setShort("lvl", (short)enchantment.enchantmentLevel);
+            if (nbttagcompound.getShort("id") == enchantment.enchantmentobj.effectId) {
+                if (nbttagcompound.getShort("lvl") < enchantment.enchantmentLevel) {
+                    nbttagcompound.setShort("lvl", (short) enchantment.enchantmentLevel);
                 }
 
                 flag = false;
@@ -81,48 +81,33 @@
             }
         }
 
-        if (flag)
-        {
+        if (flag) {
             NBTTagCompound nbttagcompound1 = new NBTTagCompound();
-            nbttagcompound1.setShort("id", (short)enchantment.enchantmentobj.effectId);
-            nbttagcompound1.setShort("lvl", (short)enchantment.enchantmentLevel);
+            nbttagcompound1.setShort("id", (short) enchantment.enchantmentobj.effectId);
+            nbttagcompound1.setShort("lvl", (short) enchantment.enchantmentLevel);
             nbttaglist.appendTag(nbttagcompound1);
         }
 
-        if (!stack.hasTagCompound())
-        {
+        if (!stack.hasTagCompound()) {
             stack.setTagCompound(new NBTTagCompound());
         }
 
         stack.getTagCompound().setTag("StoredEnchantments", nbttaglist);
     }
 
-    public ItemStack getEnchantedItemStack(EnchantmentData data)
-    {
+    public ItemStack getEnchantedItemStack(EnchantmentData data) {
         ItemStack itemstack = new ItemStack(this);
         this.addEnchantment(itemstack, data);
         return itemstack;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void getAll(Enchantment enchantment, List list)
-    {
-        for (int i = enchantment.getMinLevel(); i <= enchantment.getMaxLevel(); ++i)
-        {
-            list.add(this.getEnchantedItemStack(new EnchantmentData(enchantment, i)));
-        }
-    }
-
-    public WeightedRandomChestContent getRandom(Random rand)
-    {
+    public WeightedRandomChestContent getRandom(Random rand) {
         return this.getRandom(rand, 1, 1, 1);
     }
 
-    public WeightedRandomChestContent getRandom(Random rand, int minChance, int maxChance, int weight)
-    {
+    public WeightedRandomChestContent getRandom(Random rand, int minChance, int maxChance, int weight) {
         ItemStack itemstack = new ItemStack(Items.book, 1, 0);
         EnchantmentHelper.addRandomEnchantment(rand, itemstack, 30);
         return new WeightedRandomChestContent(itemstack, minChance, maxChance, weight);
     }
-}
+}
