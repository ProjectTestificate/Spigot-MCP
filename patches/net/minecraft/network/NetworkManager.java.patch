--- decompiled\net\minecraft\network\NetworkManager.java
+++ src\main\java\net\minecraft\network\NetworkManager.java
@@ -1,52 +1,47 @@
 package net.minecraft.network;
 
-import com.google.common.collect.Queues;
-import com.google.common.util.concurrent.ThreadFactoryBuilder;
-import io.netty.bootstrap.Bootstrap;
-import io.netty.channel.Channel;
-import io.netty.channel.ChannelException;
-import io.netty.channel.ChannelFuture;
-import io.netty.channel.ChannelFutureListener;
-import io.netty.channel.ChannelHandlerContext;
-import io.netty.channel.ChannelInitializer;
-import io.netty.channel.ChannelOption;
-import io.netty.channel.EventLoopGroup;
-import io.netty.channel.SimpleChannelInboundHandler;
-import io.netty.channel.local.LocalChannel;
-import io.netty.channel.local.LocalEventLoopGroup;
-import io.netty.channel.local.LocalServerChannel;
-import io.netty.channel.nio.NioEventLoopGroup;
-import io.netty.channel.socket.nio.NioSocketChannel;
-import io.netty.handler.timeout.ReadTimeoutHandler;
-import io.netty.util.AttributeKey;
-import io.netty.util.concurrent.GenericFutureListener;
-import java.net.InetAddress;
 import java.net.SocketAddress;
 import java.util.Queue;
+import java.util.UUID;
+
 import javax.crypto.SecretKey;
+
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.gui.IUpdatePlayerListBox;
 import net.minecraft.util.ChatComponentText;
 import net.minecraft.util.ChatComponentTranslation;
 import net.minecraft.util.CryptManager;
 import net.minecraft.util.IChatComponent;
 import net.minecraft.util.LazyLoadBase;
-import net.minecraft.util.MessageDeserializer;
-import net.minecraft.util.MessageDeserializer2;
-import net.minecraft.util.MessageSerializer;
-import net.minecraft.util.MessageSerializer2;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
 
+import com.google.common.collect.Queues;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import com.mojang.authlib.properties.Property;
+
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelFuture;
+import io.netty.channel.ChannelFutureListener;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.SimpleChannelInboundHandler;
+import io.netty.channel.local.LocalChannel;
+import io.netty.channel.local.LocalEventLoopGroup;
+import io.netty.channel.local.LocalServerChannel;
+import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.util.AttributeKey;
+import io.netty.util.concurrent.GenericFutureListener;
+
 public class NetworkManager extends SimpleChannelInboundHandler
 {
+
     private static final Logger logger = LogManager.getLogger();
     public static final Marker logMarkerNetwork = MarkerManager.getMarker("NETWORK");
     public static final Marker logMarkerPackets = MarkerManager.getMarker("NETWORK_PACKETS", logMarkerNetwork);
     public static final AttributeKey attrKeyConnectionState = AttributeKey.valueOf("protocol");
     public static final LazyLoadBase CLIENT_NIO_EVENTLOOP = new LazyLoadBase()
@@ -73,12 +68,17 @@
             return this.genericLoad();
         }
     };
     private final EnumPacketDirection direction;
     private final Queue outboundPacketsQueue = Queues.newConcurrentLinkedQueue();
-    private Channel channel;
-    private SocketAddress socketAddress;
+    public Channel channel; // SpigotMCP -- Make public, as bukkit normally uses a synthetic getter that mcp removes
+    // Spigot Start
+    public SocketAddress socketAddress;
+    public UUID spoofedUUID;
+    public Property[] spoofedProfile;
+    public boolean preparing = true;
+    // Spigot End
     private INetHandler packetListener;
     private IChatComponent terminationReason;
     private boolean isEncrypted;
     private boolean disconnected;
     private static final String __OBFID = "CL_00001240";
@@ -86,15 +86,18 @@
     public NetworkManager(EnumPacketDirection packetDirection)
     {
         this.direction = packetDirection;
     }
 
-    public void channelActive(ChannelHandlerContext p_channelActive_1_) throws Exception
+    public void channelActive(ChannelHandlerContext p_channelActive_1_) throws Exception   // CraftBukkit - added throws // SpigotMCP NOTE -- MCP Did this for us
     {
         super.channelActive(p_channelActive_1_);
         this.channel = p_channelActive_1_.channel();
         this.socketAddress = this.channel.remoteAddress();
+        // Spigot Start
+        this.preparing = false;
+        // Spigot End
 
         try
         {
             this.setConnectionState(EnumConnectionState.HANDSHAKING);
         }
@@ -118,10 +121,12 @@
 
     public void exceptionCaught(ChannelHandlerContext p_exceptionCaught_1_, Throwable p_exceptionCaught_2_)
     {
         logger.debug("Disconnecting " + this.getRemoteAddress(), p_exceptionCaught_2_);
         this.closeChannel(new ChatComponentTranslation("disconnect.genericReason", new Object[] {"Internal Exception: " + p_exceptionCaught_2_}));
+
+        if (MinecraftServer.getServer().isDebuggingEnabled()) p_exceptionCaught_2_.printStackTrace(); // Spigot
     }
 
     protected void channelRead0(ChannelHandlerContext p_channelRead0_1_, Packet p_channelRead0_2_)
     {
         if (this.channel.isOpen())
@@ -155,11 +160,11 @@
         {
             this.outboundPacketsQueue.add(new NetworkManager.InboundHandlerTuplePacketListener(packetIn, (GenericFutureListener[])null));
         }
     }
 
-    public void sendPacket(Packet packetIn, GenericFutureListener listener, GenericFutureListener ... listeners)
+    public void sendPacket(Packet packetIn, GenericFutureListener listener, GenericFutureListener... listeners)
     {
         if (this.channel != null && this.channel.isOpen())
         {
             this.flushOutboundQueue();
             this.dispatchPacket(packetIn, (GenericFutureListener[])ArrayUtils.add(listeners, 0, listener));
@@ -251,83 +256,34 @@
         return this.socketAddress;
     }
 
     public void closeChannel(IChatComponent message)
     {
+        // Spigot Start
+        this.preparing = false;
+        this.outboundPacketsQueue.clear();
+
+        // Spigot End
         if (this.channel.isOpen())
         {
-            this.channel.close().awaitUninterruptibly();
+            this.channel.close(); // CraftBukkit - We can't wait as this may be called from an event loop.
             this.terminationReason = message;
         }
     }
 
     public boolean isLocalChannel()
     {
         return this.channel instanceof LocalChannel || this.channel instanceof LocalServerChannel;
     }
 
-    @SideOnly(Side.CLIENT)
-    public static NetworkManager provideLanClient(InetAddress address, int port)
-    {
-        final NetworkManager networkmanager = new NetworkManager(EnumPacketDirection.CLIENTBOUND);
-        ((Bootstrap)((Bootstrap)((Bootstrap)(new Bootstrap()).group((EventLoopGroup)CLIENT_NIO_EVENTLOOP.getValue())).handler(new ChannelInitializer()
-        {
-            private static final String __OBFID = "CL_00002312";
-            protected void initChannel(Channel p_initChannel_1_)
-            {
-                try
-                {
-                    p_initChannel_1_.config().setOption(ChannelOption.IP_TOS, Integer.valueOf(24));
-                }
-                catch (ChannelException channelexception1)
-                {
-                    ;
-                }
-
-                try
-                {
-                    p_initChannel_1_.config().setOption(ChannelOption.TCP_NODELAY, Boolean.valueOf(false));
-                }
-                catch (ChannelException channelexception)
-                {
-                    ;
-                }
-
-                p_initChannel_1_.pipeline().addLast("timeout", new ReadTimeoutHandler(20)).addLast("splitter", new MessageDeserializer2()).addLast("decoder", new MessageDeserializer(EnumPacketDirection.CLIENTBOUND)).addLast("prepender", new MessageSerializer2()).addLast("encoder", new MessageSerializer(EnumPacketDirection.SERVERBOUND)).addLast("packet_handler", networkmanager);
-            }
-        })).channel(NioSocketChannel.class)).connect(address, port).syncUninterruptibly();
-        return networkmanager;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public static NetworkManager provideLocalClient(SocketAddress address)
-    {
-        final NetworkManager networkmanager = new NetworkManager(EnumPacketDirection.CLIENTBOUND);
-        ((Bootstrap)((Bootstrap)((Bootstrap)(new Bootstrap()).group((EventLoopGroup)CLIENT_LOCAL_EVENTLOOP.getValue())).handler(new ChannelInitializer()
-        {
-            private static final String __OBFID = "CL_00002311";
-            protected void initChannel(Channel p_initChannel_1_)
-            {
-                p_initChannel_1_.pipeline().addLast("packet_handler", networkmanager);
-            }
-        })).channel(LocalChannel.class)).connect(address).syncUninterruptibly();
-        return networkmanager;
-    }
-
     public void enableEncryption(SecretKey key)
     {
         this.isEncrypted = true;
         this.channel.pipeline().addBefore("splitter", "decrypt", new NettyEncryptingDecoder(CryptManager.func_151229_a(2, key)));
         this.channel.pipeline().addBefore("prepender", "encrypt", new NettyEncryptingEncoder(CryptManager.func_151229_a(1, key)));
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean getIsencrypted()
-    {
-        return this.isEncrypted;
-    }
-
     public boolean isChannelOpen()
     {
         return this.channel != null && this.channel.isOpen();
     }
 
@@ -402,22 +358,30 @@
                 this.getNetHandler().onDisconnect(new ChatComponentText("Disconnected"));
             }
         }
     }
 
+    // Spigot Start
+    public SocketAddress getRawAddress()
+    {
+        return this.channel.remoteAddress();
+    }
+    // Spigot End
+
     protected void channelRead0(ChannelHandlerContext p_channelRead0_1_, Object p_channelRead0_2_)
     {
         this.channelRead0(p_channelRead0_1_, (Packet)p_channelRead0_2_);
     }
 
     static class InboundHandlerTuplePacketListener
         {
+
             private final Packet packet;
             private final GenericFutureListener[] futureListeners;
             private static final String __OBFID = "CL_00001244";
 
-            public InboundHandlerTuplePacketListener(Packet inPacket, GenericFutureListener ... inFutureListeners)
+            public InboundHandlerTuplePacketListener(Packet inPacket, GenericFutureListener... inFutureListeners)
             {
                 this.packet = inPacket;
                 this.futureListeners = inFutureListeners;
             }
         }
