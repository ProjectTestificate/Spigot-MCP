--- decompiled\net\minecraft\network\login\server\S01PacketEncryptionRequest.java
+++ src\main\java\net\minecraft\network\login\server\S01PacketEncryptionRequest.java
@@ -1,70 +1,49 @@
 package net.minecraft.network.login.server;
 
 import java.io.IOException;
 import java.security.PublicKey;
+
 import net.minecraft.network.INetHandler;
 import net.minecraft.network.Packet;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.network.login.INetHandlerLoginClient;
 import net.minecraft.util.CryptManager;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class S01PacketEncryptionRequest implements Packet
-{
+
+public class S01PacketEncryptionRequest implements Packet {
+
     private String hashedServerId;
     private PublicKey publicKey;
     private byte[] verifyToken;
     private static final String __OBFID = "CL_00001376";
 
-    public S01PacketEncryptionRequest() {}
+    public S01PacketEncryptionRequest() {
+    }
 
-    public S01PacketEncryptionRequest(String serverId, PublicKey key, byte[] verifyToken)
-    {
+    public S01PacketEncryptionRequest(String serverId, PublicKey key, byte[] verifyToken) {
         this.hashedServerId = serverId;
         this.publicKey = key;
         this.verifyToken = verifyToken;
     }
 
-    public void readPacketData(PacketBuffer buf) throws IOException
-    {
+    public void readPacketData(PacketBuffer buf) throws IOException {
         this.hashedServerId = buf.readStringFromBuffer(20);
         this.publicKey = CryptManager.decodePublicKey(buf.readByteArray());
         this.verifyToken = buf.readByteArray();
     }
 
-    public void writePacketData(PacketBuffer buf) throws IOException
-    {
+    public void writePacketData(PacketBuffer buf) throws IOException {
         buf.writeString(this.hashedServerId);
         buf.writeByteArray(this.publicKey.getEncoded());
         buf.writeByteArray(this.verifyToken);
     }
 
-    public void processPacket(INetHandlerLoginClient handler)
-    {
+    public void processPacket(INetHandlerLoginClient handler) {
         handler.handleEncryptionRequest(this);
     }
 
-    @SideOnly(Side.CLIENT)
-    public String getServerId()
-    {
-        return this.hashedServerId;
+    public void processPacket(INetHandler handler) {
+        this.processPacket((INetHandlerLoginClient) handler);
     }
 
-    public void processPacket(INetHandler handler)
-    {
-        this.processPacket((INetHandlerLoginClient)handler);
-    }
-
-    @SideOnly(Side.CLIENT)
-    public PublicKey getPublicKey()
-    {
-        return this.publicKey;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public byte[] getVerifyToken()
-    {
-        return this.verifyToken;
-    }
 }
