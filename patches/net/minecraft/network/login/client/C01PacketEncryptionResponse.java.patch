--- decompiled\net\minecraft\network\login\client\C01PacketEncryptionResponse.java
+++ src\main\java\net\minecraft\network\login\client\C01PacketEncryptionResponse.java
@@ -1,61 +1,49 @@
 package net.minecraft.network.login.client;
 
 import java.io.IOException;
 import java.security.PrivateKey;
-import java.security.PublicKey;
+
 import javax.crypto.SecretKey;
+
 import net.minecraft.network.INetHandler;
 import net.minecraft.network.Packet;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.network.login.INetHandlerLoginServer;
 import net.minecraft.util.CryptManager;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class C01PacketEncryptionResponse implements Packet
-{
+
+public class C01PacketEncryptionResponse implements Packet {
+
     private byte[] secretKeyEncrypted = new byte[0];
     private byte[] verifyTokenEncrypted = new byte[0];
     private static final String __OBFID = "CL_00001380";
 
-    public C01PacketEncryptionResponse() {}
-
-    @SideOnly(Side.CLIENT)
-    public C01PacketEncryptionResponse(SecretKey secretKey, PublicKey publicKey, byte[] verifyToken)
-    {
-        this.secretKeyEncrypted = CryptManager.encryptData(publicKey, secretKey.getEncoded());
-        this.verifyTokenEncrypted = CryptManager.encryptData(publicKey, verifyToken);
+    public C01PacketEncryptionResponse() {
     }
 
-    public void readPacketData(PacketBuffer buf) throws IOException
-    {
+    public void readPacketData(PacketBuffer buf) throws IOException {
         this.secretKeyEncrypted = buf.readByteArray();
         this.verifyTokenEncrypted = buf.readByteArray();
     }
 
-    public void writePacketData(PacketBuffer buf) throws IOException
-    {
+    public void writePacketData(PacketBuffer buf) throws IOException {
         buf.writeByteArray(this.secretKeyEncrypted);
         buf.writeByteArray(this.verifyTokenEncrypted);
     }
 
-    public void processPacket(INetHandlerLoginServer handler)
-    {
+    public void processPacket(INetHandlerLoginServer handler) {
         handler.processEncryptionResponse(this);
     }
 
-    public SecretKey getSecretKey(PrivateKey key)
-    {
+    public SecretKey getSecretKey(PrivateKey key) {
         return CryptManager.decryptSharedKey(key, this.secretKeyEncrypted);
     }
 
-    public byte[] getVerifyToken(PrivateKey key)
-    {
+    public byte[] getVerifyToken(PrivateKey key) {
         return key == null ? this.verifyTokenEncrypted : CryptManager.decryptData(key, this.verifyTokenEncrypted);
     }
 
-    public void processPacket(INetHandler handler)
-    {
-        this.processPacket((INetHandlerLoginServer)handler);
+    public void processPacket(INetHandler handler) {
+        this.processPacket((INetHandlerLoginServer) handler);
     }
 }
