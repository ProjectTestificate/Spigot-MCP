--- decompiled\net\minecraft\network\rcon\RConThreadQuery.java
+++ src\main\java\net\minecraft\network\rcon\RConThreadQuery.java
@@ -1,8 +1,7 @@
 package net.minecraft.network.rcon;
 
-import com.google.common.collect.Maps;
 import java.io.IOException;
 import java.net.DatagramPacket;
 import java.net.DatagramSocket;
 import java.net.InetAddress;
 import java.net.PortUnreachableException;
@@ -11,19 +10,20 @@
 import java.net.SocketTimeoutException;
 import java.net.UnknownHostException;
 import java.util.Date;
 import java.util.Iterator;
 import java.util.Map;
-import java.util.Random;
 import java.util.Map.Entry;
+import java.util.Random;
+
 import net.minecraft.server.MinecraftServer;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-@SideOnly(Side.SERVER)
+import com.google.common.collect.Maps;
+
 public class RConThreadQuery extends RConThreadBase
 {
+
     private long lastAuthCheckTime;
     private int queryPort;
     private int serverPort;
     private int maxPlayers;
     private String serverMotd;
@@ -103,10 +103,11 @@
             this.logDebug("Packet \'" + RConUtils.getByteAsHexString(abyte[2]) + "\' [" + socketaddress + "]");
 
             switch (abyte[2])
             {
                 case 0:
+
                     if (!this.verifyClientAuth(requestPacket).booleanValue())
                     {
                         this.logDebug("Invalid challenge [" + socketaddress + "]");
                         return false;
                     }
@@ -128,10 +129,11 @@
                         rconoutputstream.writeShort((short)this.serverPort);
                         rconoutputstream.writeString(this.queryHostname);
                         this.sendResponsePacket(rconoutputstream.toByteArray(), requestPacket);
                         this.logDebug("Status [" + socketaddress + "]");
                     }
+
                 case 9:
                     this.sendAuthChallenge(requestPacket);
                     this.logDebug("Challenge [" + socketaddress + "]");
                     return true;
                 default:
@@ -349,13 +351,13 @@
         }
 
         return false;
     }
 
-    @SideOnly(Side.SERVER)
     class Auth
     {
+
         private long timestamp = (new Date()).getTime();
         private int randomChallenge;
         private byte[] requestId;
         private byte[] challengeValue;
         private String requestIdAsString;
