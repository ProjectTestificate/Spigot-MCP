---a/net/minecraft/network/rcon/RConThreadMain.java
+++b/net/minecraft/network/rcon/RConThreadMain.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.rcon;
 
-import com.google.common.collect.Maps;
 import java.io.IOException;
 import java.net.InetAddress;
 import java.net.ServerSocket;
@@ -9,11 +9,7 @@
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Map.Entry;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-@SideOnly(Side.SERVER)
-public class RConThreadMain extends RConThreadBase
-{
+import com.google.common.collect.Maps;
+
+public class RConThreadMain extends RConThreadBase {
+
     private int rconPort;
     private int serverPort;
     private String hostname;
@@ -23,30 +23,26 @@
     private Map clientThreads;
     private static final String __OBFID = "CL_00001805";
 
-    public RConThreadMain(IServer p_i1538_1_)
-    {
+    public RConThreadMain(IServer p_i1538_1_) {
         super(p_i1538_1_, "RCON Listener");
         this.rconPort = p_i1538_1_.getIntProperty("rcon.port", 0);
         this.rconPassword = p_i1538_1_.getStringProperty("rcon.password", "");
         this.hostname = p_i1538_1_.getHostname();
         this.serverPort = p_i1538_1_.getPort();
 
-        if (0 == this.rconPort)
-        {
+        if (0 == this.rconPort) {
             this.rconPort = this.serverPort + 10;
             this.logInfo("Setting default rcon port to " + this.rconPort);
             p_i1538_1_.setProperty("rcon.port", Integer.valueOf(this.rconPort));
 
-            if (0 == this.rconPassword.length())
-            {
+            if (0 == this.rconPassword.length()) {
                 p_i1538_1_.setProperty("rcon.password", "");
             }
 
             p_i1538_1_.saveProperties();
         }
 
-        if (0 == this.hostname.length())
-        {
+        if (0 == this.hostname.length()) {
             this.hostname = "0.0.0.0";
         }
 
@@ -54,88 +54,62 @@
         this.serverSocket = null;
     }
 
-    private void initClientThreadList()
-    {
+    private void initClientThreadList() {
         this.clientThreads = Maps.newHashMap();
     }
 
-    private void cleanClientThreadsMap()
-    {
+    private void cleanClientThreadsMap() {
         Iterator iterator = this.clientThreads.entrySet().iterator();
 
-        while (iterator.hasNext())
-        {
-            Entry entry = (Entry)iterator.next();
+        while (iterator.hasNext()) {
+            Entry entry = (Entry) iterator.next();
 
-            if (!((RConThreadClient)entry.getValue()).isRunning())
-            {
+            if (!((RConThreadClient) entry.getValue()).isRunning()) {
                 iterator.remove();
             }
         }
     }
 
-    public void run()
-    {
+    public void run() {
         this.logInfo("RCON running on " + this.hostname + ":" + this.rconPort);
 
-        try
-        {
-            while (this.running)
-            {
-                try
-                {
+        try {
+            while (this.running) {
+                try {
                     Socket socket = this.serverSocket.accept();
                     socket.setSoTimeout(500);
                     RConThreadClient rconthreadclient = new RConThreadClient(this.server, socket);
                     rconthreadclient.startThread();
                     this.clientThreads.put(socket.getRemoteSocketAddress(), rconthreadclient);
                     this.cleanClientThreadsMap();
-                }
-                catch (SocketTimeoutException sockettimeoutexception)
-                {
+                } catch (SocketTimeoutException sockettimeoutexception) {
                     this.cleanClientThreadsMap();
-                }
-                catch (IOException ioexception)
-                {
-                    if (this.running)
-                    {
+                } catch (IOException ioexception) {
+                    if (this.running) {
                         this.logInfo("IO: " + ioexception.getMessage());
                     }
                 }
             }
-        }
-        finally
-        {
+        } finally {
             this.closeServerSocket(this.serverSocket);
         }
     }
 
-    public void startThread()
-    {
-        if (0 == this.rconPassword.length())
-        {
+    public void startThread() {
+        if (0 == this.rconPassword.length()) {
             this.logWarning("No rcon password set in \'" + this.server.getSettingsFilename() + "\', rcon disabled!");
-        }
-        else if (0 < this.rconPort && 65535 >= this.rconPort)
-        {
-            if (!this.running)
-            {
-                try
-                {
+        } else if (0 < this.rconPort && 65535 >= this.rconPort) {
+            if (!this.running) {
+                try {
                     this.serverSocket = new ServerSocket(this.rconPort, 0, InetAddress.getByName(this.hostname));
                     this.serverSocket.setSoTimeout(500);
                     super.startThread();
-                }
-                catch (IOException ioexception)
-                {
+                } catch (IOException ioexception) {
                     this.logWarning("Unable to initialise rcon on " + this.hostname + ":" + this.rconPort + " : " + ioexception.getMessage());
                 }
             }
-        }
-        else
-        {
+        } else {
             this.logWarning("Invalid rcon port " + this.rconPort + " found in \'" + this.server.getSettingsFilename() + "\', rcon disabled!");
         }
     }
-}
+}
