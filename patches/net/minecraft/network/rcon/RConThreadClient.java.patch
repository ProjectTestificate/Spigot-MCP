---a/net/minecraft/network/rcon/RConThreadClient.java
+++b/net/minecraft/network/rcon/RConThreadClient.java
@@ -6,13 +6,11 @@
 import java.io.IOException;
 import java.net.Socket;
 import java.net.SocketTimeoutException;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-@SideOnly(Side.SERVER)
-public class RConThreadClient extends RConThreadBase
-{
+public class RConThreadClient extends RConThreadBase {
+
     private static final Logger LOGGER = LogManager.getLogger();
     private boolean loggedIn;
     private Socket clientSocket;
@@ -21,16 +21,13 @@
     private String rconPassword;
     private static final String __OBFID = "CL_00001804";
 
-    RConThreadClient(IServer p_i1537_1_, Socket socket)
-    {
+    RConThreadClient(IServer p_i1537_1_, Socket socket) {
         super(p_i1537_1_, "RCON Client");
         this.clientSocket = socket;
 
-        try
-        {
+        try {
             this.clientSocket.setSoTimeout(0);
-        }
-        catch (Exception exception)
-        {
+        } catch (Exception exception) {
             this.running = false;
         }
 
@@ -39,33 +39,24 @@
         this.logInfo("Rcon connection from: " + socket.getInetAddress());
     }
 
-    public void run()
-    {
-        while (true)
-        {
-            try
-            {
-                if (!this.running)
-                {
+    public void run() {
+        while (true) {
+            try {
+                if (!this.running) {
                     break;
                 }
 
                 BufferedInputStream bufferedinputstream = new BufferedInputStream(this.clientSocket.getInputStream());
                 int i = bufferedinputstream.read(this.buffer, 0, 1460);
 
-                if (10 <= i)
-                {
+                if (10 <= i) {
                     byte b0 = 0;
                     int j = RConUtils.getBytesAsLEInt(this.buffer, 0, i);
 
-                    if (j != i - 4)
-                    {
+                    if (j != i - 4) {
                         return;
                     }
 
@@ -69,18 +69,14 @@
                     int l = RConUtils.getRemainingBytesAsLEInt(this.buffer, i1);
                     i1 += 4;
 
-                    switch (l)
-                    {
+                    switch (l) {
                         case 2:
-                            if (this.loggedIn)
-                            {
+                            if (this.loggedIn) {
                                 String s1 = RConUtils.getBytesAsString(this.buffer, i1, i);
 
-                                try
-                                {
+                                try {
                                     this.sendMultipacketResponse(k, this.server.handleRConCommand(s1));
-                                }
-                                catch (Exception exception)
-                                {
+                                } catch (Exception exception) {
                                     this.sendMultipacketResponse(k, "Error executing: " + s1 + " (" + exception.getMessage() + ")");
                                 }
 
@@ -94,8 +94,7 @@
                             String s = RConUtils.getBytesAsString(this.buffer, i1, i);
                             int j1 = i1 + s.length();
 
-                            if (0 != s.length() && s.equals(this.rconPassword))
-                            {
+                            if (0 != s.length() && s.equals(this.rconPassword)) {
                                 this.loggedIn = true;
                                 this.sendResponse(k, 2, "");
                                 continue;
@@ -105,24 +105,18 @@
                             this.sendLoginFailedResponse();
                             continue;
                         default:
-                            this.sendMultipacketResponse(k, String.format("Unknown request %s", new Object[] {Integer.toHexString(l)}));
+                            this.sendMultipacketResponse(k, String.format("Unknown request %s", new Object[]{Integer.toHexString(l)}));
                             continue;
                     }
                 }
-            }
-            catch (SocketTimeoutException sockettimeoutexception)
-            {
+            } catch (SocketTimeoutException sockettimeoutexception) {
                 break;
-            }
-            catch (IOException ioexception)
-            {
+            } catch (IOException ioexception) {
                 break;
-            }
-            catch (Exception exception1)
-            {
+            } catch (Exception exception1) {
                 LOGGER.error("Exception whilst parsing RCON input", exception1);
                 break;
-            }
-            finally
-            {
+            } finally {
                 this.closeSocket();
             }
 
@@ -132,8 +132,7 @@
         }
     }
 
-    private void sendResponse(int p_72654_1_, int p_72654_2_, String message) throws IOException
-    {
+    private void sendResponse(int p_72654_1_, int p_72654_2_, String message) throws IOException {
         ByteArrayOutputStream bytearrayoutputstream = new ByteArrayOutputStream(1248);
         DataOutputStream dataoutputstream = new DataOutputStream(bytearrayoutputstream);
         byte[] abyte = message.getBytes("UTF-8");
@@ -146,40 +146,30 @@
         this.clientSocket.getOutputStream().write(bytearrayoutputstream.toByteArray());
     }
 
-    private void sendLoginFailedResponse() throws IOException
-    {
+    private void sendLoginFailedResponse() throws IOException {
         this.sendResponse(-1, 2, "");
     }
 
-    private void sendMultipacketResponse(int p_72655_1_, String p_72655_2_) throws IOException
-    {
+    private void sendMultipacketResponse(int p_72655_1_, String p_72655_2_) throws IOException {
         int j = p_72655_2_.length();
 
-        do
-        {
+        do {
             int k = 4096 <= j ? 4096 : j;
             this.sendResponse(p_72655_1_, 0, p_72655_2_.substring(0, k));
             p_72655_2_ = p_72655_2_.substring(k);
             j = p_72655_2_.length();
-        }
-        while (0 != j);
+        } while (0 != j);
     }
 
-    private void closeSocket()
-    {
-        if (null != this.clientSocket)
-        {
-            try
-            {
+    private void closeSocket() {
+        if (null != this.clientSocket) {
+            try {
                 this.clientSocket.close();
-            }
-            catch (IOException ioexception)
-            {
+            } catch (IOException ioexception) {
                 this.logWarning("IO: " + ioexception.getMessage());
             }
 
             this.clientSocket = null;
         }
     }
-}
+}
