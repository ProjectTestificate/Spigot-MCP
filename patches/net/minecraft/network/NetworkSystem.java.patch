--- decompiled\net\minecraft\network\NetworkSystem.java
+++ src\main\java\net\minecraft\network\NetworkSystem.java
@@ -1,32 +1,14 @@
 package net.minecraft.network;
 
-import com.google.common.collect.Lists;
-import com.google.common.util.concurrent.ThreadFactoryBuilder;
-import io.netty.bootstrap.ServerBootstrap;
-import io.netty.channel.Channel;
-import io.netty.channel.ChannelException;
-import io.netty.channel.ChannelFuture;
-import io.netty.channel.ChannelInitializer;
-import io.netty.channel.ChannelOption;
-import io.netty.channel.EventLoopGroup;
-import io.netty.channel.local.LocalAddress;
-import io.netty.channel.local.LocalEventLoopGroup;
-import io.netty.channel.local.LocalServerChannel;
-import io.netty.channel.nio.NioEventLoopGroup;
-import io.netty.channel.socket.nio.NioServerSocketChannel;
-import io.netty.handler.timeout.ReadTimeoutHandler;
-import io.netty.util.concurrent.Future;
-import io.netty.util.concurrent.GenericFutureListener;
 import java.io.IOException;
 import java.net.InetAddress;
-import java.net.SocketAddress;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.Callable;
-import net.minecraft.client.network.NetHandlerHandshakeMemory;
+
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.network.play.server.S40PacketDisconnect;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.network.NetHandlerHandshakeTCP;
@@ -35,17 +17,35 @@
 import net.minecraft.util.MessageDeserializer;
 import net.minecraft.util.MessageDeserializer2;
 import net.minecraft.util.MessageSerializer;
 import net.minecraft.util.MessageSerializer2;
 import net.minecraft.util.ReportedException;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.spigotmc.SpigotConfig;
 
+import com.google.common.collect.Lists;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+
+import io.netty.bootstrap.ServerBootstrap;
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelException;
+import io.netty.channel.ChannelFuture;
+import io.netty.channel.ChannelInitializer;
+import io.netty.channel.ChannelOption;
+import io.netty.channel.EventLoopGroup;
+import io.netty.channel.local.LocalEventLoopGroup;
+import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.channel.socket.nio.NioServerSocketChannel;
+import io.netty.handler.timeout.ReadTimeoutHandler;
+import io.netty.util.concurrent.Future;
+import io.netty.util.concurrent.GenericFutureListener;
+
 public class NetworkSystem
 {
+
     private static final Logger logger = LogManager.getLogger();
     public static final LazyLoadBase eventLoops = new LazyLoadBase()
     {
         private static final String __OBFID = "CL_00001448";
         protected NioEventLoopGroup genericLoad()
@@ -118,35 +118,10 @@
                 }
             }).group((EventLoopGroup)eventLoops.getValue()).localAddress(address, port)).bind().syncUninterruptibly());
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public SocketAddress addLocalEndpoint()
-    {
-        List list = this.endpoints;
-        ChannelFuture channelfuture;
-
-        synchronized (this.endpoints)
-        {
-            channelfuture = ((ServerBootstrap)((ServerBootstrap)(new ServerBootstrap()).channel(LocalServerChannel.class)).childHandler(new ChannelInitializer()
-            {
-                private static final String __OBFID = "CL_00001451";
-                protected void initChannel(Channel p_initChannel_1_)
-                {
-                    NetworkManager networkmanager = new NetworkManager(EnumPacketDirection.SERVERBOUND);
-                    networkmanager.setNetHandler(new NetHandlerHandshakeMemory(NetworkSystem.this.mcServer, networkmanager));
-                    NetworkSystem.this.networkManagers.add(networkmanager);
-                    p_initChannel_1_.pipeline().addLast("packet_handler", networkmanager);
-                }
-            }).group((EventLoopGroup)eventLoops.getValue()).localAddress(LocalAddress.ANY)).bind().syncUninterruptibly();
-            this.endpoints.add(channelfuture);
-        }
-
-        return channelfuture.channel().localAddress();
-    }
-
     public void terminateEndpoints()
     {
         this.isAlive = false;
         Iterator iterator = this.endpoints.iterator();
 
@@ -169,20 +144,33 @@
     {
         List list = this.networkManagers;
 
         synchronized (this.networkManagers)
         {
+            // Spigot Start
+            // This prevents players from 'gaming' the server, and strategically relogging to increase their position in the tick order
+            if (SpigotConfig.playerShuffle > 0 && MinecraftServer.currentTick % SpigotConfig.playerShuffle == 0)
+            {
+                Collections.shuffle(this.networkManagers);
+            }
+
+            // Spigot End
             Iterator iterator = this.networkManagers.iterator();
 
             while (iterator.hasNext())
             {
                 final NetworkManager networkmanager = (NetworkManager)iterator.next();
 
                 if (!networkmanager.hasNoChannel())
                 {
                     if (!networkmanager.isChannelOpen())
                     {
+                        // Spigot Start
+                        // Fix a race condition where a NetworkManager could be unregistered just before connection.
+                        if (networkmanager.preparing) continue;
+
+                        // Spigot End
                         iterator.remove();
                         networkmanager.checkDisconnected();
                     }
                     else
                     {
