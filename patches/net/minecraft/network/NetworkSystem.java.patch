--- decompiled\net\minecraft\network\NetworkSystem.java
+++ src\main\java\net\minecraft\network\NetworkSystem.java
@@ -1,32 +1,14 @@
 package net.minecraft.network;
 
-import com.google.common.collect.Lists;
-import com.google.common.util.concurrent.ThreadFactoryBuilder;
-import io.netty.bootstrap.ServerBootstrap;
-import io.netty.channel.Channel;
-import io.netty.channel.ChannelException;
-import io.netty.channel.ChannelFuture;
-import io.netty.channel.ChannelInitializer;
-import io.netty.channel.ChannelOption;
-import io.netty.channel.EventLoopGroup;
-import io.netty.channel.local.LocalAddress;
-import io.netty.channel.local.LocalEventLoopGroup;
-import io.netty.channel.local.LocalServerChannel;
-import io.netty.channel.nio.NioEventLoopGroup;
-import io.netty.channel.socket.nio.NioServerSocketChannel;
-import io.netty.handler.timeout.ReadTimeoutHandler;
-import io.netty.util.concurrent.Future;
-import io.netty.util.concurrent.GenericFutureListener;
 import java.io.IOException;
 import java.net.InetAddress;
-import java.net.SocketAddress;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.Callable;
-import net.minecraft.client.network.NetHandlerHandshakeMemory;
+
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.network.play.server.S40PacketDisconnect;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.network.NetHandlerHandshakeTCP;
@@ -35,187 +17,163 @@
 import net.minecraft.util.MessageDeserializer;
 import net.minecraft.util.MessageDeserializer2;
 import net.minecraft.util.MessageSerializer;
 import net.minecraft.util.MessageSerializer2;
 import net.minecraft.util.ReportedException;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.spigotmc.SpigotConfig;
 
-public class NetworkSystem
-{
+import com.google.common.collect.Lists;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+
+import io.netty.bootstrap.ServerBootstrap;
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelException;
+import io.netty.channel.ChannelFuture;
+import io.netty.channel.ChannelInitializer;
+import io.netty.channel.ChannelOption;
+import io.netty.channel.EventLoopGroup;
+import io.netty.channel.local.LocalEventLoopGroup;
+import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.channel.socket.nio.NioServerSocketChannel;
+import io.netty.handler.timeout.ReadTimeoutHandler;
+import io.netty.util.concurrent.Future;
+import io.netty.util.concurrent.GenericFutureListener;
+
+public class NetworkSystem {
+
     private static final Logger logger = LogManager.getLogger();
-    public static final LazyLoadBase eventLoops = new LazyLoadBase()
-    {
+    public static final LazyLoadBase eventLoops = new LazyLoadBase() {
+
         private static final String __OBFID = "CL_00001448";
-        protected NioEventLoopGroup genericLoad()
-        {
+
+        protected NioEventLoopGroup genericLoad() {
             return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).build());
         }
-        protected Object load()
-        {
+
+        protected Object load() {
             return this.genericLoad();
         }
     };
-    public static final LazyLoadBase SERVER_LOCAL_EVENTLOOP = new LazyLoadBase()
-    {
+    public static final LazyLoadBase SERVER_LOCAL_EVENTLOOP = new LazyLoadBase() {
+
         private static final String __OBFID = "CL_00001449";
-        protected LocalEventLoopGroup genericLoad()
-        {
+
+        protected LocalEventLoopGroup genericLoad() {
             return new LocalEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Server IO #%d").setDaemon(true).build());
         }
-        protected Object load()
-        {
+
+        protected Object load() {
             return this.genericLoad();
         }
     };
     private final MinecraftServer mcServer;
     public volatile boolean isAlive;
     private final List endpoints = Collections.synchronizedList(Lists.newArrayList());
     private final List networkManagers = Collections.synchronizedList(Lists.newArrayList());
     private static final String __OBFID = "CL_00001447";
 
-    public NetworkSystem(MinecraftServer server)
-    {
+    public NetworkSystem(MinecraftServer server) {
         this.mcServer = server;
         this.isAlive = true;
     }
 
-    public void addLanEndpoint(InetAddress address, int port) throws IOException
-    {
+    public void addLanEndpoint(InetAddress address, int port) throws IOException {
         List list = this.endpoints;
 
-        synchronized (this.endpoints)
-        {
-            this.endpoints.add(((ServerBootstrap)((ServerBootstrap)(new ServerBootstrap()).channel(NioServerSocketChannel.class)).childHandler(new ChannelInitializer()
-            {
+        synchronized (this.endpoints) {
+            this.endpoints.add(((ServerBootstrap) ((ServerBootstrap) (new ServerBootstrap()).channel(NioServerSocketChannel.class)).childHandler(new ChannelInitializer() {
+
                 private static final String __OBFID = "CL_00001450";
-                protected void initChannel(Channel p_initChannel_1_)
-                {
-                    try
-                    {
+
+                protected void initChannel(Channel p_initChannel_1_) {
+                    try {
                         p_initChannel_1_.config().setOption(ChannelOption.IP_TOS, Integer.valueOf(24));
-                    }
-                    catch (ChannelException channelexception1)
-                    {
+                    } catch (ChannelException channelexception1) {
                         ;
                     }
 
-                    try
-                    {
+                    try {
                         p_initChannel_1_.config().setOption(ChannelOption.TCP_NODELAY, Boolean.valueOf(false));
-                    }
-                    catch (ChannelException channelexception)
-                    {
+                    } catch (ChannelException channelexception) {
                         ;
                     }
 
-                    p_initChannel_1_.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("legacy_query", new PingResponseHandler(NetworkSystem.this)).addLast("splitter", new MessageDeserializer2()).addLast("decoder", new MessageDeserializer(EnumPacketDirection.SERVERBOUND)).addLast("prepender", new MessageSerializer2()).addLast("encoder", new MessageSerializer(EnumPacketDirection.CLIENTBOUND));
-                    NetworkManager networkmanager = new NetworkManager(EnumPacketDirection.SERVERBOUND);
+                    p_initChannel_1_.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("legacy_query", new PingResponseHandler(NetworkSystem.this)).addLast("splitter", new MessageDeserializer2()).addLast("decoder", new MessageDeserializer(EnumPacketDirection.SERVERBOUND)).addLast("prepender", new MessageSerializer2()).addLast("encoder", new MessageSerializer(EnumPacketDirection.CLIENTBOUND));                    NetworkManager networkmanager = new NetworkManager(EnumPacketDirection.SERVERBOUND);
                     NetworkSystem.this.networkManagers.add(networkmanager);
                     p_initChannel_1_.pipeline().addLast("packet_handler", networkmanager);
                     networkmanager.setNetHandler(new NetHandlerHandshakeTCP(NetworkSystem.this.mcServer, networkmanager));
                 }
-            }).group((EventLoopGroup)eventLoops.getValue()).localAddress(address, port)).bind().syncUninterruptibly());
+            }).group((EventLoopGroup) eventLoops.getValue()).localAddress(address, port)).bind().syncUninterruptibly());
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public SocketAddress addLocalEndpoint()
-    {
-        List list = this.endpoints;
-        ChannelFuture channelfuture;
-
-        synchronized (this.endpoints)
-        {
-            channelfuture = ((ServerBootstrap)((ServerBootstrap)(new ServerBootstrap()).channel(LocalServerChannel.class)).childHandler(new ChannelInitializer()
-            {
-                private static final String __OBFID = "CL_00001451";
-                protected void initChannel(Channel p_initChannel_1_)
-                {
-                    NetworkManager networkmanager = new NetworkManager(EnumPacketDirection.SERVERBOUND);
-                    networkmanager.setNetHandler(new NetHandlerHandshakeMemory(NetworkSystem.this.mcServer, networkmanager));
-                    NetworkSystem.this.networkManagers.add(networkmanager);
-                    p_initChannel_1_.pipeline().addLast("packet_handler", networkmanager);
-                }
-            }).group((EventLoopGroup)eventLoops.getValue()).localAddress(LocalAddress.ANY)).bind().syncUninterruptibly();
-            this.endpoints.add(channelfuture);
-        }
-
-        return channelfuture.channel().localAddress();
-    }
-
-    public void terminateEndpoints()
-    {
+    public void terminateEndpoints() {
         this.isAlive = false;
         Iterator iterator = this.endpoints.iterator();
 
-        while (iterator.hasNext())
-        {
-            ChannelFuture channelfuture = (ChannelFuture)iterator.next();
+        while (iterator.hasNext()) {
+            ChannelFuture channelfuture = (ChannelFuture) iterator.next();
 
-            try
-            {
+            try {
                 channelfuture.channel().close().sync();
-            }
-            catch (InterruptedException interruptedexception)
-            {
+            } catch (InterruptedException interruptedexception) {
                 logger.error("Interrupted whilst closing channel");
             }
         }
     }
 
-    public void networkTick()
-    {
+    public void networkTick() {
         List list = this.networkManagers;
 
-        synchronized (this.networkManagers)
-        {
+        synchronized (this.networkManagers) {
+            // Spigot Start
+            // This prevents players from 'gaming' the server, and strategically relogging to increase their position in the tick order
+            if (SpigotConfig.playerShuffle > 0 && MinecraftServer.currentTick % SpigotConfig.playerShuffle == 0) {
+                Collections.shuffle(this.networkManagers);
+            }
+            // Spigot End
             Iterator iterator = this.networkManagers.iterator();
 
-            while (iterator.hasNext())
-            {
-                final NetworkManager networkmanager = (NetworkManager)iterator.next();
+            while (iterator.hasNext()) {
+                final NetworkManager networkmanager = (NetworkManager) iterator.next();
 
-                if (!networkmanager.hasNoChannel())
-                {
-                    if (!networkmanager.isChannelOpen())
-                    {
+                if (!networkmanager.hasNoChannel()) {
+                    if (!networkmanager.isChannelOpen()) {
+                        // Spigot Start
+                        // Fix a race condition where a NetworkManager could be unregistered just before connection.
+                        if (networkmanager.preparing) continue;
+                        // Spigot End
                         iterator.remove();
                         networkmanager.checkDisconnected();
-                    }
-                    else
-                    {
-                        try
-                        {
+                    } else {
+                        try {
                             networkmanager.processReceivedPackets();
-                        }
-                        catch (Exception exception)
-                        {
-                            if (networkmanager.isLocalChannel())
-                            {
+                        } catch (Exception exception) {
+                            if (networkmanager.isLocalChannel()) {
                                 CrashReport crashreport = CrashReport.makeCrashReport(exception, "Ticking memory connection");
                                 CrashReportCategory crashreportcategory = crashreport.makeCategory("Ticking connection");
-                                crashreportcategory.addCrashSectionCallable("Connection", new Callable()
-                                {
+                                crashreportcategory.addCrashSectionCallable("Connection", new Callable() {
+
                                     private static final String __OBFID = "CL_00002272";
-                                    public String call()
-                                    {
+
+                                    public String call() {
                                         return networkmanager.toString();
                                     }
                                 });
                                 throw new ReportedException(crashreport);
                             }
 
                             logger.warn("Failed to handle packet for " + networkmanager.getRemoteAddress(), exception);
                             final ChatComponentText chatcomponenttext = new ChatComponentText("Internal server error");
-                            networkmanager.sendPacket(new S40PacketDisconnect(chatcomponenttext), new GenericFutureListener()
-                            {
+                            networkmanager.sendPacket(new S40PacketDisconnect(chatcomponenttext), new GenericFutureListener() {
+
                                 private static final String __OBFID = "CL_00002271";
-                                public void operationComplete(Future p_operationComplete_1_)
-                                {
+
+                                public void operationComplete(Future p_operationComplete_1_) {
                                     networkmanager.closeChannel(chatcomponenttext);
                                 }
                             }, new GenericFutureListener[0]);
                             networkmanager.disableAutoRead();
                         }
@@ -223,10 +181,9 @@
                 }
             }
         }
     }
 
-    public MinecraftServer getServer()
-    {
+    public MinecraftServer getServer() {
         return this.mcServer;
     }
 }
