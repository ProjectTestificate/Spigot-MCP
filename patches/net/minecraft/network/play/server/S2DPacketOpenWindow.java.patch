--- decompiled\net\minecraft\network\play\server\S2DPacketOpenWindow.java
+++ src\main\java\net\minecraft\network\play\server\S2DPacketOpenWindow.java
@@ -1,113 +1,69 @@
 package net.minecraft.network.play.server;
 
 import java.io.IOException;
+
 import net.minecraft.network.INetHandler;
 import net.minecraft.network.Packet;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.network.play.INetHandlerPlayClient;
 import net.minecraft.util.IChatComponent;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class S2DPacketOpenWindow implements Packet
-{
+
+public class S2DPacketOpenWindow implements Packet {
+
     private int windowId;
     private String inventoryType;
     private IChatComponent windowTitle;
     private int slotCount;
     private int entityId;
     private static final String __OBFID = "CL_00001293";
 
-    public S2DPacketOpenWindow() {}
+    public S2DPacketOpenWindow() {
+    }
 
-    public S2DPacketOpenWindow(int incomingWindowId, String incomingWindowTitle, IChatComponent windowTitleIn)
-    {
+    public S2DPacketOpenWindow(int incomingWindowId, String incomingWindowTitle, IChatComponent windowTitleIn) {
         this(incomingWindowId, incomingWindowTitle, windowTitleIn, 0);
     }
 
-    public S2DPacketOpenWindow(int windowIdIn, String guiId, IChatComponent windowTitleIn, int slotCountIn)
-    {
+    public S2DPacketOpenWindow(int windowIdIn, String guiId, IChatComponent windowTitleIn, int slotCountIn) {
         this.windowId = windowIdIn;
         this.inventoryType = guiId;
         this.windowTitle = windowTitleIn;
         this.slotCount = slotCountIn;
     }
 
-    public S2DPacketOpenWindow(int windowIdIn, String guiId, IChatComponent windowTitleIn, int slotCountIn, int incomingEntityId)
-    {
+    public S2DPacketOpenWindow(int windowIdIn, String guiId, IChatComponent windowTitleIn, int slotCountIn, int incomingEntityId) {
         this(windowIdIn, guiId, windowTitleIn, slotCountIn);
         this.entityId = incomingEntityId;
     }
 
-    public void processPacket(INetHandlerPlayClient handler)
-    {
+    public void processPacket(INetHandlerPlayClient handler) {
         handler.handleOpenWindow(this);
     }
 
-    public void readPacketData(PacketBuffer buf) throws IOException
-    {
+    public void readPacketData(PacketBuffer buf) throws IOException {
         this.windowId = buf.readUnsignedByte();
         this.inventoryType = buf.readStringFromBuffer(32);
         this.windowTitle = buf.readChatComponent();
         this.slotCount = buf.readUnsignedByte();
 
-        if (this.inventoryType.equals("EntityHorse"))
-        {
+        if (this.inventoryType.equals("EntityHorse")) {
             this.entityId = buf.readInt();
         }
     }
 
-    public void writePacketData(PacketBuffer buf) throws IOException
-    {
+    public void writePacketData(PacketBuffer buf) throws IOException {
         buf.writeByte(this.windowId);
         buf.writeString(this.inventoryType);
         buf.writeChatComponent(this.windowTitle);
         buf.writeByte(this.slotCount);
 
-        if (this.inventoryType.equals("EntityHorse"))
-        {
+        if (this.inventoryType.equals("EntityHorse")) {
             buf.writeInt(this.entityId);
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getWindowId()
-    {
-        return this.windowId;
+    public void processPacket(INetHandler handler) {
+        this.processPacket((INetHandlerPlayClient) handler);
     }
-
-    public void processPacket(INetHandler handler)
-    {
-        this.processPacket((INetHandlerPlayClient)handler);
-    }
-
-    @SideOnly(Side.CLIENT)
-    public String getGuiId()
-    {
-        return this.inventoryType;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public IChatComponent getWindowTitle()
-    {
-        return this.windowTitle;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public int getSlotCount()
-    {
-        return this.slotCount;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public int getEntityId()
-    {
-        return this.entityId;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public boolean hasSlots()
-    {
-        return this.slotCount > 0;
-    }
 }
