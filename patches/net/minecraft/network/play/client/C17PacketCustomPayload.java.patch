---a/net/minecraft/network/play/client/C17PacketCustomPayload.java
+++b/net/minecraft/network/play/client/C17PacketCustomPayload.java
@@ -1,72 +1,51 @@
 package net.minecraft.network.play.client;
 
-import io.netty.buffer.ByteBuf;
 import java.io.IOException;
+
 import net.minecraft.network.INetHandler;
 import net.minecraft.network.Packet;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.network.play.INetHandlerPlayServer;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class C17PacketCustomPayload implements Packet
-{
+import io.netty.buffer.ByteBuf;
+
+public class C17PacketCustomPayload implements Packet {
+
     private String channel;
     private PacketBuffer data;
     private static final String __OBFID = "CL_00001356";
 
-    public C17PacketCustomPayload() {}
-
-    @SideOnly(Side.CLIENT)
-    public C17PacketCustomPayload(String p_i45945_1_, PacketBuffer p_i45945_2_)
-    {
-        this.channel = p_i45945_1_;
-        this.data = p_i45945_2_;
-
-        if (p_i45945_2_.writerIndex() > 32767)
-        {
-            throw new IllegalArgumentException("Payload may not be larger than 32767 bytes");
-        }
+    public C17PacketCustomPayload() {
     }
 
-    public void readPacketData(PacketBuffer buf) throws IOException
-    {
+    public void readPacketData(PacketBuffer buf) throws IOException {
         this.channel = buf.readStringFromBuffer(20);
         int i = buf.readableBytes();
 
-        if (i >= 0 && i <= 32767)
-        {
+        if (i >= 0 && i <= 32767) {
             this.data = new PacketBuffer(buf.readBytes(i));
-        }
-        else
-        {
+        } else {
             throw new IOException("Payload may not be larger than 32767 bytes");
         }
     }
 
-    public void writePacketData(PacketBuffer buf) throws IOException
-    {
+    public void writePacketData(PacketBuffer buf) throws IOException {
         buf.writeString(this.channel);
-        buf.writeBytes((ByteBuf)this.data);
+        buf.writeBytes((ByteBuf) this.data);
     }
 
-    public void processPacket(INetHandlerPlayServer handler)
-    {
+    public void processPacket(INetHandlerPlayServer handler) {
         handler.processVanilla250Packet(this);
     }
 
-    public String getChannelName()
-    {
+    public String getChannelName() {
         return this.channel;
     }
 
-    public PacketBuffer getBufferData()
-    {
+    public PacketBuffer getBufferData() {
         return this.data;
     }
 
-    public void processPacket(INetHandler handler)
-    {
-        this.processPacket((INetHandlerPlayServer)handler);
+    public void processPacket(INetHandler handler) {
+        this.processPacket((INetHandlerPlayServer) handler);
     }
-}
+}
