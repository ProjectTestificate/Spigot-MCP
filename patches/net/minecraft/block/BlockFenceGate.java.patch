---a/net/minecraft/block/BlockFenceGate.java
+++b/net/minecraft/block/BlockFenceGate.java
@@ -14,100 +14,77 @@
 import net.minecraft.util.EnumFacing;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockFenceGate extends BlockDirectional
-{
+
+public class BlockFenceGate extends BlockDirectional {
+
     public static final PropertyBool OPEN = PropertyBool.create("open");
     public static final PropertyBool POWERED = PropertyBool.create("powered");
     public static final PropertyBool IN_WALL = PropertyBool.create("in_wall");
     private static final String __OBFID = "CL_00000243";
 
-    public BlockFenceGate()
-    {
+    public BlockFenceGate() {
         super(Material.wood);
         this.setDefaultState(this.blockState.getBaseState().withProperty(OPEN, Boolean.valueOf(false)).withProperty(POWERED, Boolean.valueOf(false)).withProperty(IN_WALL, Boolean.valueOf(false)));
         this.setCreativeTab(CreativeTabs.tabRedstone);
     }
 
-    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos)
-    {
-        EnumFacing.Axis axis = ((EnumFacing)state.getValue(FACING)).getAxis();
+    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos) {
+        EnumFacing.Axis axis = ((EnumFacing) state.getValue(FACING)).getAxis();
 
-        if (axis == EnumFacing.Axis.Z && (worldIn.getBlockState(pos.west()).getBlock() == Blocks.cobblestone_wall || worldIn.getBlockState(pos.east()).getBlock() == Blocks.cobblestone_wall) || axis == EnumFacing.Axis.X && (worldIn.getBlockState(pos.north()).getBlock() == Blocks.cobblestone_wall || worldIn.getBlockState(pos.south()).getBlock() == Blocks.cobblestone_wall))
-        {
+        if (axis == EnumFacing.Axis.Z && (worldIn.getBlockState(pos.west()).getBlock() == Blocks.cobblestone_wall || worldIn.getBlockState(pos.east()).getBlock() == Blocks.cobblestone_wall) || axis == EnumFacing.Axis.X && (worldIn.getBlockState(pos.north()).getBlock() == Blocks.cobblestone_wall || worldIn.getBlockState(pos.south()).getBlock() == Blocks.cobblestone_wall)) {
             state = state.withProperty(IN_WALL, Boolean.valueOf(true));
         }
 
         return state;
     }
 
-    public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
-    {
+    public boolean canPlaceBlockAt(World worldIn, BlockPos pos) {
         return worldIn.getBlockState(pos.down()).getBlock().getMaterial().isSolid() ? super.canPlaceBlockAt(worldIn, pos) : false;
     }
 
-    public AxisAlignedBB getCollisionBoundingBox(World worldIn, BlockPos pos, IBlockState state)
-    {
-        if (((Boolean)state.getValue(OPEN)).booleanValue())
-        {
+    public AxisAlignedBB getCollisionBoundingBox(World worldIn, BlockPos pos, IBlockState state) {
+        if (((Boolean) state.getValue(OPEN)).booleanValue()) {
             return null;
+        } else {
+            EnumFacing.Axis axis = ((EnumFacing) state.getValue(FACING)).getAxis();
+            return axis == EnumFacing.Axis.Z ? new AxisAlignedBB((double) pos.getX(), (double) pos.getY(), (double) ((float) pos.getZ() + 0.375F), (double) (pos.getX() + 1), (double) ((float) pos.getY() + 1.5F), (double) ((float) pos.getZ() + 0.625F)) : new AxisAlignedBB((double) ((float) pos.getX() + 0.375F), (double) pos.getY(), (double) pos.getZ(), (double) ((float) pos.getX() + 0.625F), (double) ((float) pos.getY() + 1.5F), (double) (pos.getZ() + 1));
         }
-        else
-        {
-            EnumFacing.Axis axis = ((EnumFacing)state.getValue(FACING)).getAxis();
-            return axis == EnumFacing.Axis.Z ? new AxisAlignedBB((double)pos.getX(), (double)pos.getY(), (double)((float)pos.getZ() + 0.375F), (double)(pos.getX() + 1), (double)((float)pos.getY() + 1.5F), (double)((float)pos.getZ() + 0.625F)) : new AxisAlignedBB((double)((float)pos.getX() + 0.375F), (double)pos.getY(), (double)pos.getZ(), (double)((float)pos.getX() + 0.625F), (double)((float)pos.getY() + 1.5F), (double)(pos.getZ() + 1));
-        }
     }
 
-    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos)
-    {
-        EnumFacing.Axis axis = ((EnumFacing)worldIn.getBlockState(pos).getValue(FACING)).getAxis();
+    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos) {
+        EnumFacing.Axis axis = ((EnumFacing) worldIn.getBlockState(pos).getValue(FACING)).getAxis();
 
-        if (axis == EnumFacing.Axis.Z)
-        {
+        if (axis == EnumFacing.Axis.Z) {
             this.setBlockBounds(0.0F, 0.0F, 0.375F, 1.0F, 1.0F, 0.625F);
-        }
-        else
-        {
+        } else {
             this.setBlockBounds(0.375F, 0.0F, 0.0F, 0.625F, 1.0F, 1.0F);
         }
     }
 
-    public boolean isOpaqueCube()
-    {
+    public boolean isOpaqueCube() {
         return false;
     }
 
-    public boolean isFullCube()
-    {
+    public boolean isFullCube() {
         return false;
     }
 
-    public boolean isPassable(IBlockAccess worldIn, BlockPos pos)
-    {
-        return ((Boolean)worldIn.getBlockState(pos).getValue(OPEN)).booleanValue();
+    public boolean isPassable(IBlockAccess worldIn, BlockPos pos) {
+        return ((Boolean) worldIn.getBlockState(pos).getValue(OPEN)).booleanValue();
     }
 
-    public IBlockState onBlockPlaced(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer)
-    {
+    public IBlockState onBlockPlaced(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer) {
         return this.getDefaultState().withProperty(FACING, placer.getHorizontalFacing()).withProperty(OPEN, Boolean.valueOf(false)).withProperty(POWERED, Boolean.valueOf(false)).withProperty(IN_WALL, Boolean.valueOf(false));
     }
 
-    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ)
-    {
-        if (((Boolean)state.getValue(OPEN)).booleanValue())
-        {
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ) {
+        if (((Boolean) state.getValue(OPEN)).booleanValue()) {
             state = state.withProperty(OPEN, Boolean.valueOf(false));
             worldIn.setBlockState(pos, state, 2);
-        }
-        else
-        {
-            EnumFacing enumfacing1 = EnumFacing.fromAngle((double)playerIn.rotationYaw);
+        } else {
+            EnumFacing enumfacing1 = EnumFacing.fromAngle((double) playerIn.rotationYaw);
 
-            if (state.getValue(FACING) == enumfacing1.getOpposite())
-            {
+            if (state.getValue(FACING) == enumfacing1.getOpposite()) {
                 state = state.withProperty(FACING, enumfacing1);
             }
 
@@ -115,67 +115,48 @@
             worldIn.setBlockState(pos, state, 2);
         }
 
-        worldIn.playAuxSFXAtEntity(playerIn, ((Boolean)state.getValue(OPEN)).booleanValue() ? 1003 : 1006, pos, 0);
+        worldIn.playAuxSFXAtEntity(playerIn, ((Boolean) state.getValue(OPEN)).booleanValue() ? 1003 : 1006, pos, 0);
         return true;
     }
 
-    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock)
-    {
-        if (!worldIn.isRemote)
-        {
+    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock) {
+        if (!worldIn.isRemote) {
             boolean flag = worldIn.isBlockPowered(pos);
 
-            if (flag || neighborBlock.canProvidePower())
-            {
-                if (flag && !((Boolean)state.getValue(OPEN)).booleanValue() && !((Boolean)state.getValue(POWERED)).booleanValue())
-                {
+            if (flag || neighborBlock.canProvidePower()) {
+                if (flag && !((Boolean) state.getValue(OPEN)).booleanValue() && !((Boolean) state.getValue(POWERED)).booleanValue()) {
                     worldIn.setBlockState(pos, state.withProperty(OPEN, Boolean.valueOf(true)).withProperty(POWERED, Boolean.valueOf(true)), 2);
-                    worldIn.playAuxSFXAtEntity((EntityPlayer)null, 1003, pos, 0);
-                }
-                else if (!flag && ((Boolean)state.getValue(OPEN)).booleanValue() && ((Boolean)state.getValue(POWERED)).booleanValue())
-                {
+                    worldIn.playAuxSFXAtEntity((EntityPlayer) null, 1003, pos, 0);
+                } else if (!flag && ((Boolean) state.getValue(OPEN)).booleanValue() && ((Boolean) state.getValue(POWERED)).booleanValue()) {
                     worldIn.setBlockState(pos, state.withProperty(OPEN, Boolean.valueOf(false)).withProperty(POWERED, Boolean.valueOf(false)), 2);
-                    worldIn.playAuxSFXAtEntity((EntityPlayer)null, 1006, pos, 0);
-                }
-                else if (flag != ((Boolean)state.getValue(POWERED)).booleanValue())
-                {
+                    worldIn.playAuxSFXAtEntity((EntityPlayer) null, 1006, pos, 0);
+                } else if (flag != ((Boolean) state.getValue(POWERED)).booleanValue()) {
                     worldIn.setBlockState(pos, state.withProperty(POWERED, Boolean.valueOf(flag)), 2);
                 }
             }
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean shouldSideBeRendered(IBlockAccess worldIn, BlockPos pos, EnumFacing side)
-    {
-        return true;
-    }
-
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(FACING, EnumFacing.getHorizontal(meta)).withProperty(OPEN, Boolean.valueOf((meta & 4) != 0)).withProperty(POWERED, Boolean.valueOf((meta & 8) != 0));
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
+    public int getMetaFromState(IBlockState state) {
         byte b0 = 0;
-        int i = b0 | ((EnumFacing)state.getValue(FACING)).getHorizontalIndex();
+        int i = b0 | ((EnumFacing) state.getValue(FACING)).getHorizontalIndex();
 
-        if (((Boolean)state.getValue(POWERED)).booleanValue())
-        {
+        if (((Boolean) state.getValue(POWERED)).booleanValue()) {
             i |= 8;
         }
 
-        if (((Boolean)state.getValue(OPEN)).booleanValue())
-        {
+        if (((Boolean) state.getValue(OPEN)).booleanValue()) {
             i |= 4;
         }
 
         return i;
     }
 
-    protected BlockState createBlockState()
-    {
-        return new BlockState(this, new IProperty[] {FACING, OPEN, POWERED, IN_WALL});
+    protected BlockState createBlockState() {
+        return new BlockState(this, new IProperty[]{FACING, OPEN, POWERED, IN_WALL});
     }
-}
+}
