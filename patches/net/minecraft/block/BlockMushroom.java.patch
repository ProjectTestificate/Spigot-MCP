--- decompiled\net\minecraft\block\BlockMushroom.java
+++ src\main\java\net\minecraft\block\BlockMushroom.java
@@ -1,126 +1,121 @@
 package net.minecraft.block;
 
 import java.util.Iterator;
 import java.util.Random;
+
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.init.Blocks;
 import net.minecraft.util.BlockPos;
 import net.minecraft.world.World;
 import net.minecraft.world.gen.feature.WorldGenBigMushroom;
 
-public class BlockMushroom extends BlockBush implements IGrowable
-{
+import org.bukkit.TreeType;
+import org.bukkit.block.BlockState;
+import org.bukkit.event.block.BlockSpreadEvent;
+
+public class BlockMushroom extends BlockBush implements IGrowable {
+
     private static final String __OBFID = "CL_00000272";
 
-    protected BlockMushroom()
-    {
+    protected BlockMushroom() {
         float f = 0.2F;
         this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, f * 2.0F, 0.5F + f);
         this.setTickRandomly(true);
     }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        if (rand.nextInt(25) == 0)
-        {
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
+        final int sourceX = pos.getX(), sourceY = pos.getY(), sourceZ = pos.getZ(); // CraftBukkit
+        if (rand.nextInt(Math.max(1, (int) worldIn.growthOdds / worldIn.spigotConfig.mushroomModifier * 25)) == 0) { // Spigot
             int i = 5;
             boolean flag = true;
             Iterator iterator = BlockPos.getAllInBoxMutable(pos.add(-4, -1, -4), pos.add(4, 1, 4)).iterator();
 
-            while (iterator.hasNext())
-            {
-                BlockPos blockpos1 = (BlockPos)iterator.next();
+            while (iterator.hasNext()) {
+                BlockPos blockpos1 = (BlockPos) iterator.next();
 
-                if (worldIn.getBlockState(blockpos1).getBlock() == this)
-                {
+                if (worldIn.getBlockState(blockpos1).getBlock() == this) {
                     --i;
 
-                    if (i <= 0)
-                    {
+                    if (i <= 0) {
                         return;
                     }
                 }
             }
 
             BlockPos blockpos2 = pos.add(rand.nextInt(3) - 1, rand.nextInt(2) - rand.nextInt(2), rand.nextInt(3) - 1);
 
-            for (int j = 0; j < 4; ++j)
-            {
-                if (worldIn.isAirBlock(blockpos2) && this.canBlockStay(worldIn, blockpos2, this.getDefaultState()))
-                {
+            for (int j = 0; j < 4; ++j) {
+                if (worldIn.isAirBlock(blockpos2) && this.canBlockStay(worldIn, blockpos2, this.getDefaultState())) {
                     pos = blockpos2;
                 }
 
                 blockpos2 = pos.add(rand.nextInt(3) - 1, rand.nextInt(2) - rand.nextInt(2), rand.nextInt(3) - 1);
             }
 
-            if (worldIn.isAirBlock(blockpos2) && this.canBlockStay(worldIn, blockpos2, this.getDefaultState()))
-            {
-                worldIn.setBlockState(blockpos2, this.getDefaultState(), 2);
+            if (worldIn.isAirBlock(blockpos2) && this.canBlockStay(worldIn, blockpos2, this.getDefaultState())) {
+                // CraftBukkit start
+                // world.setTypeAndData(blockposition2, this.getBlockData(), 2);
+                org.bukkit.World bworld = worldIn.getWorld();
+                BlockState blockState = bworld.getBlockAt(blockpos2.getX(), blockpos2.getY(), blockpos2.getZ()).getState();
+                blockState.setType(org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(this)); // nms: this.id, 0, 2
+
+                BlockSpreadEvent event = new BlockSpreadEvent(blockState.getBlock(), bworld.getBlockAt(sourceX, sourceY, sourceZ), blockState);
+                worldIn.getServer().getPluginManager().callEvent(event);
+
+                if (!event.isCancelled()) {
+                    blockState.update(true);
+                }
+                // CraftBukkit end
             }
         }
     }
 
-    public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
-    {
+    public boolean canPlaceBlockAt(World worldIn, BlockPos pos) {
         return super.canPlaceBlockAt(worldIn, pos) && this.canBlockStay(worldIn, pos, this.getDefaultState());
     }
 
-    protected boolean canPlaceBlockOn(Block ground)
-    {
+    protected boolean canPlaceBlockOn(Block ground) {
         return ground.isFullBlock();
     }
 
-    public boolean canBlockStay(World worldIn, BlockPos pos, IBlockState state)
-    {
-        if (pos.getY() >= 0 && pos.getY() < 256)
-        {
+    public boolean canBlockStay(World worldIn, BlockPos pos, IBlockState state) {
+        if (pos.getY() >= 0 && pos.getY() < 256) {
             IBlockState iblockstate1 = worldIn.getBlockState(pos.down());
             return iblockstate1.getBlock() == Blocks.mycelium ? true : (iblockstate1.getBlock() == Blocks.dirt && iblockstate1.getValue(BlockDirt.VARIANT) == BlockDirt.DirtType.PODZOL ? true : worldIn.getLight(pos) < 13 && this.canPlaceBlockOn(iblockstate1.getBlock()));
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
 
-    public boolean generateBigMushroom(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
+    public boolean generateBigMushroom(World worldIn, BlockPos pos, IBlockState state, Random rand) {
         worldIn.setBlockToAir(pos);
         WorldGenBigMushroom worldgenbigmushroom = null;
 
-        if (this == Blocks.brown_mushroom)
-        {
+        if (this == Blocks.brown_mushroom) {
+            BlockSapling.treeType = TreeType.BROWN_MUSHROOM; // CraftBukkit
             worldgenbigmushroom = new WorldGenBigMushroom(0);
-        }
-        else if (this == Blocks.red_mushroom)
-        {
+        } else if (this == Blocks.red_mushroom) {
+            BlockSapling.treeType = TreeType.RED_MUSHROOM; // CraftBukkit
             worldgenbigmushroom = new WorldGenBigMushroom(1);
         }
 
-        if (worldgenbigmushroom != null && worldgenbigmushroom.generate(worldIn, rand, pos))
-        {
+        if (worldgenbigmushroom != null && worldgenbigmushroom.generate(worldIn, rand, pos)) {
             return true;
-        }
-        else
-        {
+        } else {
             worldIn.setBlockState(pos, state, 3);
             return false;
         }
     }
 
-    public boolean canGrow(World worldIn, BlockPos pos, IBlockState state, boolean isClient)
-    {
+    public boolean canGrow(World worldIn, BlockPos pos, IBlockState state, boolean isClient) {
         return true;
     }
 
-    public boolean canUseBonemeal(World worldIn, Random rand, BlockPos pos, IBlockState state)
-    {
-        return (double)rand.nextFloat() < 0.4D;
+    public boolean canUseBonemeal(World worldIn, Random rand, BlockPos pos, IBlockState state) {
+        return (double) rand.nextFloat() < 0.4D;
     }
 
-    public void grow(World worldIn, Random rand, BlockPos pos, IBlockState state)
-    {
+    public void grow(World worldIn, Random rand, BlockPos pos, IBlockState state) {
         this.generateBigMushroom(worldIn, pos, state, rand);
     }
 }
