---a/net/minecraft/block/BlockBed.java
+++b/net/minecraft/block/BlockBed.java
@@ -2,6 +2,7 @@
 
 import java.util.Iterator;
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyBool;
@@ -15,53 +15,41 @@
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.ChatComponentTranslation;
 import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumWorldBlockLayer;
 import net.minecraft.util.IStringSerializable;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 import net.minecraft.world.biome.BiomeGenBase;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockBed extends BlockDirectional
-{
+
+public class BlockBed extends BlockDirectional {
+
     public static final PropertyEnum PART = PropertyEnum.create("part", BlockBed.EnumPartType.class);
     public static final PropertyBool OCCUPIED = PropertyBool.create("occupied");
     private static final String __OBFID = "CL_00000198";
 
-    public BlockBed()
-    {
+    public BlockBed() {
         super(Material.cloth);
         this.setDefaultState(this.blockState.getBaseState().withProperty(PART, BlockBed.EnumPartType.FOOT).withProperty(OCCUPIED, Boolean.valueOf(false)));
         this.setBedBounds();
     }
 
-    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ)
-    {
-        if (worldIn.isRemote)
-        {
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ) {
+        if (worldIn.isRemote) {
             return true;
-        }
-        else
-        {
-            if (state.getValue(PART) != BlockBed.EnumPartType.HEAD)
-            {
-                pos = pos.offset((EnumFacing)state.getValue(FACING));
+        } else {
+            if (state.getValue(PART) != BlockBed.EnumPartType.HEAD) {
+                pos = pos.offset((EnumFacing) state.getValue(FACING));
                 state = worldIn.getBlockState(pos);
 
-                if (state.getBlock() != this)
-                {
+                if (state.getBlock() != this) {
                     return true;
                 }
             }
 
-            if (worldIn.provider.canRespawnHere() && worldIn.getBiomeGenForCoords(pos) != BiomeGenBase.hell)
-            {
-                if (((Boolean)state.getValue(OCCUPIED)).booleanValue())
-                {
+            if (worldIn.provider.canRespawnHere() && worldIn.getBiomeGenForCoords(pos) != BiomeGenBase.hell) {
+                if (((Boolean) state.getValue(OCCUPIED)).booleanValue()) {
                     EntityPlayer entityplayer1 = this.getPlayerInBed(worldIn, pos);
 
-                    if (entityplayer1 != null)
-                    {
+                    if (entityplayer1 != null) {
                         playerIn.addChatComponentMessage(new ChatComponentTranslation("tile.bed.occupied", new Object[0]));
                         return true;
                     }
@@ -73,130 +73,101 @@
 
                 EntityPlayer.EnumStatus enumstatus = playerIn.trySleep(pos);
 
-                if (enumstatus == EntityPlayer.EnumStatus.OK)
-                {
+                if (enumstatus == EntityPlayer.EnumStatus.OK) {
                     state = state.withProperty(OCCUPIED, Boolean.valueOf(true));
                     worldIn.setBlockState(pos, state, 4);
                     return true;
-                }
-                else
-                {
-                    if (enumstatus == EntityPlayer.EnumStatus.NOT_POSSIBLE_NOW)
-                    {
+                } else {
+                    if (enumstatus == EntityPlayer.EnumStatus.NOT_POSSIBLE_NOW) {
                         playerIn.addChatComponentMessage(new ChatComponentTranslation("tile.bed.noSleep", new Object[0]));
-                    }
-                    else if (enumstatus == EntityPlayer.EnumStatus.NOT_SAFE)
-                    {
+                    } else if (enumstatus == EntityPlayer.EnumStatus.NOT_SAFE) {
                         playerIn.addChatComponentMessage(new ChatComponentTranslation("tile.bed.notSafe", new Object[0]));
                     }
 
                     return true;
                 }
-            }
-            else
-            {
+            } else {
                 worldIn.setBlockToAir(pos);
-                BlockPos blockpos1 = pos.offset(((EnumFacing)state.getValue(FACING)).getOpposite());
+                BlockPos blockpos1 = pos.offset(((EnumFacing) state.getValue(FACING)).getOpposite());
 
-                if (worldIn.getBlockState(blockpos1).getBlock() == this)
-                {
+                if (worldIn.getBlockState(blockpos1).getBlock() == this) {
                     worldIn.setBlockToAir(blockpos1);
                 }
 
-                worldIn.newExplosion((Entity)null, (double)pos.getX() + 0.5D, (double)pos.getY() + 0.5D, (double)pos.getZ() + 0.5D, 5.0F, true, true);
+                worldIn.newExplosion((Entity) null, (double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, 5.0F, true, true);
                 return true;
             }
         }
     }
 
-    private EntityPlayer getPlayerInBed(World worldIn, BlockPos pos)
-    {
+    private EntityPlayer getPlayerInBed(World worldIn, BlockPos pos) {
         Iterator iterator = worldIn.playerEntities.iterator();
         EntityPlayer entityplayer;
 
-        do
-        {
-            if (!iterator.hasNext())
-            {
+        do {
+            if (!iterator.hasNext()) {
                 return null;
             }
 
-            entityplayer = (EntityPlayer)iterator.next();
-        }
-        while (!entityplayer.isPlayerSleeping() || !entityplayer.playerLocation.equals(pos));
+            entityplayer = (EntityPlayer) iterator.next();
+        } while (!entityplayer.isPlayerSleeping() || !entityplayer.playerLocation.equals(pos));
 
         return entityplayer;
     }
 
-    public boolean isFullCube()
-    {
+    public boolean isFullCube() {
         return false;
     }
 
-    public boolean isOpaqueCube()
-    {
+    public boolean isOpaqueCube() {
         return false;
     }
 
-    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos)
-    {
+    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos) {
         this.setBedBounds();
     }
 
-    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock)
-    {
-        EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
+    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock) {
+        EnumFacing enumfacing = (EnumFacing) state.getValue(FACING);
 
-        if (state.getValue(PART) == BlockBed.EnumPartType.HEAD)
-        {
-            if (worldIn.getBlockState(pos.offset(enumfacing.getOpposite())).getBlock() != this)
-            {
+        if (state.getValue(PART) == BlockBed.EnumPartType.HEAD) {
+            if (worldIn.getBlockState(pos.offset(enumfacing.getOpposite())).getBlock() != this) {
                 worldIn.setBlockToAir(pos);
             }
-        }
-        else if (worldIn.getBlockState(pos.offset(enumfacing)).getBlock() != this)
-        {
+        } else if (worldIn.getBlockState(pos.offset(enumfacing)).getBlock() != this) {
             worldIn.setBlockToAir(pos);
 
-            if (!worldIn.isRemote)
-            {
+            if (!worldIn.isRemote) {
                 this.dropBlockAsItem(worldIn, pos, state, 0);
             }
         }
     }
 
-    public Item getItemDropped(IBlockState state, Random rand, int fortune)
-    {
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
         return state.getValue(PART) == BlockBed.EnumPartType.HEAD ? null : Items.bed;
     }
 
-    private void setBedBounds()
-    {
+    private void setBedBounds() {
         this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5625F, 1.0F);
     }
 
-    public static BlockPos getSafeExitLocation(World worldIn, BlockPos pos, int tries)
-    {
-        EnumFacing enumfacing = (EnumFacing)worldIn.getBlockState(pos).getValue(FACING);
+    public static BlockPos getSafeExitLocation(World worldIn, BlockPos pos, int tries) {
+        EnumFacing enumfacing = (EnumFacing) worldIn.getBlockState(pos).getValue(FACING);
         int j = pos.getX();
         int k = pos.getY();
         int l = pos.getZ();
 
-        for (int i1 = 0; i1 <= 1; ++i1)
-        {
+        for (int i1 = 0; i1 <= 1; ++i1) {
             int j1 = j - enumfacing.getFrontOffsetX() * i1 - 1;
             int k1 = l - enumfacing.getFrontOffsetZ() * i1 - 1;
             int l1 = j1 + 2;
             int i2 = k1 + 2;
 
-            for (int j2 = j1; j2 <= l1; ++j2)
-            {
-                for (int k2 = k1; k2 <= i2; ++k2)
-                {
+            for (int j2 = j1; j2 <= l1; ++j2) {
+                for (int k2 = k1; k2 <= i2; ++k2) {
                     BlockPos blockpos1 = new BlockPos(j2, k, k2);
 
-                    if (hasRoomForPlayer(worldIn, blockpos1))
-                    {
-                        if (tries <= 0)
-                        {
+                    if (hasRoomForPlayer(worldIn, blockpos1)) {
+                        if (tries <= 0) {
                             return blockpos1;
                         }
 
@@ -211,63 +211,40 @@
         return null;
     }
 
-    protected static boolean hasRoomForPlayer(World worldIn, BlockPos pos)
-    {
+    protected static boolean hasRoomForPlayer(World worldIn, BlockPos pos) {
         return World.doesBlockHaveSolidTopSurface(worldIn, pos.down()) && !worldIn.getBlockState(pos).getBlock().getMaterial().isSolid() && !worldIn.getBlockState(pos.up()).getBlock().getMaterial().isSolid();
     }
 
-    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune)
-    {
-        if (state.getValue(PART) == BlockBed.EnumPartType.FOOT)
-        {
+    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune) {
+        if (state.getValue(PART) == BlockBed.EnumPartType.FOOT) {
             super.dropBlockAsItemWithChance(worldIn, pos, state, chance, 0);
         }
     }
 
-    public int getMobilityFlag()
-    {
+    public int getMobilityFlag() {
         return 1;
     }
 
-    @SideOnly(Side.CLIENT)
-    public EnumWorldBlockLayer getBlockLayer()
-    {
-        return EnumWorldBlockLayer.CUTOUT;
-    }
+    public void onBlockHarvested(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player) {
+        if (player.capabilities.isCreativeMode && state.getValue(PART) == BlockBed.EnumPartType.HEAD) {
+            BlockPos blockpos1 = pos.offset(((EnumFacing) state.getValue(FACING)).getOpposite());
 
-    @SideOnly(Side.CLIENT)
-    public Item getItem(World worldIn, BlockPos pos)
-    {
-        return Items.bed;
-    }
-
-    public void onBlockHarvested(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player)
-    {
-        if (player.capabilities.isCreativeMode && state.getValue(PART) == BlockBed.EnumPartType.HEAD)
-        {
-            BlockPos blockpos1 = pos.offset(((EnumFacing)state.getValue(FACING)).getOpposite());
-
-            if (worldIn.getBlockState(blockpos1).getBlock() == this)
-            {
+            if (worldIn.getBlockState(blockpos1).getBlock() == this) {
                 worldIn.setBlockToAir(blockpos1);
             }
         }
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         EnumFacing enumfacing = EnumFacing.getHorizontal(meta);
         return (meta & 8) > 0 ? this.getDefaultState().withProperty(PART, BlockBed.EnumPartType.HEAD).withProperty(FACING, enumfacing).withProperty(OCCUPIED, Boolean.valueOf((meta & 4) > 0)) : this.getDefaultState().withProperty(PART, BlockBed.EnumPartType.FOOT).withProperty(FACING, enumfacing);
     }
 
-    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos)
-    {
-        if (state.getValue(PART) == BlockBed.EnumPartType.FOOT)
-        {
-            IBlockState iblockstate1 = worldIn.getBlockState(pos.offset((EnumFacing)state.getValue(FACING)));
+    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos) {
+        if (state.getValue(PART) == BlockBed.EnumPartType.FOOT) {
+            IBlockState iblockstate1 = worldIn.getBlockState(pos.offset((EnumFacing) state.getValue(FACING)));
 
-            if (iblockstate1.getBlock() == this)
-            {
+            if (iblockstate1.getBlock() == this) {
                 state = state.withProperty(OCCUPIED, iblockstate1.getValue(OCCUPIED));
             }
         }
@@ -275,17 +275,14 @@
         return state;
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
+    public int getMetaFromState(IBlockState state) {
         byte b0 = 0;
-        int i = b0 | ((EnumFacing)state.getValue(FACING)).getHorizontalIndex();
+        int i = b0 | ((EnumFacing) state.getValue(FACING)).getHorizontalIndex();
 
-        if (state.getValue(PART) == BlockBed.EnumPartType.HEAD)
-        {
+        if (state.getValue(PART) == BlockBed.EnumPartType.HEAD) {
             i |= 8;
 
-            if (((Boolean)state.getValue(OCCUPIED)).booleanValue())
-            {
+            if (((Boolean) state.getValue(OCCUPIED)).booleanValue()) {
                 i |= 4;
             }
         }
@@ -293,34 +293,28 @@
         return i;
     }
 
-    protected BlockState createBlockState()
-    {
-        return new BlockState(this, new IProperty[] {FACING, PART, OCCUPIED});
+    protected BlockState createBlockState() {
+        return new BlockState(this, new IProperty[]{FACING, PART, OCCUPIED});
     }
 
-    public static enum EnumPartType implements IStringSerializable
-    {
+    public static enum EnumPartType implements IStringSerializable {
         HEAD("head"),
         FOOT("foot");
         private final String name;
 
         private static final String __OBFID = "CL_00002134";
 
-        private EnumPartType(String name)
-        {
+        private EnumPartType(String name) {
             this.name = name;
         }
 
-        public String toString()
-        {
+        public String toString() {
             return this.name;
         }
 
-        public String getName()
-        {
+        public String getName() {
             return this.name;
         }
     }
-}
+}
