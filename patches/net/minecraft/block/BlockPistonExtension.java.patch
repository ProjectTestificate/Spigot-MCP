--- decompiled\net\minecraft\block\BlockPistonExtension.java
+++ src\main\java\net\minecraft\block\BlockPistonExtension.java
@@ -1,123 +1,107 @@
 package net.minecraft.block;
 
 import java.util.List;
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyBool;
 import net.minecraft.block.properties.PropertyDirection;
 import net.minecraft.block.properties.PropertyEnum;
 import net.minecraft.block.state.BlockState;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
-import net.minecraft.item.Item;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.IStringSerializable;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockPistonExtension extends Block
-{
+
+public class BlockPistonExtension extends Block {
+
     public static final PropertyDirection FACING = PropertyDirection.create("facing");
     public static final PropertyEnum TYPE = PropertyEnum.create("type", BlockPistonExtension.EnumPistonType.class);
     public static final PropertyBool SHORT = PropertyBool.create("short");
     private static final String __OBFID = "CL_00000367";
 
-    public BlockPistonExtension()
-    {
+    public BlockPistonExtension() {
         super(Material.piston);
         this.setDefaultState(this.blockState.getBaseState().withProperty(FACING, EnumFacing.NORTH).withProperty(TYPE, BlockPistonExtension.EnumPistonType.DEFAULT).withProperty(SHORT, Boolean.valueOf(false)));
         this.setStepSound(soundTypePiston);
         this.setHardness(0.5F);
     }
 
-    public void onBlockHarvested(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player)
-    {
-        if (player.capabilities.isCreativeMode)
-        {
-            EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
+    public void onBlockHarvested(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player) {
+        if (player.capabilities.isCreativeMode) {
+            EnumFacing enumfacing = (EnumFacing) state.getValue(FACING);
 
-            if (enumfacing != null)
-            {
+            if (enumfacing != null) {
                 BlockPos blockpos1 = pos.offset(enumfacing.getOpposite());
                 Block block = worldIn.getBlockState(blockpos1).getBlock();
 
-                if (block == Blocks.piston || block == Blocks.sticky_piston)
-                {
+                if (block == Blocks.piston || block == Blocks.sticky_piston) {
                     worldIn.setBlockToAir(blockpos1);
                 }
             }
         }
 
         super.onBlockHarvested(worldIn, pos, state, player);
     }
 
-    public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public void breakBlock(World worldIn, BlockPos pos, IBlockState state) {
         super.breakBlock(worldIn, pos, state);
-        EnumFacing enumfacing = ((EnumFacing)state.getValue(FACING)).getOpposite();
+        EnumFacing enumfacing = ((EnumFacing) state.getValue(FACING)).getOpposite();
         pos = pos.offset(enumfacing);
         IBlockState iblockstate1 = worldIn.getBlockState(pos);
 
-        if ((iblockstate1.getBlock() == Blocks.piston || iblockstate1.getBlock() == Blocks.sticky_piston) && ((Boolean)iblockstate1.getValue(BlockPistonBase.EXTENDED)).booleanValue())
-        {
+        if ((iblockstate1.getBlock() == Blocks.piston || iblockstate1.getBlock() == Blocks.sticky_piston) && ((Boolean) iblockstate1.getValue(BlockPistonBase.EXTENDED)).booleanValue()) {
             iblockstate1.getBlock().dropBlockAsItem(worldIn, pos, iblockstate1, 0);
             worldIn.setBlockToAir(pos);
         }
     }
 
-    public boolean isOpaqueCube()
-    {
+    public boolean isOpaqueCube() {
         return false;
     }
 
-    public boolean isFullCube()
-    {
+    public boolean isFullCube() {
         return false;
     }
 
-    public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
-    {
+    public boolean canPlaceBlockAt(World worldIn, BlockPos pos) {
         return false;
     }
 
-    public boolean canPlaceBlockOnSide(World worldIn, BlockPos pos, EnumFacing side)
-    {
+    public boolean canPlaceBlockOnSide(World worldIn, BlockPos pos, EnumFacing side) {
         return false;
     }
 
-    public int quantityDropped(Random random)
-    {
+    public int quantityDropped(Random random) {
         return 0;
     }
 
-    public void addCollisionBoxesToList(World worldIn, BlockPos pos, IBlockState state, AxisAlignedBB mask, List list, Entity collidingEntity)
-    {
+    public void addCollisionBoxesToList(World worldIn, BlockPos pos, IBlockState state, AxisAlignedBB mask, List list, Entity collidingEntity) {
         this.applyHeadBounds(state);
         super.addCollisionBoxesToList(worldIn, pos, state, mask, list, collidingEntity);
         this.applyCoreBounds(state);
         super.addCollisionBoxesToList(worldIn, pos, state, mask, list, collidingEntity);
         this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
     }
 
-    private void applyCoreBounds(IBlockState state)
-    {
+    private void applyCoreBounds(IBlockState state) {
         float f = 0.25F;
         float f1 = 0.375F;
         float f2 = 0.625F;
         float f3 = 0.25F;
         float f4 = 0.75F;
 
-        switch (BlockPistonExtension.SwitchEnumFacing.FACING_LOOKUP[((EnumFacing)state.getValue(FACING)).ordinal()])
-        {
+        switch (BlockPistonExtension.SwitchEnumFacing.FACING_LOOKUP[((EnumFacing) state.getValue(FACING)).ordinal()]) {
             case 1:
                 this.setBlockBounds(0.375F, 0.25F, 0.375F, 0.625F, 1.0F, 0.625F);
                 break;
             case 2:
                 this.setBlockBounds(0.375F, 0.0F, 0.375F, 0.625F, 0.75F, 0.625F);
@@ -134,24 +118,20 @@
             case 6:
                 this.setBlockBounds(0.0F, 0.375F, 0.25F, 0.75F, 0.625F, 0.75F);
         }
     }
 
-    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos)
-    {
+    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos) {
         this.applyHeadBounds(worldIn.getBlockState(pos));
     }
 
-    public void applyHeadBounds(IBlockState state)
-    {
+    public void applyHeadBounds(IBlockState state) {
         float f = 0.25F;
-        EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
+        EnumFacing enumfacing = (EnumFacing) state.getValue(FACING);
 
-        if (enumfacing != null)
-        {
-            switch (BlockPistonExtension.SwitchEnumFacing.FACING_LOOKUP[enumfacing.ordinal()])
-            {
+        if (enumfacing != null) {
+            switch (BlockPistonExtension.SwitchEnumFacing.FACING_LOOKUP[enumfacing.ordinal()]) {
                 case 1:
                     this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.25F, 1.0F);
                     break;
                 case 2:
                     this.setBlockBounds(0.0F, 0.75F, 0.0F, 1.0F, 1.0F, 1.0F);
@@ -169,149 +149,105 @@
                     this.setBlockBounds(0.75F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
             }
         }
     }
 
-    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock)
-    {
-        EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
+    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock) {
+        EnumFacing enumfacing = (EnumFacing) state.getValue(FACING);
         BlockPos blockpos1 = pos.offset(enumfacing.getOpposite());
         IBlockState iblockstate1 = worldIn.getBlockState(blockpos1);
 
-        if (iblockstate1.getBlock() != Blocks.piston && iblockstate1.getBlock() != Blocks.sticky_piston)
-        {
+        if (iblockstate1.getBlock() != Blocks.piston && iblockstate1.getBlock() != Blocks.sticky_piston) {
             worldIn.setBlockToAir(pos);
-        }
-        else
-        {
+        } else {
             iblockstate1.getBlock().onNeighborBlockChange(worldIn, blockpos1, iblockstate1, neighborBlock);
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean shouldSideBeRendered(IBlockAccess worldIn, BlockPos pos, EnumFacing side)
-    {
-        return true;
-    }
-
-    public static EnumFacing getFacing(int meta)
-    {
+    public static EnumFacing getFacing(int meta) {
         int j = meta & 7;
         return j > 5 ? null : EnumFacing.getFront(j);
     }
 
-    @SideOnly(Side.CLIENT)
-    public Item getItem(World worldIn, BlockPos pos)
-    {
-        return worldIn.getBlockState(pos).getValue(TYPE) == BlockPistonExtension.EnumPistonType.STICKY ? Item.getItemFromBlock(Blocks.sticky_piston) : Item.getItemFromBlock(Blocks.piston);
-    }
-
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(FACING, getFacing(meta)).withProperty(TYPE, (meta & 8) > 0 ? BlockPistonExtension.EnumPistonType.STICKY : BlockPistonExtension.EnumPistonType.DEFAULT);
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
+    public int getMetaFromState(IBlockState state) {
         byte b0 = 0;
-        int i = b0 | ((EnumFacing)state.getValue(FACING)).getIndex();
+        int i = b0 | ((EnumFacing) state.getValue(FACING)).getIndex();
 
-        if (state.getValue(TYPE) == BlockPistonExtension.EnumPistonType.STICKY)
-        {
+        if (state.getValue(TYPE) == BlockPistonExtension.EnumPistonType.STICKY) {
             i |= 8;
         }
 
         return i;
     }
 
-    protected BlockState createBlockState()
-    {
-        return new BlockState(this, new IProperty[] {FACING, TYPE, SHORT});
+    protected BlockState createBlockState() {
+        return new BlockState(this, new IProperty[]{FACING, TYPE, SHORT});
     }
 
-    public static enum EnumPistonType implements IStringSerializable
-    {
+    public static enum EnumPistonType implements IStringSerializable {
         DEFAULT("normal"),
         STICKY("sticky");
         private final String VARIANT;
 
         private static final String __OBFID = "CL_00002035";
 
-        private EnumPistonType(String name)
-        {
+        private EnumPistonType(String name) {
             this.VARIANT = name;
         }
 
-        public String toString()
-        {
+        public String toString() {
             return this.VARIANT;
         }
 
-        public String getName()
-        {
+        public String getName() {
             return this.VARIANT;
         }
     }
 
-    static final class SwitchEnumFacing
-        {
-            static final int[] FACING_LOOKUP = new int[EnumFacing.values().length];
-            private static final String __OBFID = "CL_00002036";
+    static final class SwitchEnumFacing {
 
-            static
-            {
-                try
-                {
-                    FACING_LOOKUP[EnumFacing.DOWN.ordinal()] = 1;
-                }
-                catch (NoSuchFieldError var6)
-                {
-                    ;
-                }
+        static final int[] FACING_LOOKUP = new int[EnumFacing.values().length];
+        private static final String __OBFID = "CL_00002036";
 
-                try
-                {
-                    FACING_LOOKUP[EnumFacing.UP.ordinal()] = 2;
-                }
-                catch (NoSuchFieldError var5)
-                {
-                    ;
-                }
+        static {
+            try {
+                FACING_LOOKUP[EnumFacing.DOWN.ordinal()] = 1;
+            } catch (NoSuchFieldError var6) {
+                ;
+            }
 
-                try
-                {
-                    FACING_LOOKUP[EnumFacing.NORTH.ordinal()] = 3;
-                }
-                catch (NoSuchFieldError var4)
-                {
-                    ;
-                }
+            try {
+                FACING_LOOKUP[EnumFacing.UP.ordinal()] = 2;
+            } catch (NoSuchFieldError var5) {
+                ;
+            }
 
-                try
-                {
-                    FACING_LOOKUP[EnumFacing.SOUTH.ordinal()] = 4;
-                }
-                catch (NoSuchFieldError var3)
-                {
-                    ;
-                }
+            try {
+                FACING_LOOKUP[EnumFacing.NORTH.ordinal()] = 3;
+            } catch (NoSuchFieldError var4) {
+                ;
+            }
 
-                try
-                {
-                    FACING_LOOKUP[EnumFacing.WEST.ordinal()] = 5;
-                }
-                catch (NoSuchFieldError var2)
-                {
-                    ;
-                }
+            try {
+                FACING_LOOKUP[EnumFacing.SOUTH.ordinal()] = 4;
+            } catch (NoSuchFieldError var3) {
+                ;
+            }
 
-                try
-                {
-                    FACING_LOOKUP[EnumFacing.EAST.ordinal()] = 6;
-                }
-                catch (NoSuchFieldError var1)
-                {
-                    ;
-                }
+            try {
+                FACING_LOOKUP[EnumFacing.WEST.ordinal()] = 5;
+            } catch (NoSuchFieldError var2) {
+                ;
             }
+
+            try {
+                FACING_LOOKUP[EnumFacing.EAST.ordinal()] = 6;
+            } catch (NoSuchFieldError var1) {
+                ;
+            }
         }
+    }
 }
