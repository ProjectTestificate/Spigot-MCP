--- decompiled\net\minecraft\block\BlockLeaves.java
+++ src\main\java\net\minecraft\block\BlockLeaves.java
@@ -1,34 +1,27 @@
 package net.minecraft.block;
 
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.PropertyBool;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.init.Blocks;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.BlockPos;
-import net.minecraft.util.EnumParticleTypes;
-import net.minecraft.util.EnumWorldBlockLayer;
-import net.minecraft.world.ColorizerFoliage;
-import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraft.world.biome.BiomeColorHelper;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import org.bukkit.event.block.LeavesDecayEvent;
+
 public abstract class BlockLeaves extends BlockLeavesBase
 {
+
     public static final PropertyBool DECAYABLE = PropertyBool.create("decayable");
     public static final PropertyBool CHECK_DECAY = PropertyBool.create("check_decay");
     int[] surroundings;
-    @SideOnly(Side.CLIENT)
-    protected int iconIndex;
-    @SideOnly(Side.CLIENT)
-    protected boolean isTransparent;
     private static final String __OBFID = "CL_00000263";
 
     public BlockLeaves()
     {
         super(Material.leaves, false);
@@ -37,28 +30,10 @@
         this.setHardness(0.2F);
         this.setLightOpacity(1);
         this.setStepSound(soundTypeGrass);
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getBlockColor()
-    {
-        return ColorizerFoliage.getFoliageColor(0.5D, 1.0D);
-    }
-
-    @SideOnly(Side.CLIENT)
-    public int getRenderColor(IBlockState state)
-    {
-        return ColorizerFoliage.getFoliageColorBasic();
-    }
-
-    @SideOnly(Side.CLIENT)
-    public int colorMultiplier(IBlockAccess worldIn, BlockPos pos, int renderPass)
-    {
-        return BiomeColorHelper.getFoliageColorAtPos(worldIn, pos);
-    }
-
     public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
     {
         byte b0 = 1;
         int i = b0 + 1;
         int j = pos.getX();
@@ -198,24 +173,22 @@
                 }
             }
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public void randomDisplayTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
+    private void destroy(World worldIn, BlockPos pos)
     {
-        if (worldIn.canLightningStrike(pos.up()) && !World.doesBlockHaveSolidTopSurface(worldIn, pos.down()) && rand.nextInt(15) == 1)
+        // CraftBukkit start
+        LeavesDecayEvent event = new LeavesDecayEvent(worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
+        worldIn.getServer().getPluginManager().callEvent(event);
+
+        if (event.isCancelled() || worldIn.getBlockState(pos).getBlock() != this)
         {
-            double d0 = (double)((float)pos.getX() + rand.nextFloat());
-            double d1 = (double)pos.getY() - 0.05D;
-            double d2 = (double)((float)pos.getZ() + rand.nextFloat());
-            worldIn.spawnParticle(EnumParticleTypes.DRIP_WATER, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
+            return;
         }
-    }
 
-    private void destroy(World worldIn, BlockPos pos)
-    {
+        // CraftBukkit end
         this.dropBlockAsItem(worldIn, pos, worldIn.getBlockState(pos), 0);
         worldIn.setBlockToAir(pos);
     }
 
     public int quantityDropped(Random random)
@@ -264,11 +237,13 @@
 
             this.dropApple(worldIn, pos, state, j);
         }
     }
 
-    protected void dropApple(World worldIn, BlockPos pos, IBlockState state, int chance) {}
+    protected void dropApple(World worldIn, BlockPos pos, IBlockState state, int chance)
+    {
+    }
 
     protected int getSaplingDropChance(IBlockState state)
     {
         return 20;
     }
@@ -276,24 +251,10 @@
     public boolean isOpaqueCube()
     {
         return !this.fancyGraphics;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void setGraphicsLevel(boolean fancy)
-    {
-        this.isTransparent = fancy;
-        this.fancyGraphics = fancy;
-        this.iconIndex = fancy ? 0 : 1;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public EnumWorldBlockLayer getBlockLayer()
-    {
-        return this.isTransparent ? EnumWorldBlockLayer.CUTOUT_MIPPED : EnumWorldBlockLayer.SOLID;
-    }
-
     public boolean isVisuallyOpaque()
     {
         return false;
     }
 
