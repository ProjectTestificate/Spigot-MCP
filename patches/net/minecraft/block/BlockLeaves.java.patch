---a/net/minecraft/block/BlockLeaves.java
+++b/net/minecraft/block/BlockLeaves.java
@@ -1,6 +1,7 @@
 package net.minecraft.block;
 
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.PropertyBool;
 import net.minecraft.block.state.IBlockState;
@@ -9,30 +9,17 @@
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.BlockPos;
-import net.minecraft.util.EnumParticleTypes;
-import net.minecraft.util.EnumWorldBlockLayer;
-import net.minecraft.world.ColorizerFoliage;
-import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraft.world.biome.BiomeColorHelper;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public abstract class BlockLeaves extends BlockLeavesBase
-{
+import org.bukkit.event.block.LeavesDecayEvent;
+
+public abstract class BlockLeaves extends BlockLeavesBase {
+
     public static final PropertyBool DECAYABLE = PropertyBool.create("decayable");
     public static final PropertyBool CHECK_DECAY = PropertyBool.create("check_decay");
     int[] surroundings;
-    @SideOnly(Side.CLIENT)
-    protected int iconIndex;
-    @SideOnly(Side.CLIENT)
-    protected boolean isTransparent;
     private static final String __OBFID = "CL_00000263";
 
-    public BlockLeaves()
-    {
+    public BlockLeaves() {
         super(Material.leaves, false);
         this.setTickRandomly(true);
         this.setCreativeTab(CreativeTabs.tabDecorations);
@@ -39,63 +39,21 @@
         this.setStepSound(soundTypeGrass);
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getBlockColor()
-    {
-        return ColorizerFoliage.getFoliageColor(0.5D, 1.0D);
-    }
-
-    @SideOnly(Side.CLIENT)
-    public int getRenderColor(IBlockState state)
-    {
-        return ColorizerFoliage.getFoliageColorBasic();
-    }
-
-    @SideOnly(Side.CLIENT)
-    public int colorMultiplier(IBlockAccess worldIn, BlockPos pos, int renderPass)
-    {
-        return BiomeColorHelper.getFoliageColorAtPos(worldIn, pos);
-    }
-
-    public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public void breakBlock(World worldIn, BlockPos pos, IBlockState state) {
         byte b0 = 1;
         int i = b0 + 1;
         int j = pos.getX();
         int k = pos.getY();
         int l = pos.getZ();
 
-        if (worldIn.isAreaLoaded(new BlockPos(j - i, k - i, l - i), new BlockPos(j + i, k + i, l + i)))
-        {
-            for (int i1 = -b0; i1 <= b0; ++i1)
-            {
-                for (int j1 = -b0; j1 <= b0; ++j1)
-                {
-                    for (int k1 = -b0; k1 <= b0; ++k1)
-                    {
+        if (worldIn.isAreaLoaded(new BlockPos(j - i, k - i, l - i), new BlockPos(j + i, k + i, l + i))) {
+            for (int i1 = -b0; i1 <= b0; ++i1) {
+                for (int j1 = -b0; j1 <= b0; ++j1) {
+                    for (int k1 = -b0; k1 <= b0; ++k1) {
                         BlockPos blockpos1 = pos.add(i1, j1, k1);
                         IBlockState iblockstate1 = worldIn.getBlockState(blockpos1);
 
-                        if (iblockstate1.getBlock().getMaterial() == Material.leaves && !((Boolean)iblockstate1.getValue(CHECK_DECAY)).booleanValue())
-                        {
+                        if (iblockstate1.getBlock().getMaterial() == Material.leaves && !((Boolean) iblockstate1.getValue(CHECK_DECAY)).booleanValue()) {
                             worldIn.setBlockState(blockpos1, iblockstate1.withProperty(CHECK_DECAY, Boolean.valueOf(true)), 4);
                         }
                     }
@@ -86,12 +86,9 @@
         }
     }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        if (!worldIn.isRemote)
-        {
-            if (((Boolean)state.getValue(CHECK_DECAY)).booleanValue() && ((Boolean)state.getValue(DECAYABLE)).booleanValue())
-            {
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
+        if (!worldIn.isRemote) {
+            if (((Boolean) state.getValue(CHECK_DECAY)).booleanValue() && ((Boolean) state.getValue(DECAYABLE)).booleanValue()) {
                 byte b0 = 4;
                 int i = b0 + 1;
                 int j = pos.getX();
@@ -101,82 +101,60 @@
                 int i1 = b1 * b1;
                 int j1 = b1 / 2;
 
-                if (this.surroundings == null)
-                {
+                if (this.surroundings == null) {
                     this.surroundings = new int[b1 * b1 * b1];
                 }
 
                 int k1;
 
-                if (worldIn.isAreaLoaded(new BlockPos(j - i, k - i, l - i), new BlockPos(j + i, k + i, l + i)))
-                {
+                if (worldIn.isAreaLoaded(new BlockPos(j - i, k - i, l - i), new BlockPos(j + i, k + i, l + i))) {
                     int l1;
                     int i2;
 
-                    for (k1 = -b0; k1 <= b0; ++k1)
-                    {
-                        for (l1 = -b0; l1 <= b0; ++l1)
-                        {
-                            for (i2 = -b0; i2 <= b0; ++i2)
-                            {
+                    for (k1 = -b0; k1 <= b0; ++k1) {
+                        for (l1 = -b0; l1 <= b0; ++l1) {
+                            for (i2 = -b0; i2 <= b0; ++i2) {
                                 Block block = worldIn.getBlockState(new BlockPos(j + k1, k + l1, l + i2)).getBlock();
 
-                                if (block != Blocks.log && block != Blocks.log2)
-                                {
-                                    if (block.getMaterial() == Material.leaves)
-                                    {
+                                if (block != Blocks.log && block != Blocks.log2) {
+                                    if (block.getMaterial() == Material.leaves) {
                                         this.surroundings[(k1 + j1) * i1 + (l1 + j1) * b1 + i2 + j1] = -2;
-                                    }
-                                    else
-                                    {
+                                    } else {
                                         this.surroundings[(k1 + j1) * i1 + (l1 + j1) * b1 + i2 + j1] = -1;
                                     }
-                                }
-                                else
-                                {
+                                } else {
                                     this.surroundings[(k1 + j1) * i1 + (l1 + j1) * b1 + i2 + j1] = 0;
                                 }
                             }
                         }
                     }
 
-                    for (k1 = 1; k1 <= 4; ++k1)
-                    {
-                        for (l1 = -b0; l1 <= b0; ++l1)
-                        {
-                            for (i2 = -b0; i2 <= b0; ++i2)
-                            {
-                                for (int j2 = -b0; j2 <= b0; ++j2)
-                                {
-                                    if (this.surroundings[(l1 + j1) * i1 + (i2 + j1) * b1 + j2 + j1] == k1 - 1)
-                                    {
-                                        if (this.surroundings[(l1 + j1 - 1) * i1 + (i2 + j1) * b1 + j2 + j1] == -2)
-                                        {
+                    for (k1 = 1; k1 <= 4; ++k1) {
+                        for (l1 = -b0; l1 <= b0; ++l1) {
+                            for (i2 = -b0; i2 <= b0; ++i2) {
+                                for (int j2 = -b0; j2 <= b0; ++j2) {
+                                    if (this.surroundings[(l1 + j1) * i1 + (i2 + j1) * b1 + j2 + j1] == k1 - 1) {
+                                        if (this.surroundings[(l1 + j1 - 1) * i1 + (i2 + j1) * b1 + j2 + j1] == -2) {
                                             this.surroundings[(l1 + j1 - 1) * i1 + (i2 + j1) * b1 + j2 + j1] = k1;
                                         }
 
-                                        if (this.surroundings[(l1 + j1 + 1) * i1 + (i2 + j1) * b1 + j2 + j1] == -2)
-                                        {
+                                        if (this.surroundings[(l1 + j1 + 1) * i1 + (i2 + j1) * b1 + j2 + j1] == -2) {
                                             this.surroundings[(l1 + j1 + 1) * i1 + (i2 + j1) * b1 + j2 + j1] = k1;
                                         }
 
-                                        if (this.surroundings[(l1 + j1) * i1 + (i2 + j1 - 1) * b1 + j2 + j1] == -2)
-                                        {
+                                        if (this.surroundings[(l1 + j1) * i1 + (i2 + j1 - 1) * b1 + j2 + j1] == -2) {
                                             this.surroundings[(l1 + j1) * i1 + (i2 + j1 - 1) * b1 + j2 + j1] = k1;
                                         }
 
-                                        if (this.surroundings[(l1 + j1) * i1 + (i2 + j1 + 1) * b1 + j2 + j1] == -2)
-                                        {
+                                        if (this.surroundings[(l1 + j1) * i1 + (i2 + j1 + 1) * b1 + j2 + j1] == -2) {
                                             this.surroundings[(l1 + j1) * i1 + (i2 + j1 + 1) * b1 + j2 + j1] = k1;
                                         }
 
-                                        if (this.surroundings[(l1 + j1) * i1 + (i2 + j1) * b1 + (j2 + j1 - 1)] == -2)
-                                        {
+                                        if (this.surroundings[(l1 + j1) * i1 + (i2 + j1) * b1 + (j2 + j1 - 1)] == -2) {
                                             this.surroundings[(l1 + j1) * i1 + (i2 + j1) * b1 + (j2 + j1 - 1)] = k1;
                                         }
 
-                                        if (this.surroundings[(l1 + j1) * i1 + (i2 + j1) * b1 + j2 + j1 + 1] == -2)
-                                        {
+                                        if (this.surroundings[(l1 + j1) * i1 + (i2 + j1) * b1 + j2 + j1 + 1] == -2) {
                                             this.surroundings[(l1 + j1) * i1 + (i2 + j1) * b1 + j2 + j1 + 1] = k1;
                                         }
                                     }
@@ -188,76 +188,59 @@
 
                 k1 = this.surroundings[j1 * i1 + j1 * b1 + j1];
 
-                if (k1 >= 0)
-                {
+                if (k1 >= 0) {
                     worldIn.setBlockState(pos, state.withProperty(CHECK_DECAY, Boolean.valueOf(false)), 4);
-                }
-                else
-                {
+                } else {
                     this.destroy(worldIn, pos);
                 }
             }
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public void randomDisplayTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        if (worldIn.canLightningStrike(pos.up()) && !World.doesBlockHaveSolidTopSurface(worldIn, pos.down()) && rand.nextInt(15) == 1)
-        {
-            double d0 = (double)((float)pos.getX() + rand.nextFloat());
-            double d1 = (double)pos.getY() - 0.05D;
-            double d2 = (double)((float)pos.getZ() + rand.nextFloat());
-            worldIn.spawnParticle(EnumParticleTypes.DRIP_WATER, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
-        }
-    }
+    private void destroy(World worldIn, BlockPos pos) {
+        // CraftBukkit start
+        LeavesDecayEvent event = new LeavesDecayEvent(worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
+        worldIn.getServer().getPluginManager().callEvent(event);
 
-    private void destroy(World worldIn, BlockPos pos)
-    {
+        if (event.isCancelled() || worldIn.getBlockState(pos).getBlock() != this) {
+            return;
+        }
+        // CraftBukkit end
         this.dropBlockAsItem(worldIn, pos, worldIn.getBlockState(pos), 0);
         worldIn.setBlockToAir(pos);
     }
 
-    public int quantityDropped(Random random)
-    {
+    public int quantityDropped(Random random) {
         return random.nextInt(20) == 0 ? 1 : 0;
     }
 
-    public Item getItemDropped(IBlockState state, Random rand, int fortune)
-    {
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
         return Item.getItemFromBlock(Blocks.sapling);
     }
 
-    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune)
-    {
-        if (!worldIn.isRemote)
-        {
+    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune) {
+        if (!worldIn.isRemote) {
             int j = this.getSaplingDropChance(state);
 
-            if (fortune > 0)
-            {
+            if (fortune > 0) {
                 j -= 2 << fortune;
 
-                if (j < 10)
-                {
+                if (j < 10) {
                     j = 10;
                 }
             }
 
-            if (worldIn.rand.nextInt(j) == 0)
-            {
+            if (worldIn.rand.nextInt(j) == 0) {
                 Item item = this.getItemDropped(state, worldIn.rand, fortune);
                 spawnAsEntity(worldIn, pos, new ItemStack(item, 1, this.damageDropped(state)));
             }
 
             j = 200;
 
-            if (fortune > 0)
-            {
+            if (fortune > 0) {
                 j -= 10 << fortune;
 
-                if (j < 40)
-                {
+                if (j < 40) {
                     j = 40;
                 }
             }
@@ -266,36 +266,21 @@
         }
     }
 
-    protected void dropApple(World worldIn, BlockPos pos, IBlockState state, int chance) {}
+    protected void dropApple(World worldIn, BlockPos pos, IBlockState state, int chance) {
+    }
 
-    protected int getSaplingDropChance(IBlockState state)
-    {
+    protected int getSaplingDropChance(IBlockState state) {
         return 20;
     }
 
-    public boolean isOpaqueCube()
-    {
+    public boolean isOpaqueCube() {
         return !this.fancyGraphics;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void setGraphicsLevel(boolean fancy)
-    {
-        this.isTransparent = fancy;
-        this.fancyGraphics = fancy;
-        this.iconIndex = fancy ? 0 : 1;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public EnumWorldBlockLayer getBlockLayer()
-    {
-        return this.isTransparent ? EnumWorldBlockLayer.CUTOUT_MIPPED : EnumWorldBlockLayer.SOLID;
-    }
-
-    public boolean isVisuallyOpaque()
-    {
+    public boolean isVisuallyOpaque() {
         return false;
     }
 
     public abstract BlockPlanks.EnumType getWoodType(int meta);
-}
+}
