--- decompiled\net\minecraft\block\BlockCake.java
+++ src\main\java\net\minecraft\block\BlockCake.java
@@ -1,27 +1,28 @@
 package net.minecraft.block;
 
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyInteger;
 import net.minecraft.block.state.BlockState;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.init.Items;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.item.Item;
+import net.minecraft.network.play.server.S06PacketUpdateHealth;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumWorldBlockLayer;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+
 public class BlockCake extends Block
 {
+
     public static final PropertyInteger BITES = PropertyInteger.create("bites", 0, 6);
     private static final String __OBFID = "CL_00000211";
 
     protected BlockCake()
     {
@@ -51,16 +52,10 @@
         float f1 = (float)(1 + ((Integer)state.getValue(BITES)).intValue() * 2) / 16.0F;
         float f2 = 0.5F;
         return new AxisAlignedBB((double)((float)pos.getX() + f1), (double)pos.getY(), (double)((float)pos.getZ() + f), (double)((float)(pos.getX() + 1) - f), (double)((float)pos.getY() + f2), (double)((float)(pos.getZ() + 1) - f));
     }
 
-    @SideOnly(Side.CLIENT)
-    public AxisAlignedBB getSelectedBoundingBox(World worldIn, BlockPos pos)
-    {
-        return this.getCollisionBoundingBox(worldIn, pos, worldIn.getBlockState(pos));
-    }
-
     public boolean isFullCube()
     {
         return false;
     }
 
@@ -82,11 +77,23 @@
 
     private void eatCake(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player)
     {
         if (player.canEat(false))
         {
-            player.getFoodStats().addStats(2, 0.1F);
+            // CraftBukkit start
+            // player.getFoodStats().addStats(2, 0.1F);
+            int oldFoodLevel = player.getFoodStats().foodLevel;
+
+            org.bukkit.event.entity.FoodLevelChangeEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callFoodLevelChangeEvent(player, 2 + oldFoodLevel);
+
+            if (!event.isCancelled())
+            {
+                player.getFoodStats().addStats(event.getFoodLevel() - oldFoodLevel, 0.1F);
+            }
+
+            ((EntityPlayerMP)player).playerNetServerHandler.sendPacket(new S06PacketUpdateHealth(((EntityPlayerMP)player).getBukkitEntity().getScaledHealth(), player.getFoodStats().foodLevel, player.getFoodStats().foodSaturationLevel));
+            // CraftBukkit end
             int i = ((Integer)state.getValue(BITES)).intValue();
 
             if (i < 6)
             {
                 worldIn.setBlockState(pos, state.withProperty(BITES, Integer.valueOf(i + 1)), 3);
@@ -129,22 +136,10 @@
     public IBlockState getStateFromMeta(int meta)
     {
         return this.getDefaultState().withProperty(BITES, Integer.valueOf(meta));
     }
 
-    @SideOnly(Side.CLIENT)
-    public Item getItem(World worldIn, BlockPos pos)
-    {
-        return Items.cake;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public EnumWorldBlockLayer getBlockLayer()
-    {
-        return EnumWorldBlockLayer.CUTOUT;
-    }
-
     public int getMetaFromState(IBlockState state)
     {
         return ((Integer)state.getValue(BITES)).intValue();
     }
 
