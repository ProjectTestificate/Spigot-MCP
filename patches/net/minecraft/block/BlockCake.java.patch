---a/net/minecraft/block/BlockCake.java
+++b/net/minecraft/block/BlockCake.java
@@ -1,164 +1,134 @@
 package net.minecraft.block;
 
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyInteger;
 import net.minecraft.block.state.BlockState;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.init.Items;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.item.Item;
+import net.minecraft.network.play.server.S06PacketUpdateHealth;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumWorldBlockLayer;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockCake extends Block
-{
+
+public class BlockCake extends Block {
+
     public static final PropertyInteger BITES = PropertyInteger.create("bites", 0, 6);
     private static final String __OBFID = "CL_00000211";
 
-    protected BlockCake()
-    {
+    protected BlockCake() {
         super(Material.cake);
         this.setDefaultState(this.blockState.getBaseState().withProperty(BITES, Integer.valueOf(0)));
         this.setTickRandomly(true);
     }
 
-    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos)
-    {
+    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos) {
         float f = 0.0625F;
-        float f1 = (float)(1 + ((Integer)worldIn.getBlockState(pos).getValue(BITES)).intValue() * 2) / 16.0F;
+        float f1 = (float) (1 + ((Integer) worldIn.getBlockState(pos).getValue(BITES)).intValue() * 2) / 16.0F;
         float f2 = 0.5F;
         this.setBlockBounds(f1, 0.0F, f, 1.0F - f, f2, 1.0F - f);
     }
 
-    public void setBlockBoundsForItemRender()
-    {
+    public void setBlockBoundsForItemRender() {
         float f = 0.0625F;
         float f1 = 0.5F;
         this.setBlockBounds(f, 0.0F, f, 1.0F - f, f1, 1.0F - f);
     }
 
-    public AxisAlignedBB getCollisionBoundingBox(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public AxisAlignedBB getCollisionBoundingBox(World worldIn, BlockPos pos, IBlockState state) {
         float f = 0.0625F;
-        float f1 = (float)(1 + ((Integer)state.getValue(BITES)).intValue() * 2) / 16.0F;
+        float f1 = (float) (1 + ((Integer) state.getValue(BITES)).intValue() * 2) / 16.0F;
         float f2 = 0.5F;
-        return new AxisAlignedBB((double)((float)pos.getX() + f1), (double)pos.getY(), (double)((float)pos.getZ() + f), (double)((float)(pos.getX() + 1) - f), (double)((float)pos.getY() + f2), (double)((float)(pos.getZ() + 1) - f));
+        return new AxisAlignedBB((double) ((float) pos.getX() + f1), (double) pos.getY(), (double) ((float) pos.getZ() + f), (double) ((float) (pos.getX() + 1) - f), (double) ((float) pos.getY() + f2), (double) ((float) (pos.getZ() + 1) - f));
     }
 
-    @SideOnly(Side.CLIENT)
-    public AxisAlignedBB getSelectedBoundingBox(World worldIn, BlockPos pos)
-    {
-        return this.getCollisionBoundingBox(worldIn, pos, worldIn.getBlockState(pos));
-    }
-
-    public boolean isFullCube()
-    {
+    public boolean isFullCube() {
         return false;
     }
 
-    public boolean isOpaqueCube()
-    {
+    public boolean isOpaqueCube() {
         return false;
     }
 
-    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ)
-    {
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ) {
         this.eatCake(worldIn, pos, state, playerIn);
         return true;
     }
 
-    public void onBlockClicked(World worldIn, BlockPos pos, EntityPlayer playerIn)
-    {
+    public void onBlockClicked(World worldIn, BlockPos pos, EntityPlayer playerIn) {
         this.eatCake(worldIn, pos, worldIn.getBlockState(pos), playerIn);
     }
 
-    private void eatCake(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player)
-    {
-        if (player.canEat(false))
-        {
-            player.getFoodStats().addStats(2, 0.1F);
-            int i = ((Integer)state.getValue(BITES)).intValue();
+    private void eatCake(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player) {
+        if (player.canEat(false)) {
+            // CraftBukkit start
+            // player.getFoodStats().addStats(2, 0.1F);
+            int oldFoodLevel = player.getFoodStats().foodLevel;
 
-            if (i < 6)
-            {
-                worldIn.setBlockState(pos, state.withProperty(BITES, Integer.valueOf(i + 1)), 3);
+            org.bukkit.event.entity.FoodLevelChangeEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callFoodLevelChangeEvent(player, 2 + oldFoodLevel);
+
+            if (!event.isCancelled()) {
+                player.getFoodStats().addStats(event.getFoodLevel() - oldFoodLevel, 0.1F);
             }
-            else
-            {
+
+            ((EntityPlayerMP) player).playerNetServerHandler.sendPacket(new S06PacketUpdateHealth(((EntityPlayerMP) player).getBukkitEntity().getScaledHealth(), player.getFoodStats().foodLevel, player.getFoodStats().foodSaturationLevel));
+            // CraftBukkit end
+            int i = ((Integer) state.getValue(BITES)).intValue();
+
+            if (i < 6) {
+                worldIn.setBlockState(pos, state.withProperty(BITES, Integer.valueOf(i + 1)), 3);
+            } else {
                 worldIn.setBlockToAir(pos);
             }
         }
     }
 
-    public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
-    {
+    public boolean canPlaceBlockAt(World worldIn, BlockPos pos) {
         return super.canPlaceBlockAt(worldIn, pos) ? this.canBlockStay(worldIn, pos) : false;
     }
 
-    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock)
-    {
-        if (!this.canBlockStay(worldIn, pos))
-        {
+    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock) {
+        if (!this.canBlockStay(worldIn, pos)) {
             worldIn.setBlockToAir(pos);
         }
     }
 
-    private boolean canBlockStay(World worldIn, BlockPos pos)
-    {
+    private boolean canBlockStay(World worldIn, BlockPos pos) {
         return worldIn.getBlockState(pos.down()).getBlock().getMaterial().isSolid();
     }
 
-    public int quantityDropped(Random random)
-    {
+    public int quantityDropped(Random random) {
         return 0;
     }
 
-    public Item getItemDropped(IBlockState state, Random rand, int fortune)
-    {
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
         return null;
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(BITES, Integer.valueOf(meta));
     }
 
-    @SideOnly(Side.CLIENT)
-    public Item getItem(World worldIn, BlockPos pos)
-    {
-        return Items.cake;
+    public int getMetaFromState(IBlockState state) {
+        return ((Integer) state.getValue(BITES)).intValue();
     }
 
-    @SideOnly(Side.CLIENT)
-    public EnumWorldBlockLayer getBlockLayer()
-    {
-        return EnumWorldBlockLayer.CUTOUT;
+    protected BlockState createBlockState() {
+        return new BlockState(this, new IProperty[]{BITES});
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
-        return ((Integer)state.getValue(BITES)).intValue();
+    public int getComparatorInputOverride(World worldIn, BlockPos pos) {
+        return (7 - ((Integer) worldIn.getBlockState(pos).getValue(BITES)).intValue()) * 2;
     }
 
-    protected BlockState createBlockState()
-    {
-        return new BlockState(this, new IProperty[] {BITES});
-    }
-
-    public int getComparatorInputOverride(World worldIn, BlockPos pos)
-    {
-        return (7 - ((Integer)worldIn.getBlockState(pos).getValue(BITES)).intValue()) * 2;
-    }
-
-    public boolean hasComparatorInputOverride()
-    {
+    public boolean hasComparatorInputOverride() {
         return true;
     }
-}
+}
