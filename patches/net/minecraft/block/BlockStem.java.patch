---a/net/minecraft/block/BlockStem.java
+++b/net/minecraft/block/BlockStem.java
@@ -1,9 +1,7 @@
 package net.minecraft.block;
 
-import com.google.common.base.Predicate;
 import java.util.Iterator;
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyDirection;
@@ -19,48 +19,45 @@
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockStem extends BlockBush implements IGrowable
-{
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+
+import com.google.common.base.Predicate;
+
+public class BlockStem extends BlockBush implements IGrowable {
+
     public static final PropertyInteger AGE = PropertyInteger.create("age", 0, 7);
-    public static final PropertyDirection FACING = PropertyDirection.create("facing", new Predicate()
-    {
+    public static final PropertyDirection FACING = PropertyDirection.create("facing", new Predicate() {
+
         private static final String __OBFID = "CL_00002059";
-        public boolean apply(EnumFacing facing)
-        {
+
+        public boolean apply(EnumFacing facing) {
             return facing != EnumFacing.DOWN;
         }
-        public boolean apply(Object p_apply_1_)
-        {
-            return this.apply((EnumFacing)p_apply_1_);
+
+        public boolean apply(Object p_apply_1_) {
+            return this.apply((EnumFacing) p_apply_1_);
         }
     });
     private final Block crop;
     private static final String __OBFID = "CL_00000316";
 
-    protected BlockStem(Block crop)
-    {
+    protected BlockStem(Block crop) {
         this.setDefaultState(this.blockState.getBaseState().withProperty(AGE, Integer.valueOf(0)).withProperty(FACING, EnumFacing.UP));
         this.crop = crop;
         this.setTickRandomly(true);
         float f = 0.125F;
         this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, 0.25F, 0.5F + f);
-        this.setCreativeTab((CreativeTabs)null);
+        this.setCreativeTab((CreativeTabs) null);
     }
 
-    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos)
-    {
+    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos) {
         state = state.withProperty(FACING, EnumFacing.UP);
         Iterator iterator = EnumFacing.Plane.HORIZONTAL.iterator();
 
-        while (iterator.hasNext())
-        {
-            EnumFacing enumfacing = (EnumFacing)iterator.next();
+        while (iterator.hasNext()) {
+            EnumFacing enumfacing = (EnumFacing) iterator.next();
 
-            if (worldIn.getBlockState(pos.offset(enumfacing)).getBlock() == this.crop)
-            {
+            if (worldIn.getBlockState(pos.offset(enumfacing)).getBlock() == this.crop) {
                 state = state.withProperty(FACING, enumfacing);
                 break;
             }
@@ -69,38 +69,30 @@
         return state;
     }
 
-    protected boolean canPlaceBlockOn(Block ground)
-    {
+    protected boolean canPlaceBlockOn(Block ground) {
         return ground == Blocks.farmland;
     }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
         super.updateTick(worldIn, pos, state, rand);
 
-        if (worldIn.getLightFromNeighbors(pos.up()) >= 9)
-        {
+        if (worldIn.getLightFromNeighbors(pos.up()) >= 9) {
             float f = BlockCrops.getGrowthChance(this, worldIn, pos);
 
-            if (rand.nextInt((int)(25.0F / f) + 1) == 0)
-            {
-                int i = ((Integer)state.getValue(AGE)).intValue();
+            if (rand.nextInt((int) (worldIn.growthOdds / (this == Blocks.pumpkin_stem ? worldIn.spigotConfig.pumpkinModifier : worldIn.spigotConfig.melonModifier) * (25.0F / f)) + 1) == 0) { // Spigot            {
+                int i = ((Integer) state.getValue(AGE)).intValue();
 
-                if (i < 7)
-                {
+                if (i < 7) {
                     state = state.withProperty(AGE, Integer.valueOf(i + 1));
-                    worldIn.setBlockState(pos, state, 2);
-                }
-                else
-                {
+                    // worldIn.setBlockState(pos, state, 2); // CraftBukkit
+                    CraftEventFactory.handleBlockGrowEvent(worldIn, pos.getX(), pos.getY(), pos.getZ(), this, getMetaFromState(state)); // CraftBukkit
+                } else {
                     Iterator iterator = EnumFacing.Plane.HORIZONTAL.iterator();
 
-                    while (iterator.hasNext())
-                    {
-                        EnumFacing enumfacing = (EnumFacing)iterator.next();
+                    while (iterator.hasNext()) {
+                        EnumFacing enumfacing = (EnumFacing) iterator.next();
 
-                        if (worldIn.getBlockState(pos.offset(enumfacing)).getBlock() == this.crop)
-                        {
+                        if (worldIn.getBlockState(pos.offset(enumfacing)).getBlock() == this.crop) {
                             return;
                         }
                     }
@@ -108,72 +108,44 @@
                     pos = pos.offset(EnumFacing.Plane.HORIZONTAL.random(rand));
                     Block block = worldIn.getBlockState(pos.down()).getBlock();
 
-                    if (worldIn.getBlockState(pos).getBlock().blockMaterial == Material.air && (block == Blocks.farmland || block == Blocks.dirt || block == Blocks.grass))
-                    {
-                        worldIn.setBlockState(pos, this.crop.getDefaultState());
+                    if (worldIn.getBlockState(pos).getBlock().blockMaterial == Material.air && (block == Blocks.farmland || block == Blocks.dirt || block == Blocks.grass)) {
+                        // worldIn.setBlockState(pos, this.crop.getDefaultState()); // CraftBukkit
+                        CraftEventFactory.handleBlockGrowEvent(worldIn, pos.getX(), pos.getY(), pos.getZ(), this.crop, 0); // CraftBukkit
                     }
                 }
             }
         }
     }
 
-    public void growStem(World worldIn, BlockPos pos, IBlockState state)
-    {
-        int i = ((Integer)state.getValue(AGE)).intValue() + MathHelper.getRandomIntegerInRange(worldIn.rand, 2, 5);
-        worldIn.setBlockState(pos, state.withProperty(AGE, Integer.valueOf(Math.min(7, i))), 2);
+    public void growStem(World worldIn, BlockPos pos, IBlockState state) {
+        int i = ((Integer) state.getValue(AGE)).intValue() + MathHelper.getRandomIntegerInRange(worldIn.rand, 2, 5);
+        // worldIn.setBlockState(pos, state.withProperty(AGE, Integer.valueOf(Math.min(7, i))), 2); // CraftBukkit // SpigotMCP -- added "CraftBukkit"
+        CraftEventFactory.handleBlockGrowEvent(worldIn, pos.getX(), pos.getY(), pos.getZ(), this, Math.min(7, i)); // CraftBukkit
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getRenderColor(IBlockState state)
-    {
-        if (state.getBlock() != this)
-        {
-            return super.getRenderColor(state);
-        }
-        else
-        {
-            int i = ((Integer)state.getValue(AGE)).intValue();
-            int j = i * 32;
-            int k = 255 - i * 8;
-            int l = i * 4;
-            return j << 16 | k << 8 | l;
-        }
-    }
-
-    public void setBlockBoundsForItemRender()
-    {
+    public void setBlockBoundsForItemRender() {
         float f = 0.125F;
         this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, 0.25F, 0.5F + f);
     }
 
-    @SideOnly(Side.CLIENT)
-    public int colorMultiplier(IBlockAccess worldIn, BlockPos pos, int renderPass)
-    {
-        return this.getRenderColor(worldIn.getBlockState(pos));
-    }
-
-    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos)
-    {
-        this.maxY = (double)((float)(((Integer)worldIn.getBlockState(pos).getValue(AGE)).intValue() * 2 + 2) / 16.0F);
+    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos) {
+        this.maxY = (double) ((float) (((Integer) worldIn.getBlockState(pos).getValue(AGE)).intValue() * 2 + 2) / 16.0F);
         float f = 0.125F;
-        this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, (float)this.maxY, 0.5F + f);
+        this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, (float) this.maxY, 0.5F + f);
     }
 
-    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune)
-    {
+    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune) {
         super.dropBlockAsItemWithChance(worldIn, pos, state, chance, fortune);
 
-        if (!worldIn.isRemote)
-        {
+        if (!worldIn.isRemote) {
             Item item = this.getSeedItem();
 
-            if (item != null)
-            {
-                int j = ((Integer)state.getValue(AGE)).intValue();
+            if (item != null) {
+                int j = ((Integer) state.getValue(AGE)).intValue();
 
-                for (int k = 0; k < 3; ++k)
-                {
-                    if (worldIn.rand.nextInt(15) <= j)
-                    {
+                for (int k = 0; k < 3; ++k) {
+                    if (worldIn.rand.nextInt(15) <= j) {
                         spawnAsEntity(worldIn, pos, new ItemStack(item));
                     }
                 }
@@ -182,51 +182,35 @@
         }
     }
 
-    protected Item getSeedItem()
-    {
+    protected Item getSeedItem() {
         return this.crop == Blocks.pumpkin ? Items.pumpkin_seeds : (this.crop == Blocks.melon_block ? Items.melon_seeds : null);
     }
 
-    public Item getItemDropped(IBlockState state, Random rand, int fortune)
-    {
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
         return null;
     }
 
-    public boolean canGrow(World worldIn, BlockPos pos, IBlockState state, boolean isClient)
-    {
-        return ((Integer)state.getValue(AGE)).intValue() != 7;
+    public boolean canGrow(World worldIn, BlockPos pos, IBlockState state, boolean isClient) {
+        return ((Integer) state.getValue(AGE)).intValue() != 7;
     }
 
-    public boolean canUseBonemeal(World worldIn, Random rand, BlockPos pos, IBlockState state)
-    {
+    public boolean canUseBonemeal(World worldIn, Random rand, BlockPos pos, IBlockState state) {
         return true;
     }
 
-    @SideOnly(Side.CLIENT)
-    public Item getItem(World worldIn, BlockPos pos)
-    {
-        Item item = this.getSeedItem();
-        return item != null ? item : null;
-    }
-
-    public void grow(World worldIn, Random rand, BlockPos pos, IBlockState state)
-    {
+    public void grow(World worldIn, Random rand, BlockPos pos, IBlockState state) {
         this.growStem(worldIn, pos, state);
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(AGE, Integer.valueOf(meta));
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
-        return ((Integer)state.getValue(AGE)).intValue();
+    public int getMetaFromState(IBlockState state) {
+        return ((Integer) state.getValue(AGE)).intValue();
     }
 
-    protected BlockState createBlockState()
-    {
-        return new BlockState(this, new IProperty[] {AGE, FACING});
+    protected BlockState createBlockState() {
+        return new BlockState(this, new IProperty[]{AGE, FACING});
     }
-}
+}
