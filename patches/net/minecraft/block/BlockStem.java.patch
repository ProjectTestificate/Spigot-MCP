--- decompiled\net\minecraft\block\BlockStem.java
+++ src\main\java\net\minecraft\block\BlockStem.java
@@ -1,10 +1,10 @@
 package net.minecraft.block;
 
-import com.google.common.base.Predicate;
 import java.util.Iterator;
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyDirection;
 import net.minecraft.block.properties.PropertyInteger;
 import net.minecraft.block.state.BlockState;
@@ -17,15 +17,18 @@
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+
+import com.google.common.base.Predicate;
+
 public class BlockStem extends BlockBush implements IGrowable
 {
+
     public static final PropertyInteger AGE = PropertyInteger.create("age", 0, 7);
     public static final PropertyDirection FACING = PropertyDirection.create("facing", new Predicate()
     {
         private static final String __OBFID = "CL_00002059";
         public boolean apply(EnumFacing facing)
@@ -80,18 +83,19 @@
 
         if (worldIn.getLightFromNeighbors(pos.up()) >= 9)
         {
             float f = BlockCrops.getGrowthChance(this, worldIn, pos);
 
-            if (rand.nextInt((int)(25.0F / f) + 1) == 0)
+            if (rand.nextInt((int)(worldIn.growthOdds / (this == Blocks.pumpkin_stem ? worldIn.spigotConfig.pumpkinModifier : worldIn.spigotConfig.melonModifier) * (25.0F / f)) + 1) == 0)    // Spigot            {
             {
                 int i = ((Integer)state.getValue(AGE)).intValue();
 
                 if (i < 7)
                 {
                     state = state.withProperty(AGE, Integer.valueOf(i + 1));
-                    worldIn.setBlockState(pos, state, 2);
+                    // worldIn.setBlockState(pos, state, 2); // CraftBukkit
+                    CraftEventFactory.handleBlockGrowEvent(worldIn, pos.getX(), pos.getY(), pos.getZ(), this, getMetaFromState(state)); // CraftBukkit
                 }
                 else
                 {
                     Iterator iterator = EnumFacing.Plane.HORIZONTAL.iterator();
 
@@ -108,52 +112,31 @@
                     pos = pos.offset(EnumFacing.Plane.HORIZONTAL.random(rand));
                     Block block = worldIn.getBlockState(pos.down()).getBlock();
 
                     if (worldIn.getBlockState(pos).getBlock().blockMaterial == Material.air && (block == Blocks.farmland || block == Blocks.dirt || block == Blocks.grass))
                     {
-                        worldIn.setBlockState(pos, this.crop.getDefaultState());
+                        // worldIn.setBlockState(pos, this.crop.getDefaultState()); // CraftBukkit
+                        CraftEventFactory.handleBlockGrowEvent(worldIn, pos.getX(), pos.getY(), pos.getZ(), this.crop, 0); // CraftBukkit
                     }
                 }
             }
         }
     }
 
     public void growStem(World worldIn, BlockPos pos, IBlockState state)
     {
         int i = ((Integer)state.getValue(AGE)).intValue() + MathHelper.getRandomIntegerInRange(worldIn.rand, 2, 5);
-        worldIn.setBlockState(pos, state.withProperty(AGE, Integer.valueOf(Math.min(7, i))), 2);
+        // worldIn.setBlockState(pos, state.withProperty(AGE, Integer.valueOf(Math.min(7, i))), 2); // CraftBukkit // SpigotMCP -- added "CraftBukkit"
+        CraftEventFactory.handleBlockGrowEvent(worldIn, pos.getX(), pos.getY(), pos.getZ(), this, Math.min(7, i)); // CraftBukkit
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getRenderColor(IBlockState state)
-    {
-        if (state.getBlock() != this)
-        {
-            return super.getRenderColor(state);
-        }
-        else
-        {
-            int i = ((Integer)state.getValue(AGE)).intValue();
-            int j = i * 32;
-            int k = 255 - i * 8;
-            int l = i * 4;
-            return j << 16 | k << 8 | l;
-        }
-    }
-
     public void setBlockBoundsForItemRender()
     {
         float f = 0.125F;
         this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, 0.25F, 0.5F + f);
     }
 
-    @SideOnly(Side.CLIENT)
-    public int colorMultiplier(IBlockAccess worldIn, BlockPos pos, int renderPass)
-    {
-        return this.getRenderColor(worldIn.getBlockState(pos));
-    }
-
     public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos)
     {
         this.maxY = (double)((float)(((Integer)worldIn.getBlockState(pos).getValue(AGE)).intValue() * 2 + 2) / 16.0F);
         float f = 0.125F;
         this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, (float)this.maxY, 0.5F + f);
@@ -200,17 +183,10 @@
     public boolean canUseBonemeal(World worldIn, Random rand, BlockPos pos, IBlockState state)
     {
         return true;
     }
 
-    @SideOnly(Side.CLIENT)
-    public Item getItem(World worldIn, BlockPos pos)
-    {
-        Item item = this.getSeedItem();
-        return item != null ? item : null;
-    }
-
     public void grow(World worldIn, Random rand, BlockPos pos, IBlockState state)
     {
         this.growStem(worldIn, pos, state);
     }
 
