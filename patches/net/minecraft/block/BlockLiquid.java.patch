---a/net/minecraft/block/BlockLiquid.java
+++b/net/minecraft/block/BlockLiquid.java
@@ -2,6 +2,7 @@
 
 import java.util.Iterator;
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyInteger;
@@ -14,172 +14,112 @@
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.EnumParticleTypes;
-import net.minecraft.util.EnumWorldBlockLayer;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraft.world.biome.BiomeColorHelper;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public abstract class BlockLiquid extends Block
-{
+
+public abstract class BlockLiquid extends Block {
+
     public static final PropertyInteger LEVEL = PropertyInteger.create("level", 0, 15);
     private static final String __OBFID = "CL_00000265";
 
-    protected BlockLiquid(Material materialIn)
-    {
+    protected BlockLiquid(Material materialIn) {
         super(materialIn);
         this.setDefaultState(this.blockState.getBaseState().withProperty(LEVEL, Integer.valueOf(0)));
         this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
         this.setTickRandomly(true);
     }
 
-    public boolean isPassable(IBlockAccess worldIn, BlockPos pos)
-    {
+    public boolean isPassable(IBlockAccess worldIn, BlockPos pos) {
         return this.blockMaterial != Material.lava;
     }
 
-    public static float getLiquidHeightPercent(int meta)
-    {
-        if (meta >= 8)
-        {
+    public static float getLiquidHeightPercent(int meta) {
+        if (meta >= 8) {
             meta = 0;
         }
 
-        return (float)(meta + 1) / 9.0F;
+        return (float) (meta + 1) / 9.0F;
     }
 
-    @SideOnly(Side.CLIENT)
-    public int colorMultiplier(IBlockAccess worldIn, BlockPos pos, int renderPass)
-    {
-        return this.blockMaterial == Material.water ? BiomeColorHelper.getWaterColorAtPos(worldIn, pos) : 16777215;
+    protected int getLevel(IBlockAccess worldIn, BlockPos pos) {
+        return worldIn.getBlockState(pos).getBlock().getMaterial() == this.blockMaterial ? ((Integer) worldIn.getBlockState(pos).getValue(LEVEL)).intValue() : -1;
     }
 
-    protected int getLevel(IBlockAccess worldIn, BlockPos pos)
-    {
-        return worldIn.getBlockState(pos).getBlock().getMaterial() == this.blockMaterial ? ((Integer)worldIn.getBlockState(pos).getValue(LEVEL)).intValue() : -1;
-    }
-
-    protected int getEffectiveFlowDecay(IBlockAccess worldIn, BlockPos pos)
-    {
+    protected int getEffectiveFlowDecay(IBlockAccess worldIn, BlockPos pos) {
         int i = this.getLevel(worldIn, pos);
         return i >= 8 ? 0 : i;
     }
 
-    public boolean isFullCube()
-    {
+    public boolean isFullCube() {
         return false;
     }
 
-    public boolean isOpaqueCube()
-    {
+    public boolean isOpaqueCube() {
         return false;
     }
 
-    public boolean canCollideCheck(IBlockState state, boolean hitIfLiquid)
-    {
-        return hitIfLiquid && ((Integer)state.getValue(LEVEL)).intValue() == 0;
+    public boolean canCollideCheck(IBlockState state, boolean hitIfLiquid) {
+        return hitIfLiquid && ((Integer) state.getValue(LEVEL)).intValue() == 0;
     }
 
-    public boolean isBlockSolid(IBlockAccess worldIn, BlockPos pos, EnumFacing side)
-    {
+    public boolean isBlockSolid(IBlockAccess worldIn, BlockPos pos, EnumFacing side) {
         Material material = worldIn.getBlockState(pos).getBlock().getMaterial();
         return material == this.blockMaterial ? false : (side == EnumFacing.UP ? true : (material == Material.ice ? false : super.isBlockSolid(worldIn, pos, side)));
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean shouldSideBeRendered(IBlockAccess worldIn, BlockPos pos, EnumFacing side)
-    {
-        return worldIn.getBlockState(pos).getBlock().getMaterial() == this.blockMaterial ? false : (side == EnumFacing.UP ? true : super.shouldSideBeRendered(worldIn, pos, side));
-    }
-
-    public AxisAlignedBB getCollisionBoundingBox(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public AxisAlignedBB getCollisionBoundingBox(World worldIn, BlockPos pos, IBlockState state) {
         return null;
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean func_176364_g(IBlockAccess p_176364_1_, BlockPos p_176364_2_)
-    {
-        for (int i = -1; i <= 1; ++i)
-        {
-            for (int j = -1; j <= 1; ++j)
-            {
-                IBlockState iblockstate = p_176364_1_.getBlockState(p_176364_2_.add(i, 0, j));
-                Block block = iblockstate.getBlock();
-                Material material = block.getMaterial();
-
-                if (material != this.blockMaterial && !block.isFullBlock())
-                {
-                    return true;
-                }
-            }
-        }
-
-        return false;
-    }
-
-    public int getRenderType()
-    {
+    public int getRenderType() {
         return 1;
     }
 
-    public Item getItemDropped(IBlockState state, Random rand, int fortune)
-    {
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
         return null;
     }
 
-    public int quantityDropped(Random random)
-    {
+    public int quantityDropped(Random random) {
         return 0;
     }
 
-    protected Vec3 getFlowVector(IBlockAccess worldIn, BlockPos pos)
-    {
+    protected Vec3 getFlowVector(IBlockAccess worldIn, BlockPos pos) {
         Vec3 vec3 = new Vec3(0.0D, 0.0D, 0.0D);
         int i = this.getEffectiveFlowDecay(worldIn, pos);
         Iterator iterator = EnumFacing.Plane.HORIZONTAL.iterator();
         EnumFacing enumfacing;
         BlockPos blockpos1;
 
-        while (iterator.hasNext())
-        {
-            enumfacing = (EnumFacing)iterator.next();
+        while (iterator.hasNext()) {
+            enumfacing = (EnumFacing) iterator.next();
             blockpos1 = pos.offset(enumfacing);
             int j = this.getEffectiveFlowDecay(worldIn, blockpos1);
             int k;
 
-            if (j < 0)
-            {
-                if (!worldIn.getBlockState(blockpos1).getBlock().getMaterial().blocksMovement())
-                {
+            if (j < 0) {
+                if (!worldIn.getBlockState(blockpos1).getBlock().getMaterial().blocksMovement()) {
                     j = this.getEffectiveFlowDecay(worldIn, blockpos1.down());
 
-                    if (j >= 0)
-                    {
+                    if (j >= 0) {
                         k = j - (i - 8);
-                        vec3 = vec3.addVector((double)((blockpos1.getX() - pos.getX()) * k), (double)((blockpos1.getY() - pos.getY()) * k), (double)((blockpos1.getZ() - pos.getZ()) * k));
+                        vec3 = vec3.addVector((double) ((blockpos1.getX() - pos.getX()) * k), (double) ((blockpos1.getY() - pos.getY()) * k), (double) ((blockpos1.getZ() - pos.getZ()) * k));
                     }
                 }
-            }
-            else if (j >= 0)
-            {
+            } else if (j >= 0) {
                 k = j - i;
-                vec3 = vec3.addVector((double)((blockpos1.getX() - pos.getX()) * k), (double)((blockpos1.getY() - pos.getY()) * k), (double)((blockpos1.getZ() - pos.getZ()) * k));
+                vec3 = vec3.addVector((double) ((blockpos1.getX() - pos.getX()) * k), (double) ((blockpos1.getY() - pos.getY()) * k), (double) ((blockpos1.getZ() - pos.getZ()) * k));
             }
         }
 
-        if (((Integer)worldIn.getBlockState(pos).getValue(LEVEL)).intValue() >= 8)
-        {
+        if (((Integer) worldIn.getBlockState(pos).getValue(LEVEL)).intValue() >= 8) {
             iterator = EnumFacing.Plane.HORIZONTAL.iterator();
 
-            while (iterator.hasNext())
-            {
-                enumfacing = (EnumFacing)iterator.next();
+            while (iterator.hasNext()) {
+                enumfacing = (EnumFacing) iterator.next();
                 blockpos1 = pos.offset(enumfacing);
 
-                if (this.isBlockSolid(worldIn, blockpos1, enumfacing) || this.isBlockSolid(worldIn, blockpos1.up(), enumfacing))
-                {
+                if (this.isBlockSolid(worldIn, blockpos1, enumfacing) || this.isBlockSolid(worldIn, blockpos1.up(), enumfacing)) {
                     vec3 = vec3.normalize().addVector(0.0D, -6.0D, 0.0D);
                     break;
                 }
@@ -190,146 +190,47 @@
         return vec3.normalize();
     }
 
-    public Vec3 modifyAcceleration(World worldIn, BlockPos pos, Entity entityIn, Vec3 motion)
-    {
+    public Vec3 modifyAcceleration(World worldIn, BlockPos pos, Entity entityIn, Vec3 motion) {
         return motion.add(this.getFlowVector(worldIn, pos));
     }
 
-    public int tickRate(World worldIn)
-    {
+    public int tickRate(World worldIn) {
         return this.blockMaterial == Material.water ? 5 : (this.blockMaterial == Material.lava ? (worldIn.provider.getHasNoSky() ? 10 : 30) : 0);
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getMixedBrightnessForBlock(IBlockAccess worldIn, BlockPos pos)
-    {
-        int i = worldIn.getCombinedLight(pos, 0);
-        int j = worldIn.getCombinedLight(pos.up(), 0);
-        int k = i & 255;
-        int l = j & 255;
-        int i1 = i >> 16 & 255;
-        int j1 = j >> 16 & 255;
-        return (k > l ? k : l) | (i1 > j1 ? i1 : j1) << 16;
-    }
-
-    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state) {
         this.checkForMixing(worldIn, pos, state);
     }
 
-    @SideOnly(Side.CLIENT)
-    public EnumWorldBlockLayer getBlockLayer()
-    {
-        return this.blockMaterial == Material.water ? EnumWorldBlockLayer.TRANSLUCENT : EnumWorldBlockLayer.SOLID;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public void randomDisplayTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        double d0 = (double)pos.getX();
-        double d1 = (double)pos.getY();
-        double d2 = (double)pos.getZ();
-
-        if (this.blockMaterial == Material.water)
-        {
-            int i = ((Integer)state.getValue(LEVEL)).intValue();
-
-            if (i > 0 && i < 8)
-            {
-                if (rand.nextInt(64) == 0)
-                {
-                    worldIn.playSound(d0 + 0.5D, d1 + 0.5D, d2 + 0.5D, "liquid.water", rand.nextFloat() * 0.25F + 0.75F, rand.nextFloat() * 1.0F + 0.5F, false);
-                }
-            }
-            else if (rand.nextInt(10) == 0)
-            {
-                worldIn.spawnParticle(EnumParticleTypes.SUSPENDED, d0 + (double)rand.nextFloat(), d1 + (double)rand.nextFloat(), d2 + (double)rand.nextFloat(), 0.0D, 0.0D, 0.0D, new int[0]);
-            }
-        }
-
-        if (this.blockMaterial == Material.lava && worldIn.getBlockState(pos.up()).getBlock().getMaterial() == Material.air && !worldIn.getBlockState(pos.up()).getBlock().isOpaqueCube())
-        {
-            if (rand.nextInt(100) == 0)
-            {
-                double d8 = d0 + (double)rand.nextFloat();
-                double d4 = d1 + this.maxY;
-                double d6 = d2 + (double)rand.nextFloat();
-                worldIn.spawnParticle(EnumParticleTypes.LAVA, d8, d4, d6, 0.0D, 0.0D, 0.0D, new int[0]);
-                worldIn.playSound(d8, d4, d6, "liquid.lavapop", 0.2F + rand.nextFloat() * 0.2F, 0.9F + rand.nextFloat() * 0.15F, false);
-            }
-
-            if (rand.nextInt(200) == 0)
-            {
-                worldIn.playSound(d0, d1, d2, "liquid.lava", 0.2F + rand.nextFloat() * 0.2F, 0.9F + rand.nextFloat() * 0.15F, false);
-            }
-        }
-
-        if (rand.nextInt(10) == 0 && World.doesBlockHaveSolidTopSurface(worldIn, pos.down()))
-        {
-            Material material = worldIn.getBlockState(pos.down(2)).getBlock().getMaterial();
-
-            if (!material.blocksMovement() && !material.isLiquid())
-            {
-                double d3 = d0 + (double)rand.nextFloat();
-                double d5 = d1 - 1.05D;
-                double d7 = d2 + (double)rand.nextFloat();
-
-                if (this.blockMaterial == Material.water)
-                {
-                    worldIn.spawnParticle(EnumParticleTypes.DRIP_WATER, d3, d5, d7, 0.0D, 0.0D, 0.0D, new int[0]);
-                }
-                else
-                {
-                    worldIn.spawnParticle(EnumParticleTypes.DRIP_LAVA, d3, d5, d7, 0.0D, 0.0D, 0.0D, new int[0]);
-                }
-            }
-        }
-    }
-
-    @SideOnly(Side.CLIENT)
-    public static double getFlowDirection(IBlockAccess worldIn, BlockPos pos, Material materialIn)
-    {
-        Vec3 vec3 = getFlowingBlock(materialIn).getFlowVector(worldIn, pos);
-        return vec3.xCoord == 0.0D && vec3.zCoord == 0.0D ? -1000.0D : Math.atan2(vec3.zCoord, vec3.xCoord) - (Math.PI / 2D);
-    }
-
-    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock)
-    {
+    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock) {
         this.checkForMixing(worldIn, pos, state);
     }
 
-    public boolean checkForMixing(World worldIn, BlockPos pos, IBlockState state)
-    {
-        if (this.blockMaterial == Material.lava)
-        {
+    public boolean checkForMixing(World worldIn, BlockPos pos, IBlockState state) {
+        if (this.blockMaterial == Material.lava) {
             boolean flag = false;
             EnumFacing[] aenumfacing = EnumFacing.values();
             int i = aenumfacing.length;
 
-            for (int j = 0; j < i; ++j)
-            {
+            for (int j = 0; j < i; ++j) {
                 EnumFacing enumfacing = aenumfacing[j];
 
-                if (enumfacing != EnumFacing.DOWN && worldIn.getBlockState(pos.offset(enumfacing)).getBlock().getMaterial() == Material.water)
-                {
+                if (enumfacing != EnumFacing.DOWN && worldIn.getBlockState(pos.offset(enumfacing)).getBlock().getMaterial() == Material.water) {
                     flag = true;
                     break;
                 }
             }
 
-            if (flag)
-            {
-                Integer integer = (Integer)state.getValue(LEVEL);
+            if (flag) {
+                Integer integer = (Integer) state.getValue(LEVEL);
 
-                if (integer.intValue() == 0)
-                {
+                if (integer.intValue() == 0) {
                     worldIn.setBlockState(pos, Blocks.obsidian.getDefaultState());
                     this.triggerMixEffects(worldIn, pos);
                     return true;
                 }
 
-                if (integer.intValue() <= 4)
-                {
+                if (integer.intValue() <= 4) {
                     worldIn.setBlockState(pos, Blocks.cobblestone.getDefaultState());
                     this.triggerMixEffects(worldIn, pos);
                     return true;
@@ -340,67 +340,49 @@
         return false;
     }
 
-    protected void triggerMixEffects(World worldIn, BlockPos pos)
-    {
-        double d0 = (double)pos.getX();
-        double d1 = (double)pos.getY();
-        double d2 = (double)pos.getZ();
+    protected void triggerMixEffects(World worldIn, BlockPos pos) {
+        double d0 = (double) pos.getX();
+        double d1 = (double) pos.getY();
+        double d2 = (double) pos.getZ();
         worldIn.playSoundEffect(d0 + 0.5D, d1 + 0.5D, d2 + 0.5D, "random.fizz", 0.5F, 2.6F + (worldIn.rand.nextFloat() - worldIn.rand.nextFloat()) * 0.8F);
 
-        for (int i = 0; i < 8; ++i)
-        {
+        for (int i = 0; i < 8; ++i) {
             worldIn.spawnParticle(EnumParticleTypes.SMOKE_LARGE, d0 + Math.random(), d1 + 1.2D, d2 + Math.random(), 0.0D, 0.0D, 0.0D, new int[0]);
         }
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(LEVEL, Integer.valueOf(meta));
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
-        return ((Integer)state.getValue(LEVEL)).intValue();
+    public int getMetaFromState(IBlockState state) {
+        return ((Integer) state.getValue(LEVEL)).intValue();
     }
 
-    protected BlockState createBlockState()
-    {
-        return new BlockState(this, new IProperty[] {LEVEL});
+    protected BlockState createBlockState() {
+        return new BlockState(this, new IProperty[]{LEVEL});
     }
 
-    public static BlockDynamicLiquid getFlowingBlock(Material materialIn)
-    {
-        if (materialIn == Material.water)
-        {
+    public static BlockDynamicLiquid getFlowingBlock(Material materialIn) {
+        if (materialIn == Material.water) {
             return Blocks.flowing_water;
-        }
-        else if (materialIn == Material.lava)
-        {
+        } else if (materialIn == Material.lava) {
             return Blocks.flowing_lava;
-        }
-        else
-        {
+        } else {
             throw new IllegalArgumentException("Invalid material");
         }
     }
 
-    public static BlockStaticLiquid getStaticBlock(Material materialIn)
-    {
-        if (materialIn == Material.water)
-        {
+    public static BlockStaticLiquid getStaticBlock(Material materialIn) {
+        if (materialIn == Material.water) {
             return Blocks.water;
-        }
-        else if (materialIn == Material.lava)
-        {
+        } else if (materialIn == Material.lava) {
             return Blocks.lava;
-        }
-        else
-        {
+        } else {
             throw new IllegalArgumentException("Invalid material");
         }
     }
-}
+}
