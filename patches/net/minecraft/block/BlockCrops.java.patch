--- decompiled\net\minecraft\block\BlockCrops.java
+++ src\main\java\net\minecraft\block\BlockCrops.java
@@ -1,8 +1,9 @@
 package net.minecraft.block;
 
 import java.util.Random;
+
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyInteger;
 import net.minecraft.block.state.BlockState;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.creativetab.CreativeTabs;
@@ -11,91 +12,82 @@
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockCrops extends BlockBush implements IGrowable
-{
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+
+public class BlockCrops extends BlockBush implements IGrowable {
+
     public static final PropertyInteger AGE = PropertyInteger.create("age", 0, 7);
     private static final String __OBFID = "CL_00000222";
 
-    protected BlockCrops()
-    {
+    protected BlockCrops() {
         this.setDefaultState(this.blockState.getBaseState().withProperty(AGE, Integer.valueOf(0)));
         this.setTickRandomly(true);
         float f = 0.5F;
         this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, 0.25F, 0.5F + f);
-        this.setCreativeTab((CreativeTabs)null);
+        this.setCreativeTab((CreativeTabs) null);
         this.setHardness(0.0F);
         this.setStepSound(soundTypeGrass);
         this.disableStats();
     }
 
-    protected boolean canPlaceBlockOn(Block ground)
-    {
+    protected boolean canPlaceBlockOn(Block ground) {
         return ground == Blocks.farmland;
     }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
         super.updateTick(worldIn, pos, state, rand);
 
-        if (worldIn.getLightFromNeighbors(pos.up()) >= 9)
-        {
-            int i = ((Integer)state.getValue(AGE)).intValue();
+        if (worldIn.getLightFromNeighbors(pos.up()) >= 9) {
+            int i = ((Integer) state.getValue(AGE)).intValue();
 
-            if (i < 7)
-            {
+            if (i < 7) {
                 float f = getGrowthChance(this, worldIn, pos);
 
-                if (rand.nextInt((int)(25.0F / f) + 1) == 0)
-                {
-                    worldIn.setBlockState(pos, state.withProperty(AGE, Integer.valueOf(i + 1)), 2);
+                if (rand.nextInt((int) (worldIn.growthOdds / worldIn.spigotConfig.wheatModifier * (25.0F / f)) + 1) == 0) { // Spigot
+                    // CraftBukkit start
+                    IBlockState data = state.withProperty(AGE, Integer.valueOf(i + 1));
+                    CraftEventFactory.handleBlockGrowEvent(worldIn, pos.getX(), pos.getY(), pos.getZ(), this, getMetaFromState(data));
+                    // CraftBukkit end
                 }
             }
         }
     }
 
-    public void grow(World worldIn, BlockPos pos, IBlockState state)
-    {
-        int i = ((Integer)state.getValue(AGE)).intValue() + MathHelper.getRandomIntegerInRange(worldIn.rand, 2, 5);
+    public void grow(World worldIn, BlockPos pos, IBlockState state) {
+        int i = ((Integer) state.getValue(AGE)).intValue() + MathHelper.getRandomIntegerInRange(worldIn.rand, 2, 5);
 
-        if (i > 7)
-        {
+        if (i > 7) {
             i = 7;
         }
-
-        worldIn.setBlockState(pos, state.withProperty(AGE, Integer.valueOf(i)), 2);
+        // CraftBukkit start
+        IBlockState data = state.withProperty(AGE, Integer.valueOf(i));
+        CraftEventFactory.handleBlockGrowEvent(worldIn, pos.getX(), pos.getY(), pos.getZ(), this, getMetaFromState(data));
+        // CraftBukkit end
     }
 
-    protected static float getGrowthChance(Block blockIn, World worldIn, BlockPos pos)
-    {
+    protected static float getGrowthChance(Block blockIn, World worldIn, BlockPos pos) {
         float f = 1.0F;
         BlockPos blockpos1 = pos.down();
 
-        for (int i = -1; i <= 1; ++i)
-        {
-            for (int j = -1; j <= 1; ++j)
-            {
+        for (int i = -1; i <= 1; ++i) {
+            for (int j = -1; j <= 1; ++j) {
                 float f1 = 0.0F;
                 IBlockState iblockstate = worldIn.getBlockState(blockpos1.add(i, 0, j));
 
-                if (iblockstate.getBlock() == Blocks.farmland)
-                {
+                if (iblockstate.getBlock() == Blocks.farmland) {
                     f1 = 1.0F;
 
-                    if (((Integer)iblockstate.getValue(BlockFarmland.MOISTURE)).intValue() > 0)
-                    {
+                    if (((Integer) iblockstate.getValue(BlockFarmland.MOISTURE)).intValue() > 0) {
                         f1 = 3.0F;
                     }
                 }
 
-                if (i != 0 || j != 0)
-                {
+                if (i != 0 || j != 0) {
                     f1 /= 4.0F;
                 }
 
                 f += f1;
             }
@@ -106,101 +98,76 @@
         BlockPos blockpos4 = pos.west();
         BlockPos blockpos5 = pos.east();
         boolean flag = blockIn == worldIn.getBlockState(blockpos4).getBlock() || blockIn == worldIn.getBlockState(blockpos5).getBlock();
         boolean flag1 = blockIn == worldIn.getBlockState(blockpos2).getBlock() || blockIn == worldIn.getBlockState(blockpos3).getBlock();
 
-        if (flag && flag1)
-        {
+        if (flag && flag1) {
             f /= 2.0F;
-        }
-        else
-        {
+        } else {
             boolean flag2 = blockIn == worldIn.getBlockState(blockpos4.north()).getBlock() || blockIn == worldIn.getBlockState(blockpos5.north()).getBlock() || blockIn == worldIn.getBlockState(blockpos5.south()).getBlock() || blockIn == worldIn.getBlockState(blockpos4.south()).getBlock();
 
-            if (flag2)
-            {
+            if (flag2) {
                 f /= 2.0F;
             }
         }
 
         return f;
     }
 
-    public boolean canBlockStay(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public boolean canBlockStay(World worldIn, BlockPos pos, IBlockState state) {
         return (worldIn.getLight(pos) >= 8 || worldIn.canSeeSky(pos)) && this.canPlaceBlockOn(worldIn.getBlockState(pos.down()).getBlock());
     }
 
-    protected Item getSeed()
-    {
+    protected Item getSeed() {
         return Items.wheat_seeds;
     }
 
-    protected Item getCrop()
-    {
+    protected Item getCrop() {
         return Items.wheat;
     }
 
-    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune)
-    {
+    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune) {
         super.dropBlockAsItemWithChance(worldIn, pos, state, chance, 0);
 
-        if (!worldIn.isRemote)
-        {
-            int j = ((Integer)state.getValue(AGE)).intValue();
+        if (!worldIn.isRemote) {
+            int j = ((Integer) state.getValue(AGE)).intValue();
 
-            if (j >= 7)
-            {
+            if (j >= 7) {
                 int k = 3 + fortune;
 
-                for (int l = 0; l < k; ++l)
-                {
-                    if (worldIn.rand.nextInt(15) <= j)
-                    {
+                for (int l = 0; l < k; ++l) {
+                    if (worldIn.rand.nextInt(15) <= j) {
                         spawnAsEntity(worldIn, pos, new ItemStack(this.getSeed(), 1, 0));
                     }
                 }
             }
         }
     }
 
-    public Item getItemDropped(IBlockState state, Random rand, int fortune)
-    {
-        return ((Integer)state.getValue(AGE)).intValue() == 7 ? this.getCrop() : this.getSeed();
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
+        return ((Integer) state.getValue(AGE)).intValue() == 7 ? this.getCrop() : this.getSeed();
     }
 
-    public boolean canGrow(World worldIn, BlockPos pos, IBlockState state, boolean isClient)
-    {
-        return ((Integer)state.getValue(AGE)).intValue() < 7;
+    public boolean canGrow(World worldIn, BlockPos pos, IBlockState state, boolean isClient) {
+        return ((Integer) state.getValue(AGE)).intValue() < 7;
     }
 
-    public boolean canUseBonemeal(World worldIn, Random rand, BlockPos pos, IBlockState state)
-    {
+    public boolean canUseBonemeal(World worldIn, Random rand, BlockPos pos, IBlockState state) {
         return true;
     }
 
-    @SideOnly(Side.CLIENT)
-    public Item getItem(World worldIn, BlockPos pos)
-    {
-        return this.getSeed();
-    }
-
-    public void grow(World worldIn, Random rand, BlockPos pos, IBlockState state)
-    {
+    public void grow(World worldIn, Random rand, BlockPos pos, IBlockState state) {
         this.grow(worldIn, pos, state);
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(AGE, Integer.valueOf(meta));
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
-        return ((Integer)state.getValue(AGE)).intValue();
+    public int getMetaFromState(IBlockState state) {
+        return ((Integer) state.getValue(AGE)).intValue();
     }
 
-    protected BlockState createBlockState()
-    {
-        return new BlockState(this, new IProperty[] {AGE});
+    protected BlockState createBlockState() {
+        return new BlockState(this, new IProperty[]{AGE});
     }
 }
