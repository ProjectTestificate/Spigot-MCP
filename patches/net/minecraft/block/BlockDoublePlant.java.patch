---a/net/minecraft/block/BlockDoublePlant.java
+++b/net/minecraft/block/BlockDoublePlant.java
@@ -1,13 +1,12 @@
 package net.minecraft.block;
 
-import java.util.List;
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyEnum;
 import net.minecraft.block.state.BlockState;
 import net.minecraft.block.state.IBlockState;
-import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
@@ -20,19 +20,14 @@
 import net.minecraft.util.IStringSerializable;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraft.world.biome.BiomeColorHelper;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockDoublePlant extends BlockBush implements IGrowable
-{
+
+public class BlockDoublePlant extends BlockBush implements IGrowable {
+
     public static final PropertyEnum VARIANT = PropertyEnum.create("variant", BlockDoublePlant.EnumPlantType.class);
     public static final PropertyEnum HALF = PropertyEnum.create("half", BlockDoublePlant.EnumBlockHalf.class);
     private static final String __OBFID = "CL_00000231";
 
-    public BlockDoublePlant()
-    {
+    public BlockDoublePlant() {
         super(Material.vine);
         this.setDefaultState(this.blockState.getBaseState().withProperty(VARIANT, BlockDoublePlant.EnumPlantType.SUNFLOWER).withProperty(HALF, BlockDoublePlant.EnumBlockHalf.LOWER));
         this.setHardness(0.0F);
@@ -39,185 +39,136 @@
         this.setUnlocalizedName("doublePlant");
     }
 
-    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos)
-    {
+    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos) {
         this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
     }
 
-    public BlockDoublePlant.EnumPlantType getVariant(IBlockAccess worldIn, BlockPos pos)
-    {
+    public BlockDoublePlant.EnumPlantType getVariant(IBlockAccess worldIn, BlockPos pos) {
         IBlockState iblockstate = worldIn.getBlockState(pos);
 
-        if (iblockstate.getBlock() == this)
-        {
+        if (iblockstate.getBlock() == this) {
             iblockstate = this.getActualState(iblockstate, worldIn, pos);
-            return (BlockDoublePlant.EnumPlantType)iblockstate.getValue(VARIANT);
-        }
-        else
-        {
+            return (BlockDoublePlant.EnumPlantType) iblockstate.getValue(VARIANT);
+        } else {
             return BlockDoublePlant.EnumPlantType.FERN;
         }
     }
 
-    public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
-    {
+    public boolean canPlaceBlockAt(World worldIn, BlockPos pos) {
         return super.canPlaceBlockAt(worldIn, pos) && worldIn.isAirBlock(pos.up());
     }
 
-    public boolean isReplaceable(World worldIn, BlockPos pos)
-    {
+    public boolean isReplaceable(World worldIn, BlockPos pos) {
         IBlockState iblockstate = worldIn.getBlockState(pos);
 
-        if (iblockstate.getBlock() != this)
-        {
+        if (iblockstate.getBlock() != this) {
             return true;
-        }
-        else
-        {
-            BlockDoublePlant.EnumPlantType enumplanttype = (BlockDoublePlant.EnumPlantType)this.getActualState(iblockstate, worldIn, pos).getValue(VARIANT);
+        } else {
+            BlockDoublePlant.EnumPlantType enumplanttype = (BlockDoublePlant.EnumPlantType) this.getActualState(iblockstate, worldIn, pos).getValue(VARIANT);
             return enumplanttype == BlockDoublePlant.EnumPlantType.FERN || enumplanttype == BlockDoublePlant.EnumPlantType.GRASS;
         }
     }
 
-    protected void checkAndDropBlock(World worldIn, BlockPos pos, IBlockState state)
-    {
-        if (!this.canBlockStay(worldIn, pos, state))
-        {
+    protected void checkAndDropBlock(World worldIn, BlockPos pos, IBlockState state) {
+        if (!this.canBlockStay(worldIn, pos, state)) {
             boolean flag = state.getValue(HALF) == BlockDoublePlant.EnumBlockHalf.UPPER;
             BlockPos blockpos1 = flag ? pos : pos.up();
             BlockPos blockpos2 = flag ? pos.down() : pos;
             Object object = flag ? this : worldIn.getBlockState(blockpos1).getBlock();
             Object object1 = flag ? worldIn.getBlockState(blockpos2).getBlock() : this;
 
-            if (object == this)
-            {
-                worldIn.setBlockState(blockpos1, Blocks.air.getDefaultState(), 3);
+            if (object == this) {
+                worldIn.setBlockState(blockpos1, Blocks.air.getDefaultState(), 2); // CraftBukkit
             }
 
-            if (object1 == this)
-            {
-                worldIn.setBlockState(blockpos2, Blocks.air.getDefaultState(), 3);
+            if (object1 == this) {
+                worldIn.setBlockState(blockpos2, Blocks.air.getDefaultState(), 2); // CraftBukkit
 
-                if (!flag)
-                {
+                if (!flag) {
                     this.dropBlockAsItem(worldIn, blockpos2, state, 0);
                 }
             }
+
+            // CraftBukkit start - delay updates
+            worldIn.notifyNeighborsRespectDebug(blockpos1, this);
+            worldIn.notifyNeighborsRespectDebug(blockpos2, this);
+            // CraftBukkit end
         }
     }
 
-    public boolean canBlockStay(World worldIn, BlockPos pos, IBlockState state)
-    {
-        if (state.getValue(HALF) == BlockDoublePlant.EnumBlockHalf.UPPER)
-        {
+    public boolean canBlockStay(World worldIn, BlockPos pos, IBlockState state) {
+        if (state.getValue(HALF) == BlockDoublePlant.EnumBlockHalf.UPPER) {
             return worldIn.getBlockState(pos.down()).getBlock() == this;
-        }
-        else
-        {
+        } else {
             IBlockState iblockstate1 = worldIn.getBlockState(pos.up());
             return iblockstate1.getBlock() == this && super.canBlockStay(worldIn, pos, iblockstate1);
         }
     }
 
-    public Item getItemDropped(IBlockState state, Random rand, int fortune)
-    {
-        if (state.getValue(HALF) == BlockDoublePlant.EnumBlockHalf.UPPER)
-        {
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
+        if (state.getValue(HALF) == BlockDoublePlant.EnumBlockHalf.UPPER) {
             return null;
-        }
-        else
-        {
-            BlockDoublePlant.EnumPlantType enumplanttype = (BlockDoublePlant.EnumPlantType)state.getValue(VARIANT);
+        } else {
+            BlockDoublePlant.EnumPlantType enumplanttype = (BlockDoublePlant.EnumPlantType) state.getValue(VARIANT);
             return enumplanttype == BlockDoublePlant.EnumPlantType.FERN ? null : (enumplanttype == BlockDoublePlant.EnumPlantType.GRASS ? (rand.nextInt(8) == 0 ? Items.wheat_seeds : null) : Item.getItemFromBlock(this));
         }
     }
 
-    public int damageDropped(IBlockState state)
-    {
-        return state.getValue(HALF) != BlockDoublePlant.EnumBlockHalf.UPPER && state.getValue(VARIANT) != BlockDoublePlant.EnumPlantType.GRASS ? ((BlockDoublePlant.EnumPlantType)state.getValue(VARIANT)).getMeta() : 0;
+    public int damageDropped(IBlockState state) {
+        return state.getValue(HALF) != BlockDoublePlant.EnumBlockHalf.UPPER && state.getValue(VARIANT) != BlockDoublePlant.EnumPlantType.GRASS ? ((BlockDoublePlant.EnumPlantType) state.getValue(VARIANT)).getMeta() : 0;
     }
 
-    @SideOnly(Side.CLIENT)
-    public int colorMultiplier(IBlockAccess worldIn, BlockPos pos, int renderPass)
-    {
-        BlockDoublePlant.EnumPlantType enumplanttype = this.getVariant(worldIn, pos);
-        return enumplanttype != BlockDoublePlant.EnumPlantType.GRASS && enumplanttype != BlockDoublePlant.EnumPlantType.FERN ? 16777215 : BiomeColorHelper.getGrassColorAtPos(worldIn, pos);
-    }
-
-    public void placeAt(World worldIn, BlockPos lowerPos, BlockDoublePlant.EnumPlantType variant, int flags)
-    {
+    public void placeAt(World worldIn, BlockPos lowerPos, BlockDoublePlant.EnumPlantType variant, int flags) {
         worldIn.setBlockState(lowerPos, this.getDefaultState().withProperty(HALF, BlockDoublePlant.EnumBlockHalf.LOWER).withProperty(VARIANT, variant), flags);
         worldIn.setBlockState(lowerPos.up(), this.getDefaultState().withProperty(HALF, BlockDoublePlant.EnumBlockHalf.UPPER), flags);
     }
 
-    public void onBlockPlacedBy(World worldIn, BlockPos pos, IBlockState state, EntityLivingBase placer, ItemStack stack)
-    {
+    public void onBlockPlacedBy(World worldIn, BlockPos pos, IBlockState state, EntityLivingBase placer, ItemStack stack) {
         worldIn.setBlockState(pos.up(), this.getDefaultState().withProperty(HALF, BlockDoublePlant.EnumBlockHalf.UPPER), 2);
     }
 
-    public void harvestBlock(World worldIn, EntityPlayer player, BlockPos pos, IBlockState state, TileEntity te)
-    {
-        if (worldIn.isRemote || player.getCurrentEquippedItem() == null || player.getCurrentEquippedItem().getItem() != Items.shears || state.getValue(HALF) != BlockDoublePlant.EnumBlockHalf.LOWER || !this.onHarvest(worldIn, pos, state, player))
-        {
+    public void harvestBlock(World worldIn, EntityPlayer player, BlockPos pos, IBlockState state, TileEntity te) {
+        if (worldIn.isRemote || player.getCurrentEquippedItem() == null || player.getCurrentEquippedItem().getItem() != Items.shears || state.getValue(HALF) != BlockDoublePlant.EnumBlockHalf.LOWER || !this.onHarvest(worldIn, pos, state, player)) {
             super.harvestBlock(worldIn, player, pos, state, te);
         }
     }
 
-    public void onBlockHarvested(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player)
-    {
-        if (state.getValue(HALF) == BlockDoublePlant.EnumBlockHalf.UPPER)
-        {
-            if (worldIn.getBlockState(pos.down()).getBlock() == this)
-            {
-                if (!player.capabilities.isCreativeMode)
-                {
+    public void onBlockHarvested(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player) {
+        if (state.getValue(HALF) == BlockDoublePlant.EnumBlockHalf.UPPER) {
+            if (worldIn.getBlockState(pos.down()).getBlock() == this) {
+                if (!player.capabilities.isCreativeMode) {
                     IBlockState iblockstate1 = worldIn.getBlockState(pos.down());
-                    BlockDoublePlant.EnumPlantType enumplanttype = (BlockDoublePlant.EnumPlantType)iblockstate1.getValue(VARIANT);
+                    BlockDoublePlant.EnumPlantType enumplanttype = (BlockDoublePlant.EnumPlantType) iblockstate1.getValue(VARIANT);
 
-                    if (enumplanttype != BlockDoublePlant.EnumPlantType.FERN && enumplanttype != BlockDoublePlant.EnumPlantType.GRASS)
-                    {
+                    if (enumplanttype != BlockDoublePlant.EnumPlantType.FERN && enumplanttype != BlockDoublePlant.EnumPlantType.GRASS) {
                         worldIn.destroyBlock(pos.down(), true);
-                    }
-                    else if (!worldIn.isRemote)
-                    {
-                        if (player.getCurrentEquippedItem() != null && player.getCurrentEquippedItem().getItem() == Items.shears)
-                        {
+                    } else if (!worldIn.isRemote) {
+                        if (player.getCurrentEquippedItem() != null && player.getCurrentEquippedItem().getItem() == Items.shears) {
                             this.onHarvest(worldIn, pos, iblockstate1, player);
                             worldIn.setBlockToAir(pos.down());
-                        }
-                        else
-                        {
+                        } else {
                             worldIn.destroyBlock(pos.down(), true);
                         }
-                    }
-                    else
-                    {
+                    } else {
                         worldIn.setBlockToAir(pos.down());
                     }
-                }
-                else
-                {
+                } else {
                     worldIn.setBlockToAir(pos.down());
                 }
             }
-        }
-        else if (player.capabilities.isCreativeMode && worldIn.getBlockState(pos.up()).getBlock() == this)
-        {
+        } else if (player.capabilities.isCreativeMode && worldIn.getBlockState(pos.up()).getBlock() == this) {
             worldIn.setBlockState(pos.up(), Blocks.air.getDefaultState(), 2);
         }
 
         super.onBlockHarvested(worldIn, pos, state, player);
     }
 
-    private boolean onHarvest(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player)
-    {
-        BlockDoublePlant.EnumPlantType enumplanttype = (BlockDoublePlant.EnumPlantType)state.getValue(VARIANT);
+    private boolean onHarvest(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player) {
+        BlockDoublePlant.EnumPlantType enumplanttype = (BlockDoublePlant.EnumPlantType) state.getValue(VARIANT);
 
-        if (enumplanttype != BlockDoublePlant.EnumPlantType.FERN && enumplanttype != BlockDoublePlant.EnumPlantType.GRASS)
-        {
+        if (enumplanttype != BlockDoublePlant.EnumPlantType.FERN && enumplanttype != BlockDoublePlant.EnumPlantType.GRASS) {
             return false;
-        }
-        else
-        {
+        } else {
             player.triggerAchievement(StatList.mineBlockStatArray[Block.getIdFromBlock(this)]);
             int i = (enumplanttype == BlockDoublePlant.EnumPlantType.GRASS ? BlockTallGrass.EnumType.GRASS : BlockTallGrass.EnumType.FERN).getMeta();
             spawnAsEntity(worldIn, pos, new ItemStack(Blocks.tallgrass, 2, i));
@@ -226,66 +226,32 @@
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public void getSubBlocks(Item itemIn, CreativeTabs tab, List list)
-    {
-        BlockDoublePlant.EnumPlantType[] aenumplanttype = BlockDoublePlant.EnumPlantType.values();
-        int i = aenumplanttype.length;
-
-        for (int j = 0; j < i; ++j)
-        {
-            BlockDoublePlant.EnumPlantType enumplanttype = aenumplanttype[j];
-            list.add(new ItemStack(itemIn, 1, enumplanttype.getMeta()));
-        }
-    }
-
-    public int getDamageValue(World worldIn, BlockPos pos)
-    {
+    public int getDamageValue(World worldIn, BlockPos pos) {
         return this.getVariant(worldIn, pos).getMeta();
     }
 
-    public boolean canGrow(World worldIn, BlockPos pos, IBlockState state, boolean isClient)
-    {
+    public boolean canGrow(World worldIn, BlockPos pos, IBlockState state, boolean isClient) {
         BlockDoublePlant.EnumPlantType enumplanttype = this.getVariant(worldIn, pos);
         return enumplanttype != BlockDoublePlant.EnumPlantType.GRASS && enumplanttype != BlockDoublePlant.EnumPlantType.FERN;
     }
 
-    public boolean canUseBonemeal(World worldIn, Random rand, BlockPos pos, IBlockState state)
-    {
+    public boolean canUseBonemeal(World worldIn, Random rand, BlockPos pos, IBlockState state) {
         return true;
     }
 
-    public void grow(World worldIn, Random rand, BlockPos pos, IBlockState state)
-    {
+    public void grow(World worldIn, Random rand, BlockPos pos, IBlockState state) {
         spawnAsEntity(worldIn, pos, new ItemStack(this, 1, this.getVariant(worldIn, pos).getMeta()));
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return (meta & 8) > 0 ? this.getDefaultState().withProperty(HALF, BlockDoublePlant.EnumBlockHalf.UPPER) : this.getDefaultState().withProperty(HALF, BlockDoublePlant.EnumBlockHalf.LOWER).withProperty(VARIANT, BlockDoublePlant.EnumPlantType.byMetadata(meta & 7));
     }
 
-    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos)
-    {
-        if (state.getValue(HALF) == BlockDoublePlant.EnumBlockHalf.UPPER)
-        {
+    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos) {
+        if (state.getValue(HALF) == BlockDoublePlant.EnumBlockHalf.UPPER) {
             IBlockState iblockstate1 = worldIn.getBlockState(pos.down());
 
-            if (iblockstate1.getBlock() == this)
-            {
+            if (iblockstate1.getBlock() == this) {
                 state = state.withProperty(VARIANT, iblockstate1.getValue(VARIANT));
             }
         }
@@ -280,43 +280,31 @@
         return state;
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
-        return state.getValue(HALF) == BlockDoublePlant.EnumBlockHalf.UPPER ? 8 : ((BlockDoublePlant.EnumPlantType)state.getValue(VARIANT)).getMeta();
+    public int getMetaFromState(IBlockState state) {
+        return state.getValue(HALF) == BlockDoublePlant.EnumBlockHalf.UPPER ? 8 : ((BlockDoublePlant.EnumPlantType) state.getValue(VARIANT)).getMeta();
     }
 
-    protected BlockState createBlockState()
-    {
-        return new BlockState(this, new IProperty[] {HALF, VARIANT});
+    protected BlockState createBlockState() {
+        return new BlockState(this, new IProperty[]{HALF, VARIANT});
     }
 
-    @SideOnly(Side.CLIENT)
-    public Block.EnumOffsetType getOffsetType()
-    {
-        return Block.EnumOffsetType.XZ;
-    }
-
-    static enum EnumBlockHalf implements IStringSerializable
-    {
+    static enum EnumBlockHalf implements IStringSerializable {
         UPPER,
         LOWER;
 
         private static final String __OBFID = "CL_00002122";
 
-        public String toString()
-        {
+        public String toString() {
             return this.getName();
         }
 
-        public String getName()
-        {
+        public String getName() {
             return this == UPPER ? "upper" : "lower";
         }
     }
 
-    public static enum EnumPlantType implements IStringSerializable
-    {
+    public static enum EnumPlantType implements IStringSerializable {
         SUNFLOWER(0, "sunflower"),
         SYRINGA(1, "syringa"),
         GRASS(2, "double_grass", "grass"),
@@ -329,59 +329,48 @@
 
         private static final String __OBFID = "CL_00002121";
 
-        private EnumPlantType(int meta, String name)
-        {
+        private EnumPlantType(int meta, String name) {
             this(meta, name, name);
         }
 
-        private EnumPlantType(int meta, String name, String unlocalizedName)
-        {
+        private EnumPlantType(int meta, String name, String unlocalizedName) {
             this.meta = meta;
             this.name = name;
             this.unlocalizedName = unlocalizedName;
         }
 
-        public int getMeta()
-        {
+        public int getMeta() {
             return this.meta;
         }
 
-        public String toString()
-        {
+        public String toString() {
             return this.name;
         }
 
-        public static BlockDoublePlant.EnumPlantType byMetadata(int meta)
-        {
-            if (meta < 0 || meta >= META_LOOKUP.length)
-            {
+        public static BlockDoublePlant.EnumPlantType byMetadata(int meta) {
+            if (meta < 0 || meta >= META_LOOKUP.length) {
                 meta = 0;
             }
 
             return META_LOOKUP[meta];
         }
 
-        public String getName()
-        {
+        public String getName() {
             return this.name;
         }
 
-        public String getUnlocalizedName()
-        {
+        public String getUnlocalizedName() {
             return this.unlocalizedName;
         }
 
-        static
-        {
+        static {
             BlockDoublePlant.EnumPlantType[] var0 = values();
             int var1 = var0.length;
 
-            for (int var2 = 0; var2 < var1; ++var2)
-            {
+            for (int var2 = 0; var2 < var1; ++var2) {
                 BlockDoublePlant.EnumPlantType var3 = var0[var2];
                 META_LOOKUP[var3.getMeta()] = var3;
             }
         }
     }
-}
+}
