---a/net/minecraft/block/Block.java
+++b/net/minecraft/block/Block.java
@@ -3,6 +3,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
+
 import net.minecraft.block.material.MapColor;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
@@ -23,7 +23,6 @@
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumWorldBlockLayer;
 import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.util.ObjectIntIdentityMap;
 import net.minecraft.util.RegistryNamespacedDefaultedByKey;
@@ -33,11 +33,7 @@
 import net.minecraft.world.Explosion;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class Block
-{
+import org.spigotmc.AsyncCatcher;
+
+public class Block {
+
     private static final ResourceLocation AIR_ID = new ResourceLocation("air");
     public static final RegistryNamespacedDefaultedByKey blockRegistry = new RegistryNamespacedDefaultedByKey(AIR_ID);
     public static final ObjectIntIdentityMap BLOCK_STATE_IDS = new ObjectIntIdentityMap();
@@ -48,54 +48,54 @@
     public static final Block.SoundType soundTypeGrass = new Block.SoundType("grass", 1.0F, 1.0F);
     public static final Block.SoundType soundTypePiston = new Block.SoundType("stone", 1.0F, 1.0F);
     public static final Block.SoundType soundTypeMetal = new Block.SoundType("stone", 1.0F, 1.5F);
-    public static final Block.SoundType soundTypeGlass = new Block.SoundType("stone", 1.0F, 1.0F)
-    {
+    public static final Block.SoundType soundTypeGlass = new Block.SoundType("stone", 1.0F, 1.0F) {
+
         private static final String __OBFID = "CL_00000200";
-        public String getBreakSound()
-        {
+
+        public String getBreakSound() {
             return "dig.glass";
         }
-        public String getPlaceSound()
-        {
+
+        public String getPlaceSound() {
             return "step.stone";
         }
     };
     public static final Block.SoundType soundTypeCloth = new Block.SoundType("cloth", 1.0F, 1.0F);
     public static final Block.SoundType soundTypeSand = new Block.SoundType("sand", 1.0F, 1.0F);
     public static final Block.SoundType soundTypeSnow = new Block.SoundType("snow", 1.0F, 1.0F);
-    public static final Block.SoundType soundTypeLadder = new Block.SoundType("ladder", 1.0F, 1.0F)
-    {
+    public static final Block.SoundType soundTypeLadder = new Block.SoundType("ladder", 1.0F, 1.0F) {
+
         private static final String __OBFID = "CL_00000201";
-        public String getBreakSound()
-        {
+
+        public String getBreakSound() {
             return "dig.wood";
         }
     };
-    public static final Block.SoundType soundTypeAnvil = new Block.SoundType("anvil", 0.3F, 1.0F)
-    {
+    public static final Block.SoundType soundTypeAnvil = new Block.SoundType("anvil", 0.3F, 1.0F) {
+
         private static final String __OBFID = "CL_00000202";
-        public String getBreakSound()
-        {
+
+        public String getBreakSound() {
             return "dig.stone";
         }
-        public String getPlaceSound()
-        {
+
+        public String getPlaceSound() {
             return "random.anvil_land";
         }
     };
-    public static final Block.SoundType SLIME_SOUND = new Block.SoundType("slime", 1.0F, 1.0F)
-    {
+    public static final Block.SoundType SLIME_SOUND = new Block.SoundType("slime", 1.0F, 1.0F) {
+
         private static final String __OBFID = "CL_00002133";
-        public String getBreakSound()
-        {
+
+        public String getBreakSound() {
             return "mob.slime.big";
         }
-        public String getPlaceSound()
-        {
+
+        public String getPlaceSound() {
             return "mob.slime.big";
         }
-        public String getStepSound()
-        {
+
+        public String getStepSound() {
             return "mob.slime.small";
         }
     };
@@ -124,114 +124,83 @@
     private String unlocalizedName;
     private static final String __OBFID = "CL_00000199";
 
-    public static int getIdFromBlock(Block blockIn)
-    {
+    public static int getIdFromBlock(Block blockIn) {
         return blockRegistry.getIDForObject(blockIn);
     }
 
-    public static int getStateId(IBlockState state)
-    {
+    public static int getStateId(IBlockState state) {
         return getIdFromBlock(state.getBlock()) + (state.getBlock().getMetaFromState(state) << 12);
     }
 
-    public static Block getBlockById(int id)
-    {
-        return (Block)blockRegistry.getObjectById(id);
+    public static Block getBlockById(int id) {
+        return (Block) blockRegistry.getObjectById(id);
     }
 
-    public static IBlockState getStateById(int id)
-    {
+    public static IBlockState getStateById(int id) {
         int j = id & 4095;
         int k = id >> 12 & 15;
         return getBlockById(j).getStateFromMeta(k);
     }
 
-    public static Block getBlockFromItem(Item itemIn)
-    {
-        return itemIn instanceof ItemBlock ? ((ItemBlock)itemIn).getBlock() : null;
+    public static Block getBlockFromItem(Item itemIn) {
+        return itemIn instanceof ItemBlock ? ((ItemBlock) itemIn).getBlock() : null;
     }
 
-    public static Block getBlockFromName(String name)
-    {
+    public static Block getBlockFromName(String name) {
         ResourceLocation resourcelocation = new ResourceLocation(name);
 
-        if (blockRegistry.containsKey(resourcelocation))
-        {
-            return (Block)blockRegistry.getObject(resourcelocation);
-        }
-        else
-        {
-            try
-            {
-                return (Block)blockRegistry.getObjectById(Integer.parseInt(name));
-            }
-            catch (NumberFormatException numberformatexception)
-            {
+        if (blockRegistry.containsKey(resourcelocation)) {
+            return (Block) blockRegistry.getObject(resourcelocation);
+        } else {
+            try {
+                return (Block) blockRegistry.getObjectById(Integer.parseInt(name));
+            } catch (NumberFormatException numberformatexception) {
                 return null;
             }
         }
     }
 
-    public boolean isFullBlock()
-    {
+    public boolean isFullBlock() {
         return this.fullBlock;
     }
 
-    public int getLightOpacity()
-    {
+    public int getLightOpacity() {
         return this.lightOpacity;
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean isTranslucent()
-    {
-        return this.translucent;
-    }
-
-    public int getLightValue()
-    {
+    public int getLightValue() {
         return this.lightValue;
     }
 
-    public boolean getUseNeighborBrightness()
-    {
+    public boolean getUseNeighborBrightness() {
         return this.useNeighborBrightness;
     }
 
-    public Material getMaterial()
-    {
+    public Material getMaterial() {
         return this.blockMaterial;
     }
 
-    public MapColor getMapColor(IBlockState state)
-    {
+    public MapColor getMapColor(IBlockState state) {
         return this.getMaterial().getMaterialMapColor();
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState();
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
-        if (state != null && !state.getPropertyNames().isEmpty())
-        {
+    public int getMetaFromState(IBlockState state) {
+        if (state != null && !state.getPropertyNames().isEmpty()) {
             throw new IllegalArgumentException("Don\'t know how to convert " + state + " back into data...");
-        }
-        else
-        {
+        } else {
             return 0;
         }
     }
 
-    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos)
-    {
+    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos) {
         return state;
     }
 
-    protected Block(Material materialIn)
-    {
+    protected Block(Material materialIn) {
         this.stepSound = soundTypeStone;
         this.blockParticleGravity = 1.0F;
         this.slipperiness = 0.6F;
@@ -244,237 +244,175 @@
         this.setDefaultState(this.blockState.getBaseState());
     }
 
-    protected Block setStepSound(Block.SoundType sound)
-    {
+    public Block setStepSound(Block.SoundType sound) {
         this.stepSound = sound;
         return this;
     }
 
-    protected Block setLightOpacity(int opacity)
-    {
+    public Block setLightOpacity(int opacity) {
         this.lightOpacity = opacity;
         return this;
     }
 
-    protected Block setLightLevel(float value)
-    {
-        this.lightValue = (int)(15.0F * value);
+    public Block setLightLevel(float value) {
+        this.lightValue = (int) (15.0F * value);
         return this;
     }
 
-    protected Block setResistance(float resistance)
-    {
+    public Block setResistance(float resistance) {
         this.blockResistance = resistance * 3.0F;
         return this;
     }
 
-    public boolean isSolidFullCube()
-    {
+    public boolean isSolidFullCube() {
         return this.blockMaterial.blocksMovement() && this.isFullCube();
     }
 
-    public boolean isNormalCube()
-    {
+    public boolean isNormalCube() {
         return this.blockMaterial.isOpaque() && this.isFullCube() && !this.canProvidePower();
     }
 
-    public boolean isVisuallyOpaque()
-    {
+    public boolean isVisuallyOpaque() {
         return this.blockMaterial.blocksMovement() && this.isFullCube();
     }
 
-    public boolean isFullCube()
-    {
+    public boolean isFullCube() {
         return true;
     }
 
-    public boolean isPassable(IBlockAccess worldIn, BlockPos pos)
-    {
+    public boolean isPassable(IBlockAccess worldIn, BlockPos pos) {
         return !this.blockMaterial.blocksMovement();
     }
 
-    public int getRenderType()
-    {
+    public int getRenderType() {
         return 3;
     }
 
-    public boolean isReplaceable(World worldIn, BlockPos pos)
-    {
+    public boolean isReplaceable(World worldIn, BlockPos pos) {
         return false;
     }
 
-    protected Block setHardness(float hardness)
-    {
+    public Block setHardness(float hardness) {
         this.blockHardness = hardness;
 
-        if (this.blockResistance < hardness * 5.0F)
-        {
+        if (this.blockResistance < hardness * 5.0F) {
             this.blockResistance = hardness * 5.0F;
         }
 
         return this;
     }
 
-    protected Block setBlockUnbreakable()
-    {
+    public Block setBlockUnbreakable() {
         this.setHardness(-1.0F);
         return this;
     }
 
-    public float getBlockHardness(World worldIn, BlockPos pos)
-    {
+    public float getBlockHardness(World worldIn, BlockPos pos) {
         return this.blockHardness;
     }
 
-    protected Block setTickRandomly(boolean shouldTick)
-    {
+    public Block setTickRandomly(boolean shouldTick) {
         this.needsRandomTick = shouldTick;
         return this;
     }
 
-    public boolean getTickRandomly()
-    {
+    public boolean getTickRandomly() {
         return this.needsRandomTick;
     }
 
-    public boolean hasTileEntity()
-    {
+    public boolean hasTileEntity() {
         return this.isBlockContainer;
     }
 
-    protected final void setBlockBounds(float minX, float minY, float minZ, float maxX, float maxY, float maxZ)
-    {
-        this.minX = (double)minX;
-        this.minY = (double)minY;
-        this.minZ = (double)minZ;
-        this.maxX = (double)maxX;
-        this.maxY = (double)maxY;
-        this.maxZ = (double)maxZ;
+    public final void setBlockBounds(float minX, float minY, float minZ, float maxX, float maxY, float maxZ) {
+        this.minX = (double) minX;
+        this.minY = (double) minY;
+        this.minZ = (double) minZ;
+        this.maxX = (double) maxX;
+        this.maxY = (double) maxY;
+        this.maxZ = (double) maxZ;
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getMixedBrightnessForBlock(IBlockAccess worldIn, BlockPos pos)
-    {
-        Block block = worldIn.getBlockState(pos).getBlock();
-        int i = worldIn.getCombinedLight(pos, block.getLightValue());
-
-        if (i == 0 && block instanceof BlockSlab)
-        {
-            pos = pos.down();
-            block = worldIn.getBlockState(pos).getBlock();
-            return worldIn.getCombinedLight(pos, block.getLightValue());
-        }
-        else
-        {
-            return i;
-        }
-    }
-
-    @SideOnly(Side.CLIENT)
-    public boolean shouldSideBeRendered(IBlockAccess worldIn, BlockPos pos, EnumFacing side)
-    {
-        return side == EnumFacing.DOWN && this.minY > 0.0D ? true : (side == EnumFacing.UP && this.maxY < 1.0D ? true : (side == EnumFacing.NORTH && this.minZ > 0.0D ? true : (side == EnumFacing.SOUTH && this.maxZ < 1.0D ? true : (side == EnumFacing.WEST && this.minX > 0.0D ? true : (side == EnumFacing.EAST && this.maxX < 1.0D ? true : !worldIn.getBlockState(pos).getBlock().isOpaqueCube())))));
-    }
-
-    public boolean isBlockSolid(IBlockAccess worldIn, BlockPos pos, EnumFacing side)
-    {
+    public boolean isBlockSolid(IBlockAccess worldIn, BlockPos pos, EnumFacing side) {
         return worldIn.getBlockState(pos).getBlock().getMaterial().isSolid();
     }
 
-    @SideOnly(Side.CLIENT)
-    public AxisAlignedBB getSelectedBoundingBox(World worldIn, BlockPos pos)
-    {
-        return new AxisAlignedBB((double)pos.getX() + this.minX, (double)pos.getY() + this.minY, (double)pos.getZ() + this.minZ, (double)pos.getX() + this.maxX, (double)pos.getY() + this.maxY, (double)pos.getZ() + this.maxZ);
-    }
-
-    public void addCollisionBoxesToList(World worldIn, BlockPos pos, IBlockState state, AxisAlignedBB mask, List list, Entity collidingEntity)
-    {
+    public void addCollisionBoxesToList(World worldIn, BlockPos pos, IBlockState state, AxisAlignedBB mask, List list, Entity collidingEntity) {
         AxisAlignedBB axisalignedbb1 = this.getCollisionBoundingBox(worldIn, pos, state);
 
-        if (axisalignedbb1 != null && mask.intersectsWith(axisalignedbb1))
-        {
+        if (axisalignedbb1 != null && mask.intersectsWith(axisalignedbb1)) {
             list.add(axisalignedbb1);
         }
     }
 
-    public AxisAlignedBB getCollisionBoundingBox(World worldIn, BlockPos pos, IBlockState state)
-    {
-        return new AxisAlignedBB((double)pos.getX() + this.minX, (double)pos.getY() + this.minY, (double)pos.getZ() + this.minZ, (double)pos.getX() + this.maxX, (double)pos.getY() + this.maxY, (double)pos.getZ() + this.maxZ);
+    public AxisAlignedBB getCollisionBoundingBox(World worldIn, BlockPos pos, IBlockState state) {
+        return new AxisAlignedBB((double) pos.getX() + this.minX, (double) pos.getY() + this.minY, (double) pos.getZ() + this.minZ, (double) pos.getX() + this.maxX, (double) pos.getY() + this.maxY, (double) pos.getZ() + this.maxZ);
     }
 
-    public boolean isOpaqueCube()
-    {
+    public boolean isOpaqueCube() {
         return true;
     }
 
-    public boolean canCollideCheck(IBlockState state, boolean hitIfLiquid)
-    {
+    public boolean canCollideCheck(IBlockState state, boolean hitIfLiquid) {
         return this.isCollidable();
     }
 
-    public boolean isCollidable()
-    {
+    public boolean isCollidable() {
         return true;
     }
 
-    public void randomTick(World worldIn, BlockPos pos, IBlockState state, Random random)
-    {
+    public void randomTick(World worldIn, BlockPos pos, IBlockState state, Random random) {
         this.updateTick(worldIn, pos, state, random);
     }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {}
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
+    }
 
-    @SideOnly(Side.CLIENT)
-    public void randomDisplayTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {}
+    public void onBlockDestroyedByPlayer(World worldIn, BlockPos pos, IBlockState state) {
+    }
 
-    public void onBlockDestroyedByPlayer(World worldIn, BlockPos pos, IBlockState state) {}
+    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock) {
+    }
 
-    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock) {}
-
-    public int tickRate(World worldIn)
-    {
+    public int tickRate(World worldIn) {
         return 10;
     }
 
-    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state) {}
+    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state) {
+        AsyncCatcher.catchOp("block onPlace"); // Spigot
+    }
 
-    public void breakBlock(World worldIn, BlockPos pos, IBlockState state) {}
+    public void breakBlock(World worldIn, BlockPos pos, IBlockState state) {
+        AsyncCatcher.catchOp("block remove"); // Spigot
+    }
 
-    public int quantityDropped(Random random)
-    {
+    public int quantityDropped(Random random) {
         return 1;
     }
 
-    public Item getItemDropped(IBlockState state, Random rand, int fortune)
-    {
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
         return Item.getItemFromBlock(this);
     }
 
-    public float getPlayerRelativeBlockHardness(EntityPlayer playerIn, World worldIn, BlockPos pos)
-    {
+    public float getPlayerRelativeBlockHardness(EntityPlayer playerIn, World worldIn, BlockPos pos) {
         float f = this.getBlockHardness(worldIn, pos);
         return f < 0.0F ? 0.0F : (!playerIn.canHarvestBlock(this) ? playerIn.getToolDigEfficiency(this) / f / 100.0F : playerIn.getToolDigEfficiency(this) / f / 30.0F);
     }
 
-    public final void dropBlockAsItem(World worldIn, BlockPos pos, IBlockState state, int forture)
-    {
+    public final void dropBlockAsItem(World worldIn, BlockPos pos, IBlockState state, int forture) {
         this.dropBlockAsItemWithChance(worldIn, pos, state, 1.0F, forture);
     }
 
-    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune)
-    {
-        if (!worldIn.isRemote)
-        {
+    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune) {
+        if (!worldIn.isRemote) {
             int j = this.quantityDroppedWithBonus(fortune, worldIn.rand);
 
-            for (int k = 0; k < j; ++k)
-            {
-                if (worldIn.rand.nextFloat() <= chance)
+            for (int k = 0; k < j; ++k) {
+                if (worldIn.rand.nextFloat() < chance)// CraftBukkit - <= to < to allow for plugins to completely disable block drops from explosions
                 {
                     Item item = this.getItemDropped(state, worldIn.rand, fortune);
 
-                    if (item != null)
-                    {
+                    if (item != null) {
                         spawnAsEntity(worldIn, pos, new ItemStack(item, 1, this.damageDropped(state)));
                     }
                 }
@@ -482,50 +482,40 @@
         }
     }
 
-    public static void spawnAsEntity(World worldIn, BlockPos pos, ItemStack stack)
-    {
-        if (!worldIn.isRemote && worldIn.getGameRules().getGameRuleBooleanValue("doTileDrops"))
-        {
+    public static void spawnAsEntity(World worldIn, BlockPos pos, ItemStack stack) {
+        if (!worldIn.isRemote && worldIn.getGameRules().getGameRuleBooleanValue("doTileDrops")) {
             float f = 0.5F;
-            double d0 = (double)(worldIn.rand.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
-            double d1 = (double)(worldIn.rand.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
-            double d2 = (double)(worldIn.rand.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
-            EntityItem entityitem = new EntityItem(worldIn, (double)pos.getX() + d0, (double)pos.getY() + d1, (double)pos.getZ() + d2, stack);
+            double d0 = (double) (worldIn.rand.nextFloat() * f) + (double) (1.0F - f) * 0.5D;
+            double d1 = (double) (worldIn.rand.nextFloat() * f) + (double) (1.0F - f) * 0.5D;
+            double d2 = (double) (worldIn.rand.nextFloat() * f) + (double) (1.0F - f) * 0.5D;
+            EntityItem entityitem = new EntityItem(worldIn, (double) pos.getX() + d0, (double) pos.getY() + d1, (double) pos.getZ() + d2, stack);
             entityitem.setDefaultPickupDelay();
             worldIn.spawnEntityInWorld(entityitem);
         }
     }
 
-    protected void dropXpOnBlockBreak(World worldIn, BlockPos pos, int amount)
-    {
-        if (!worldIn.isRemote)
-        {
-            while (amount > 0)
-            {
+    public void dropXpOnBlockBreak(World worldIn, BlockPos pos, int amount) {
+        if (!worldIn.isRemote) {
+            while (amount > 0) {
                 int j = EntityXPOrb.getXPSplit(amount);
                 amount -= j;
-                worldIn.spawnEntityInWorld(new EntityXPOrb(worldIn, (double)pos.getX() + 0.5D, (double)pos.getY() + 0.5D, (double)pos.getZ() + 0.5D, j));
+                worldIn.spawnEntityInWorld(new EntityXPOrb(worldIn, (double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, j));
             }
         }
     }
 
-    public int damageDropped(IBlockState state)
-    {
+    public int damageDropped(IBlockState state) {
         return 0;
     }
 
-    public float getExplosionResistance(Entity exploder)
-    {
+    public float getExplosionResistance(Entity exploder) {
         return this.blockResistance / 5.0F;
     }
 
-    public MovingObjectPosition collisionRayTrace(World worldIn, BlockPos pos, Vec3 start, Vec3 end)
-    {
+    public MovingObjectPosition collisionRayTrace(World worldIn, BlockPos pos, Vec3 start, Vec3 end) {
         this.setBlockBoundsBasedOnState(worldIn, pos);
-        start = start.addVector((double)(-pos.getX()), (double)(-pos.getY()), (double)(-pos.getZ()));
-        end = end.addVector((double)(-pos.getX()), (double)(-pos.getY()), (double)(-pos.getZ()));
+        start = start.addVector((double) (-pos.getX()), (double) (-pos.getY()), (double) (-pos.getZ()));
+        end = end.addVector((double) (-pos.getX()), (double) (-pos.getY()), (double) (-pos.getZ()));
         Vec3 vec32 = start.getIntermediateWithXValue(end, this.minX);
         Vec3 vec33 = start.getIntermediateWithXValue(end, this.maxX);
         Vec3 vec34 = start.getIntermediateWithYValue(end, this.minY);
@@ -531,438 +531,311 @@
         Vec3 vec36 = start.getIntermediateWithZValue(end, this.minZ);
         Vec3 vec37 = start.getIntermediateWithZValue(end, this.maxZ);
 
-        if (!this.isVecInsideYZBounds(vec32))
-        {
+        if (!this.isVecInsideYZBounds(vec32)) {
             vec32 = null;
         }
 
-        if (!this.isVecInsideYZBounds(vec33))
-        {
+        if (!this.isVecInsideYZBounds(vec33)) {
             vec33 = null;
         }
 
-        if (!this.isVecInsideXZBounds(vec34))
-        {
+        if (!this.isVecInsideXZBounds(vec34)) {
             vec34 = null;
         }
 
-        if (!this.isVecInsideXZBounds(vec35))
-        {
+        if (!this.isVecInsideXZBounds(vec35)) {
             vec35 = null;
         }
 
-        if (!this.isVecInsideXYBounds(vec36))
-        {
+        if (!this.isVecInsideXYBounds(vec36)) {
             vec36 = null;
         }
 
-        if (!this.isVecInsideXYBounds(vec37))
-        {
+        if (!this.isVecInsideXYBounds(vec37)) {
             vec37 = null;
         }
 
         Vec3 vec38 = null;
 
-        if (vec32 != null && (vec38 == null || start.squareDistanceTo(vec32) < start.squareDistanceTo(vec38)))
-        {
+        if (vec32 != null && (vec38 == null || start.squareDistanceTo(vec32) < start.squareDistanceTo(vec38))) {
             vec38 = vec32;
         }
 
-        if (vec33 != null && (vec38 == null || start.squareDistanceTo(vec33) < start.squareDistanceTo(vec38)))
-        {
+        if (vec33 != null && (vec38 == null || start.squareDistanceTo(vec33) < start.squareDistanceTo(vec38))) {
             vec38 = vec33;
         }
 
-        if (vec34 != null && (vec38 == null || start.squareDistanceTo(vec34) < start.squareDistanceTo(vec38)))
-        {
+        if (vec34 != null && (vec38 == null || start.squareDistanceTo(vec34) < start.squareDistanceTo(vec38))) {
             vec38 = vec34;
         }
 
-        if (vec35 != null && (vec38 == null || start.squareDistanceTo(vec35) < start.squareDistanceTo(vec38)))
-        {
+        if (vec35 != null && (vec38 == null || start.squareDistanceTo(vec35) < start.squareDistanceTo(vec38))) {
             vec38 = vec35;
         }
 
-        if (vec36 != null && (vec38 == null || start.squareDistanceTo(vec36) < start.squareDistanceTo(vec38)))
-        {
+        if (vec36 != null && (vec38 == null || start.squareDistanceTo(vec36) < start.squareDistanceTo(vec38))) {
             vec38 = vec36;
         }
 
-        if (vec37 != null && (vec38 == null || start.squareDistanceTo(vec37) < start.squareDistanceTo(vec38)))
-        {
+        if (vec37 != null && (vec38 == null || start.squareDistanceTo(vec37) < start.squareDistanceTo(vec38))) {
             vec38 = vec37;
         }
 
-        if (vec38 == null)
-        {
+        if (vec38 == null) {
             return null;
-        }
-        else
-        {
+        } else {
             EnumFacing enumfacing = null;
 
-            if (vec38 == vec32)
-            {
+            if (vec38 == vec32) {
                 enumfacing = EnumFacing.WEST;
             }
 
-            if (vec38 == vec33)
-            {
+            if (vec38 == vec33) {
                 enumfacing = EnumFacing.EAST;
             }
 
-            if (vec38 == vec34)
-            {
+            if (vec38 == vec34) {
                 enumfacing = EnumFacing.DOWN;
             }
 
-            if (vec38 == vec35)
-            {
+            if (vec38 == vec35) {
                 enumfacing = EnumFacing.UP;
             }
 
-            if (vec38 == vec36)
-            {
+            if (vec38 == vec36) {
                 enumfacing = EnumFacing.NORTH;
             }
 
-            if (vec38 == vec37)
-            {
+            if (vec38 == vec37) {
                 enumfacing = EnumFacing.SOUTH;
             }
 
-            return new MovingObjectPosition(vec38.addVector((double)pos.getX(), (double)pos.getY(), (double)pos.getZ()), enumfacing, pos);
+            return new MovingObjectPosition(vec38.addVector((double) pos.getX(), (double) pos.getY(), (double) pos.getZ()), enumfacing, pos);
         }
     }
 
-    private boolean isVecInsideYZBounds(Vec3 point)
-    {
+    private boolean isVecInsideYZBounds(Vec3 point) {
         return point == null ? false : point.yCoord >= this.minY && point.yCoord <= this.maxY && point.zCoord >= this.minZ && point.zCoord <= this.maxZ;
     }
 
-    private boolean isVecInsideXZBounds(Vec3 point)
-    {
+    private boolean isVecInsideXZBounds(Vec3 point) {
         return point == null ? false : point.xCoord >= this.minX && point.xCoord <= this.maxX && point.zCoord >= this.minZ && point.zCoord <= this.maxZ;
     }
 
-    private boolean isVecInsideXYBounds(Vec3 point)
-    {
+    private boolean isVecInsideXYBounds(Vec3 point) {
         return point == null ? false : point.xCoord >= this.minX && point.xCoord <= this.maxX && point.yCoord >= this.minY && point.yCoord <= this.maxY;
     }
 
-    public void onBlockDestroyedByExplosion(World worldIn, BlockPos pos, Explosion explosionIn) {}
+    public void onBlockDestroyedByExplosion(World worldIn, BlockPos pos, Explosion explosionIn) {
+    }
 
-    public boolean canReplace(World worldIn, BlockPos pos, EnumFacing side, ItemStack stack)
-    {
+    public boolean canReplace(World worldIn, BlockPos pos, EnumFacing side, ItemStack stack) {
         return this.canPlaceBlockOnSide(worldIn, pos, side);
     }
 
-    public boolean canPlaceBlockOnSide(World worldIn, BlockPos pos, EnumFacing side)
-    {
+    public boolean canPlaceBlockOnSide(World worldIn, BlockPos pos, EnumFacing side) {
         return this.canPlaceBlockAt(worldIn, pos);
     }
 
-    @SideOnly(Side.CLIENT)
-    public EnumWorldBlockLayer getBlockLayer()
-    {
-        return EnumWorldBlockLayer.SOLID;
-    }
-
-    public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
-    {
+    public boolean canPlaceBlockAt(World worldIn, BlockPos pos) {
         return worldIn.getBlockState(pos).getBlock().blockMaterial.isReplaceable();
     }
 
-    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ)
-    {
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ) {
         return false;
     }
 
-    public void onEntityCollidedWithBlock(World worldIn, BlockPos pos, Entity entityIn) {}
+    public void onEntityCollidedWithBlock(World worldIn, BlockPos pos, Entity entityIn) {
+    }
 
-    public IBlockState onBlockPlaced(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer)
-    {
+    public IBlockState onBlockPlaced(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer) {
         return this.getStateFromMeta(meta);
     }
 
-    public void onBlockClicked(World worldIn, BlockPos pos, EntityPlayer playerIn) {}
+    public void onBlockClicked(World worldIn, BlockPos pos, EntityPlayer playerIn) {
+    }
 
-    public Vec3 modifyAcceleration(World worldIn, BlockPos pos, Entity entityIn, Vec3 motion)
-    {
+    public Vec3 modifyAcceleration(World worldIn, BlockPos pos, Entity entityIn, Vec3 motion) {
         return motion;
     }
 
-    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos) {}
+    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos) {
+    }
 
-    public final double getBlockBoundsMinX()
-    {
+    public final double getBlockBoundsMinX() {
         return this.minX;
     }
 
-    public final double getBlockBoundsMaxX()
-    {
+    public final double getBlockBoundsMaxX() {
         return this.maxX;
     }
 
-    public final double getBlockBoundsMinY()
-    {
+    public final double getBlockBoundsMinY() {
         return this.minY;
     }
 
-    public final double getBlockBoundsMaxY()
-    {
+    public final double getBlockBoundsMaxY() {
         return this.maxY;
     }
 
-    public final double getBlockBoundsMinZ()
-    {
+    public final double getBlockBoundsMinZ() {
         return this.minZ;
     }
 
-    public final double getBlockBoundsMaxZ()
-    {
+    public final double getBlockBoundsMaxZ() {
         return this.maxZ;
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getBlockColor()
-    {
-        return 16777215;
+    public int isProvidingWeakPower(IBlockAccess worldIn, BlockPos pos, IBlockState state, EnumFacing side) {
+        return 0;
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getRenderColor(IBlockState state)
-    {
-        return 16777215;
+    public boolean canProvidePower() {
+        return false;
     }
 
-    @SideOnly(Side.CLIENT)
-    public int colorMultiplier(IBlockAccess worldIn, BlockPos pos, int renderPass)
-    {
-        return 16777215;
+    public void onEntityCollidedWithBlock(World worldIn, BlockPos pos, IBlockState state, Entity entityIn) {
     }
 
-    public int isProvidingWeakPower(IBlockAccess worldIn, BlockPos pos, IBlockState state, EnumFacing side)
-    {
+    public int isProvidingStrongPower(IBlockAccess worldIn, BlockPos pos, IBlockState state, EnumFacing side) {
         return 0;
     }
 
-    @SideOnly(Side.CLIENT)
-    public final int colorMultiplier(IBlockAccess worldIn, BlockPos pos)
-    {
-        return this.colorMultiplier(worldIn, pos, 0);
+    public void setBlockBoundsForItemRender() {
     }
 
-    public boolean canProvidePower()
-    {
-        return false;
-    }
-
-    public void onEntityCollidedWithBlock(World worldIn, BlockPos pos, IBlockState state, Entity entityIn) {}
-
-    public int isProvidingStrongPower(IBlockAccess worldIn, BlockPos pos, IBlockState state, EnumFacing side)
-    {
-        return 0;
-    }
-
-    public void setBlockBoundsForItemRender() {}
-
-    public void harvestBlock(World worldIn, EntityPlayer player, BlockPos pos, IBlockState state, TileEntity te)
-    {
+    public void harvestBlock(World worldIn, EntityPlayer player, BlockPos pos, IBlockState state, TileEntity te) {
         player.triggerAchievement(StatList.mineBlockStatArray[getIdFromBlock(this)]);
         player.addExhaustion(0.025F);
 
-        if (this.canSilkHarvest() && EnchantmentHelper.getSilkTouchModifier(player))
-        {
+        if (this.canSilkHarvest() && EnchantmentHelper.getSilkTouchModifier(player)) {
             ItemStack itemstack = this.createStackedBlock(state);
 
-            if (itemstack != null)
-            {
+            if (itemstack != null) {
                 spawnAsEntity(worldIn, pos, itemstack);
             }
-        }
-        else
-        {
+        } else {
             int i = EnchantmentHelper.getFortuneModifier(player);
             this.dropBlockAsItem(worldIn, pos, state, i);
         }
     }
 
-    protected boolean canSilkHarvest()
-    {
+    public boolean canSilkHarvest() { // SpigotMCP -- Make public as bukkit assumes in the same package
         return this.isFullCube() && !this.isBlockContainer;
     }
 
-    protected ItemStack createStackedBlock(IBlockState state)
-    {
+    protected ItemStack createStackedBlock(IBlockState state) {
         int i = 0;
         Item item = Item.getItemFromBlock(this);
 
-        if (item != null && item.getHasSubtypes())
-        {
+        if (item != null && item.getHasSubtypes()) {
             i = this.getMetaFromState(state);
         }
 
         return new ItemStack(item, 1, i);
     }
 
-    public int quantityDroppedWithBonus(int fortune, Random random)
-    {
+    public int quantityDroppedWithBonus(int fortune, Random random) {
         return this.quantityDropped(random);
     }
 
-    public void onBlockPlacedBy(World worldIn, BlockPos pos, IBlockState state, EntityLivingBase placer, ItemStack stack) {}
+    public void onBlockPlacedBy(World worldIn, BlockPos pos, IBlockState state, EntityLivingBase placer, ItemStack stack) {
+    }
 
-    public Block setUnlocalizedName(String name)
-    {
+    public Block setUnlocalizedName(String name) {
         this.unlocalizedName = name;
         return this;
     }
 
-    public String getLocalizedName()
-    {
+    public String getLocalizedName() {
         return StatCollector.translateToLocal(this.getUnlocalizedName() + ".name");
     }
 
-    public String getUnlocalizedName()
-    {
+    public String getUnlocalizedName() {
         return "tile." + this.unlocalizedName;
     }
 
-    public boolean onBlockEventReceived(World worldIn, BlockPos pos, IBlockState state, int eventID, int eventParam)
-    {
+    public boolean onBlockEventReceived(World worldIn, BlockPos pos, IBlockState state, int eventID, int eventParam) {
         return false;
     }
 
-    public boolean getEnableStats()
-    {
+    public boolean getEnableStats() {
         return this.enableStats;
     }
 
-    protected Block disableStats()
-    {
+    protected Block disableStats() {
         this.enableStats = false;
         return this;
     }
 
-    public int getMobilityFlag()
-    {
+    public int getMobilityFlag() {
         return this.blockMaterial.getMaterialMobility();
     }
 
-    @SideOnly(Side.CLIENT)
-    public float getAmbientOcclusionLightValue()
-    {
-        return this.isSolidFullCube() ? 0.2F : 1.0F;
-    }
-
-    public void onFallenUpon(World worldIn, BlockPos pos, Entity entityIn, float fallDistance)
-    {
+    public void onFallenUpon(World worldIn, BlockPos pos, Entity entityIn, float fallDistance) {
         entityIn.fall(fallDistance, 1.0F);
     }
 
-    public void onLanded(World worldIn, Entity entityIn)
-    {
+    public void onLanded(World worldIn, Entity entityIn) {
         entityIn.motionY = 0.0D;
     }
 
-    @SideOnly(Side.CLIENT)
-    public Item getItem(World worldIn, BlockPos pos)
-    {
-        return Item.getItemFromBlock(this);
-    }
-
-    public int getDamageValue(World worldIn, BlockPos pos)
-    {
+    public int getDamageValue(World worldIn, BlockPos pos) {
         return this.damageDropped(worldIn.getBlockState(pos));
     }
 
-    @SideOnly(Side.CLIENT)
-    public void getSubBlocks(Item itemIn, CreativeTabs tab, List list)
-    {
-        list.add(new ItemStack(itemIn, 1, 0));
-    }
-
-    public Block setCreativeTab(CreativeTabs tab)
-    {
+    public Block setCreativeTab(CreativeTabs tab) {
         this.displayOnCreativeTab = tab;
         return this;
     }
 
-    public void onBlockHarvested(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player) {}
-
-    @SideOnly(Side.CLIENT)
-    public CreativeTabs getCreativeTabToDisplayOn()
-    {
-        return this.displayOnCreativeTab;
+    public void onBlockHarvested(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player) {
     }
 
-    public void fillWithRain(World worldIn, BlockPos pos) {}
-
-    @SideOnly(Side.CLIENT)
-    public boolean isFlowerPot()
-    {
-        return false;
+    public void fillWithRain(World worldIn, BlockPos pos) {
     }
 
-    public boolean requiresUpdates()
-    {
+    public boolean requiresUpdates() {
         return true;
     }
 
-    public boolean canDropFromExplosion(Explosion explosionIn)
-    {
+    public boolean canDropFromExplosion(Explosion explosionIn) {
         return true;
     }
 
-    public boolean isAssociatedBlock(Block other)
-    {
+    public boolean isAssociatedBlock(Block other) {
         return this == other;
     }
 
-    public static boolean isEqualTo(Block blockIn, Block other)
-    {
+    public static boolean isEqualTo(Block blockIn, Block other) {
         return blockIn != null && other != null ? (blockIn == other ? true : blockIn.isAssociatedBlock(other)) : false;
     }
 
-    public boolean hasComparatorInputOverride()
-    {
+    public boolean hasComparatorInputOverride() {
         return false;
     }
 
-    public int getComparatorInputOverride(World worldIn, BlockPos pos)
-    {
+    public int getComparatorInputOverride(World worldIn, BlockPos pos) {
         return 0;
     }
 
-    @SideOnly(Side.CLIENT)
-    public IBlockState getStateForEntityRender(IBlockState state)
-    {
-        return state;
-    }
-
-    protected BlockState createBlockState()
-    {
+    protected BlockState createBlockState() {
         return new BlockState(this, new IProperty[0]);
     }
 
-    public BlockState getBlockState()
-    {
+    public BlockState getBlockState() {
         return this.blockState;
     }
 
-    protected final void setDefaultState(IBlockState state)
-    {
+    protected final void setDefaultState(IBlockState state) {
         this.defaultBlockState = state;
     }
 
-    public final IBlockState getDefaultState()
-    {
+    public final IBlockState getDefaultState() {
         return this.defaultBlockState;
     }
 
-    @SideOnly(Side.CLIENT)
-    public Block.EnumOffsetType getOffsetType()
-    {
-        return Block.EnumOffsetType.NONE;
-    }
-
-    public static void registerBlocks()
-    {
+    public static void registerBlocks() {
         registerBlock(0, AIR_ID, (new BlockAir()).setUnlocalizedName("air"));
         registerBlock(1, "stone", (new BlockStone()).setHardness(1.5F).setResistance(10.0F).setStepSound(soundTypePiston).setUnlocalizedName("stone"));
         registerBlock(2, "grass", (new BlockGrass()).setHardness(0.6F).setStepSound(soundTypeGrass).setUnlocalizedName("grass"));
@@ -1184,16 +1184,13 @@
         Iterator iterator = blockRegistry.iterator();
         Block block13;
 
-        while (iterator.hasNext())
-        {
-            block13 = (Block)iterator.next();
+        while (iterator.hasNext()) {
+            block13 = (Block) iterator.next();
 
-            if (block13.blockMaterial == Material.air)
-            {
+            if (block13.blockMaterial == Material.air) {
                 block13.useNeighborBrightness = false;
-            }
-            else
-            {
+            } else {
                 boolean flag = false;
                 boolean flag1 = block13 instanceof BlockStairs;
                 boolean flag2 = block13 instanceof BlockSlab;
@@ -1201,8 +1201,7 @@
                 boolean flag4 = block13.translucent;
                 boolean flag5 = block13.lightOpacity == 0;
 
-                if (flag1 || flag2 || flag3 || flag4 || flag5)
-                {
+                if (flag1 || flag2 || flag3 || flag4 || flag5) {
                     flag = true;
                 }
 
@@ -1212,79 +1212,71 @@
 
         iterator = blockRegistry.iterator();
 
-        while (iterator.hasNext())
-        {
-            block13 = (Block)iterator.next();
+        while (iterator.hasNext()) {
+            block13 = (Block) iterator.next();
             Iterator iterator1 = block13.getBlockState().getValidStates().iterator();
 
-            while (iterator1.hasNext())
-            {
-                IBlockState iblockstate = (IBlockState)iterator1.next();
+            while (iterator1.hasNext()) {
+                IBlockState iblockstate = (IBlockState) iterator1.next();
                 int i = blockRegistry.getIDForObject(block13) << 4 | block13.getMetaFromState(iblockstate);
                 BLOCK_STATE_IDS.put(iblockstate, i);
             }
         }
     }
 
-    private static void registerBlock(int id, ResourceLocation textualID, Block block_)
-    {
+    private static void registerBlock(int id, ResourceLocation textualID, Block block_) {
         blockRegistry.register(id, textualID, block_);
     }
 
-    private static void registerBlock(int id, String textualID, Block block_)
-    {
+    private static void registerBlock(int id, String textualID, Block block_) {
         registerBlock(id, new ResourceLocation(textualID), block_);
     }
 
-    @SideOnly(Side.CLIENT)
-    public static enum EnumOffsetType
-    {
-        NONE,
-        XZ,
-        XYZ;
+    // CraftBukkit start
+    public int getExpDrop(World world, IBlockState data, int enchantmentLevel) {
+        return 0;
+    }
+    // CraftBukkit end
 
-        private static final String __OBFID = "CL_00002132";
+    // Spigot start
+    public static float range(float min, float value, float max) {
+        if (value < min) {
+            return min;
+        }
+        if (value > max) {
+            return max;
+        }
+        return value;
     }
+    // Spigot end
 
-    public static class SoundType
-        {
-            public final String soundName;
-            public final float volume;
-            public final float frequency;
-            private static final String __OBFID = "CL_00000203";
+    public static class SoundType {
 
-            public SoundType(String name, float volume, float frequency)
-            {
-                this.soundName = name;
-                this.volume = volume;
-                this.frequency = frequency;
-            }
+        public final String soundName;
+        public final float volume;
+        public final float frequency;
+        private static final String __OBFID = "CL_00000203";
 
-            public float getVolume()
-            {
-                return this.volume;
-            }
+        public SoundType(String name, float volume, float frequency) {
+            this.soundName = name;
+            this.volume = volume;
+            this.frequency = frequency;
+        }
 
-            public float getFrequency()
-            {
-                return this.frequency;
-            }
+        public float getVolume() {
+            return this.volume;
+        }
 
-            public String getBreakSound()
-            {
-                return "dig." + this.soundName;
-            }
+        public float getFrequency() {
+            return this.frequency;
+        }
 
-            public String getStepSound()
-            {
-                return "step." + this.soundName;
-            }
+        public String getBreakSound() {
+            return "dig." + this.soundName;
+        }
 
-            public String getPlaceSound()
-            {
-                return this.getBreakSound();
-            }
+        public String getStepSound() {
+            return "step." + this.soundName;
         }
-}
+
+        public String getPlaceSound() {
+            return this.getBreakSound();
+        }
+    }
+}
