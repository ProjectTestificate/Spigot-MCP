---a/net/minecraft/block/BlockFence.java
+++b/net/minecraft/block/BlockFence.java
@@ -1,6 +1,7 @@
 package net.minecraft.block;
 
 import java.util.List;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyBool;
@@ -16,26 +16,22 @@
 import net.minecraft.util.EnumFacing;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockFence extends Block
-{
+
+public class BlockFence extends Block {
+
     public static final PropertyBool NORTH = PropertyBool.create("north");
     public static final PropertyBool EAST = PropertyBool.create("east");
     public static final PropertyBool SOUTH = PropertyBool.create("south");
     public static final PropertyBool WEST = PropertyBool.create("west");
     private static final String __OBFID = "CL_00000242";
 
-    public BlockFence(Material materialIn)
-    {
+    public BlockFence(Material materialIn) {
         super(materialIn);
         this.setDefaultState(this.blockState.getBaseState().withProperty(NORTH, Boolean.valueOf(false)).withProperty(EAST, Boolean.valueOf(false)).withProperty(SOUTH, Boolean.valueOf(false)).withProperty(WEST, Boolean.valueOf(false)));
         this.setCreativeTab(CreativeTabs.tabDecorations);
     }
 
-    public void addCollisionBoxesToList(World worldIn, BlockPos pos, IBlockState state, AxisAlignedBB mask, List list, Entity collidingEntity)
-    {
+    public void addCollisionBoxesToList(World worldIn, BlockPos pos, IBlockState state, AxisAlignedBB mask, List list, Entity collidingEntity) {
         boolean flag = this.canConnectTo(worldIn, pos.north());
         boolean flag1 = this.canConnectTo(worldIn, pos.south());
         boolean flag2 = this.canConnectTo(worldIn, pos.west());
@@ -45,18 +45,15 @@
         float f2 = 0.375F;
         float f3 = 0.625F;
 
-        if (flag)
-        {
+        if (flag) {
             f2 = 0.0F;
         }
 
-        if (flag1)
-        {
+        if (flag1) {
             f3 = 1.0F;
         }
 
-        if (flag || flag1)
-        {
+        if (flag || flag1) {
             this.setBlockBounds(f, 0.0F, f2, f1, 1.5F, f3);
             super.addCollisionBoxesToList(worldIn, pos, state, mask, list, collidingEntity);
         }
@@ -64,37 +64,31 @@
         f2 = 0.375F;
         f3 = 0.625F;
 
-        if (flag2)
-        {
+        if (flag2) {
             f = 0.0F;
         }
 
-        if (flag3)
-        {
+        if (flag3) {
             f1 = 1.0F;
         }
 
-        if (flag2 || flag3 || !flag && !flag1)
-        {
+        if (flag2 || flag3 || !flag && !flag1) {
             this.setBlockBounds(f, 0.0F, f2, f1, 1.5F, f3);
             super.addCollisionBoxesToList(worldIn, pos, state, mask, list, collidingEntity);
         }
 
-        if (flag)
-        {
+        if (flag) {
             f2 = 0.0F;
         }
 
-        if (flag1)
-        {
+        if (flag1) {
             f3 = 1.0F;
         }
 
         this.setBlockBounds(f, 0.0F, f2, f1, 1.0F, f3);
     }
 
-    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos)
-    {
+    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos) {
         boolean flag = this.canConnectTo(worldIn, pos.north());
         boolean flag1 = this.canConnectTo(worldIn, pos.south());
         boolean flag2 = this.canConnectTo(worldIn, pos.west());
@@ -104,74 +104,55 @@
         float f2 = 0.375F;
         float f3 = 0.625F;
 
-        if (flag)
-        {
+        if (flag) {
             f2 = 0.0F;
         }
 
-        if (flag1)
-        {
+        if (flag1) {
             f3 = 1.0F;
         }
 
-        if (flag2)
-        {
+        if (flag2) {
             f = 0.0F;
         }
 
-        if (flag3)
-        {
+        if (flag3) {
             f1 = 1.0F;
         }
 
         this.setBlockBounds(f, 0.0F, f2, f1, 1.0F, f3);
     }
 
-    public boolean isOpaqueCube()
-    {
+    public boolean isOpaqueCube() {
         return false;
     }
 
-    public boolean isFullCube()
-    {
+    public boolean isFullCube() {
         return false;
     }
 
-    public boolean isPassable(IBlockAccess worldIn, BlockPos pos)
-    {
+    public boolean isPassable(IBlockAccess worldIn, BlockPos pos) {
         return false;
     }
 
-    public boolean canConnectTo(IBlockAccess worldIn, BlockPos pos)
-    {
+    public boolean canConnectTo(IBlockAccess worldIn, BlockPos pos) {
         Block block = worldIn.getBlockState(pos).getBlock();
         return block == Blocks.barrier ? false : ((!(block instanceof BlockFence) || block.blockMaterial != this.blockMaterial) && !(block instanceof BlockFenceGate) ? (block.blockMaterial.isOpaque() && block.isFullCube() ? block.blockMaterial != Material.gourd : false) : true);
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean shouldSideBeRendered(IBlockAccess worldIn, BlockPos pos, EnumFacing side)
-    {
-        return true;
-    }
-
-    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ)
-    {
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ) {
         return worldIn.isRemote ? true : ItemLead.attachToFence(playerIn, worldIn, pos);
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
+    public int getMetaFromState(IBlockState state) {
         return 0;
     }
 
-    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos)
-    {
+    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos) {
         return state.withProperty(NORTH, Boolean.valueOf(this.canConnectTo(worldIn, pos.north()))).withProperty(EAST, Boolean.valueOf(this.canConnectTo(worldIn, pos.east()))).withProperty(SOUTH, Boolean.valueOf(this.canConnectTo(worldIn, pos.south()))).withProperty(WEST, Boolean.valueOf(this.canConnectTo(worldIn, pos.west())));
     }
 
-    protected BlockState createBlockState()
-    {
-        return new BlockState(this, new IProperty[] {NORTH, EAST, WEST, SOUTH});
+    protected BlockState createBlockState() {
+        return new BlockState(this, new IProperty[]{NORTH, EAST, WEST, SOUTH});
     }
-}
+}
