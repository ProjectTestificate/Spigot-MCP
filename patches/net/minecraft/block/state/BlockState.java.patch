---a/net/minecraft/block/state/BlockState.java
+++b/net/minecraft/block/state/BlockState.java
@@ -1,15 +1,5 @@
 package net.minecraft.block.state;
 
-import com.google.common.base.Function;
-import com.google.common.base.Joiner;
-import com.google.common.base.Objects;
-import com.google.common.collect.HashBasedTable;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.ImmutableTable;
-import com.google.common.collect.Iterables;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -20,21 +20,34 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.util.Cartesian;
 import net.minecraft.util.MapPopulator;
 
-public class BlockState
-{
+import com.google.common.base.Function;
+import com.google.common.base.Joiner;
+import com.google.common.base.Objects;
+import com.google.common.collect.HashBasedTable;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableTable;
+import com.google.common.collect.Iterables;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
+public class BlockState {
+
     private static final Joiner COMMA_JOINER = Joiner.on(", ");
-    private static final Function GET_NAME_FUNC = new Function()
-    {
+    private static final Function GET_NAME_FUNC = new Function() {
+
         private static final String __OBFID = "CL_00002029";
-        public String apply(IProperty property)
-        {
+
+        public String apply(IProperty property) {
             return property == null ? "<NULL>" : property.getName();
         }
-        public Object apply(Object p_apply_1_)
-        {
-            return this.apply((IProperty)p_apply_1_);
+
+        public Object apply(Object p_apply_1_) {
+            return this.apply((IProperty) p_apply_1_);
         }
     };
     private final Block block;
@@ -45,18 +45,16 @@
     private final ImmutableList validStates;
     private static final String __OBFID = "CL_00002030";
 
-    public BlockState(Block blockIn, IProperty ... properties)
-    {
+    public BlockState(Block blockIn, IProperty... properties) {
         this.block = blockIn;
-        Arrays.sort(properties, new Comparator()
-        {
+        Arrays.sort(properties, new Comparator() {
+
             private static final String __OBFID = "CL_00002028";
-            public int compare(IProperty left, IProperty right)
-            {
+
+            public int compare(IProperty left, IProperty right) {
                 return left.getName().compareTo(right.getName());
             }
-            public int compare(Object p_compare_1_, Object p_compare_2_)
-            {
-                return this.compare((IProperty)p_compare_1_, (IProperty)p_compare_2_);
+
+            public int compare(Object p_compare_1_, Object p_compare_2_) {
+                return this.compare((IProperty) p_compare_1_, (IProperty) p_compare_2_);
             }
         });
         this.properties = ImmutableList.copyOf(properties);
@@ -66,9 +66,8 @@
         Iterable iterable = Cartesian.cartesianProduct(this.getAllowedValues());
         Iterator iterator = iterable.iterator();
 
-        while (iterator.hasNext())
-        {
-            List list = (List)iterator.next();
+        while (iterator.hasNext()) {
+            List list = (List) iterator.next();
             Map map = MapPopulator.createMap(this.properties, list);
             BlockState.StateImplementation stateimplementation = new BlockState.StateImplementation(blockIn, ImmutableMap.copyOf(map), null);
             linkedhashmap.put(map, stateimplementation);
@@ -77,161 +77,122 @@
 
         iterator = arraylist.iterator();
 
-        while (iterator.hasNext())
-        {
-            BlockState.StateImplementation stateimplementation1 = (BlockState.StateImplementation)iterator.next();
+        while (iterator.hasNext()) {
+            BlockState.StateImplementation stateimplementation1 = (BlockState.StateImplementation) iterator.next();
             stateimplementation1.buildPropertyValueTable(linkedhashmap);
         }
 
         this.validStates = ImmutableList.copyOf(arraylist);
     }
 
-    public ImmutableList getValidStates()
-    {
+    public ImmutableList getValidStates() {
         return this.validStates;
     }
 
-    private List getAllowedValues()
-    {
+    private List getAllowedValues() {
         ArrayList arraylist = Lists.newArrayList();
 
-        for (int i = 0; i < this.properties.size(); ++i)
-        {
-            arraylist.add(((IProperty)this.properties.get(i)).getAllowedValues());
+        for (int i = 0; i < this.properties.size(); ++i) {
+            arraylist.add(((IProperty) this.properties.get(i)).getAllowedValues());
         }
 
         return arraylist;
     }
 
-    public IBlockState getBaseState()
-    {
-        return (IBlockState)this.validStates.get(0);
+    public IBlockState getBaseState() {
+        return (IBlockState) this.validStates.get(0);
     }
 
-    public Block getBlock()
-    {
+    public Block getBlock() {
         return this.block;
     }
 
-    public Collection getProperties()
-    {
+    public Collection getProperties() {
         return this.properties;
     }
 
-    public String toString()
-    {
+    public String toString() {
         return Objects.toStringHelper(this).add("block", Block.blockRegistry.getNameForObject(this.block)).add("properties", Iterables.transform(this.properties, GET_NAME_FUNC)).toString();
     }
 
-    static class StateImplementation extends BlockStateBase
-        {
-            private final Block block;
-            private final ImmutableMap properties;
-            private ImmutableTable propertyValueTable;
-            private static final String __OBFID = "CL_00002027";
+    public static class StateImplementation extends BlockStateBase {
 
-            private StateImplementation(Block blockIn, ImmutableMap propertiesIn)
-            {
-                this.block = blockIn;
-                this.properties = propertiesIn;
-            }
+        private final Block block;
+        private final ImmutableMap properties;
+        protected ImmutableTable propertyValueTable;
+        private static final String __OBFID = "CL_00002027";
 
-            public Collection getPropertyNames()
-            {
-                return Collections.unmodifiableCollection(this.properties.keySet());
-            }
+        protected StateImplementation(Block blockIn, ImmutableMap propertiesIn) {
+            this.block = blockIn;
+            this.properties = propertiesIn;
+        }
 
-            public Comparable getValue(IProperty property)
-            {
-                if (!this.properties.containsKey(property))
-                {
-                    throw new IllegalArgumentException("Cannot get property " + property + " as it does not exist in " + this.block.getBlockState());
-                }
-                else
-                {
-                    return (Comparable)property.getValueClass().cast(this.properties.get(property));
-                }
-            }
+        public Collection getPropertyNames() {
+            return Collections.unmodifiableCollection(this.properties.keySet());
+        }
 
-            public IBlockState withProperty(IProperty property, Comparable value)
-            {
-                if (!this.properties.containsKey(property))
-                {
-                    throw new IllegalArgumentException("Cannot set property " + property + " as it does not exist in " + this.block.getBlockState());
-                }
-                else if (!property.getAllowedValues().contains(value))
-                {
-                    throw new IllegalArgumentException("Cannot set property " + property + " to " + value + " on block " + Block.blockRegistry.getNameForObject(this.block) + ", it is not an allowed value");
-                }
-                else
-                {
-                    return (IBlockState)(this.properties.get(property) == value ? this : (IBlockState)this.propertyValueTable.get(property, value));
-                }
+        public Comparable getValue(IProperty property) {
+            if (!this.properties.containsKey(property)) {
+                throw new IllegalArgumentException("Cannot get property " + property + " as it does not exist in " + this.block.getBlockState());
+            } else {
+                return (Comparable) property.getValueClass().cast(this.properties.get(property));
             }
+        }
 
-            public ImmutableMap getProperties()
-            {
-                return this.properties;
+        public IBlockState withProperty(IProperty property, Comparable value) {
+            if (!this.properties.containsKey(property)) {
+                throw new IllegalArgumentException("Cannot set property " + property + " as it does not exist in " + this.block.getBlockState());
+            } else if (!property.getAllowedValues().contains(value)) {
+                throw new IllegalArgumentException("Cannot set property " + property + " to " + value + " on block " + Block.blockRegistry.getNameForObject(this.block) + ", it is not an allowed value");
+            } else {
+                return (IBlockState) (this.properties.get(property) == value ? this : (IBlockState) this.propertyValueTable.get(property, value));
             }
+        }
 
-            public Block getBlock()
-            {
-                return this.block;
-            }
+        public ImmutableMap getProperties() {
+            return this.properties;
+        }
 
-            public boolean equals(Object p_equals_1_)
-            {
-                return this == p_equals_1_;
-            }
+        public Block getBlock() {
+            return this.block;
+        }
 
-            public int hashCode()
-            {
-                return this.properties.hashCode();
-            }
+        public boolean equals(Object p_equals_1_) {
+            return this == p_equals_1_;
+        }
 
-            public void buildPropertyValueTable(Map map)
-            {
-                if (this.propertyValueTable != null)
-                {
-                    throw new IllegalStateException();
-                }
-                else
-                {
-                    HashBasedTable hashbasedtable = HashBasedTable.create();
-                    Iterator iterator = this.properties.keySet().iterator();
+        public int hashCode() {
+            return this.properties.hashCode();
+        }
 
-                    while (iterator.hasNext())
-                    {
-                        IProperty iproperty = (IProperty)iterator.next();
-                        Iterator iterator1 = iproperty.getAllowedValues().iterator();
+        public void buildPropertyValueTable(Map map) {
+            if (this.propertyValueTable != null) {
+                throw new IllegalStateException();
+            } else {
+                HashBasedTable hashbasedtable = HashBasedTable.create();
+                Iterator iterator = this.properties.keySet().iterator();
 
-                        while (iterator1.hasNext())
-                        {
-                            Comparable comparable = (Comparable)iterator1.next();
+                while (iterator.hasNext()) {
+                    IProperty iproperty = (IProperty) iterator.next();
+                    Iterator iterator1 = iproperty.getAllowedValues().iterator();
 
-                            if (comparable != this.properties.get(iproperty))
-                            {
-                                hashbasedtable.put(iproperty, comparable, map.get(this.setPropertyValue(iproperty, comparable)));
-                            }
+                    while (iterator1.hasNext()) {
+                        Comparable comparable = (Comparable) iterator1.next();
+
+                        if (comparable != this.properties.get(iproperty)) {
+                            hashbasedtable.put(iproperty, comparable, map.get(this.setPropertyValue(iproperty, comparable)));
                         }
                     }
-
-                    this.propertyValueTable = ImmutableTable.copyOf(hashbasedtable);
                 }
-            }
 
-            private Map setPropertyValue(IProperty property, Comparable value)
-            {
-                HashMap hashmap = Maps.newHashMap(this.properties);
-                hashmap.put(property, value);
-                return hashmap;
+                this.propertyValueTable = ImmutableTable.copyOf(hashbasedtable);
             }
+        }
 
-            StateImplementation(Block p_i45661_1_, ImmutableMap p_i45661_2_, Object p_i45661_3_)
-            {
-                this(p_i45661_1_, p_i45661_2_);
-            }
+        private Map setPropertyValue(IProperty property, Comparable value) {
+            HashMap hashmap = Maps.newHashMap(this.properties);
+            hashmap.put(property, value);
+            return hashmap;
         }
-}
+
+        StateImplementation(Block p_i45661_1_, ImmutableMap p_i45661_2_, Object p_i45661_3_) {
+            this(p_i45661_1_, p_i45661_2_);
+        }
+    }
+}
