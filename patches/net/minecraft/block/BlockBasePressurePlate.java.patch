---a/net/minecraft/block/BlockBasePressurePlate.java
+++b/net/minecraft/block/BlockBasePressurePlate.java
@@ -1,6 +1,7 @@
 package net.minecraft.block;
 
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.creativetab.CreativeTabs;
@@ -11,185 +11,169 @@
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 
-public abstract class BlockBasePressurePlate extends Block
-{
+import org.bukkit.event.block.BlockRedstoneEvent;
+
+public abstract class BlockBasePressurePlate extends Block {
+
     private static final String __OBFID = "CL_00000194";
 
-    protected BlockBasePressurePlate(Material materialIn)
-    {
+    protected BlockBasePressurePlate(Material materialIn) {
         super(materialIn);
         this.setCreativeTab(CreativeTabs.tabRedstone);
         this.setTickRandomly(true);
     }
 
-    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos)
-    {
+    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos) {
         this.func_180668_d(worldIn.getBlockState(pos));
     }
 
-    protected void func_180668_d(IBlockState p_180668_1_)
-    {
+    protected void func_180668_d(IBlockState p_180668_1_) {
         boolean flag = this.getRedstoneStrength(p_180668_1_) > 0;
         float f = 0.0625F;
 
-        if (flag)
-        {
+        if (flag) {
             this.setBlockBounds(0.0625F, 0.0F, 0.0625F, 0.9375F, 0.03125F, 0.9375F);
-        }
-        else
-        {
+        } else {
             this.setBlockBounds(0.0625F, 0.0F, 0.0625F, 0.9375F, 0.0625F, 0.9375F);
         }
     }
 
-    public int tickRate(World worldIn)
-    {
+    public int tickRate(World worldIn) {
         return 20;
     }
 
-    public AxisAlignedBB getCollisionBoundingBox(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public AxisAlignedBB getCollisionBoundingBox(World worldIn, BlockPos pos, IBlockState state) {
         return null;
     }
 
-    public boolean isOpaqueCube()
-    {
+    public boolean isOpaqueCube() {
         return false;
     }
 
-    public boolean isFullCube()
-    {
+    public boolean isFullCube() {
         return false;
     }
 
-    public boolean isPassable(IBlockAccess worldIn, BlockPos pos)
-    {
+    public boolean isPassable(IBlockAccess worldIn, BlockPos pos) {
         return true;
     }
 
-    public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
-    {
+    public boolean canPlaceBlockAt(World worldIn, BlockPos pos) {
         return this.canBePlacedOn(worldIn, pos.down());
     }
 
-    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock)
-    {
-        if (!this.canBePlacedOn(worldIn, pos.down()))
-        {
+    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock) {
+        if (!this.canBePlacedOn(worldIn, pos.down())) {
             this.dropBlockAsItem(worldIn, pos, state, 0);
             worldIn.setBlockToAir(pos);
         }
     }
 
-    private boolean canBePlacedOn(World worldIn, BlockPos pos)
-    {
+    private boolean canBePlacedOn(World worldIn, BlockPos pos) {
         return World.doesBlockHaveSolidTopSurface(worldIn, pos) || worldIn.getBlockState(pos).getBlock() instanceof BlockFence;
     }
 
-    public void randomTick(World worldIn, BlockPos pos, IBlockState state, Random random) {}
+    public void randomTick(World worldIn, BlockPos pos, IBlockState state, Random random) {
+    }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        if (!worldIn.isRemote)
-        {
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
+        if (!worldIn.isRemote) {
             int i = this.getRedstoneStrength(state);
 
-            if (i > 0)
-            {
+            if (i > 0) {
                 this.updateState(worldIn, pos, state, i);
             }
         }
     }
 
-    public void onEntityCollidedWithBlock(World worldIn, BlockPos pos, IBlockState state, Entity entityIn)
-    {
-        if (!worldIn.isRemote)
-        {
+    public void onEntityCollidedWithBlock(World worldIn, BlockPos pos, IBlockState state, Entity entityIn) {
+        if (!worldIn.isRemote) {
             int i = this.getRedstoneStrength(state);
 
-            if (i == 0)
-            {
+            if (i == 0) {
                 this.updateState(worldIn, pos, state, i);
             }
         }
     }
 
-    protected void updateState(World worldIn, BlockPos pos, IBlockState state, int oldRedstoneStrength)
-    {
+    protected void updateState(World worldIn, BlockPos pos, IBlockState state, int oldRedstoneStrength) {
         int j = this.computeRedstoneStrength(worldIn, pos);
         boolean flag = oldRedstoneStrength > 0;
         boolean flag1 = j > 0;
 
-        if (oldRedstoneStrength != j)
-        {
+        // CraftBukkit start - Interact Pressure Plate
+        org.bukkit.World bworld = worldIn.getWorld();
+        org.bukkit.plugin.PluginManager manager = worldIn.getServer().getPluginManager();
+
+        if (flag != flag1) {
+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bworld.getBlockAt(pos.getX(), pos.getY(), pos.getZ()), oldRedstoneStrength, j);
+            manager.callEvent(eventRedstone);
+
+            flag1 = eventRedstone.getNewCurrent() > 0;
+            j = eventRedstone.getNewCurrent();
+        }
+        // CraftBukkit end
+
+
+        if (oldRedstoneStrength != j) {
             state = this.setRedstoneStrength(state, j);
             worldIn.setBlockState(pos, state, 2);
             this.updateNeighbors(worldIn, pos);
             worldIn.markBlockRangeForRenderUpdate(pos, pos);
         }
 
-        if (!flag1 && flag)
-        {
-            worldIn.playSoundEffect((double)pos.getX() + 0.5D, (double)pos.getY() + 0.1D, (double)pos.getZ() + 0.5D, "random.click", 0.3F, 0.5F);
+        if (!flag1 && flag) {
+            worldIn.playSoundEffect((double) pos.getX() + 0.5D, (double) pos.getY() + 0.1D, (double) pos.getZ() + 0.5D, "random.click", 0.3F, 0.5F);
+        } else if (flag1 && !flag) {
+            worldIn.playSoundEffect((double) pos.getX() + 0.5D, (double) pos.getY() + 0.1D, (double) pos.getZ() + 0.5D, "random.click", 0.3F, 0.6F);
         }
-        else if (flag1 && !flag)
-        {
-            worldIn.playSoundEffect((double)pos.getX() + 0.5D, (double)pos.getY() + 0.1D, (double)pos.getZ() + 0.5D, "random.click", 0.3F, 0.6F);
-        }
 
-        if (flag1)
-        {
+        if (flag1) {
             worldIn.scheduleUpdate(pos, this, this.tickRate(worldIn));
         }
     }
 
-    protected AxisAlignedBB getSensitiveAABB(BlockPos pos)
-    {
+    protected AxisAlignedBB getSensitiveAABB(BlockPos pos) {
         float f = 0.125F;
-        return new AxisAlignedBB((double)((float)pos.getX() + 0.125F), (double)pos.getY(), (double)((float)pos.getZ() + 0.125F), (double)((float)(pos.getX() + 1) - 0.125F), (double)pos.getY() + 0.25D, (double)((float)(pos.getZ() + 1) - 0.125F));
+        return new AxisAlignedBB((double) ((float) pos.getX() + 0.125F), (double) pos.getY(), (double) ((float) pos.getZ() + 0.125F), (double) ((float) (pos.getX() + 1) - 0.125F), (double) pos.getY() + 0.25D, (double) ((float) (pos.getZ() + 1) - 0.125F));
     }
 
-    public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
-    {
-        if (this.getRedstoneStrength(state) > 0)
-        {
+    public void breakBlock(World worldIn, BlockPos pos, IBlockState state) {
+        if (this.getRedstoneStrength(state) > 0) {
             this.updateNeighbors(worldIn, pos);
         }
 
         super.breakBlock(worldIn, pos, state);
     }
 
-    protected void updateNeighbors(World worldIn, BlockPos pos)
-    {
+    protected void updateNeighbors(World worldIn, BlockPos pos) {
         worldIn.notifyNeighborsOfStateChange(pos, this);
         worldIn.notifyNeighborsOfStateChange(pos.down(), this);
     }
 
-    public int isProvidingWeakPower(IBlockAccess worldIn, BlockPos pos, IBlockState state, EnumFacing side)
-    {
+    public int isProvidingWeakPower(IBlockAccess worldIn, BlockPos pos, IBlockState state, EnumFacing side) {
         return this.getRedstoneStrength(state);
     }
 
-    public int isProvidingStrongPower(IBlockAccess worldIn, BlockPos pos, IBlockState state, EnumFacing side)
-    {
+    public int isProvidingStrongPower(IBlockAccess worldIn, BlockPos pos, IBlockState state, EnumFacing side) {
         return side == EnumFacing.UP ? this.getRedstoneStrength(state) : 0;
     }
 
-    public boolean canProvidePower()
-    {
+    public boolean canProvidePower() {
         return true;
     }
 
-    public void setBlockBoundsForItemRender()
-    {
+    public void setBlockBoundsForItemRender() {
         float f = 0.5F;
         float f1 = 0.125F;
         float f2 = 0.5F;
         this.setBlockBounds(0.0F, 0.375F, 0.0F, 1.0F, 0.625F, 1.0F);
     }
 
-    public int getMobilityFlag()
-    {
+    public int getMobilityFlag() {
         return 1;
     }
 
@@ -198,4 +198,4 @@
     protected abstract int getRedstoneStrength(IBlockState p_176576_1_);
 
     protected abstract IBlockState setRedstoneStrength(IBlockState p_176575_1_, int p_176575_2_);
-}
+}
