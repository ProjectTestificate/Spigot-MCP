--- decompiled\net\minecraft\block\BlockSkull.java
+++ src\main\java\net\minecraft\block\BlockSkull.java
@@ -1,10 +1,10 @@
 package net.minecraft.block;
 
-import com.google.common.base.Predicate;
 import java.util.Iterator;
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyBool;
 import net.minecraft.block.properties.PropertyDirection;
 import net.minecraft.block.state.BlockState;
@@ -21,63 +21,62 @@
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTUtil;
 import net.minecraft.stats.AchievementList;
+import net.minecraft.stats.StatBase;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.tileentity.TileEntitySkull;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.world.EnumDifficulty;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockSkull extends BlockContainer
-{
+import org.bukkit.craftbukkit.util.BlockStateListPopulator;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+
+import com.google.common.base.Predicate;
+
+public class BlockSkull extends BlockContainer {
+
     public static final PropertyDirection FACING = PropertyDirection.create("facing");
     public static final PropertyBool NODROP = PropertyBool.create("nodrop");
-    private static final Predicate IS_WITHER_SKELETON = new Predicate()
-    {
+    private static final Predicate IS_WITHER_SKELETON = new Predicate() {
+
         private static final String __OBFID = "CL_00002065";
-        public boolean apply(BlockWorldState state)
-        {
-            return state.getBlockState().getBlock() == Blocks.skull && state.getTileEntity() instanceof TileEntitySkull && ((TileEntitySkull)state.getTileEntity()).getSkullType() == 1;
+
+        public boolean apply(BlockWorldState state) {
+            return state.getBlockState().getBlock() == Blocks.skull && state.getTileEntity() instanceof TileEntitySkull && ((TileEntitySkull) state.getTileEntity()).getSkullType() == 1;
         }
-        public boolean apply(Object p_apply_1_)
-        {
-            return this.apply((BlockWorldState)p_apply_1_);
+
+        public boolean apply(Object p_apply_1_) {
+            return this.apply((BlockWorldState) p_apply_1_);
         }
     };
     private BlockPattern witherBasePattern;
     private BlockPattern witherPattern;
     private static final String __OBFID = "CL_00000307";
 
-    protected BlockSkull()
-    {
+    protected BlockSkull() {
         super(Material.circuits);
         this.setDefaultState(this.blockState.getBaseState().withProperty(FACING, EnumFacing.NORTH).withProperty(NODROP, Boolean.valueOf(false)));
         this.setBlockBounds(0.25F, 0.0F, 0.25F, 0.75F, 0.5F, 0.75F);
     }
 
-    public boolean isOpaqueCube()
-    {
+    public boolean isOpaqueCube() {
         return false;
     }
 
-    public boolean isFullCube()
-    {
+    public boolean isFullCube() {
         return false;
     }
 
-    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos)
-    {
-        switch (BlockSkull.SwitchEnumFacing.FACING_LOOKUP[((EnumFacing)worldIn.getBlockState(pos).getValue(FACING)).ordinal()])
-        {
+    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos) {
+        switch (BlockSkull.SwitchEnumFacing.FACING_LOOKUP[((EnumFacing) worldIn.getBlockState(pos).getValue(FACING)).ordinal()]) {
             case 1:
             default:
                 this.setBlockBounds(0.25F, 0.0F, 0.25F, 0.75F, 0.5F, 0.75F);
                 break;
             case 2:
@@ -92,66 +91,70 @@
             case 5:
                 this.setBlockBounds(0.0F, 0.25F, 0.25F, 0.5F, 0.75F, 0.75F);
         }
     }
 
-    public AxisAlignedBB getCollisionBoundingBox(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public AxisAlignedBB getCollisionBoundingBox(World worldIn, BlockPos pos, IBlockState state) {
         this.setBlockBoundsBasedOnState(worldIn, pos);
         return super.getCollisionBoundingBox(worldIn, pos, state);
     }
 
-    public IBlockState onBlockPlaced(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer)
-    {
+    public IBlockState onBlockPlaced(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer) {
         return this.getDefaultState().withProperty(FACING, placer.getHorizontalFacing()).withProperty(NODROP, Boolean.valueOf(false));
     }
 
-    public TileEntity createNewTileEntity(World worldIn, int meta)
-    {
+    public TileEntity createNewTileEntity(World worldIn, int meta) {
         return new TileEntitySkull();
     }
 
-    @SideOnly(Side.CLIENT)
-    public Item getItem(World worldIn, BlockPos pos)
-    {
-        return Items.skull;
-    }
-
-    public int getDamageValue(World worldIn, BlockPos pos)
-    {
+    public int getDamageValue(World worldIn, BlockPos pos) {
         TileEntity tileentity = worldIn.getTileEntity(pos);
-        return tileentity instanceof TileEntitySkull ? ((TileEntitySkull)tileentity).getSkullType() : super.getDamageValue(worldIn, pos);
+        return tileentity instanceof TileEntitySkull ? ((TileEntitySkull) tileentity).getSkullType() : super.getDamageValue(worldIn, pos);
     }
 
-    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune) {}
+    // CraftBukkit start - Special case dropping so we can get info from the tile entity
+    public void dropBlockAsItemWithChance(World world, BlockPos blockposition, IBlockState iblockdata, float f, int i) {
+        if (world.rand.nextFloat() < f) {
+            ItemStack itemstack = new ItemStack(Items.skull, 1, this.getDamageValue(world, blockposition));
+            TileEntitySkull tileentityskull = (TileEntitySkull) world.getTileEntity(blockposition);
 
-    public void onBlockHarvested(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player)
-    {
-        if (player.capabilities.isCreativeMode)
-        {
+            if (tileentityskull.getSkullType() == 3 && tileentityskull.getPlayerProfile() != null) {
+                itemstack.setTagCompound(new NBTTagCompound());
+                NBTTagCompound nbttagcompound = new NBTTagCompound();
+
+                // SpigotMCP NOTE -- GameProfileSerializer really means NBTUtil
+                NBTUtil.writeGameProfile(nbttagcompound, tileentityskull.getPlayerProfile());
+                itemstack.getTagCompound().setTag("SkullOwner", nbttagcompound);
+            }
+
+            spawnAsEntity(world, blockposition, itemstack);
+        }
+    }
+    // CraftBukkit end
+
+    public void onBlockHarvested(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player) {
+        if (player.capabilities.isCreativeMode) {
             state = state.withProperty(NODROP, Boolean.valueOf(true));
             worldIn.setBlockState(pos, state, 4);
         }
 
         super.onBlockHarvested(worldIn, pos, state, player);
     }
 
-    public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
-    {
-        if (!worldIn.isRemote)
-        {
-            if (!((Boolean)state.getValue(NODROP)).booleanValue())
-            {
+    public void breakBlock(World worldIn, BlockPos pos, IBlockState state) {
+        if (!worldIn.isRemote) {
+            // CraftBukkit start - Drop item in code above, not here
+            // if (!((Boolean)state.getValue(NODROP)).booleanValue())
+            if (false) {
+                // CraftBukkit end
                 TileEntity tileentity = worldIn.getTileEntity(pos);
 
-                if (tileentity instanceof TileEntitySkull)
-                {
-                    TileEntitySkull tileentityskull = (TileEntitySkull)tileentity;
+                if (tileentity instanceof TileEntitySkull) {
+                    TileEntitySkull tileentityskull = (TileEntitySkull) tileentity;
                     ItemStack itemstack = new ItemStack(Items.skull, 1, this.getDamageValue(worldIn, pos));
 
-                    if (tileentityskull.getSkullType() == 3 && tileentityskull.getPlayerProfile() != null)
-                    {
+                    if (tileentityskull.getSkullType() == 3 && tileentityskull.getPlayerProfile() != null) {
                         itemstack.setTagCompound(new NBTTagCompound());
                         NBTTagCompound nbttagcompound = new NBTTagCompound();
                         NBTUtil.writeGameProfile(nbttagcompound, tileentityskull.getPlayerProfile());
                         itemstack.getTagCompound().setTag("SkullOwner", nbttagcompound);
                     }
@@ -162,172 +165,154 @@
 
             super.breakBlock(worldIn, pos, state);
         }
     }
 
-    public Item getItemDropped(IBlockState state, Random rand, int fortune)
-    {
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
         return Items.skull;
     }
 
-    public boolean canDispenserPlace(World worldIn, BlockPos pos, ItemStack stack)
-    {
+    public boolean canDispenserPlace(World worldIn, BlockPos pos, ItemStack stack) {
         return stack.getMetadata() == 1 && pos.getY() >= 2 && worldIn.getDifficulty() != EnumDifficulty.PEACEFUL && !worldIn.isRemote ? this.getWitherBasePattern().match(worldIn, pos) != null : false;
     }
 
-    public void checkWitherSpawn(World worldIn, BlockPos pos, TileEntitySkull te)
-    {
-        if (te.getSkullType() == 1 && pos.getY() >= 2 && worldIn.getDifficulty() != EnumDifficulty.PEACEFUL && !worldIn.isRemote)
-        {
+    public void checkWitherSpawn(World worldIn, BlockPos pos, TileEntitySkull te) {
+        if (te.getSkullType() == 1 && pos.getY() >= 2 && worldIn.getDifficulty() != EnumDifficulty.PEACEFUL && !worldIn.isRemote) {
             BlockPattern blockpattern = this.getWitherPattern();
             BlockPattern.PatternHelper patternhelper = blockpattern.match(worldIn, pos);
 
-            if (patternhelper != null)
-            {
+            if (patternhelper != null) {
+                BlockStateListPopulator blockList = new BlockStateListPopulator(worldIn.getWorld()); // CraftBukkit - Use BlockStateListPopulator
                 int i;
 
-                for (i = 0; i < 3; ++i)
-                {
+                for (i = 0; i < 3; ++i) {
                     BlockWorldState blockworldstate = patternhelper.translateOffset(i, 0, 0);
-                    worldIn.setBlockState(blockworldstate.getPos(), blockworldstate.getBlockState().withProperty(NODROP, Boolean.valueOf(true)), 2);
+                    // CraftBukkit start
+                    // worldIn.setBlockState(blockworldstate.getPos(), blockworldstate.getBlockState().withProperty(NODROP, Boolean.valueOf(true)), 2);
+                    BlockPos posOfShapeDetector = blockworldstate.getPos();
+                    IBlockState data = blockworldstate.getBlockState().withProperty(BlockSkull.NODROP, Boolean.valueOf(true));
+                    blockList.setTypeAndData(posOfShapeDetector.getX(), posOfShapeDetector.getY(), posOfShapeDetector.getZ(), data.getBlock(), data.getBlock().getMetaFromState(data), 2);
+                    // CraftBukkit end
+
                 }
 
-                for (i = 0; i < blockpattern.getPalmLength(); ++i)
-                {
-                    for (int j = 0; j < blockpattern.getThumbLength(); ++j)
-                    {
+                for (i = 0; i < blockpattern.getPalmLength(); ++i) {
+                    for (int j = 0; j < blockpattern.getThumbLength(); ++j) {
                         BlockWorldState blockworldstate1 = patternhelper.translateOffset(i, j, 0);
-                        worldIn.setBlockState(blockworldstate1.getPos(), Blocks.air.getDefaultState(), 2);
+                        // CraftBukkit start
+                        //worldIn.setBlockState(blockworldstate1.getPos(), Blocks.air.getDefaultState(), 2);
+                        BlockPos posOfShapeDetector = blockworldstate1.getPos();
+                        blockList.setTypeAndData(posOfShapeDetector.getX(), posOfShapeDetector.getY(), posOfShapeDetector.getZ(), Blocks.air, 0, 2);
+                        // CraftBukkit end
                     }
                 }
 
                 BlockPos blockpos1 = patternhelper.translateOffset(1, 0, 0).getPos();
                 EntityWither entitywither = new EntityWither(worldIn);
                 BlockPos blockpos2 = patternhelper.translateOffset(1, 2, 0).getPos();
-                entitywither.setLocationAndAngles((double)blockpos2.getX() + 0.5D, (double)blockpos2.getY() + 0.55D, (double)blockpos2.getZ() + 0.5D, patternhelper.getFinger().getAxis() == EnumFacing.Axis.X ? 0.0F : 90.0F, 0.0F);
+                entitywither.setLocationAndAngles((double) blockpos2.getX() + 0.5D, (double) blockpos2.getY() + 0.55D, (double) blockpos2.getZ() + 0.5D, patternhelper.getFinger().getAxis() == EnumFacing.Axis.X ? 0.0F : 90.0F, 0.0F);
                 entitywither.renderYawOffset = patternhelper.getFinger().getAxis() == EnumFacing.Axis.X ? 0.0F : 90.0F;
                 entitywither.func_82206_m();
                 Iterator iterator = worldIn.getEntitiesWithinAABB(EntityPlayer.class, entitywither.getEntityBoundingBox().expand(50.0D, 50.0D, 50.0D)).iterator();
 
-                while (iterator.hasNext())
-                {
-                    EntityPlayer entityplayer = (EntityPlayer)iterator.next();
-                    entityplayer.triggerAchievement(AchievementList.spawnWither);
-                }
+                // CraftBukkit start
+                if (worldIn.addEntity(entitywither, CreatureSpawnEvent.SpawnReason.BUILD_WITHER)) {
+                    while (iterator.hasNext()) {
+                        EntityPlayer entityhuman = (EntityPlayer) iterator.next();
 
-                worldIn.spawnEntityInWorld(entitywither);
-                int k;
+                        entityhuman.triggerAchievement((StatBase) AchievementList.spawnWither);
+                    }
 
-                for (k = 0; k < 120; ++k)
-                {
-                    worldIn.spawnParticle(EnumParticleTypes.SNOWBALL, (double)blockpos1.getX() + worldIn.rand.nextDouble(), (double)(blockpos1.getY() - 2) + worldIn.rand.nextDouble() * 3.9D, (double)blockpos1.getZ() + worldIn.rand.nextDouble(), 0.0D, 0.0D, 0.0D, new int[0]);
-                }
+                    blockList.updateList();
 
-                for (k = 0; k < blockpattern.getPalmLength(); ++k)
-                {
-                    for (int l = 0; l < blockpattern.getThumbLength(); ++l)
-                    {
-                        BlockWorldState blockworldstate2 = patternhelper.translateOffset(k, l, 0);
-                        worldIn.notifyNeighborsRespectDebug(blockworldstate2.getPos(), Blocks.air);
+                    int k;
+
+                    for (k = 0; k < 120; ++k) {
+                        worldIn.spawnParticle(EnumParticleTypes.SNOWBALL, (double) blockpos1.getX() + worldIn.rand.nextDouble(), (double) (blockpos1.getY() - 2) + worldIn.rand.nextDouble() * 3.9D, (double) blockpos1.getZ() + worldIn.rand.nextDouble(), 0.0D, 0.0D, 0.0D, new int[0]);
                     }
+
+                    for (k = 0; k < blockpattern.getPalmLength(); ++k) {
+                        for (int l = 0; l < blockpattern.getThumbLength(); ++l) {
+                            BlockWorldState shapedetectorblock2 = patternhelper.translateOffset(k, l, 0);
+
+                            worldIn.notifyNeighborsRespectDebug(shapedetectorblock2.getPos(), Blocks.air);
+                        }
+                    }
                 }
+                // CraftBukkit end
             }
         }
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(FACING, EnumFacing.getFront(meta & 7)).withProperty(NODROP, Boolean.valueOf((meta & 8) > 0));
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
+    public int getMetaFromState(IBlockState state) {
         byte b0 = 0;
-        int i = b0 | ((EnumFacing)state.getValue(FACING)).getIndex();
+        int i = b0 | ((EnumFacing) state.getValue(FACING)).getIndex();
 
-        if (((Boolean)state.getValue(NODROP)).booleanValue())
-        {
+        if (((Boolean) state.getValue(NODROP)).booleanValue()) {
             i |= 8;
         }
 
         return i;
     }
 
-    protected BlockState createBlockState()
-    {
-        return new BlockState(this, new IProperty[] {FACING, NODROP});
+    protected BlockState createBlockState() {
+        return new BlockState(this, new IProperty[]{FACING, NODROP});
     }
 
-    protected BlockPattern getWitherBasePattern()
-    {
-        if (this.witherBasePattern == null)
-        {
-            this.witherBasePattern = FactoryBlockPattern.start().aisle(new String[] {"   ", "###", "~#~"}).where('#', BlockWorldState.hasState(BlockStateHelper.forBlock(Blocks.soul_sand))).where('~', BlockWorldState.hasState(BlockStateHelper.forBlock(Blocks.air))).build();
+    protected BlockPattern getWitherBasePattern() {
+        if (this.witherBasePattern == null) {
+            this.witherBasePattern = FactoryBlockPattern.start().aisle(new String[]{"   ", "###", "~#~"}).where('#', BlockWorldState.hasState(BlockStateHelper.forBlock(Blocks.soul_sand))).where('~', BlockWorldState.hasState(BlockStateHelper.forBlock(Blocks.air))).build();
         }
 
         return this.witherBasePattern;
     }
 
-    protected BlockPattern getWitherPattern()
-    {
-        if (this.witherPattern == null)
-        {
-            this.witherPattern = FactoryBlockPattern.start().aisle(new String[] {"^^^", "###", "~#~"}).where('#', BlockWorldState.hasState(BlockStateHelper.forBlock(Blocks.soul_sand))).where('^', IS_WITHER_SKELETON).where('~', BlockWorldState.hasState(BlockStateHelper.forBlock(Blocks.air))).build();
+    protected BlockPattern getWitherPattern() {
+        if (this.witherPattern == null) {
+            this.witherPattern = FactoryBlockPattern.start().aisle(new String[]{"^^^", "###", "~#~"}).where('#', BlockWorldState.hasState(BlockStateHelper.forBlock(Blocks.soul_sand))).where('^', IS_WITHER_SKELETON).where('~', BlockWorldState.hasState(BlockStateHelper.forBlock(Blocks.air))).build();
         }
 
         return this.witherPattern;
     }
 
-    static final class SwitchEnumFacing
-        {
-            static final int[] FACING_LOOKUP = new int[EnumFacing.values().length];
-            private static final String __OBFID = "CL_00002064";
+    static final class SwitchEnumFacing {
 
-            static
-            {
-                try
-                {
-                    FACING_LOOKUP[EnumFacing.UP.ordinal()] = 1;
-                }
-                catch (NoSuchFieldError var5)
-                {
-                    ;
-                }
+        static final int[] FACING_LOOKUP = new int[EnumFacing.values().length];
+        private static final String __OBFID = "CL_00002064";
 
-                try
-                {
-                    FACING_LOOKUP[EnumFacing.NORTH.ordinal()] = 2;
-                }
-                catch (NoSuchFieldError var4)
-                {
-                    ;
-                }
+        static {
+            try {
+                FACING_LOOKUP[EnumFacing.UP.ordinal()] = 1;
+            } catch (NoSuchFieldError var5) {
+                ;
+            }
 
-                try
-                {
-                    FACING_LOOKUP[EnumFacing.SOUTH.ordinal()] = 3;
-                }
-                catch (NoSuchFieldError var3)
-                {
-                    ;
-                }
+            try {
+                FACING_LOOKUP[EnumFacing.NORTH.ordinal()] = 2;
+            } catch (NoSuchFieldError var4) {
+                ;
+            }
 
-                try
-                {
-                    FACING_LOOKUP[EnumFacing.WEST.ordinal()] = 4;
-                }
-                catch (NoSuchFieldError var2)
-                {
-                    ;
-                }
+            try {
+                FACING_LOOKUP[EnumFacing.SOUTH.ordinal()] = 3;
+            } catch (NoSuchFieldError var3) {
+                ;
+            }
 
-                try
-                {
-                    FACING_LOOKUP[EnumFacing.EAST.ordinal()] = 5;
-                }
-                catch (NoSuchFieldError var1)
-                {
-                    ;
-                }
+            try {
+                FACING_LOOKUP[EnumFacing.WEST.ordinal()] = 4;
+            } catch (NoSuchFieldError var2) {
+                ;
             }
+
+            try {
+                FACING_LOOKUP[EnumFacing.EAST.ordinal()] = 5;
+            } catch (NoSuchFieldError var1) {
+                ;
+            }
         }
+    }
 }
