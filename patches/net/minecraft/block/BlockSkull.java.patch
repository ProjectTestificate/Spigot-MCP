--- decompiled\net\minecraft\block\BlockSkull.java
+++ src\main\java\net\minecraft\block\BlockSkull.java
@@ -1,10 +1,10 @@
 package net.minecraft.block;
 
-import com.google.common.base.Predicate;
 import java.util.Iterator;
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyBool;
 import net.minecraft.block.properties.PropertyDirection;
 import net.minecraft.block.state.BlockState;
@@ -21,24 +21,29 @@
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTUtil;
 import net.minecraft.stats.AchievementList;
+import net.minecraft.stats.StatBase;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.tileentity.TileEntitySkull;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.world.EnumDifficulty;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import org.bukkit.craftbukkit.util.BlockStateListPopulator;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+
+import com.google.common.base.Predicate;
+
 public class BlockSkull extends BlockContainer
 {
+
     public static final PropertyDirection FACING = PropertyDirection.create("facing");
     public static final PropertyBool NODROP = PropertyBool.create("nodrop");
     private static final Predicate IS_WITHER_SKELETON = new Predicate()
     {
         private static final String __OBFID = "CL_00002065";
@@ -108,24 +113,38 @@
     public TileEntity createNewTileEntity(World worldIn, int meta)
     {
         return new TileEntitySkull();
     }
 
-    @SideOnly(Side.CLIENT)
-    public Item getItem(World worldIn, BlockPos pos)
-    {
-        return Items.skull;
-    }
-
     public int getDamageValue(World worldIn, BlockPos pos)
     {
         TileEntity tileentity = worldIn.getTileEntity(pos);
         return tileentity instanceof TileEntitySkull ? ((TileEntitySkull)tileentity).getSkullType() : super.getDamageValue(worldIn, pos);
     }
 
-    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune) {}
+    // CraftBukkit start - Special case dropping so we can get info from the tile entity
+    public void dropBlockAsItemWithChance(World world, BlockPos blockposition, IBlockState iblockdata, float f, int i)
+    {
+        if (world.rand.nextFloat() < f)
+        {
+            ItemStack itemstack = new ItemStack(Items.skull, 1, this.getDamageValue(world, blockposition));
+            TileEntitySkull tileentityskull = (TileEntitySkull)world.getTileEntity(blockposition);
 
+            if (tileentityskull.getSkullType() == 3 && tileentityskull.getPlayerProfile() != null)
+            {
+                itemstack.setTagCompound(new NBTTagCompound());
+                NBTTagCompound nbttagcompound = new NBTTagCompound();
+                // SpigotMCP NOTE -- GameProfileSerializer really means NBTUtil
+                NBTUtil.writeGameProfile(nbttagcompound, tileentityskull.getPlayerProfile());
+                itemstack.getTagCompound().setTag("SkullOwner", nbttagcompound);
+            }
+
+            spawnAsEntity(world, blockposition, itemstack);
+        }
+    }
+    // CraftBukkit end
+
     public void onBlockHarvested(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player)
     {
         if (player.capabilities.isCreativeMode)
         {
             state = state.withProperty(NODROP, Boolean.valueOf(true));
@@ -137,12 +156,15 @@
 
     public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
     {
         if (!worldIn.isRemote)
         {
-            if (!((Boolean)state.getValue(NODROP)).booleanValue())
+            // CraftBukkit start - Drop item in code above, not here
+            // if (!((Boolean)state.getValue(NODROP)).booleanValue())
+            if (false)
             {
+                // CraftBukkit end
                 TileEntity tileentity = worldIn.getTileEntity(pos);
 
                 if (tileentity instanceof TileEntitySkull)
                 {
                     TileEntitySkull tileentityskull = (TileEntitySkull)tileentity;
@@ -181,24 +203,34 @@
             BlockPattern blockpattern = this.getWitherPattern();
             BlockPattern.PatternHelper patternhelper = blockpattern.match(worldIn, pos);
 
             if (patternhelper != null)
             {
+                BlockStateListPopulator blockList = new BlockStateListPopulator(worldIn.getWorld()); // CraftBukkit - Use BlockStateListPopulator
                 int i;
 
                 for (i = 0; i < 3; ++i)
                 {
                     BlockWorldState blockworldstate = patternhelper.translateOffset(i, 0, 0);
-                    worldIn.setBlockState(blockworldstate.getPos(), blockworldstate.getBlockState().withProperty(NODROP, Boolean.valueOf(true)), 2);
+                    // CraftBukkit start
+                    // worldIn.setBlockState(blockworldstate.getPos(), blockworldstate.getBlockState().withProperty(NODROP, Boolean.valueOf(true)), 2);
+                    BlockPos posOfShapeDetector = blockworldstate.getPos();
+                    IBlockState data = blockworldstate.getBlockState().withProperty(BlockSkull.NODROP, Boolean.valueOf(true));
+                    blockList.setTypeAndData(posOfShapeDetector.getX(), posOfShapeDetector.getY(), posOfShapeDetector.getZ(), data.getBlock(), data.getBlock().getMetaFromState(data), 2);
+                    // CraftBukkit end
                 }
 
                 for (i = 0; i < blockpattern.getPalmLength(); ++i)
                 {
                     for (int j = 0; j < blockpattern.getThumbLength(); ++j)
                     {
                         BlockWorldState blockworldstate1 = patternhelper.translateOffset(i, j, 0);
-                        worldIn.setBlockState(blockworldstate1.getPos(), Blocks.air.getDefaultState(), 2);
+                        // CraftBukkit start
+                        //worldIn.setBlockState(blockworldstate1.getPos(), Blocks.air.getDefaultState(), 2);
+                        BlockPos posOfShapeDetector = blockworldstate1.getPos();
+                        blockList.setTypeAndData(posOfShapeDetector.getX(), posOfShapeDetector.getY(), posOfShapeDetector.getZ(), Blocks.air, 0, 2);
+                        // CraftBukkit end
                     }
                 }
 
                 BlockPos blockpos1 = patternhelper.translateOffset(1, 0, 0).getPos();
                 EntityWither entitywither = new EntityWither(worldIn);
@@ -206,32 +238,38 @@
                 entitywither.setLocationAndAngles((double)blockpos2.getX() + 0.5D, (double)blockpos2.getY() + 0.55D, (double)blockpos2.getZ() + 0.5D, patternhelper.getFinger().getAxis() == EnumFacing.Axis.X ? 0.0F : 90.0F, 0.0F);
                 entitywither.renderYawOffset = patternhelper.getFinger().getAxis() == EnumFacing.Axis.X ? 0.0F : 90.0F;
                 entitywither.func_82206_m();
                 Iterator iterator = worldIn.getEntitiesWithinAABB(EntityPlayer.class, entitywither.getEntityBoundingBox().expand(50.0D, 50.0D, 50.0D)).iterator();
 
-                while (iterator.hasNext())
+                // CraftBukkit start
+                if (worldIn.addEntity(entitywither, CreatureSpawnEvent.SpawnReason.BUILD_WITHER))
                 {
-                    EntityPlayer entityplayer = (EntityPlayer)iterator.next();
-                    entityplayer.triggerAchievement(AchievementList.spawnWither);
-                }
+                    while (iterator.hasNext())
+                    {
+                        EntityPlayer entityhuman = (EntityPlayer)iterator.next();
+                        entityhuman.triggerAchievement((StatBase)AchievementList.spawnWither);
+                    }
 
-                worldIn.spawnEntityInWorld(entitywither);
-                int k;
+                    blockList.updateList();
+                    int k;
 
-                for (k = 0; k < 120; ++k)
-                {
-                    worldIn.spawnParticle(EnumParticleTypes.SNOWBALL, (double)blockpos1.getX() + worldIn.rand.nextDouble(), (double)(blockpos1.getY() - 2) + worldIn.rand.nextDouble() * 3.9D, (double)blockpos1.getZ() + worldIn.rand.nextDouble(), 0.0D, 0.0D, 0.0D, new int[0]);
-                }
+                    for (k = 0; k < 120; ++k)
+                    {
+                        worldIn.spawnParticle(EnumParticleTypes.SNOWBALL, (double)blockpos1.getX() + worldIn.rand.nextDouble(), (double)(blockpos1.getY() - 2) + worldIn.rand.nextDouble() * 3.9D, (double)blockpos1.getZ() + worldIn.rand.nextDouble(), 0.0D, 0.0D, 0.0D, new int[0]);
+                    }
 
-                for (k = 0; k < blockpattern.getPalmLength(); ++k)
-                {
-                    for (int l = 0; l < blockpattern.getThumbLength(); ++l)
+                    for (k = 0; k < blockpattern.getPalmLength(); ++k)
                     {
-                        BlockWorldState blockworldstate2 = patternhelper.translateOffset(k, l, 0);
-                        worldIn.notifyNeighborsRespectDebug(blockworldstate2.getPos(), Blocks.air);
+                        for (int l = 0; l < blockpattern.getThumbLength(); ++l)
+                        {
+                            BlockWorldState shapedetectorblock2 = patternhelper.translateOffset(k, l, 0);
+                            worldIn.notifyNeighborsRespectDebug(shapedetectorblock2.getPos(), Blocks.air);
+                        }
                     }
                 }
+
+                // CraftBukkit end
             }
         }
     }
 
     public IBlockState getStateFromMeta(int meta)
@@ -277,10 +315,11 @@
         return this.witherPattern;
     }
 
     static final class SwitchEnumFacing
         {
+
             static final int[] FACING_LOOKUP = new int[EnumFacing.values().length];
             private static final String __OBFID = "CL_00002064";
 
             static
             {
