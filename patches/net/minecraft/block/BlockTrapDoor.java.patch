---a/net/minecraft/block/BlockTrapDoor.java
+++b/net/minecraft/block/BlockTrapDoor.java
@@ -14,23 +14,21 @@
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumWorldBlockLayer;
 import net.minecraft.util.IStringSerializable;
 import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockTrapDoor extends Block
-{
+import org.bukkit.event.block.BlockRedstoneEvent;
+
+public class BlockTrapDoor extends Block {
+
     public static final PropertyDirection FACING = PropertyDirection.create("facing", EnumFacing.Plane.HORIZONTAL);
     public static final PropertyBool OPEN = PropertyBool.create("open");
     public static final PropertyEnum HALF = PropertyEnum.create("half", BlockTrapDoor.DoorHalf.class);
     private static final String __OBFID = "CL_00000327";
 
-    protected BlockTrapDoor(Material materialIn)
-    {
+    protected BlockTrapDoor(Material materialIn) {
         super(materialIn);
         this.setDefaultState(this.blockState.getBaseState().withProperty(FACING, EnumFacing.NORTH).withProperty(OPEN, Boolean.valueOf(false)).withProperty(HALF, BlockTrapDoor.DoorHalf.BOTTOM));
         float f = 0.5F;
@@ -40,144 +40,120 @@
         this.setCreativeTab(CreativeTabs.tabRedstone);
     }
 
-    public boolean isOpaqueCube()
-    {
+    public boolean isOpaqueCube() {
         return false;
     }
 
-    public boolean isFullCube()
-    {
+    public boolean isFullCube() {
         return false;
     }
 
-    public boolean isPassable(IBlockAccess worldIn, BlockPos pos)
-    {
-        return !((Boolean)worldIn.getBlockState(pos).getValue(OPEN)).booleanValue();
+    public boolean isPassable(IBlockAccess worldIn, BlockPos pos) {
+        return !((Boolean) worldIn.getBlockState(pos).getValue(OPEN)).booleanValue();
     }
 
-    @SideOnly(Side.CLIENT)
-    public AxisAlignedBB getSelectedBoundingBox(World worldIn, BlockPos pos)
-    {
+    public AxisAlignedBB getCollisionBoundingBox(World worldIn, BlockPos pos, IBlockState state) {
         this.setBlockBoundsBasedOnState(worldIn, pos);
-        return super.getSelectedBoundingBox(worldIn, pos);
-    }
-
-    public AxisAlignedBB getCollisionBoundingBox(World worldIn, BlockPos pos, IBlockState state)
-    {
-        this.setBlockBoundsBasedOnState(worldIn, pos);
         return super.getCollisionBoundingBox(worldIn, pos, state);
     }
 
-    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos)
-    {
+    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos) {
         this.setBounds(worldIn.getBlockState(pos));
     }
 
-    public void setBlockBoundsForItemRender()
-    {
+    public void setBlockBoundsForItemRender() {
         float f = 0.1875F;
         this.setBlockBounds(0.0F, 0.40625F, 0.0F, 1.0F, 0.59375F, 1.0F);
     }
 
-    public void setBounds(IBlockState state)
-    {
-        if (state.getBlock() == this)
-        {
+    public void setBounds(IBlockState state) {
+        if (state.getBlock() == this) {
             boolean flag = state.getValue(HALF) == BlockTrapDoor.DoorHalf.TOP;
-            Boolean obool = (Boolean)state.getValue(OPEN);
-            EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
+            Boolean obool = (Boolean) state.getValue(OPEN);
+            EnumFacing enumfacing = (EnumFacing) state.getValue(FACING);
             float f = 0.1875F;
 
-            if (flag)
-            {
+            if (flag) {
                 this.setBlockBounds(0.0F, 0.8125F, 0.0F, 1.0F, 1.0F, 1.0F);
-            }
-            else
-            {
+            } else {
                 this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.1875F, 1.0F);
             }
 
-            if (obool.booleanValue())
-            {
-                if (enumfacing == EnumFacing.NORTH)
-                {
+            if (obool.booleanValue()) {
+                if (enumfacing == EnumFacing.NORTH) {
                     this.setBlockBounds(0.0F, 0.0F, 0.8125F, 1.0F, 1.0F, 1.0F);
                 }
 
-                if (enumfacing == EnumFacing.SOUTH)
-                {
+                if (enumfacing == EnumFacing.SOUTH) {
                     this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.1875F);
                 }
 
-                if (enumfacing == EnumFacing.WEST)
-                {
+                if (enumfacing == EnumFacing.WEST) {
                     this.setBlockBounds(0.8125F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
                 }
 
-                if (enumfacing == EnumFacing.EAST)
-                {
+                if (enumfacing == EnumFacing.EAST) {
                     this.setBlockBounds(0.0F, 0.0F, 0.0F, 0.1875F, 1.0F, 1.0F);
                 }
             }
         }
     }
 
-    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ)
-    {
-        if (this.blockMaterial == Material.iron)
-        {
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ) {
+        if (this.blockMaterial == Material.iron) {
             return true;
-        }
-        else
-        {
+        } else {
             state = state.cycleProperty(OPEN);
             worldIn.setBlockState(pos, state, 2);
-            worldIn.playAuxSFXAtEntity(playerIn, ((Boolean)state.getValue(OPEN)).booleanValue() ? 1003 : 1006, pos, 0);
+            worldIn.playAuxSFXAtEntity(playerIn, ((Boolean) state.getValue(OPEN)).booleanValue() ? 1003 : 1006, pos, 0);
             return true;
         }
     }
 
-    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock)
-    {
-        if (!worldIn.isRemote)
-        {
-            BlockPos blockpos1 = pos.offset(((EnumFacing)state.getValue(FACING)).getOpposite());
+    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock) {
+        if (!worldIn.isRemote) {
+            BlockPos blockpos1 = pos.offset(((EnumFacing) state.getValue(FACING)).getOpposite());
 
-            if (!isValidSupportBlock(worldIn.getBlockState(blockpos1).getBlock()))
-            {
+            if (!isValidSupportBlock(worldIn.getBlockState(blockpos1).getBlock())) {
                 worldIn.setBlockToAir(pos);
                 this.dropBlockAsItem(worldIn, pos, state, 0);
-            }
-            else
-            {
+            } else {
                 boolean flag = worldIn.isBlockPowered(pos);
 
-                if (flag || neighborBlock.canProvidePower())
-                {
-                    boolean flag1 = ((Boolean)state.getValue(OPEN)).booleanValue();
+                if (flag || neighborBlock.canProvidePower()) {
+                    // CraftBukkit start
+                    org.bukkit.World bworld = worldIn.getWorld();
+                    org.bukkit.block.Block bblock = bworld.getBlockAt(pos.getX(), pos.getY(), pos.getZ());
 
-                    if (flag1 != flag)
-                    {
+                    int power = bblock.getBlockPower();
+                    int oldPower = (Boolean) state.getValue(OPEN) ? 15 : 0;
+
+                    if (oldPower == 0 ^ power == 0 || neighborBlock.canProvidePower()) {
+                        BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bblock, oldPower, power);
+                        worldIn.getServer().getPluginManager().callEvent(eventRedstone);
+                        flag = eventRedstone.getNewCurrent() > 0;
+                    }
+                    // CraftBukkit end
+                    boolean flag1 = ((Boolean) state.getValue(OPEN)).booleanValue();
+
+                    if (flag1 != flag) {
                         worldIn.setBlockState(pos, state.withProperty(OPEN, Boolean.valueOf(flag)), 2);
-                        worldIn.playAuxSFXAtEntity((EntityPlayer)null, flag ? 1003 : 1006, pos, 0);
+                        worldIn.playAuxSFXAtEntity((EntityPlayer) null, flag ? 1003 : 1006, pos, 0);
                     }
                 }
             }
         }
     }
 
-    public MovingObjectPosition collisionRayTrace(World worldIn, BlockPos pos, Vec3 start, Vec3 end)
-    {
+    public MovingObjectPosition collisionRayTrace(World worldIn, BlockPos pos, Vec3 start, Vec3 end) {
         this.setBlockBoundsBasedOnState(worldIn, pos);
         return super.collisionRayTrace(worldIn, pos, start, end);
     }
 
-    public IBlockState onBlockPlaced(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer)
-    {
+    public IBlockState onBlockPlaced(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer) {
         IBlockState iblockstate = this.getDefaultState();
 
-        if (facing.getAxis().isHorizontal())
-        {
+        if (facing.getAxis().isHorizontal()) {
             iblockstate = iblockstate.withProperty(FACING, facing).withProperty(OPEN, Boolean.valueOf(false));
             iblockstate = iblockstate.withProperty(HALF, hitY > 0.5F ? BlockTrapDoor.DoorHalf.TOP : BlockTrapDoor.DoorHalf.BOTTOM);
         }
@@ -185,13 +185,11 @@
         return iblockstate;
     }
 
-    public boolean canPlaceBlockOnSide(World worldIn, BlockPos pos, EnumFacing side)
-    {
+    public boolean canPlaceBlockOnSide(World worldIn, BlockPos pos, EnumFacing side) {
         return !side.getAxis().isVertical() && isValidSupportBlock(worldIn.getBlockState(pos.offset(side.getOpposite())).getBlock());
     }
 
-    protected static EnumFacing getFacing(int meta)
-    {
-        switch (meta & 3)
-        {
+    protected static EnumFacing getFacing(int meta) {
+        switch (meta & 3) {
             case 0:
                 return EnumFacing.NORTH;
             case 1:
@@ -206,10 +206,8 @@
         }
     }
 
-    protected static int getMetaForFacing(EnumFacing facing)
-    {
-        switch (BlockTrapDoor.SwitchEnumFacing.FACING_LOOKUP[facing.ordinal()])
-        {
+    protected static int getMetaForFacing(EnumFacing facing) {
+        switch (BlockTrapDoor.SwitchEnumFacing.FACING_LOOKUP[facing.ordinal()]) {
             case 1:
                 return 0;
             case 2:
@@ -222,112 +222,81 @@
         }
     }
 
-    private static boolean isValidSupportBlock(Block blockIn)
-    {
+    private static boolean isValidSupportBlock(Block blockIn) {
         return blockIn.blockMaterial.isOpaque() && blockIn.isFullCube() || blockIn == Blocks.glowstone || blockIn instanceof BlockSlab || blockIn instanceof BlockStairs;
     }
 
-    @SideOnly(Side.CLIENT)
-    public EnumWorldBlockLayer getBlockLayer()
-    {
-        return EnumWorldBlockLayer.CUTOUT;
-    }
-
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(FACING, getFacing(meta)).withProperty(OPEN, Boolean.valueOf((meta & 4) != 0)).withProperty(HALF, (meta & 8) == 0 ? BlockTrapDoor.DoorHalf.BOTTOM : BlockTrapDoor.DoorHalf.TOP);
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
+    public int getMetaFromState(IBlockState state) {
         byte b0 = 0;
-        int i = b0 | getMetaForFacing((EnumFacing)state.getValue(FACING));
+        int i = b0 | getMetaForFacing((EnumFacing) state.getValue(FACING));
 
-        if (((Boolean)state.getValue(OPEN)).booleanValue())
-        {
+        if (((Boolean) state.getValue(OPEN)).booleanValue()) {
             i |= 4;
         }
 
-        if (state.getValue(HALF) == BlockTrapDoor.DoorHalf.TOP)
-        {
+        if (state.getValue(HALF) == BlockTrapDoor.DoorHalf.TOP) {
             i |= 8;
         }
 
         return i;
     }
 
-    protected BlockState createBlockState()
-    {
-        return new BlockState(this, new IProperty[] {FACING, OPEN, HALF});
+    protected BlockState createBlockState() {
+        return new BlockState(this, new IProperty[]{FACING, OPEN, HALF});
     }
 
-    public static enum DoorHalf implements IStringSerializable
-    {
+    public static enum DoorHalf implements IStringSerializable {
         TOP("top"),
         BOTTOM("bottom");
         private final String name;
 
         private static final String __OBFID = "CL_00002051";
 
-        private DoorHalf(String name)
-        {
+        private DoorHalf(String name) {
             this.name = name;
         }
 
-        public String toString()
-        {
+        public String toString() {
             return this.name;
         }
 
-        public String getName()
-        {
+        public String getName() {
             return this.name;
         }
     }
 
-    static final class SwitchEnumFacing
-        {
-            static final int[] FACING_LOOKUP = new int[EnumFacing.values().length];
-            private static final String __OBFID = "CL_00002052";
+    static final class SwitchEnumFacing {
 
-            static
-            {
-                try
-                {
-                    FACING_LOOKUP[EnumFacing.NORTH.ordinal()] = 1;
-                }
-                catch (NoSuchFieldError var4)
-                {
-                    ;
-                }
+        static final int[] FACING_LOOKUP = new int[EnumFacing.values().length];
+        private static final String __OBFID = "CL_00002052";
 
-                try
-                {
-                    FACING_LOOKUP[EnumFacing.SOUTH.ordinal()] = 2;
-                }
-                catch (NoSuchFieldError var3)
-                {
-                    ;
-                }
+        static {
+            try {
+                FACING_LOOKUP[EnumFacing.NORTH.ordinal()] = 1;
+            } catch (NoSuchFieldError var4) {
+                ;
+            }
 
-                try
-                {
-                    FACING_LOOKUP[EnumFacing.WEST.ordinal()] = 3;
-                }
-                catch (NoSuchFieldError var2)
-                {
-                    ;
-                }
+            try {
+                FACING_LOOKUP[EnumFacing.SOUTH.ordinal()] = 2;
+            } catch (NoSuchFieldError var3) {
+                ;
+            }
 
-                try
-                {
-                    FACING_LOOKUP[EnumFacing.EAST.ordinal()] = 4;
-                }
-                catch (NoSuchFieldError var1)
-                {
-                    ;
-                }
+            try {
+                FACING_LOOKUP[EnumFacing.WEST.ordinal()] = 3;
+            } catch (NoSuchFieldError var2) {
+                ;
             }
+
+            try {
+                FACING_LOOKUP[EnumFacing.EAST.ordinal()] = 4;
+            } catch (NoSuchFieldError var1) {
+                ;
+            }
         }
-}
+    }
+}
