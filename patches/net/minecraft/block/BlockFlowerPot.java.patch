--- decompiled\net\minecraft\block\BlockFlowerPot.java
+++ src\main\java\net\minecraft\block\BlockFlowerPot.java
@@ -1,8 +1,9 @@
 package net.minecraft.block;
 
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyEnum;
 import net.minecraft.block.properties.PropertyInteger;
 import net.minecraft.block.state.BlockState;
@@ -15,198 +16,134 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.tileentity.TileEntityFlowerPot;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumWorldBlockLayer;
 import net.minecraft.util.IStringSerializable;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockFlowerPot extends BlockContainer
-{
+
+public class BlockFlowerPot extends BlockContainer {
+
     public static final PropertyInteger LEGACY_DATA = PropertyInteger.create("legacy_data", 0, 15);
     public static final PropertyEnum CONTENTS = PropertyEnum.create("contents", BlockFlowerPot.EnumFlowerType.class);
     private static final String __OBFID = "CL_00000247";
 
-    public BlockFlowerPot()
-    {
+    public BlockFlowerPot() {
         super(Material.circuits);
         this.setDefaultState(this.blockState.getBaseState().withProperty(CONTENTS, BlockFlowerPot.EnumFlowerType.EMPTY).withProperty(LEGACY_DATA, Integer.valueOf(0)));
         this.setBlockBoundsForItemRender();
     }
 
-    public void setBlockBoundsForItemRender()
-    {
+    public void setBlockBoundsForItemRender() {
         float f = 0.375F;
         float f1 = f / 2.0F;
         this.setBlockBounds(0.5F - f1, 0.0F, 0.5F - f1, 0.5F + f1, f, 0.5F + f1);
     }
 
-    public boolean isOpaqueCube()
-    {
+    public boolean isOpaqueCube() {
         return false;
     }
 
-    public int getRenderType()
-    {
+    public int getRenderType() {
         return 3;
     }
 
-    public boolean isFullCube()
-    {
+    public boolean isFullCube() {
         return false;
     }
 
-    @SideOnly(Side.CLIENT)
-    public int colorMultiplier(IBlockAccess worldIn, BlockPos pos, int renderPass)
-    {
-        TileEntity tileentity = worldIn.getTileEntity(pos);
-
-        if (tileentity instanceof TileEntityFlowerPot)
-        {
-            Item item = ((TileEntityFlowerPot)tileentity).getFlowerPotItem();
-
-            if (item instanceof ItemBlock)
-            {
-                return Block.getBlockFromItem(item).colorMultiplier(worldIn, pos, renderPass);
-            }
-        }
-
-        return 16777215;
-    }
-
-    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ)
-    {
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ) {
         ItemStack itemstack = playerIn.inventory.getCurrentItem();
 
-        if (itemstack != null && itemstack.getItem() instanceof ItemBlock)
-        {
+        if (itemstack != null && itemstack.getItem() instanceof ItemBlock) {
             TileEntityFlowerPot tileentityflowerpot = this.getTileEntity(worldIn, pos);
 
-            if (tileentityflowerpot == null)
-            {
+            if (tileentityflowerpot == null) {
                 return false;
-            }
-            else if (tileentityflowerpot.getFlowerPotItem() != null)
-            {
+            } else if (tileentityflowerpot.getFlowerPotItem() != null) {
                 return false;
-            }
-            else
-            {
+            } else {
                 Block block = Block.getBlockFromItem(itemstack.getItem());
 
-                if (!this.canNotContain(block, itemstack.getMetadata()))
-                {
+                if (!this.canNotContain(block, itemstack.getMetadata())) {
                     return false;
-                }
-                else
-                {
+                } else {
                     tileentityflowerpot.setFlowerPotData(itemstack.getItem(), itemstack.getMetadata());
                     tileentityflowerpot.markDirty();
                     worldIn.markBlockForUpdate(pos);
 
-                    if (!playerIn.capabilities.isCreativeMode && --itemstack.stackSize <= 0)
-                    {
-                        playerIn.inventory.setInventorySlotContents(playerIn.inventory.currentItem, (ItemStack)null);
+                    if (!playerIn.capabilities.isCreativeMode && --itemstack.stackSize <= 0) {
+                        playerIn.inventory.setInventorySlotContents(playerIn.inventory.currentItem, (ItemStack) null);
                     }
 
                     return true;
                 }
             }
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
 
-    private boolean canNotContain(Block blockIn, int meta)
-    {
+    private boolean canNotContain(Block blockIn, int meta) {
         return blockIn != Blocks.yellow_flower && blockIn != Blocks.red_flower && blockIn != Blocks.cactus && blockIn != Blocks.brown_mushroom && blockIn != Blocks.red_mushroom && blockIn != Blocks.sapling && blockIn != Blocks.deadbush ? blockIn == Blocks.tallgrass && meta == BlockTallGrass.EnumType.FERN.getMeta() : true;
     }
 
-    @SideOnly(Side.CLIENT)
-    public Item getItem(World worldIn, BlockPos pos)
-    {
+    public int getDamageValue(World worldIn, BlockPos pos) {
         TileEntityFlowerPot tileentityflowerpot = this.getTileEntity(worldIn, pos);
-        return tileentityflowerpot != null && tileentityflowerpot.getFlowerPotItem() != null ? tileentityflowerpot.getFlowerPotItem() : Items.flower_pot;
-    }
-
-    public int getDamageValue(World worldIn, BlockPos pos)
-    {
-        TileEntityFlowerPot tileentityflowerpot = this.getTileEntity(worldIn, pos);
         return tileentityflowerpot != null && tileentityflowerpot.getFlowerPotItem() != null ? tileentityflowerpot.getFlowerPotData() : 0;
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean isFlowerPot()
-    {
-        return true;
-    }
-
-    public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
-    {
+    public boolean canPlaceBlockAt(World worldIn, BlockPos pos) {
         return super.canPlaceBlockAt(worldIn, pos) && World.doesBlockHaveSolidTopSurface(worldIn, pos.down());
     }
 
-    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock)
-    {
-        if (!World.doesBlockHaveSolidTopSurface(worldIn, pos.down()))
-        {
+    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock) {
+        if (!World.doesBlockHaveSolidTopSurface(worldIn, pos.down())) {
             this.dropBlockAsItem(worldIn, pos, state, 0);
             worldIn.setBlockToAir(pos);
         }
     }
 
-    public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public void breakBlock(World worldIn, BlockPos pos, IBlockState state) {
         TileEntityFlowerPot tileentityflowerpot = this.getTileEntity(worldIn, pos);
 
-        if (tileentityflowerpot != null && tileentityflowerpot.getFlowerPotItem() != null)
-        {
+        if (tileentityflowerpot != null && tileentityflowerpot.getFlowerPotItem() != null) {
             spawnAsEntity(worldIn, pos, new ItemStack(tileentityflowerpot.getFlowerPotItem(), 1, tileentityflowerpot.getFlowerPotData()));
+            tileentityflowerpot.setFlowerPotData(null, 0); // Spigot
         }
 
         super.breakBlock(worldIn, pos, state);
     }
 
-    public void onBlockHarvested(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player)
-    {
+    public void onBlockHarvested(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player) {
         super.onBlockHarvested(worldIn, pos, state, player);
 
-        if (player.capabilities.isCreativeMode)
-        {
+        if (player.capabilities.isCreativeMode) {
             TileEntityFlowerPot tileentityflowerpot = this.getTileEntity(worldIn, pos);
 
-            if (tileentityflowerpot != null)
-            {
-                tileentityflowerpot.setFlowerPotData((Item)null, 0);
+            if (tileentityflowerpot != null) {
+                tileentityflowerpot.setFlowerPotData((Item) null, 0);
             }
         }
     }
 
-    public Item getItemDropped(IBlockState state, Random rand, int fortune)
-    {
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
         return Items.flower_pot;
     }
 
-    private TileEntityFlowerPot getTileEntity(World worldIn, BlockPos pos)
-    {
+    private TileEntityFlowerPot getTileEntity(World worldIn, BlockPos pos) {
         TileEntity tileentity = worldIn.getTileEntity(pos);
-        return tileentity instanceof TileEntityFlowerPot ? (TileEntityFlowerPot)tileentity : null;
+        return tileentity instanceof TileEntityFlowerPot ? (TileEntityFlowerPot) tileentity : null;
     }
 
-    public TileEntity createNewTileEntity(World worldIn, int meta)
-    {
+    public TileEntity createNewTileEntity(World worldIn, int meta) {
         Object object = null;
         int j = 0;
 
-        switch (meta)
-        {
+        switch (meta) {
             case 1:
                 object = Blocks.red_flower;
                 j = BlockFlower.EnumFlowerType.POPPY.getMeta();
                 break;
             case 2:
@@ -251,42 +188,35 @@
             case 13:
                 object = Blocks.sapling;
                 j = BlockPlanks.EnumType.DARK_OAK.getMetadata();
         }
 
-        return new TileEntityFlowerPot(Item.getItemFromBlock((Block)object), j);
+        return new TileEntityFlowerPot(Item.getItemFromBlock((Block) object), j);
     }
 
-    protected BlockState createBlockState()
-    {
-        return new BlockState(this, new IProperty[] {CONTENTS, LEGACY_DATA});
+    protected BlockState createBlockState() {
+        return new BlockState(this, new IProperty[]{CONTENTS, LEGACY_DATA});
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
-        return ((Integer)state.getValue(LEGACY_DATA)).intValue();
+    public int getMetaFromState(IBlockState state) {
+        return ((Integer) state.getValue(LEGACY_DATA)).intValue();
     }
 
-    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos)
-    {
+    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos) {
         BlockFlowerPot.EnumFlowerType enumflowertype = BlockFlowerPot.EnumFlowerType.EMPTY;
         TileEntity tileentity = worldIn.getTileEntity(pos);
 
-        if (tileentity instanceof TileEntityFlowerPot)
-        {
-            TileEntityFlowerPot tileentityflowerpot = (TileEntityFlowerPot)tileentity;
+        if (tileentity instanceof TileEntityFlowerPot) {
+            TileEntityFlowerPot tileentityflowerpot = (TileEntityFlowerPot) tileentity;
             Item item = tileentityflowerpot.getFlowerPotItem();
 
-            if (item instanceof ItemBlock)
-            {
+            if (item instanceof ItemBlock) {
                 int i = tileentityflowerpot.getFlowerPotData();
                 Block block = Block.getBlockFromItem(item);
 
-                if (block == Blocks.sapling)
-                {
-                    switch (BlockFlowerPot.SwitchEnumType.WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.byMetadata(i).ordinal()])
-                    {
+                if (block == Blocks.sapling) {
+                    switch (BlockFlowerPot.SwitchEnumType.WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.byMetadata(i).ordinal()]) {
                         case 1:
                             enumflowertype = BlockFlowerPot.EnumFlowerType.OAK_SAPLING;
                             break;
                         case 2:
                             enumflowertype = BlockFlowerPot.EnumFlowerType.SPRUCE_SAPLING;
@@ -304,33 +234,25 @@
                             enumflowertype = BlockFlowerPot.EnumFlowerType.DARK_OAK_SAPLING;
                             break;
                         default:
                             enumflowertype = BlockFlowerPot.EnumFlowerType.EMPTY;
                     }
-                }
-                else if (block == Blocks.tallgrass)
-                {
-                    switch (i)
-                    {
+                } else if (block == Blocks.tallgrass) {
+                    switch (i) {
                         case 0:
                             enumflowertype = BlockFlowerPot.EnumFlowerType.DEAD_BUSH;
                             break;
                         case 2:
                             enumflowertype = BlockFlowerPot.EnumFlowerType.FERN;
                             break;
                         default:
                             enumflowertype = BlockFlowerPot.EnumFlowerType.EMPTY;
                     }
-                }
-                else if (block == Blocks.yellow_flower)
-                {
+                } else if (block == Blocks.yellow_flower) {
                     enumflowertype = BlockFlowerPot.EnumFlowerType.DANDELION;
-                }
-                else if (block == Blocks.red_flower)
-                {
-                    switch (BlockFlowerPot.SwitchEnumType.FLOWER_TYPE_LOOKUP[BlockFlower.EnumFlowerType.getType(BlockFlower.EnumFlowerColor.RED, i).ordinal()])
-                    {
+                } else if (block == Blocks.red_flower) {
+                    switch (BlockFlowerPot.SwitchEnumType.FLOWER_TYPE_LOOKUP[BlockFlower.EnumFlowerType.getType(BlockFlower.EnumFlowerColor.RED, i).ordinal()]) {
                         case 1:
                             enumflowertype = BlockFlowerPot.EnumFlowerType.POPPY;
                             break;
                         case 2:
                             enumflowertype = BlockFlowerPot.EnumFlowerType.BLUE_ORCHID;
@@ -357,41 +279,26 @@
                             enumflowertype = BlockFlowerPot.EnumFlowerType.OXEYE_DAISY;
                             break;
                         default:
                             enumflowertype = BlockFlowerPot.EnumFlowerType.EMPTY;
                     }
-                }
-                else if (block == Blocks.red_mushroom)
-                {
+                } else if (block == Blocks.red_mushroom) {
                     enumflowertype = BlockFlowerPot.EnumFlowerType.MUSHROOM_RED;
-                }
-                else if (block == Blocks.brown_mushroom)
-                {
+                } else if (block == Blocks.brown_mushroom) {
                     enumflowertype = BlockFlowerPot.EnumFlowerType.MUSHROOM_BROWN;
-                }
-                else if (block == Blocks.deadbush)
-                {
+                } else if (block == Blocks.deadbush) {
                     enumflowertype = BlockFlowerPot.EnumFlowerType.DEAD_BUSH;
-                }
-                else if (block == Blocks.cactus)
-                {
+                } else if (block == Blocks.cactus) {
                     enumflowertype = BlockFlowerPot.EnumFlowerType.CACTUS;
                 }
             }
         }
 
         return state.withProperty(CONTENTS, enumflowertype);
     }
 
-    @SideOnly(Side.CLIENT)
-    public EnumWorldBlockLayer getBlockLayer()
-    {
-        return EnumWorldBlockLayer.CUTOUT;
-    }
-
-    public static enum EnumFlowerType implements IStringSerializable
-    {
+    public static enum EnumFlowerType implements IStringSerializable {
         EMPTY("empty"),
         POPPY("rose"),
         BLUE_ORCHID("blue_orchid"),
         ALLIUM("allium"),
         HOUSTONIA("houstonia"),
@@ -414,169 +321,120 @@
         CACTUS("cactus");
         private final String name;
 
         private static final String __OBFID = "CL_00002115";
 
-        private EnumFlowerType(String name)
-        {
+        private EnumFlowerType(String name) {
             this.name = name;
         }
 
-        public String toString()
-        {
+        public String toString() {
             return this.name;
         }
 
-        public String getName()
-        {
+        public String getName() {
             return this.name;
         }
     }
 
-    static final class SwitchEnumType
-        {
-            static final int[] WOOD_TYPE_LOOKUP;
+    static final class SwitchEnumType {
 
-            static final int[] FLOWER_TYPE_LOOKUP = new int[BlockFlower.EnumFlowerType.values().length];
-            private static final String __OBFID = "CL_00002116";
+        static final int[] WOOD_TYPE_LOOKUP;
 
-            static
-            {
-                try
-                {
-                    FLOWER_TYPE_LOOKUP[BlockFlower.EnumFlowerType.POPPY.ordinal()] = 1;
-                }
-                catch (NoSuchFieldError var15)
-                {
-                    ;
-                }
+        static final int[] FLOWER_TYPE_LOOKUP = new int[BlockFlower.EnumFlowerType.values().length];
+        private static final String __OBFID = "CL_00002116";
 
-                try
-                {
-                    FLOWER_TYPE_LOOKUP[BlockFlower.EnumFlowerType.BLUE_ORCHID.ordinal()] = 2;
-                }
-                catch (NoSuchFieldError var14)
-                {
-                    ;
-                }
+        static {
+            try {
+                FLOWER_TYPE_LOOKUP[BlockFlower.EnumFlowerType.POPPY.ordinal()] = 1;
+            } catch (NoSuchFieldError var15) {
+                ;
+            }
 
-                try
-                {
-                    FLOWER_TYPE_LOOKUP[BlockFlower.EnumFlowerType.ALLIUM.ordinal()] = 3;
-                }
-                catch (NoSuchFieldError var13)
-                {
-                    ;
-                }
+            try {
+                FLOWER_TYPE_LOOKUP[BlockFlower.EnumFlowerType.BLUE_ORCHID.ordinal()] = 2;
+            } catch (NoSuchFieldError var14) {
+                ;
+            }
 
-                try
-                {
-                    FLOWER_TYPE_LOOKUP[BlockFlower.EnumFlowerType.HOUSTONIA.ordinal()] = 4;
-                }
-                catch (NoSuchFieldError var12)
-                {
-                    ;
-                }
+            try {
+                FLOWER_TYPE_LOOKUP[BlockFlower.EnumFlowerType.ALLIUM.ordinal()] = 3;
+            } catch (NoSuchFieldError var13) {
+                ;
+            }
 
-                try
-                {
-                    FLOWER_TYPE_LOOKUP[BlockFlower.EnumFlowerType.RED_TULIP.ordinal()] = 5;
-                }
-                catch (NoSuchFieldError var11)
-                {
-                    ;
-                }
+            try {
+                FLOWER_TYPE_LOOKUP[BlockFlower.EnumFlowerType.HOUSTONIA.ordinal()] = 4;
+            } catch (NoSuchFieldError var12) {
+                ;
+            }
 
-                try
-                {
-                    FLOWER_TYPE_LOOKUP[BlockFlower.EnumFlowerType.ORANGE_TULIP.ordinal()] = 6;
-                }
-                catch (NoSuchFieldError var10)
-                {
-                    ;
-                }
+            try {
+                FLOWER_TYPE_LOOKUP[BlockFlower.EnumFlowerType.RED_TULIP.ordinal()] = 5;
+            } catch (NoSuchFieldError var11) {
+                ;
+            }
 
-                try
-                {
-                    FLOWER_TYPE_LOOKUP[BlockFlower.EnumFlowerType.WHITE_TULIP.ordinal()] = 7;
-                }
-                catch (NoSuchFieldError var9)
-                {
-                    ;
-                }
+            try {
+                FLOWER_TYPE_LOOKUP[BlockFlower.EnumFlowerType.ORANGE_TULIP.ordinal()] = 6;
+            } catch (NoSuchFieldError var10) {
+                ;
+            }
 
-                try
-                {
-                    FLOWER_TYPE_LOOKUP[BlockFlower.EnumFlowerType.PINK_TULIP.ordinal()] = 8;
-                }
-                catch (NoSuchFieldError var8)
-                {
-                    ;
-                }
+            try {
+                FLOWER_TYPE_LOOKUP[BlockFlower.EnumFlowerType.WHITE_TULIP.ordinal()] = 7;
+            } catch (NoSuchFieldError var9) {
+                ;
+            }
 
-                try
-                {
-                    FLOWER_TYPE_LOOKUP[BlockFlower.EnumFlowerType.OXEYE_DAISY.ordinal()] = 9;
-                }
-                catch (NoSuchFieldError var7)
-                {
-                    ;
-                }
+            try {
+                FLOWER_TYPE_LOOKUP[BlockFlower.EnumFlowerType.PINK_TULIP.ordinal()] = 8;
+            } catch (NoSuchFieldError var8) {
+                ;
+            }
 
-                WOOD_TYPE_LOOKUP = new int[BlockPlanks.EnumType.values().length];
+            try {
+                FLOWER_TYPE_LOOKUP[BlockFlower.EnumFlowerType.OXEYE_DAISY.ordinal()] = 9;
+            } catch (NoSuchFieldError var7) {
+                ;
+            }
 
-                try
-                {
-                    WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.OAK.ordinal()] = 1;
-                }
-                catch (NoSuchFieldError var6)
-                {
-                    ;
-                }
+            WOOD_TYPE_LOOKUP = new int[BlockPlanks.EnumType.values().length];
 
-                try
-                {
-                    WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.SPRUCE.ordinal()] = 2;
-                }
-                catch (NoSuchFieldError var5)
-                {
-                    ;
-                }
+            try {
+                WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.OAK.ordinal()] = 1;
+            } catch (NoSuchFieldError var6) {
+                ;
+            }
 
-                try
-                {
-                    WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.BIRCH.ordinal()] = 3;
-                }
-                catch (NoSuchFieldError var4)
-                {
-                    ;
-                }
+            try {
+                WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.SPRUCE.ordinal()] = 2;
+            } catch (NoSuchFieldError var5) {
+                ;
+            }
 
-                try
-                {
-                    WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.JUNGLE.ordinal()] = 4;
-                }
-                catch (NoSuchFieldError var3)
-                {
-                    ;
-                }
+            try {
+                WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.BIRCH.ordinal()] = 3;
+            } catch (NoSuchFieldError var4) {
+                ;
+            }
 
-                try
-                {
-                    WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.ACACIA.ordinal()] = 5;
-                }
-                catch (NoSuchFieldError var2)
-                {
-                    ;
-                }
+            try {
+                WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.JUNGLE.ordinal()] = 4;
+            } catch (NoSuchFieldError var3) {
+                ;
+            }
 
-                try
-                {
-                    WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.DARK_OAK.ordinal()] = 6;
-                }
-                catch (NoSuchFieldError var1)
-                {
-                    ;
-                }
+            try {
+                WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.ACACIA.ordinal()] = 5;
+            } catch (NoSuchFieldError var2) {
+                ;
             }
+
+            try {
+                WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.DARK_OAK.ordinal()] = 6;
+            } catch (NoSuchFieldError var1) {
+                ;
+            }
         }
+    }
 }
