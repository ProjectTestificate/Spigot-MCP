---a/net/minecraft/block/BlockDragonEgg.java
+++b/net/minecraft/block/BlockDragonEgg.java
@@ -1,108 +1,101 @@
 package net.minecraft.block;
 
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.item.EntityFallingBlock;
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.item.Item;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.EnumParticleTypes;
-import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockDragonEgg extends Block
-{
+import org.bukkit.event.block.BlockFromToEvent;
+
+public class BlockDragonEgg extends Block {
+
     private static final String __OBFID = "CL_00000232";
 
-    public BlockDragonEgg()
-    {
+    public BlockDragonEgg() {
         super(Material.dragonEgg);
         this.setBlockBounds(0.0625F, 0.0F, 0.0625F, 0.9375F, 1.0F, 0.9375F);
     }
 
-    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state) {
         worldIn.scheduleUpdate(pos, this, this.tickRate(worldIn));
     }
 
-    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock)
-    {
+    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock) {
         worldIn.scheduleUpdate(pos, this, this.tickRate(worldIn));
     }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
         this.checkFall(worldIn, pos);
     }
 
-    private void checkFall(World worldIn, BlockPos pos)
-    {
-        if (BlockFalling.canFallInto(worldIn, pos.down()) && pos.getY() >= 0)
-        {
+    private void checkFall(World worldIn, BlockPos pos) {
+        if (BlockFalling.canFallInto(worldIn, pos.down()) && pos.getY() >= 0) {
             byte b0 = 32;
 
-            if (!BlockFalling.fallInstantly && worldIn.isAreaLoaded(pos.add(-b0, -b0, -b0), pos.add(b0, b0, b0)))
-            {
-                worldIn.spawnEntityInWorld(new EntityFallingBlock(worldIn, (double)((float)pos.getX() + 0.5F), (double)pos.getY(), (double)((float)pos.getZ() + 0.5F), this.getDefaultState()));
-            }
-            else
-            {
+            if (!BlockFalling.fallInstantly && worldIn.isAreaLoaded(pos.add(-b0, -b0, -b0), pos.add(b0, b0, b0))) {
+                worldIn.spawnEntityInWorld(new EntityFallingBlock(worldIn, (double) ((float) pos.getX() + 0.5F), (double) pos.getY(), (double) ((float) pos.getZ() + 0.5F), this.getDefaultState()));
+            } else {
                 worldIn.setBlockToAir(pos);
                 BlockPos blockpos1;
 
-                for (blockpos1 = pos; BlockFalling.canFallInto(worldIn, blockpos1) && blockpos1.getY() > 0; blockpos1 = blockpos1.down())
-                {
+                for (blockpos1 = pos; BlockFalling.canFallInto(worldIn, blockpos1) && blockpos1.getY() > 0; blockpos1 = blockpos1.down()) {
                     ;
                 }
 
-                if (blockpos1.getY() > 0)
-                {
+                if (blockpos1.getY() > 0) {
                     worldIn.setBlockState(blockpos1, this.getDefaultState(), 2);
                 }
             }
         }
     }
 
-    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ)
-    {
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ) {
         this.teleport(worldIn, pos);
         return true;
     }
 
-    public void onBlockClicked(World worldIn, BlockPos pos, EntityPlayer playerIn)
-    {
+    public void onBlockClicked(World worldIn, BlockPos pos, EntityPlayer playerIn) {
         this.teleport(worldIn, pos);
     }
 
-    private void teleport(World worldIn, BlockPos pos)
-    {
+    private void teleport(World worldIn, BlockPos pos) {
         IBlockState iblockstate = worldIn.getBlockState(pos);
 
-        if (iblockstate.getBlock() == this)
-        {
-            for (int i = 0; i < 1000; ++i)
-            {
+        if (iblockstate.getBlock() == this) {
+            for (int i = 0; i < 1000; ++i) {
                 BlockPos blockpos1 = pos.add(worldIn.rand.nextInt(16) - worldIn.rand.nextInt(16), worldIn.rand.nextInt(8) - worldIn.rand.nextInt(8), worldIn.rand.nextInt(16) - worldIn.rand.nextInt(16));
 
-                if (worldIn.getBlockState(blockpos1).getBlock().blockMaterial == Material.air)
-                {
-                    if (worldIn.isRemote)
-                    {
-                        for (int j = 0; j < 128; ++j)
-                        {
+                if (worldIn.getBlockState(blockpos1).getBlock().blockMaterial == Material.air) {
+                    // CraftBukkit start
+                    org.bukkit.block.Block from = worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+                    org.bukkit.block.Block to = worldIn.getWorld().getBlockAt(blockpos1.getX(), blockpos1.getY(), blockpos1.getZ());
+                    BlockFromToEvent event = new BlockFromToEvent(from, to);
+                    org.bukkit.Bukkit.getPluginManager().callEvent(event);
+
+                    if (event.isCancelled()) {
+                        return;
+                    }
+
+                    blockpos1 = new BlockPos(event.getToBlock().getX(), event.getToBlock().getY(), event.getToBlock().getZ());
+                    // CraftBukkit end
+                    if (worldIn.isRemote) {
+                        for (int j = 0; j < 128; ++j) {
                             double d0 = worldIn.rand.nextDouble();
                             float f = (worldIn.rand.nextFloat() - 0.5F) * 0.2F;
                             float f1 = (worldIn.rand.nextFloat() - 0.5F) * 0.2F;
                             float f2 = (worldIn.rand.nextFloat() - 0.5F) * 0.2F;
-                            double d1 = (double)blockpos1.getX() + (double)(pos.getX() - blockpos1.getX()) * d0 + (worldIn.rand.nextDouble() - 0.5D) * 1.0D + 0.5D;
-                            double d2 = (double)blockpos1.getY() + (double)(pos.getY() - blockpos1.getY()) * d0 + worldIn.rand.nextDouble() * 1.0D - 0.5D;
-                            double d3 = (double)blockpos1.getZ() + (double)(pos.getZ() - blockpos1.getZ()) * d0 + (worldIn.rand.nextDouble() - 0.5D) * 1.0D + 0.5D;
-                            worldIn.spawnParticle(EnumParticleTypes.PORTAL, d1, d2, d3, (double)f, (double)f1, (double)f2, new int[0]);
+                            double d1 = (double) blockpos1.getX() + (double) (pos.getX() - blockpos1.getX()) * d0 + (worldIn.rand.nextDouble() - 0.5D) * 1.0D + 0.5D;
+                            double d2 = (double) blockpos1.getY() + (double) (pos.getY() - blockpos1.getY()) * d0 + worldIn.rand.nextDouble() * 1.0D - 0.5D;
+                            double d3 = (double) blockpos1.getZ() + (double) (pos.getZ() - blockpos1.getZ()) * d0 + (worldIn.rand.nextDouble() - 0.5D) * 1.0D + 0.5D;
+                            worldIn.spawnParticle(EnumParticleTypes.PORTAL, d1, d2, d3, (double) f, (double) f1, (double) f2, new int[0]);
                         }
-                    }
-                    else
-                    {
+                    } else {
                         worldIn.setBlockState(blockpos1, iblockstate, 2);
                         worldIn.setBlockToAir(pos);
                     }
@@ -116,19 +116,15 @@
         }
     }
 
-    public int tickRate(World worldIn)
-    {
+    public int tickRate(World worldIn) {
         return 5;
     }
 
-    public boolean isOpaqueCube()
-    {
+    public boolean isOpaqueCube() {
         return false;
     }
 
-    public boolean isFullCube()
-    {
+    public boolean isFullCube() {
         return false;
     }
-
-    @SideOnly(Side.CLIENT)
-    public boolean shouldSideBeRendered(IBlockAccess worldIn, BlockPos pos, EnumFacing side)
-    {
-        return true;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public Item getItem(World worldIn, BlockPos pos)
-    {
-        return null;
-    }
-}
+}
