--- decompiled\net\minecraft\block\BlockHopper.java
+++ src\main\java\net\minecraft\block\BlockHopper.java
@@ -1,9 +1,10 @@
 package net.minecraft.block;
 
-import com.google.common.base.Predicate;
 import java.util.List;
+import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyBool;
 import net.minecraft.block.properties.PropertyDirection;
 import net.minecraft.block.state.BlockState;
@@ -18,18 +19,18 @@
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.tileentity.TileEntityHopper;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumWorldBlockLayer;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import com.google.common.base.Predicate;
+
 public class BlockHopper extends BlockContainer
 {
+
     public static final PropertyDirection FACING = PropertyDirection.create("facing", new Predicate()
     {
         private static final String __OBFID = "CL_00002106";
         public boolean apply(EnumFacing facing)
         {
@@ -138,10 +139,26 @@
         boolean flag = !worldIn.isBlockPowered(pos);
 
         if (flag != ((Boolean)state.getValue(ENABLED)).booleanValue())
         {
             worldIn.setBlockState(pos, state.withProperty(ENABLED, Boolean.valueOf(flag)), 4);
+
+            // Spigot start - When this hopper becomes unpowered, make it active.
+            // Called when this block's power level changes. flag1 is the current
+            // isNotPowered from metadata. flag is the recalculated isNotPowered.
+            if (worldIn.spigotConfig.altHopperTicking)
+            {
+                // e returns the TileEntityHopper associated with this BlockHopper.
+                TileEntityHopper hopper = (TileEntityHopper)worldIn.getTileEntity(pos);
+
+                if (flag && hopper != null)
+                {
+                    hopper.makeTick();
+                }
+            }
+
+            // Spigot end
         }
     }
 
     public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
     {
@@ -169,16 +186,10 @@
     public boolean isOpaqueCube()
     {
         return false;
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean shouldSideBeRendered(IBlockAccess worldIn, BlockPos pos, EnumFacing side)
-    {
-        return true;
-    }
-
     public static EnumFacing getFacing(int meta)
     {
         return EnumFacing.getFront(meta & 7);
     }
 
@@ -195,16 +206,10 @@
     public int getComparatorInputOverride(World worldIn, BlockPos pos)
     {
         return Container.calcRedstone(worldIn.getTileEntity(pos));
     }
 
-    @SideOnly(Side.CLIENT)
-    public EnumWorldBlockLayer getBlockLayer()
-    {
-        return EnumWorldBlockLayer.CUTOUT_MIPPED;
-    }
-
     public IBlockState getStateFromMeta(int meta)
     {
         return this.getDefaultState().withProperty(FACING, getFacing(meta)).withProperty(ENABLED, Boolean.valueOf(isEnabled(meta)));
     }
 
@@ -223,6 +228,24 @@
 
     protected BlockState createBlockState()
     {
         return new BlockState(this, new IProperty[] {FACING, ENABLED});
     }
+
+
+    // Spigot start - Use random block updates to make hoppers active.
+    @Override
+    public void randomTick(World world, BlockPos blockposition, IBlockState iblockdata, Random random)
+    {
+        if (world.spigotConfig.altHopperTicking)
+        {
+            // e returns the TileEntityHopper associated with this BlockHopper.
+            TileEntityHopper hopper = (TileEntityHopper)world.getTileEntity(blockposition);
+
+            if (hopper != null)
+            {
+                hopper.makeTick();
+            }
+        }
+    }
+    // Spigot end
 }
