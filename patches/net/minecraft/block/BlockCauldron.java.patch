---a/net/minecraft/block/BlockCauldron.java
+++b/net/minecraft/block/BlockCauldron.java
@@ -2,6 +2,7 @@
 
 import java.util.List;
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyInteger;
@@ -22,22 +22,18 @@
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockCauldron extends Block
-{
+
+public class BlockCauldron extends Block {
+
     public static final PropertyInteger LEVEL = PropertyInteger.create("level", 0, 3);
     private static final String __OBFID = "CL_00000213";
 
-    public BlockCauldron()
-    {
+    public BlockCauldron() {
         super(Material.iron);
         this.setDefaultState(this.blockState.getBaseState().withProperty(LEVEL, Integer.valueOf(0)));
     }
 
-    public void addCollisionBoxesToList(World worldIn, BlockPos pos, IBlockState state, AxisAlignedBB mask, List list, Entity collidingEntity)
-    {
+    public void addCollisionBoxesToList(World worldIn, BlockPos pos, IBlockState state, AxisAlignedBB mask, List list, Entity collidingEntity) {
         this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.3125F, 1.0F);
         super.addCollisionBoxesToList(worldIn, pos, state, mask, list, collidingEntity);
         float f = 0.125F;
@@ -52,54 +52,41 @@
         this.setBlockBoundsForItemRender();
     }
 
-    public void setBlockBoundsForItemRender()
-    {
+    public void setBlockBoundsForItemRender() {
         this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
     }
 
-    public boolean isOpaqueCube()
-    {
+    public boolean isOpaqueCube() {
         return false;
     }
 
-    public boolean isFullCube()
-    {
+    public boolean isFullCube() {
         return false;
     }
 
-    public void onEntityCollidedWithBlock(World worldIn, BlockPos pos, IBlockState state, Entity entityIn)
-    {
-        int i = ((Integer)state.getValue(LEVEL)).intValue();
-        float f = (float)pos.getY() + (6.0F + (float)(3 * i)) / 16.0F;
+    public void onEntityCollidedWithBlock(World worldIn, BlockPos pos, IBlockState state, Entity entityIn) {
+        int i = ((Integer) state.getValue(LEVEL)).intValue();
+        float f = (float) pos.getY() + (6.0F + (float) (3 * i)) / 16.0F;
 
-        if (!worldIn.isRemote && entityIn.isBurning() && i > 0 && entityIn.getEntityBoundingBox().minY <= (double)f)
-        {
+        if (!worldIn.isRemote && entityIn.isBurning() && i > 0 && entityIn.getEntityBoundingBox().minY <= (double) f) {
             entityIn.extinguish();
             this.setWaterLevel(worldIn, pos, state, i - 1);
         }
     }
 
-    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ)
-    {
-        if (worldIn.isRemote)
-        {
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ) {
+        if (worldIn.isRemote) {
             return true;
-        }
-        else
-        {
+        } else {
             ItemStack itemstack = playerIn.inventory.getCurrentItem();
 
-            if (itemstack == null)
-            {
+            if (itemstack == null) {
                 return true;
-            }
-            else
-            {
-                int i = ((Integer)state.getValue(LEVEL)).intValue();
+            } else {
+                int i = ((Integer) state.getValue(LEVEL)).intValue();
                 Item item = itemstack.getItem();
 
-                if (item == Items.water_bucket)
-                {
-                    if (i < 3)
-                    {
-                        if (!playerIn.capabilities.isCreativeMode)
-                        {
+                if (item == Items.water_bucket) {
+                    if (i < 3) {
+                        if (!playerIn.capabilities.isCreativeMode) {
                             playerIn.inventory.setInventorySlotContents(playerIn.inventory.currentItem, new ItemStack(Items.bucket));
                         }
 
@@ -111,33 +111,23 @@
                     }
 
                     return true;
-                }
-                else
-                {
+                } else {
                     ItemStack itemstack1;
 
-                    if (item == Items.glass_bottle)
-                    {
-                        if (i > 0)
-                        {
-                            if (!playerIn.capabilities.isCreativeMode)
-                            {
+                    if (item == Items.glass_bottle) {
+                        if (i > 0) {
+                            if (!playerIn.capabilities.isCreativeMode) {
                                 itemstack1 = new ItemStack(Items.potionitem, 1, 0);
 
-                                if (!playerIn.inventory.addItemStackToInventory(itemstack1))
-                                {
-                                    worldIn.spawnEntityInWorld(new EntityItem(worldIn, (double)pos.getX() + 0.5D, (double)pos.getY() + 1.5D, (double)pos.getZ() + 0.5D, itemstack1));
+                                if (!playerIn.inventory.addItemStackToInventory(itemstack1)) {
+                                    worldIn.spawnEntityInWorld(new EntityItem(worldIn, (double) pos.getX() + 0.5D, (double) pos.getY() + 1.5D, (double) pos.getZ() + 0.5D, itemstack1));
+                                } else if (playerIn instanceof EntityPlayerMP) {
+                                    ((EntityPlayerMP) playerIn).sendContainerToPlayer(playerIn.inventoryContainer);
                                 }
-                                else if (playerIn instanceof EntityPlayerMP)
-                                {
-                                    ((EntityPlayerMP)playerIn).sendContainerToPlayer(playerIn.inventoryContainer);
-                                }
 
                                 --itemstack.stackSize;
 
-                                if (itemstack.stackSize <= 0)
-                                {
-                                    playerIn.inventory.setInventorySlotContents(playerIn.inventory.currentItem, (ItemStack)null);
+                                if (itemstack.stackSize <= 0) {
+                                    playerIn.inventory.setInventorySlotContents(playerIn.inventory.currentItem, (ItemStack) null);
                                 }
                             }
 
@@ -145,60 +145,44 @@
                         }
 
                         return true;
-                    }
-                    else
-                    {
-                        if (i > 0 && item instanceof ItemArmor)
-                        {
-                            ItemArmor itemarmor = (ItemArmor)item;
+                    } else {
+                        if (i > 0 && item instanceof ItemArmor) {
+                            ItemArmor itemarmor = (ItemArmor) item;
 
-                            if (itemarmor.getArmorMaterial() == ItemArmor.ArmorMaterial.LEATHER && itemarmor.hasColor(itemstack))
-                            {
+                            if (itemarmor.getArmorMaterial() == ItemArmor.ArmorMaterial.LEATHER && itemarmor.hasColor(itemstack)) {
                                 itemarmor.removeColor(itemstack);
                                 this.setWaterLevel(worldIn, pos, state, i - 1);
                                 return true;
                             }
                         }
 
-                        if (i > 0 && item instanceof ItemBanner && TileEntityBanner.getPatterns(itemstack) > 0)
-                        {
+                        if (i > 0 && item instanceof ItemBanner && TileEntityBanner.getPatterns(itemstack) > 0) {
                             itemstack1 = itemstack.copy();
                             itemstack1.stackSize = 1;
                             TileEntityBanner.removeBannerData(itemstack1);
 
-                            if (itemstack.stackSize <= 1 && !playerIn.capabilities.isCreativeMode)
-                            {
+                            if (itemstack.stackSize <= 1 && !playerIn.capabilities.isCreativeMode) {
                                 playerIn.inventory.setInventorySlotContents(playerIn.inventory.currentItem, itemstack1);
-                            }
-                            else
-                            {
-                                if (!playerIn.inventory.addItemStackToInventory(itemstack1))
-                                {
-                                    worldIn.spawnEntityInWorld(new EntityItem(worldIn, (double)pos.getX() + 0.5D, (double)pos.getY() + 1.5D, (double)pos.getZ() + 0.5D, itemstack1));
+                            } else {
+                                if (!playerIn.inventory.addItemStackToInventory(itemstack1)) {
+                                    worldIn.spawnEntityInWorld(new EntityItem(worldIn, (double) pos.getX() + 0.5D, (double) pos.getY() + 1.5D, (double) pos.getZ() + 0.5D, itemstack1));
+                                } else if (playerIn instanceof EntityPlayerMP) {
+                                    ((EntityPlayerMP) playerIn).sendContainerToPlayer(playerIn.inventoryContainer);
                                 }
-                                else if (playerIn instanceof EntityPlayerMP)
-                                {
-                                    ((EntityPlayerMP)playerIn).sendContainerToPlayer(playerIn.inventoryContainer);
-                                }
 
-                                if (!playerIn.capabilities.isCreativeMode)
-                                {
+                                if (!playerIn.capabilities.isCreativeMode) {
                                     --itemstack.stackSize;
                                 }
                             }
 
-                            if (!playerIn.capabilities.isCreativeMode)
-                            {
+                            if (!playerIn.capabilities.isCreativeMode) {
                                 this.setWaterLevel(worldIn, pos, state, i - 1);
                             }
 
                             return true;
-                        }
-                        else
-                        {
+                        } else {
                             return false;
                         }
                     }
@@ -204,59 +204,42 @@
         }
     }
 
-    public void setWaterLevel(World worldIn, BlockPos pos, IBlockState state, int level)
-    {
+    public void setWaterLevel(World worldIn, BlockPos pos, IBlockState state, int level) {
         worldIn.setBlockState(pos, state.withProperty(LEVEL, Integer.valueOf(MathHelper.clamp_int(level, 0, 3))), 2);
         worldIn.updateComparatorOutputLevel(pos, this);
     }
 
-    public void fillWithRain(World worldIn, BlockPos pos)
-    {
-        if (worldIn.rand.nextInt(20) == 1)
-        {
+    public void fillWithRain(World worldIn, BlockPos pos) {
+        if (worldIn.rand.nextInt(20) == 1) {
             IBlockState iblockstate = worldIn.getBlockState(pos);
 
-            if (((Integer)iblockstate.getValue(LEVEL)).intValue() < 3)
-            {
+            if (((Integer) iblockstate.getValue(LEVEL)).intValue() < 3) {
                 worldIn.setBlockState(pos, iblockstate.cycleProperty(LEVEL), 2);
             }
         }
     }
 
-    public Item getItemDropped(IBlockState state, Random rand, int fortune)
-    {
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
         return Items.cauldron;
     }
 
-    @SideOnly(Side.CLIENT)
-    public Item getItem(World worldIn, BlockPos pos)
-    {
-        return Items.cauldron;
-    }
-
-    public boolean hasComparatorInputOverride()
-    {
+    public boolean hasComparatorInputOverride() {
         return true;
     }
 
-    public int getComparatorInputOverride(World worldIn, BlockPos pos)
-    {
-        return ((Integer)worldIn.getBlockState(pos).getValue(LEVEL)).intValue();
+    public int getComparatorInputOverride(World worldIn, BlockPos pos) {
+        return ((Integer) worldIn.getBlockState(pos).getValue(LEVEL)).intValue();
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(LEVEL, Integer.valueOf(meta));
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
-        return ((Integer)state.getValue(LEVEL)).intValue();
+    public int getMetaFromState(IBlockState state) {
+        return ((Integer) state.getValue(LEVEL)).intValue();
     }
 
-    protected BlockState createBlockState()
-    {
-        return new BlockState(this, new IProperty[] {LEVEL});
+    protected BlockState createBlockState() {
+        return new BlockState(this, new IProperty[]{LEVEL});
     }
-}
+}
