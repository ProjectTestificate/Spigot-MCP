--- decompiled\net\minecraft\block\BlockRedstoneOre.java
+++ src\main\java\net\minecraft\block\BlockRedstoneOre.java
@@ -1,8 +1,9 @@
 package net.minecraft.block;
 
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
@@ -11,154 +12,162 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockRedstoneOre extends Block
-{
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityInteractEvent;
+
+public class BlockRedstoneOre extends Block {
+
     private final boolean isOn;
     private static final String __OBFID = "CL_00000294";
 
-    public BlockRedstoneOre(boolean isOn)
-    {
+    public BlockRedstoneOre(boolean isOn) {
         super(Material.rock);
 
-        if (isOn)
-        {
+        if (isOn) {
             this.setTickRandomly(true);
         }
 
         this.isOn = isOn;
     }
 
-    public int tickRate(World worldIn)
-    {
+    public int tickRate(World worldIn) {
         return 30;
     }
 
-    public void onBlockClicked(World worldIn, BlockPos pos, EntityPlayer playerIn)
-    {
-        this.activate(worldIn, pos);
+    public void onBlockClicked(World worldIn, BlockPos pos, EntityPlayer playerIn) {
+        this.activate(worldIn, pos, playerIn); // CraftBukkit - add entityhuman
         super.onBlockClicked(worldIn, pos, playerIn);
     }
 
-    public void onEntityCollidedWithBlock(World worldIn, BlockPos pos, Entity entityIn)
-    {
-        this.activate(worldIn, pos);
-        super.onEntityCollidedWithBlock(worldIn, pos, entityIn);
+    public void onEntityCollidedWithBlock(World worldIn, BlockPos pos, Entity entityIn) {
+        // CraftBukkit start
+        // this.activate(worldIn, pos);
+        // super.onEntityCollidedWithBlock(worldIn, pos, entityIn);
+        if (entityIn instanceof EntityPlayer) {
+            org.bukkit.event.player.PlayerInteractEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent((EntityPlayer) entityIn, org.bukkit.event.block.Action.PHYSICAL, pos, null, null);
+            if (!event.isCancelled()) {
+                this.activate(worldIn, pos, entityIn); // add entity
+                super.onEntityCollidedWithBlock(worldIn, pos, entityIn);
+            }
+        } else {
+            EntityInteractEvent event = new EntityInteractEvent(entityIn.getBukkitEntity(), worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
+            worldIn.getServer().getPluginManager().callEvent(event);
+            if (!event.isCancelled()) {
+                this.activate(worldIn, pos, entityIn); // add entity
+                super.onEntityCollidedWithBlock(worldIn, pos, entityIn);
+            }
+        }
+        // CraftBukkit end
     }
 
-    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ)
-    {
-        this.activate(worldIn, pos);
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ) {
+        this.activate(worldIn, pos, playerIn);  // CraftBukkit - add entityhuman
         return super.onBlockActivated(worldIn, pos, state, playerIn, side, hitX, hitY, hitZ);
     }
 
-    private void activate(World worldIn, BlockPos pos)
+    private void activate(World worldIn, BlockPos pos, Entity entity) // CraftBukkit - add Entity
     {
         this.spawnParticles(worldIn, pos);
 
-        if (this == Blocks.redstone_ore)
-        {
+        if (this == Blocks.redstone_ore) {
+            // CraftBukkit start
+            if (CraftEventFactory.callEntityChangeBlockEvent(entity, pos.getX(), pos.getY(), pos.getZ(), Blocks.lit_redstone_ore, 0).isCancelled()) {
+                return;
+            }
+            // CraftBukkit end
             worldIn.setBlockState(pos, Blocks.lit_redstone_ore.getDefaultState());
         }
     }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        if (this == Blocks.lit_redstone_ore)
-        {
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
+        if (this == Blocks.lit_redstone_ore) {
+            // CraftBukkit start
+            if (CraftEventFactory.callBlockFadeEvent(worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), Blocks.redstone_ore).isCancelled()) {
+                return;
+            }
+            // CraftBukkit end
             worldIn.setBlockState(pos, Blocks.redstone_ore.getDefaultState());
         }
     }
 
-    public Item getItemDropped(IBlockState state, Random rand, int fortune)
-    {
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
         return Items.redstone;
     }
 
-    public int quantityDroppedWithBonus(int fortune, Random random)
-    {
+    public int quantityDroppedWithBonus(int fortune, Random random) {
         return this.quantityDropped(random) + random.nextInt(fortune + 1);
     }
 
-    public int quantityDropped(Random random)
-    {
+    public int quantityDropped(Random random) {
         return 4 + random.nextInt(2);
     }
 
-    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune)
-    {
+    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune) {
         super.dropBlockAsItemWithChance(worldIn, pos, state, chance, fortune);
 
+        /* CraftBukkit start - Delegated to getExpDrop
         if (this.getItemDropped(state, worldIn.rand, fortune) != Item.getItemFromBlock(this))
         {
             int j = 1 + worldIn.rand.nextInt(5);
             this.dropXpOnBlockBreak(worldIn, pos, j);
         }
+        // */
     }
 
-    @SideOnly(Side.CLIENT)
-    public void randomDisplayTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        if (this.isOn)
-        {
-            this.spawnParticles(worldIn, pos);
+    @Override
+    public int getExpDrop(World world, IBlockState data, int i) {
+        if (this.getItemDropped(data, world.rand, i) != Item.getItemFromBlock(this)) {
+            int j = 1 + world.rand.nextInt(5);
+
+            return j;
         }
+        return 0;
+        // CraftBukkit end
     }
 
-    private void spawnParticles(World worldIn, BlockPos pos)
-    {
+    private void spawnParticles(World worldIn, BlockPos pos) {
         Random random = worldIn.rand;
         double d0 = 0.0625D;
 
-        for (int i = 0; i < 6; ++i)
-        {
-            double d1 = (double)((float)pos.getX() + random.nextFloat());
-            double d2 = (double)((float)pos.getY() + random.nextFloat());
-            double d3 = (double)((float)pos.getZ() + random.nextFloat());
+        for (int i = 0; i < 6; ++i) {
+            double d1 = (double) ((float) pos.getX() + random.nextFloat());
+            double d2 = (double) ((float) pos.getY() + random.nextFloat());
+            double d3 = (double) ((float) pos.getZ() + random.nextFloat());
 
-            if (i == 0 && !worldIn.getBlockState(pos.up()).getBlock().isOpaqueCube())
-            {
-                d2 = (double)pos.getY() + d0 + 1.0D;
+            if (i == 0 && !worldIn.getBlockState(pos.up()).getBlock().isOpaqueCube()) {
+                d2 = (double) pos.getY() + d0 + 1.0D;
             }
 
-            if (i == 1 && !worldIn.getBlockState(pos.down()).getBlock().isOpaqueCube())
-            {
-                d2 = (double)pos.getY() - d0;
+            if (i == 1 && !worldIn.getBlockState(pos.down()).getBlock().isOpaqueCube()) {
+                d2 = (double) pos.getY() - d0;
             }
 
-            if (i == 2 && !worldIn.getBlockState(pos.south()).getBlock().isOpaqueCube())
-            {
-                d3 = (double)pos.getZ() + d0 + 1.0D;
+            if (i == 2 && !worldIn.getBlockState(pos.south()).getBlock().isOpaqueCube()) {
+                d3 = (double) pos.getZ() + d0 + 1.0D;
             }
 
-            if (i == 3 && !worldIn.getBlockState(pos.north()).getBlock().isOpaqueCube())
-            {
-                d3 = (double)pos.getZ() - d0;
+            if (i == 3 && !worldIn.getBlockState(pos.north()).getBlock().isOpaqueCube()) {
+                d3 = (double) pos.getZ() - d0;
             }
 
-            if (i == 4 && !worldIn.getBlockState(pos.east()).getBlock().isOpaqueCube())
-            {
-                d1 = (double)pos.getX() + d0 + 1.0D;
+            if (i == 4 && !worldIn.getBlockState(pos.east()).getBlock().isOpaqueCube()) {
+                d1 = (double) pos.getX() + d0 + 1.0D;
             }
 
-            if (i == 5 && !worldIn.getBlockState(pos.west()).getBlock().isOpaqueCube())
-            {
-                d1 = (double)pos.getX() - d0;
+            if (i == 5 && !worldIn.getBlockState(pos.west()).getBlock().isOpaqueCube()) {
+                d1 = (double) pos.getX() - d0;
             }
 
-            if (d1 < (double)pos.getX() || d1 > (double)(pos.getX() + 1) || d2 < 0.0D || d2 > (double)(pos.getY() + 1) || d3 < (double)pos.getZ() || d3 > (double)(pos.getZ() + 1))
-            {
+            if (d1 < (double) pos.getX() || d1 > (double) (pos.getX() + 1) || d2 < 0.0D || d2 > (double) (pos.getY() + 1) || d3 < (double) pos.getZ() || d3 > (double) (pos.getZ() + 1)) {
                 worldIn.spawnParticle(EnumParticleTypes.REDSTONE, d1, d2, d3, 0.0D, 0.0D, 0.0D, new int[0]);
             }
         }
     }
 
-    protected ItemStack createStackedBlock(IBlockState state)
-    {
+    protected ItemStack createStackedBlock(IBlockState state) {
         return new ItemStack(Blocks.redstone_ore);
     }
 }
