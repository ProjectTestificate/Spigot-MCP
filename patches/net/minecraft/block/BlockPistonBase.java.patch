--- decompiled\net\minecraft\block\BlockPistonBase.java
+++ src\main\java\net\minecraft\block\BlockPistonBase.java
@@ -1,8 +1,10 @@
 package net.minecraft.block;
 
+import java.util.AbstractList;
 import java.util.List;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyBool;
 import net.minecraft.block.properties.PropertyDirection;
 import net.minecraft.block.state.BlockPistonStructureHelper;
@@ -19,15 +21,20 @@
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.event.block.BlockPistonExtendEvent;
+import org.bukkit.event.block.BlockPistonRetractEvent;
+
+import com.google.common.collect.ImmutableList;
+
 public class BlockPistonBase extends Block
 {
+
     public static final PropertyDirection FACING = PropertyDirection.create("facing");
     public static final PropertyBool EXTENDED = PropertyBool.create("extended");
     private final boolean isSticky;
     private static final String __OBFID = "CL_00000366";
 
@@ -89,10 +96,24 @@
                 worldIn.addBlockEvent(pos, this, 0, enumfacing.getIndex());
             }
         }
         else if (!flag && ((Boolean)state.getValue(EXTENDED)).booleanValue())
         {
+            // CraftBukkit start
+            if (!this.isSticky)
+            {
+                org.bukkit.block.Block block = worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+                BlockPistonRetractEvent event = new BlockPistonRetractEvent(block, ImmutableList.<org.bukkit.block.Block>of(), CraftBlock.notchToBlockFace(enumfacing));
+                worldIn.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled())
+                {
+                    return;
+                }
+            }
+
+            // CraftBukkit end
             worldIn.setBlockState(pos, state.withProperty(EXTENDED, Boolean.valueOf(false)), 2);
             worldIn.addBlockEvent(pos, this, 1, enumfacing.getIndex());
         }
     }
 
@@ -198,11 +219,11 @@
                             flag1 = true;
                         }
                     }
                 }
 
-                if (!flag1 && block.getMaterial() != Material.air && canPush(block, worldIn, blockpos1, enumfacing.getOpposite(), false) && (block.getMobilityFlag() == 0 || block == Blocks.piston || block == Blocks.sticky_piston))
+                if (!flag1 && canPush(block, worldIn, blockpos1, enumfacing.getOpposite(), false) && (block.getMobilityFlag() == 0 || block == Blocks.piston || block == Blocks.sticky_piston))   // CraftBukkit - remove 'block.getMaterial() != Material.AIR' condition                {
                 {
                     this.doMove(worldIn, pos, enumfacing, false);
                 }
             }
             else
@@ -372,13 +393,57 @@
         {
             return false;
         }
         else
         {
+            // CraftBukkit start
+            final org.bukkit.block.Block bblock = worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+            final List moved = blockpistonstructurehelper.getBlocksToMove();
+            final List broken = blockpistonstructurehelper.getBlocksToDestroy();
+            List<org.bukkit.block.Block> blocks = new AbstractList()
+            {
+                @Override
+                public int size()
+                {
+                    return moved.size() + broken.size();
+                }
+                @Override
+                public org.bukkit.block.Block get(int index)
+                {
+                    if (index >= size() || index < 0)
+                    {
+                        throw new ArrayIndexOutOfBoundsException(index);
+                    }
+
+                    BlockPos pos = (BlockPos)(index < moved.size() ? moved.get(index) : broken.get(index - moved.size()));
+                    return bblock.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+                }
+            };
+            // SpigotMCP NOTE -- The following is NMS Code
             int i = list.size() + list1.size();
             Block[] ablock = new Block[i];
             EnumFacing enumfacing1 = extending ? direction : direction.getOpposite();
+            // SpigotMCP END NOTE
+            org.bukkit.event.block.BlockPistonEvent event;
+
+            if (extending)
+            {
+                event = new BlockPistonExtendEvent(bblock, blocks, CraftBlock.notchToBlockFace(enumfacing1));
+            }
+            else
+            {
+                event = new BlockPistonRetractEvent(bblock, blocks, CraftBlock.notchToBlockFace(enumfacing1));
+            }
+
+            worldIn.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
+            {
+                return false;
+            }
+
+            // CraftBukkit end
             int j;
             BlockPos blockpos1;
 
             for (j = list1.size() - 1; j >= 0; --j)
             {
@@ -442,16 +507,10 @@
     public IBlockState getStateFromMeta(int meta)
     {
         return this.getDefaultState().withProperty(FACING, getFacing(meta)).withProperty(EXTENDED, Boolean.valueOf((meta & 8) > 0));
     }
 
-    @SideOnly(Side.CLIENT)
-    public IBlockState getStateForEntityRender(IBlockState state)
-    {
-        return this.getDefaultState().withProperty(FACING, EnumFacing.UP);
-    }
-
     public int getMetaFromState(IBlockState state)
     {
         byte b0 = 0;
         int i = b0 | ((EnumFacing)state.getValue(FACING)).getIndex();
 
@@ -468,10 +527,11 @@
         return new BlockState(this, new IProperty[] {FACING, EXTENDED});
     }
 
     static final class SwitchEnumFacing
         {
+
             static final int[] FACING_LOOKUP = new int[EnumFacing.values().length];
             private static final String __OBFID = "CL_00002037";
 
             static
             {
