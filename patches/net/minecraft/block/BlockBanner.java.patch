---a/net/minecraft/block/BlockBanner.java
+++b/net/minecraft/block/BlockBanner.java
@@ -1,6 +1,7 @@
 package net.minecraft.block;
 
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyDirection;
@@ -19,66 +19,48 @@
 import net.minecraft.util.EnumFacing;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockBanner extends BlockContainer
-{
+
+public class BlockBanner extends BlockContainer {
+
     public static final PropertyDirection FACING = PropertyDirection.create("facing", EnumFacing.Plane.HORIZONTAL);
     public static final PropertyInteger ROTATION = PropertyInteger.create("rotation", 0, 15);
     private static final String __OBFID = "CL_00002143";
 
-    protected BlockBanner()
-    {
+    protected BlockBanner() {
         super(Material.wood);
         float f = 0.25F;
         float f1 = 1.0F;
         this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, f1, 0.5F + f);
     }
 
-    public AxisAlignedBB getCollisionBoundingBox(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public AxisAlignedBB getCollisionBoundingBox(World worldIn, BlockPos pos, IBlockState state) {
         return null;
     }
 
-    @SideOnly(Side.CLIENT)
-    public AxisAlignedBB getSelectedBoundingBox(World worldIn, BlockPos pos)
-    {
-        this.setBlockBoundsBasedOnState(worldIn, pos);
-        return super.getSelectedBoundingBox(worldIn, pos);
-    }
-
-    public boolean isFullCube()
-    {
+    public boolean isFullCube() {
         return false;
     }
 
-    public boolean isPassable(IBlockAccess worldIn, BlockPos pos)
-    {
+    public boolean isPassable(IBlockAccess worldIn, BlockPos pos) {
         return true;
     }
 
-    public boolean isOpaqueCube()
-    {
+    public boolean isOpaqueCube() {
         return false;
     }
 
-    public TileEntity createNewTileEntity(World worldIn, int meta)
-    {
+    public TileEntity createNewTileEntity(World worldIn, int meta) {
         return new TileEntityBanner();
     }
 
-    public Item getItemDropped(IBlockState state, Random rand, int fortune)
-    {
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
         return Items.banner;
     }
 
-    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune)
-    {
+    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune) {
         TileEntity tileentity = worldIn.getTileEntity(pos);
 
-        if (tileentity instanceof TileEntityBanner)
-        {
-            ItemStack itemstack = new ItemStack(Items.banner, 1, ((TileEntityBanner)tileentity).getBaseColor());
+        if (tileentity instanceof TileEntityBanner) {
+            ItemStack itemstack = new ItemStack(Items.banner, 1, ((TileEntityBanner) tileentity).getBaseColor());
             NBTTagCompound nbttagcompound = new NBTTagCompound();
             tileentity.writeToNBT(nbttagcompound);
             nbttagcompound.removeTag("x");
@@ -88,16 +88,12 @@
             nbttagcompound.removeTag("id");
             itemstack.setTagInfo("BlockEntityTag", nbttagcompound);
             spawnAsEntity(worldIn, pos, itemstack);
-        }
-        else
-        {
+        } else {
             super.dropBlockAsItemWithChance(worldIn, pos, state, chance, fortune);
         }
     }
 
-    public void harvestBlock(World worldIn, EntityPlayer player, BlockPos pos, IBlockState state, TileEntity te)
-    {
-        if (te instanceof TileEntityBanner)
-        {
-            ItemStack itemstack = new ItemStack(Items.banner, 1, ((TileEntityBanner)te).getBaseColor());
+    public void harvestBlock(World worldIn, EntityPlayer player, BlockPos pos, IBlockState state, TileEntity te) {
+        if (te instanceof TileEntityBanner) {
+            ItemStack itemstack = new ItemStack(Items.banner, 1, ((TileEntityBanner) te).getBaseColor());
             NBTTagCompound nbttagcompound = new NBTTagCompound();
             te.writeToNBT(nbttagcompound);
             nbttagcompound.removeTag("x");
@@ -108,168 +108,133 @@
             nbttagcompound.removeTag("id");
             itemstack.setTagInfo("BlockEntityTag", nbttagcompound);
             spawnAsEntity(worldIn, pos, itemstack);
+        } else {
+            super.harvestBlock(worldIn, player, pos, state, (TileEntity) null);
         }
-        else
-        {
-            super.harvestBlock(worldIn, player, pos, state, (TileEntity)null);
-        }
     }
 
-    @SideOnly(Side.CLIENT)
-    public Item getItem(World worldIn, BlockPos pos)
-    {
-        return Items.banner;
-    }
+    public static class BlockBannerHanging extends BlockBanner {
 
-    public static class BlockBannerHanging extends BlockBanner
-        {
-            private static final String __OBFID = "CL_00002140";
+        private static final String __OBFID = "CL_00002140";
 
-            public BlockBannerHanging()
-            {
-                this.setDefaultState(this.blockState.getBaseState().withProperty(FACING, EnumFacing.NORTH));
-            }
+        public BlockBannerHanging() {
+            this.setDefaultState(this.blockState.getBaseState().withProperty(FACING, EnumFacing.NORTH));
+        }
 
-            public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos)
-            {
-                EnumFacing enumfacing = (EnumFacing)worldIn.getBlockState(pos).getValue(FACING);
-                float f = 0.0F;
-                float f1 = 0.78125F;
-                float f2 = 0.0F;
-                float f3 = 1.0F;
-                float f4 = 0.125F;
-                this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+        public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos) {
+            EnumFacing enumfacing = (EnumFacing) worldIn.getBlockState(pos).getValue(FACING);
+            float f = 0.0F;
+            float f1 = 0.78125F;
+            float f2 = 0.0F;
+            float f3 = 1.0F;
+            float f4 = 0.125F;
+            this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 
-                switch (BlockBanner.SwitchEnumFacing.FACING_LOOKUP[enumfacing.ordinal()])
-                {
-                    case 1:
-                    default:
-                        this.setBlockBounds(f2, f, 1.0F - f4, f3, f1, 1.0F);
-                        break;
-                    case 2:
-                        this.setBlockBounds(f2, f, 0.0F, f3, f1, f4);
-                        break;
-                    case 3:
-                        this.setBlockBounds(1.0F - f4, f, f2, 1.0F, f1, f3);
-                        break;
-                    case 4:
-                        this.setBlockBounds(0.0F, f, f2, f4, f1, f3);
-                }
+            switch (BlockBanner.SwitchEnumFacing.FACING_LOOKUP[enumfacing.ordinal()]) {
+                case 1:
+                default:
+                    this.setBlockBounds(f2, f, 1.0F - f4, f3, f1, 1.0F);
+                    break;
+                case 2:
+                    this.setBlockBounds(f2, f, 0.0F, f3, f1, f4);
+                    break;
+                case 3:
+                    this.setBlockBounds(1.0F - f4, f, f2, 1.0F, f1, f3);
+                    break;
+                case 4:
+                    this.setBlockBounds(0.0F, f, f2, f4, f1, f3);
             }
+        }
 
-            public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock)
-            {
-                EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
+        public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock) {
+            EnumFacing enumfacing = (EnumFacing) state.getValue(FACING);
 
-                if (!worldIn.getBlockState(pos.offset(enumfacing.getOpposite())).getBlock().getMaterial().isSolid())
-                {
-                    this.dropBlockAsItem(worldIn, pos, state, 0);
-                    worldIn.setBlockToAir(pos);
-                }
-
-                super.onNeighborBlockChange(worldIn, pos, state, neighborBlock);
+            if (!worldIn.getBlockState(pos.offset(enumfacing.getOpposite())).getBlock().getMaterial().isSolid()) {
+                this.dropBlockAsItem(worldIn, pos, state, 0);
+                worldIn.setBlockToAir(pos);
             }
 
-            public IBlockState getStateFromMeta(int meta)
-            {
-                EnumFacing enumfacing = EnumFacing.getFront(meta);
+            super.onNeighborBlockChange(worldIn, pos, state, neighborBlock);
+        }
 
-                if (enumfacing.getAxis() == EnumFacing.Axis.Y)
-                {
-                    enumfacing = EnumFacing.NORTH;
-                }
+        public IBlockState getStateFromMeta(int meta) {
+            EnumFacing enumfacing = EnumFacing.getFront(meta);
 
-                return this.getDefaultState().withProperty(FACING, enumfacing);
+            if (enumfacing.getAxis() == EnumFacing.Axis.Y) {
+                enumfacing = EnumFacing.NORTH;
             }
 
-            public int getMetaFromState(IBlockState state)
-            {
-                return ((EnumFacing)state.getValue(FACING)).getIndex();
-            }
+            return this.getDefaultState().withProperty(FACING, enumfacing);
+        }
 
-            protected BlockState createBlockState()
-            {
-                return new BlockState(this, new IProperty[] {FACING});
-            }
+        public int getMetaFromState(IBlockState state) {
+            return ((EnumFacing) state.getValue(FACING)).getIndex();
         }
 
-    public static class BlockBannerStanding extends BlockBanner
-        {
-            private static final String __OBFID = "CL_00002141";
+        protected BlockState createBlockState() {
+            return new BlockState(this, new IProperty[]{FACING});
+        }
+    }
 
-            public BlockBannerStanding()
-            {
-                this.setDefaultState(this.blockState.getBaseState().withProperty(ROTATION, Integer.valueOf(0)));
-            }
+    public static class BlockBannerStanding extends BlockBanner {
 
-            public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock)
-            {
-                if (!worldIn.getBlockState(pos.down()).getBlock().getMaterial().isSolid())
-                {
-                    this.dropBlockAsItem(worldIn, pos, state, 0);
-                    worldIn.setBlockToAir(pos);
-                }
+        private static final String __OBFID = "CL_00002141";
 
-                super.onNeighborBlockChange(worldIn, pos, state, neighborBlock);
-            }
+        public BlockBannerStanding() {
+            this.setDefaultState(this.blockState.getBaseState().withProperty(ROTATION, Integer.valueOf(0)));
+        }
 
-            public IBlockState getStateFromMeta(int meta)
-            {
-                return this.getDefaultState().withProperty(ROTATION, Integer.valueOf(meta));
+        public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock) {
+            if (!worldIn.getBlockState(pos.down()).getBlock().getMaterial().isSolid()) {
+                this.dropBlockAsItem(worldIn, pos, state, 0);
+                worldIn.setBlockToAir(pos);
             }
 
-            public int getMetaFromState(IBlockState state)
-            {
-                return ((Integer)state.getValue(ROTATION)).intValue();
-            }
+            super.onNeighborBlockChange(worldIn, pos, state, neighborBlock);
+        }
 
-            protected BlockState createBlockState()
-            {
-                return new BlockState(this, new IProperty[] {ROTATION});
-            }
+        public IBlockState getStateFromMeta(int meta) {
+            return this.getDefaultState().withProperty(ROTATION, Integer.valueOf(meta));
         }
 
-    static final class SwitchEnumFacing
-        {
-            static final int[] FACING_LOOKUP = new int[EnumFacing.values().length];
-            private static final String __OBFID = "CL_00002142";
+        public int getMetaFromState(IBlockState state) {
+            return ((Integer) state.getValue(ROTATION)).intValue();
+        }
 
-            static
-            {
-                try
-                {
-                    FACING_LOOKUP[EnumFacing.NORTH.ordinal()] = 1;
-                }
-                catch (NoSuchFieldError var4)
-                {
-                    ;
-                }
+        protected BlockState createBlockState() {
+            return new BlockState(this, new IProperty[]{ROTATION});
+        }
+    }
 
-                try
-                {
-                    FACING_LOOKUP[EnumFacing.SOUTH.ordinal()] = 2;
-                }
-                catch (NoSuchFieldError var3)
-                {
-                    ;
-                }
+    static final class SwitchEnumFacing {
 
-                try
-                {
-                    FACING_LOOKUP[EnumFacing.WEST.ordinal()] = 3;
-                }
-                catch (NoSuchFieldError var2)
-                {
-                    ;
-                }
+        static final int[] FACING_LOOKUP = new int[EnumFacing.values().length];
+        private static final String __OBFID = "CL_00002142";
 
-                try
-                {
-                    FACING_LOOKUP[EnumFacing.EAST.ordinal()] = 4;
-                }
-                catch (NoSuchFieldError var1)
-                {
-                    ;
-                }
+        static {
+            try {
+                FACING_LOOKUP[EnumFacing.NORTH.ordinal()] = 1;
+            } catch (NoSuchFieldError var4) {
+                ;
             }
+
+            try {
+                FACING_LOOKUP[EnumFacing.SOUTH.ordinal()] = 2;
+            } catch (NoSuchFieldError var3) {
+                ;
+            }
+
+            try {
+                FACING_LOOKUP[EnumFacing.WEST.ordinal()] = 3;
+            } catch (NoSuchFieldError var2) {
+                ;
+            }
+
+            try {
+                FACING_LOOKUP[EnumFacing.EAST.ordinal()] = 4;
+            } catch (NoSuchFieldError var1) {
+                ;
+            }
         }
-}
+    }
+}
