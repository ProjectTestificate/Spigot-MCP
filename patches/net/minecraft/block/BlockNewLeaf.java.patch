--- decompiled\net\minecraft\block\BlockNewLeaf.java
+++ src\main\java\net\minecraft\block\BlockNewLeaf.java
@@ -1,118 +1,92 @@
 package net.minecraft.block;
 
-import com.google.common.base.Predicate;
-import java.util.List;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyEnum;
 import net.minecraft.block.state.BlockState;
 import net.minecraft.block.state.IBlockState;
-import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Items;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.stats.StatList;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.BlockPos;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockNewLeaf extends BlockLeaves
-{
-    public static final PropertyEnum VARIANT = PropertyEnum.create("variant", BlockPlanks.EnumType.class, new Predicate()
-    {
+import com.google.common.base.Predicate;
+
+public class BlockNewLeaf extends BlockLeaves {
+
+    public static final PropertyEnum VARIANT = PropertyEnum.create("variant", BlockPlanks.EnumType.class, new Predicate() {
+
         private static final String __OBFID = "CL_00002090";
-        public boolean apply(BlockPlanks.EnumType type)
-        {
+
+        public boolean apply(BlockPlanks.EnumType type) {
             return type.getMetadata() >= 4;
         }
-        public boolean apply(Object p_apply_1_)
-        {
-            return this.apply((BlockPlanks.EnumType)p_apply_1_);
+
+        public boolean apply(Object p_apply_1_) {
+            return this.apply((BlockPlanks.EnumType) p_apply_1_);
         }
     });
     private static final String __OBFID = "CL_00000276";
 
-    public BlockNewLeaf()
-    {
+    public BlockNewLeaf() {
         this.setDefaultState(this.blockState.getBaseState().withProperty(VARIANT, BlockPlanks.EnumType.ACACIA).withProperty(CHECK_DECAY, Boolean.valueOf(true)).withProperty(DECAYABLE, Boolean.valueOf(true)));
     }
 
-    protected void dropApple(World worldIn, BlockPos pos, IBlockState state, int chance)
-    {
-        if (state.getValue(VARIANT) == BlockPlanks.EnumType.DARK_OAK && worldIn.rand.nextInt(chance) == 0)
-        {
+    protected void dropApple(World worldIn, BlockPos pos, IBlockState state, int chance) {
+        if (state.getValue(VARIANT) == BlockPlanks.EnumType.DARK_OAK && worldIn.rand.nextInt(chance) == 0) {
             spawnAsEntity(worldIn, pos, new ItemStack(Items.apple, 1, 0));
         }
     }
 
-    public int damageDropped(IBlockState state)
-    {
-        return ((BlockPlanks.EnumType)state.getValue(VARIANT)).getMetadata();
+    public int damageDropped(IBlockState state) {
+        return ((BlockPlanks.EnumType) state.getValue(VARIANT)).getMetadata();
     }
 
-    public int getDamageValue(World worldIn, BlockPos pos)
-    {
+    public int getDamageValue(World worldIn, BlockPos pos) {
         IBlockState iblockstate = worldIn.getBlockState(pos);
         return iblockstate.getBlock().getMetaFromState(iblockstate) & 3;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void getSubBlocks(Item itemIn, CreativeTabs tab, List list)
-    {
-        list.add(new ItemStack(itemIn, 1, 0));
-        list.add(new ItemStack(itemIn, 1, 1));
+    protected ItemStack createStackedBlock(IBlockState state) {
+        return new ItemStack(Item.getItemFromBlock(this), 1, ((BlockPlanks.EnumType) state.getValue(VARIANT)).getMetadata() - 4);
     }
 
-    protected ItemStack createStackedBlock(IBlockState state)
-    {
-        return new ItemStack(Item.getItemFromBlock(this), 1, ((BlockPlanks.EnumType)state.getValue(VARIANT)).getMetadata() - 4);
-    }
-
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(VARIANT, this.getWoodType(meta)).withProperty(DECAYABLE, Boolean.valueOf((meta & 4) == 0)).withProperty(CHECK_DECAY, Boolean.valueOf((meta & 8) > 0));
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
+    public int getMetaFromState(IBlockState state) {
         byte b0 = 0;
-        int i = b0 | ((BlockPlanks.EnumType)state.getValue(VARIANT)).getMetadata() - 4;
+        int i = b0 | ((BlockPlanks.EnumType) state.getValue(VARIANT)).getMetadata() - 4;
 
-        if (!((Boolean)state.getValue(DECAYABLE)).booleanValue())
-        {
+        if (!((Boolean) state.getValue(DECAYABLE)).booleanValue()) {
             i |= 4;
         }
 
-        if (((Boolean)state.getValue(CHECK_DECAY)).booleanValue())
-        {
+        if (((Boolean) state.getValue(CHECK_DECAY)).booleanValue()) {
             i |= 8;
         }
 
         return i;
     }
 
-    public BlockPlanks.EnumType getWoodType(int meta)
-    {
+    public BlockPlanks.EnumType getWoodType(int meta) {
         return BlockPlanks.EnumType.byMetadata((meta & 3) + 4);
     }
 
-    protected BlockState createBlockState()
-    {
-        return new BlockState(this, new IProperty[] {VARIANT, CHECK_DECAY, DECAYABLE});
+    protected BlockState createBlockState() {
+        return new BlockState(this, new IProperty[]{VARIANT, CHECK_DECAY, DECAYABLE});
     }
 
-    public void harvestBlock(World worldIn, EntityPlayer player, BlockPos pos, IBlockState state, TileEntity te)
-    {
-        if (!worldIn.isRemote && player.getCurrentEquippedItem() != null && player.getCurrentEquippedItem().getItem() == Items.shears)
-        {
+    public void harvestBlock(World worldIn, EntityPlayer player, BlockPos pos, IBlockState state, TileEntity te) {
+        if (!worldIn.isRemote && player.getCurrentEquippedItem() != null && player.getCurrentEquippedItem().getItem() == Items.shears) {
             player.triggerAchievement(StatList.mineBlockStatArray[Block.getIdFromBlock(this)]);
-            spawnAsEntity(worldIn, pos, new ItemStack(Item.getItemFromBlock(this), 1, ((BlockPlanks.EnumType)state.getValue(VARIANT)).getMetadata() - 4));
-        }
-        else
-        {
+            spawnAsEntity(worldIn, pos, new ItemStack(Item.getItemFromBlock(this), 1, ((BlockPlanks.EnumType) state.getValue(VARIANT)).getMetadata() - 4));
+        } else {
             super.harvestBlock(worldIn, player, pos, state, te);
         }
     }
 }
