---a/net/minecraft/block/BlockRedstoneComparator.java
+++b/net/minecraft/block/BlockRedstoneComparator.java
@@ -1,9 +1,7 @@
 package net.minecraft.block;
 
-import com.google.common.base.Predicate;
 import java.util.List;
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyBool;
@@ -24,115 +24,86 @@
 import net.minecraft.util.IStringSerializable;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockRedstoneComparator extends BlockRedstoneDiode implements ITileEntityProvider
-{
+import com.google.common.base.Predicate;
+
+public class BlockRedstoneComparator extends BlockRedstoneDiode implements ITileEntityProvider {
+
     public static final PropertyBool POWERED = PropertyBool.create("powered");
     public static final PropertyEnum MODE = PropertyEnum.create("mode", BlockRedstoneComparator.Mode.class);
     private static final String __OBFID = "CL_00000220";
 
-    public BlockRedstoneComparator(boolean powered)
-    {
+    public BlockRedstoneComparator(boolean powered) {
         super(powered);
         this.setDefaultState(this.blockState.getBaseState().withProperty(FACING, EnumFacing.NORTH).withProperty(POWERED, Boolean.valueOf(false)).withProperty(MODE, BlockRedstoneComparator.Mode.COMPARE));
         this.isBlockContainer = true;
     }
 
-    public Item getItemDropped(IBlockState state, Random rand, int fortune)
-    {
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
         return Items.comparator;
     }
 
-    @SideOnly(Side.CLIENT)
-    public Item getItem(World worldIn, BlockPos pos)
-    {
-        return Items.comparator;
-    }
-
-    protected int getDelay(IBlockState state)
-    {
+    protected int getDelay(IBlockState state) {
         return 2;
     }
 
-    protected IBlockState getPoweredState(IBlockState unpoweredState)
-    {
-        Boolean obool = (Boolean)unpoweredState.getValue(POWERED);
-        BlockRedstoneComparator.Mode mode = (BlockRedstoneComparator.Mode)unpoweredState.getValue(MODE);
-        EnumFacing enumfacing = (EnumFacing)unpoweredState.getValue(FACING);
+    protected IBlockState getPoweredState(IBlockState unpoweredState) {
+        Boolean obool = (Boolean) unpoweredState.getValue(POWERED);
+        BlockRedstoneComparator.Mode mode = (BlockRedstoneComparator.Mode) unpoweredState.getValue(MODE);
+        EnumFacing enumfacing = (EnumFacing) unpoweredState.getValue(FACING);
         return Blocks.powered_comparator.getDefaultState().withProperty(FACING, enumfacing).withProperty(POWERED, obool).withProperty(MODE, mode);
     }
 
-    protected IBlockState getUnpoweredState(IBlockState poweredState)
-    {
-        Boolean obool = (Boolean)poweredState.getValue(POWERED);
-        BlockRedstoneComparator.Mode mode = (BlockRedstoneComparator.Mode)poweredState.getValue(MODE);
-        EnumFacing enumfacing = (EnumFacing)poweredState.getValue(FACING);
+    protected IBlockState getUnpoweredState(IBlockState poweredState) {
+        Boolean obool = (Boolean) poweredState.getValue(POWERED);
+        BlockRedstoneComparator.Mode mode = (BlockRedstoneComparator.Mode) poweredState.getValue(MODE);
+        EnumFacing enumfacing = (EnumFacing) poweredState.getValue(FACING);
         return Blocks.unpowered_comparator.getDefaultState().withProperty(FACING, enumfacing).withProperty(POWERED, obool).withProperty(MODE, mode);
     }
 
-    protected boolean isPowered(IBlockState state)
-    {
-        return this.isRepeaterPowered || ((Boolean)state.getValue(POWERED)).booleanValue();
+    protected boolean isPowered(IBlockState state) {
+        return this.isRepeaterPowered || ((Boolean) state.getValue(POWERED)).booleanValue();
     }
 
-    protected int getActiveSignal(IBlockAccess worldIn, BlockPos pos, IBlockState state)
-    {
+    protected int getActiveSignal(IBlockAccess worldIn, BlockPos pos, IBlockState state) {
         TileEntity tileentity = worldIn.getTileEntity(pos);
-        return tileentity instanceof TileEntityComparator ? ((TileEntityComparator)tileentity).getOutputSignal() : 0;
+        return tileentity instanceof TileEntityComparator ? ((TileEntityComparator) tileentity).getOutputSignal() : 0;
     }
 
-    private int calculateOutput(World worldIn, BlockPos pos, IBlockState state)
-    {
+    private int calculateOutput(World worldIn, BlockPos pos, IBlockState state) {
         return state.getValue(MODE) == BlockRedstoneComparator.Mode.SUBTRACT ? Math.max(this.calculateInputStrength(worldIn, pos, state) - this.getPowerOnSides(worldIn, pos, state), 0) : this.calculateInputStrength(worldIn, pos, state);
     }
 
-    protected boolean shouldBePowered(World worldIn, BlockPos pos, IBlockState state)
-    {
+    protected boolean shouldBePowered(World worldIn, BlockPos pos, IBlockState state) {
         int i = this.calculateInputStrength(worldIn, pos, state);
 
-        if (i >= 15)
-        {
+        if (i >= 15) {
             return true;
-        }
-        else if (i == 0)
-        {
+        } else if (i == 0) {
             return false;
-        }
-        else
-        {
+        } else {
             int j = this.getPowerOnSides(worldIn, pos, state);
             return j == 0 ? true : i >= j;
         }
     }
 
-    protected int calculateInputStrength(World worldIn, BlockPos pos, IBlockState state)
-    {
+    protected int calculateInputStrength(World worldIn, BlockPos pos, IBlockState state) {
         int i = super.calculateInputStrength(worldIn, pos, state);
-        EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
+        EnumFacing enumfacing = (EnumFacing) state.getValue(FACING);
         BlockPos blockpos1 = pos.offset(enumfacing);
         Block block = worldIn.getBlockState(blockpos1).getBlock();
 
-        if (block.hasComparatorInputOverride())
-        {
+        if (block.hasComparatorInputOverride()) {
             i = block.getComparatorInputOverride(worldIn, blockpos1);
-        }
-        else if (i < 15 && block.isNormalCube())
-        {
+        } else if (i < 15 && block.isNormalCube()) {
             blockpos1 = blockpos1.offset(enumfacing);
             block = worldIn.getBlockState(blockpos1).getBlock();
 
-            if (block.hasComparatorInputOverride())
-            {
+            if (block.hasComparatorInputOverride()) {
                 i = block.getComparatorInputOverride(worldIn, blockpos1);
-            }
-            else if (block.getMaterial() == Material.air)
-            {
+            } else if (block.getMaterial() == Material.air) {
                 EntityItemFrame entityitemframe = this.findItemFrame(worldIn, enumfacing, blockpos1);
 
-                if (entityitemframe != null)
-                {
+                if (entityitemframe != null) {
                     i = entityitemframe.func_174866_q();
                 }
             }
@@ -141,86 +141,70 @@
         return i;
     }
 
-    private EntityItemFrame findItemFrame(World worldIn, final EnumFacing facing, BlockPos pos)
-    {
-        List list = worldIn.getEntitiesWithinAABB(EntityItemFrame.class, new AxisAlignedBB((double)pos.getX(), (double)pos.getY(), (double)pos.getZ(), (double)(pos.getX() + 1), (double)(pos.getY() + 1), (double)(pos.getZ() + 1)), new Predicate()
-        {
+    private EntityItemFrame findItemFrame(World worldIn, final EnumFacing facing, BlockPos pos) {
+        List list = worldIn.getEntitiesWithinAABB(EntityItemFrame.class, new AxisAlignedBB((double) pos.getX(), (double) pos.getY(), (double) pos.getZ(), (double) (pos.getX() + 1), (double) (pos.getY() + 1), (double) (pos.getZ() + 1)), new Predicate() {
+
             private static final String __OBFID = "CL_00002129";
-            public boolean apply(Entity entityIn)
-            {
+
+            public boolean apply(Entity entityIn) {
                 return entityIn != null && entityIn.getHorizontalFacing() == facing;
             }
-            public boolean apply(Object p_apply_1_)
-            {
-                return this.apply((Entity)p_apply_1_);
+
+            public boolean apply(Object p_apply_1_) {
+                return this.apply((Entity) p_apply_1_);
             }
         });
-        return list.size() == 1 ? (EntityItemFrame)list.get(0) : null;
+        return list.size() == 1 ? (EntityItemFrame) list.get(0) : null;
     }
 
-    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ)
-    {
-        if (!playerIn.capabilities.allowEdit)
-        {
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ) {
+        if (!playerIn.capabilities.allowEdit) {
             return false;
-        }
-        else
-        {
+        } else {
             state = state.cycleProperty(MODE);
-            worldIn.playSoundEffect((double)pos.getX() + 0.5D, (double)pos.getY() + 0.5D, (double)pos.getZ() + 0.5D, "random.click", 0.3F, state.getValue(MODE) == BlockRedstoneComparator.Mode.SUBTRACT ? 0.55F : 0.5F);
+            worldIn.playSoundEffect((double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, "random.click", 0.3F, state.getValue(MODE) == BlockRedstoneComparator.Mode.SUBTRACT ? 0.55F : 0.5F);
             worldIn.setBlockState(pos, state, 2);
             this.onStateChange(worldIn, pos, state);
             return true;
         }
     }
 
-    protected void updateState(World worldIn, BlockPos pos, IBlockState state)
-    {
-        if (!worldIn.isBlockTickPending(pos, this))
-        {
+    protected void updateState(World worldIn, BlockPos pos, IBlockState state) {
+        if (!worldIn.isBlockTickPending(pos, this)) {
             int i = this.calculateOutput(worldIn, pos, state);
             TileEntity tileentity = worldIn.getTileEntity(pos);
-            int j = tileentity instanceof TileEntityComparator ? ((TileEntityComparator)tileentity).getOutputSignal() : 0;
+            int j = tileentity instanceof TileEntityComparator ? ((TileEntityComparator) tileentity).getOutputSignal() : 0;
 
-            if (i != j || this.isPowered(state) != this.shouldBePowered(worldIn, pos, state))
-            {
-                if (this.isFacingTowardsRepeater(worldIn, pos, state))
-                {
+            if (i != j || this.isPowered(state) != this.shouldBePowered(worldIn, pos, state)) {
+                if (this.isFacingTowardsRepeater(worldIn, pos, state)) {
                     worldIn.updateBlockTick(pos, this, 2, -1);
-                }
-                else
-                {
+                } else {
                     worldIn.updateBlockTick(pos, this, 2, 0);
                 }
             }
         }
     }
 
-    private void onStateChange(World worldIn, BlockPos pos, IBlockState state)
-    {
+    private void onStateChange(World worldIn, BlockPos pos, IBlockState state) {
         int i = this.calculateOutput(worldIn, pos, state);
         TileEntity tileentity = worldIn.getTileEntity(pos);
         int j = 0;
 
-        if (tileentity instanceof TileEntityComparator)
-        {
-            TileEntityComparator tileentitycomparator = (TileEntityComparator)tileentity;
+        if (tileentity instanceof TileEntityComparator) {
+            TileEntityComparator tileentitycomparator = (TileEntityComparator) tileentity;
             j = tileentitycomparator.getOutputSignal();
             tileentitycomparator.setOutputSignal(i);
         }
 
-        if (j != i || state.getValue(MODE) == BlockRedstoneComparator.Mode.COMPARE)
-        {
+        if (j != i || state.getValue(MODE) == BlockRedstoneComparator.Mode.COMPARE) {
             boolean flag1 = this.shouldBePowered(worldIn, pos, state);
             boolean flag = this.isPowered(state);
 
-            if (flag && !flag1)
-            {
+            if (flag && !flag1) {
                 worldIn.setBlockState(pos, state.withProperty(POWERED, Boolean.valueOf(false)), 2);
-            }
-            else if (!flag && flag1)
-            {
+            } else if (!flag && flag1) {
                 worldIn.setBlockState(pos, state.withProperty(POWERED, Boolean.valueOf(true)), 2);
             }
 
@@ -227,98 +227,80 @@
         }
     }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        if (this.isRepeaterPowered)
-        {
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
+        if (this.isRepeaterPowered) {
             worldIn.setBlockState(pos, this.getUnpoweredState(state).withProperty(POWERED, Boolean.valueOf(true)), 4);
         }
 
         this.onStateChange(worldIn, pos, state);
     }
 
-    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state) {
         super.onBlockAdded(worldIn, pos, state);
         worldIn.setTileEntity(pos, this.createNewTileEntity(worldIn, 0));
     }
 
-    public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public void breakBlock(World worldIn, BlockPos pos, IBlockState state) {
         super.breakBlock(worldIn, pos, state);
         worldIn.removeTileEntity(pos);
         this.notifyNeighbors(worldIn, pos, state);
     }
 
-    public boolean onBlockEventReceived(World worldIn, BlockPos pos, IBlockState state, int eventID, int eventParam)
-    {
+    public boolean onBlockEventReceived(World worldIn, BlockPos pos, IBlockState state, int eventID, int eventParam) {
         super.onBlockEventReceived(worldIn, pos, state, eventID, eventParam);
         TileEntity tileentity = worldIn.getTileEntity(pos);
         return tileentity == null ? false : tileentity.receiveClientEvent(eventID, eventParam);
     }
 
-    public TileEntity createNewTileEntity(World worldIn, int meta)
-    {
+    public TileEntity createNewTileEntity(World worldIn, int meta) {
         return new TileEntityComparator();
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(FACING, EnumFacing.getHorizontal(meta)).withProperty(POWERED, Boolean.valueOf((meta & 8) > 0)).withProperty(MODE, (meta & 4) > 0 ? BlockRedstoneComparator.Mode.SUBTRACT : BlockRedstoneComparator.Mode.COMPARE);
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
+    public int getMetaFromState(IBlockState state) {
         byte b0 = 0;
-        int i = b0 | ((EnumFacing)state.getValue(FACING)).getHorizontalIndex();
+        int i = b0 | ((EnumFacing) state.getValue(FACING)).getHorizontalIndex();
 
-        if (((Boolean)state.getValue(POWERED)).booleanValue())
-        {
+        if (((Boolean) state.getValue(POWERED)).booleanValue()) {
             i |= 8;
         }
 
-        if (state.getValue(MODE) == BlockRedstoneComparator.Mode.SUBTRACT)
-        {
+        if (state.getValue(MODE) == BlockRedstoneComparator.Mode.SUBTRACT) {
             i |= 4;
         }
 
         return i;
     }
 
-    protected BlockState createBlockState()
-    {
-        return new BlockState(this, new IProperty[] {FACING, MODE, POWERED});
+    protected BlockState createBlockState() {
+        return new BlockState(this, new IProperty[]{FACING, MODE, POWERED});
     }
 
-    public IBlockState onBlockPlaced(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer)
-    {
+    public IBlockState onBlockPlaced(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer) {
         return this.getDefaultState().withProperty(FACING, placer.getHorizontalFacing().getOpposite()).withProperty(POWERED, Boolean.valueOf(false)).withProperty(MODE, BlockRedstoneComparator.Mode.COMPARE);
     }
 
-    public static enum Mode implements IStringSerializable
-    {
+    public static enum Mode implements IStringSerializable {
         COMPARE("compare"),
         SUBTRACT("subtract");
         private final String name;
 
         private static final String __OBFID = "CL_00002128";
 
-        private Mode(String name)
-        {
+        private Mode(String name) {
             this.name = name;
         }
 
-        public String toString()
-        {
+        public String toString() {
             return this.name;
         }
 
-        public String getName()
-        {
+        public String getName() {
             return this.name;
         }
     }
-}
+}
