--- decompiled\net\minecraft\block\BlockRailDetector.java
+++ src\main\java\net\minecraft\block\BlockRailDetector.java
@@ -1,10 +1,10 @@
 package net.minecraft.block;
 
-import com.google.common.base.Predicate;
 import java.util.List;
 import java.util.Random;
+
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyBool;
 import net.minecraft.block.properties.PropertyEnum;
 import net.minecraft.block.state.BlockState;
 import net.minecraft.block.state.IBlockState;
@@ -18,178 +18,166 @@
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 
-public class BlockRailDetector extends BlockRailBase
-{
-    public static final PropertyEnum SHAPE = PropertyEnum.create("shape", BlockRailBase.EnumRailDirection.class, new Predicate()
-    {
+import org.bukkit.event.block.BlockRedstoneEvent;
+
+import com.google.common.base.Predicate;
+
+public class BlockRailDetector extends BlockRailBase {
+
+    public static final PropertyEnum SHAPE = PropertyEnum.create("shape", BlockRailBase.EnumRailDirection.class, new Predicate() {
+
         private static final String __OBFID = "CL_00002126";
-        public boolean apply(BlockRailBase.EnumRailDirection direction)
-        {
+
+        public boolean apply(BlockRailBase.EnumRailDirection direction) {
             return direction != BlockRailBase.EnumRailDirection.NORTH_EAST && direction != BlockRailBase.EnumRailDirection.NORTH_WEST && direction != BlockRailBase.EnumRailDirection.SOUTH_EAST && direction != BlockRailBase.EnumRailDirection.SOUTH_WEST;
         }
-        public boolean apply(Object p_apply_1_)
-        {
-            return this.apply((BlockRailBase.EnumRailDirection)p_apply_1_);
+
+        public boolean apply(Object p_apply_1_) {
+            return this.apply((BlockRailBase.EnumRailDirection) p_apply_1_);
         }
     });
     public static final PropertyBool POWERED = PropertyBool.create("powered");
     private static final String __OBFID = "CL_00000225";
 
-    public BlockRailDetector()
-    {
+    public BlockRailDetector() {
         super(true);
         this.setDefaultState(this.blockState.getBaseState().withProperty(POWERED, Boolean.valueOf(false)).withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_SOUTH));
         this.setTickRandomly(true);
     }
 
-    public int tickRate(World worldIn)
-    {
+    public int tickRate(World worldIn) {
         return 20;
     }
 
-    public boolean canProvidePower()
-    {
+    public boolean canProvidePower() {
         return true;
     }
 
-    public void onEntityCollidedWithBlock(World worldIn, BlockPos pos, IBlockState state, Entity entityIn)
-    {
-        if (!worldIn.isRemote)
-        {
-            if (!((Boolean)state.getValue(POWERED)).booleanValue())
-            {
+    public void onEntityCollidedWithBlock(World worldIn, BlockPos pos, IBlockState state, Entity entityIn) {
+        if (!worldIn.isRemote) {
+            if (!((Boolean) state.getValue(POWERED)).booleanValue()) {
                 this.updatePoweredState(worldIn, pos, state);
             }
         }
     }
 
-    public void randomTick(World worldIn, BlockPos pos, IBlockState state, Random random) {}
+    public void randomTick(World worldIn, BlockPos pos, IBlockState state, Random random) {
+    }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        if (!worldIn.isRemote && ((Boolean)state.getValue(POWERED)).booleanValue())
-        {
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
+        if (!worldIn.isRemote && ((Boolean) state.getValue(POWERED)).booleanValue()) {
             this.updatePoweredState(worldIn, pos, state);
         }
     }
 
-    public int isProvidingWeakPower(IBlockAccess worldIn, BlockPos pos, IBlockState state, EnumFacing side)
-    {
-        return ((Boolean)state.getValue(POWERED)).booleanValue() ? 15 : 0;
+    public int isProvidingWeakPower(IBlockAccess worldIn, BlockPos pos, IBlockState state, EnumFacing side) {
+        return ((Boolean) state.getValue(POWERED)).booleanValue() ? 15 : 0;
     }
 
-    public int isProvidingStrongPower(IBlockAccess worldIn, BlockPos pos, IBlockState state, EnumFacing side)
-    {
-        return !((Boolean)state.getValue(POWERED)).booleanValue() ? 0 : (side == EnumFacing.UP ? 15 : 0);
+    public int isProvidingStrongPower(IBlockAccess worldIn, BlockPos pos, IBlockState state, EnumFacing side) {
+        return !((Boolean) state.getValue(POWERED)).booleanValue() ? 0 : (side == EnumFacing.UP ? 15 : 0);
     }
 
-    private void updatePoweredState(World worldIn, BlockPos pos, IBlockState state)
-    {
-        boolean flag = ((Boolean)state.getValue(POWERED)).booleanValue();
+    private void updatePoweredState(World worldIn, BlockPos pos, IBlockState state) {
+        boolean flag = ((Boolean) state.getValue(POWERED)).booleanValue();
         boolean flag1 = false;
         List list = this.findMinecarts(worldIn, pos, EntityMinecart.class, new Predicate[0]);
 
-        if (!list.isEmpty())
-        {
+        if (!list.isEmpty()) {
             flag1 = true;
         }
 
-        if (flag1 && !flag)
-        {
+        // CraftBukkit start
+        if (flag != flag1) {
+            org.bukkit.block.Block block = worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+
+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, flag ? 15 : 0, flag1 ? 15 : 0);
+            worldIn.getServer().getPluginManager().callEvent(eventRedstone);
+
+            flag1 = eventRedstone.getNewCurrent() > 0;
+        }
+        // CraftBukkit end
+
+        if (flag1 && !flag) {
             worldIn.setBlockState(pos, state.withProperty(POWERED, Boolean.valueOf(true)), 3);
             worldIn.notifyNeighborsOfStateChange(pos, this);
             worldIn.notifyNeighborsOfStateChange(pos.down(), this);
             worldIn.markBlockRangeForRenderUpdate(pos, pos);
         }
 
-        if (!flag1 && flag)
-        {
+        if (!flag1 && flag) {
             worldIn.setBlockState(pos, state.withProperty(POWERED, Boolean.valueOf(false)), 3);
             worldIn.notifyNeighborsOfStateChange(pos, this);
             worldIn.notifyNeighborsOfStateChange(pos.down(), this);
             worldIn.markBlockRangeForRenderUpdate(pos, pos);
         }
 
-        if (flag1)
-        {
+        if (flag1) {
             worldIn.scheduleUpdate(pos, this, this.tickRate(worldIn));
         }
 
         worldIn.updateComparatorOutputLevel(pos, this);
     }
 
-    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state) {
         super.onBlockAdded(worldIn, pos, state);
         this.updatePoweredState(worldIn, pos, state);
     }
 
-    public IProperty getShapeProperty()
-    {
+    public IProperty getShapeProperty() {
         return SHAPE;
     }
 
-    public boolean hasComparatorInputOverride()
-    {
+    public boolean hasComparatorInputOverride() {
         return true;
     }
 
-    public int getComparatorInputOverride(World worldIn, BlockPos pos)
-    {
-        if (((Boolean)worldIn.getBlockState(pos).getValue(POWERED)).booleanValue())
-        {
+    public int getComparatorInputOverride(World worldIn, BlockPos pos) {
+        if (((Boolean) worldIn.getBlockState(pos).getValue(POWERED)).booleanValue()) {
             List list = this.findMinecarts(worldIn, pos, EntityMinecartCommandBlock.class, new Predicate[0]);
 
-            if (!list.isEmpty())
-            {
-                return ((EntityMinecartCommandBlock)list.get(0)).getCommandBlockLogic().getSuccessCount();
+            if (!list.isEmpty()) {
+                return ((EntityMinecartCommandBlock) list.get(0)).getCommandBlockLogic().getSuccessCount();
             }
 
-            List list1 = this.findMinecarts(worldIn, pos, EntityMinecart.class, new Predicate[] {IEntitySelector.selectInventories});
+            List list1 = this.findMinecarts(worldIn, pos, EntityMinecart.class, new Predicate[]{IEntitySelector.selectInventories});
 
-            if (!list1.isEmpty())
-            {
-                return Container.calcRedstoneFromInventory((IInventory)list1.get(0));
+            if (!list1.isEmpty()) {
+                return Container.calcRedstoneFromInventory((IInventory) list1.get(0));
             }
         }
 
         return 0;
     }
 
-    protected List findMinecarts(World worldIn, BlockPos pos, Class clazz, Predicate ... filter)
-    {
+    protected List findMinecarts(World worldIn, BlockPos pos, Class clazz, Predicate... filter) {
         AxisAlignedBB axisalignedbb = this.getDectectionBox(pos);
         return filter.length != 1 ? worldIn.getEntitiesWithinAABB(clazz, axisalignedbb) : worldIn.getEntitiesWithinAABB(clazz, axisalignedbb, filter[0]);
     }
 
-    private AxisAlignedBB getDectectionBox(BlockPos pos)
-    {
+    private AxisAlignedBB getDectectionBox(BlockPos pos) {
         float f = 0.2F;
-        return new AxisAlignedBB((double)((float)pos.getX() + 0.2F), (double)pos.getY(), (double)((float)pos.getZ() + 0.2F), (double)((float)(pos.getX() + 1) - 0.2F), (double)((float)(pos.getY() + 1) - 0.2F), (double)((float)(pos.getZ() + 1) - 0.2F));
+        return new AxisAlignedBB((double) ((float) pos.getX() + 0.2F), (double) pos.getY(), (double) ((float) pos.getZ() + 0.2F), (double) ((float) (pos.getX() + 1) - 0.2F), (double) ((float) (pos.getY() + 1) - 0.2F), (double) ((float) (pos.getZ() + 1) - 0.2F));
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(SHAPE, BlockRailBase.EnumRailDirection.byMetadata(meta & 7)).withProperty(POWERED, Boolean.valueOf((meta & 8) > 0));
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
+    public int getMetaFromState(IBlockState state) {
         byte b0 = 0;
-        int i = b0 | ((BlockRailBase.EnumRailDirection)state.getValue(SHAPE)).getMetadata();
+        int i = b0 | ((BlockRailBase.EnumRailDirection) state.getValue(SHAPE)).getMetadata();
 
-        if (((Boolean)state.getValue(POWERED)).booleanValue())
-        {
+        if (((Boolean) state.getValue(POWERED)).booleanValue()) {
             i |= 8;
         }
 
         return i;
     }
 
-    protected BlockState createBlockState()
-    {
-        return new BlockState(this, new IProperty[] {SHAPE, POWERED});
+    protected BlockState createBlockState() {
+        return new BlockState(this, new IProperty[]{SHAPE, POWERED});
     }
 }
