---a/net/minecraft/block/BlockRedstoneLight.java
+++b/net/minecraft/block/BlockRedstoneLight.java
@@ -1,6 +1,7 @@
 package net.minecraft.block;
 
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.init.Blocks;
@@ -8,80 +8,65 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.BlockPos;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockRedstoneLight extends Block
-{
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+
+public class BlockRedstoneLight extends Block {
+
     private final boolean isOn;
     private static final String __OBFID = "CL_00000297";
 
-    public BlockRedstoneLight(boolean isOn)
-    {
+    public BlockRedstoneLight(boolean isOn) {
         super(Material.redstoneLight);
         this.isOn = isOn;
 
-        if (isOn)
-        {
+        if (isOn) {
             this.setLightLevel(1.0F);
         }
     }
 
-    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
-    {
-        if (!worldIn.isRemote)
-        {
-            if (this.isOn && !worldIn.isBlockPowered(pos))
-            {
+    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state) {
+        if (!worldIn.isRemote) {
+            if (this.isOn && !worldIn.isBlockPowered(pos)) {
                 worldIn.setBlockState(pos, Blocks.redstone_lamp.getDefaultState(), 2);
-            }
-            else if (!this.isOn && worldIn.isBlockPowered(pos))
-            {
+            } else if (!this.isOn && worldIn.isBlockPowered(pos)) {
                 worldIn.setBlockState(pos, Blocks.lit_redstone_lamp.getDefaultState(), 2);
             }
         }
     }
 
-    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock)
-    {
-        if (!worldIn.isRemote)
-        {
-            if (this.isOn && !worldIn.isBlockPowered(pos))
-            {
+    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock) {
+        if (!worldIn.isRemote) {
+            if (this.isOn && !worldIn.isBlockPowered(pos)) {
+                // CraftBukkit start
+                if (CraftEventFactory.callRedstoneChange(worldIn, pos.getX(), pos.getY(), pos.getZ(), 0, 15).getNewCurrent() != 15) {
+                    return;
+                }
+                // CraftBukkit end11
                 worldIn.scheduleUpdate(pos, this, 4);
-            }
-            else if (!this.isOn && worldIn.isBlockPowered(pos))
-            {
+            } else if (!this.isOn && worldIn.isBlockPowered(pos)) {
                 worldIn.setBlockState(pos, Blocks.lit_redstone_lamp.getDefaultState(), 2);
             }
         }
     }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        if (!worldIn.isRemote)
-        {
-            if (this.isOn && !worldIn.isBlockPowered(pos))
-            {
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
+        if (!worldIn.isRemote) {
+            if (this.isOn && !worldIn.isBlockPowered(pos)) {
+                // CraftBukkit start
+                if (CraftEventFactory.callRedstoneChange(worldIn, pos.getX(), pos.getY(), pos.getZ(), 15, 0).getNewCurrent() != 0) {
+                    return;
+                }
+                // CraftBukkit end
                 worldIn.setBlockState(pos, Blocks.redstone_lamp.getDefaultState(), 2);
             }
         }
     }
 
-    public Item getItemDropped(IBlockState state, Random rand, int fortune)
-    {
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
         return Item.getItemFromBlock(Blocks.redstone_lamp);
     }
 
-    @SideOnly(Side.CLIENT)
-    public Item getItem(World worldIn, BlockPos pos)
-    {
-        return Item.getItemFromBlock(Blocks.redstone_lamp);
-    }
-
-    protected ItemStack createStackedBlock(IBlockState state)
-    {
+    protected ItemStack createStackedBlock(IBlockState state) {
         return new ItemStack(Blocks.redstone_lamp);
     }
-}
+}
