--- decompiled\net\minecraft\block\BlockLever.java
+++ src\main\java\net\minecraft\block\BlockLever.java
@@ -1,8 +1,9 @@
 package net.minecraft.block;
 
 import java.util.Iterator;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyBool;
 import net.minecraft.block.properties.PropertyEnum;
 import net.minecraft.block.state.BlockState;
@@ -15,12 +16,15 @@
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.IStringSerializable;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 
+import org.bukkit.event.block.BlockRedstoneEvent;
+
 public class BlockLever extends Block
 {
+
     public static final PropertyEnum FACING = PropertyEnum.create("facing", BlockLever.EnumOrientation.class);
     public static final PropertyBool POWERED = PropertyBool.create("powered");
     private static final String __OBFID = "CL_00000264";
 
     protected BlockLever()
@@ -173,10 +177,24 @@
         {
             return true;
         }
         else
         {
+            // CraftBukkit start - Interact Lever
+            boolean powered = (Boolean)state.getValue(POWERED);
+            org.bukkit.block.Block block = worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+            int old = (powered) ? 15 : 0;
+            int current = (!powered) ? 15 : 0;
+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, old, current);
+            worldIn.getServer().getPluginManager().callEvent(eventRedstone);
+
+            if ((eventRedstone.getNewCurrent() > 0) != (!powered))
+            {
+                return true;
+            }
+
+            // CraftBukkit end
             state = state.cycleProperty(POWERED);
             worldIn.setBlockState(pos, state, 3);
             worldIn.playSoundEffect((double)pos.getX() + 0.5D, (double)pos.getY() + 0.5D, (double)pos.getZ() + 0.5D, "random.click", 0.3F, ((Boolean)state.getValue(POWERED)).booleanValue() ? 0.6F : 0.5F);
             worldIn.notifyNeighborsOfStateChange(pos, this);
             EnumFacing enumfacing1 = ((BlockLever.EnumOrientation)state.getValue(FACING)).getFacing();
@@ -287,29 +305,33 @@
         public static BlockLever.EnumOrientation forFacings(EnumFacing clickedSide, EnumFacing entityFacing)
         {
             switch (BlockLever.SwitchEnumFacing.FACING_LOOKUP[clickedSide.ordinal()])
             {
                 case 1:
+
                     switch (BlockLever.SwitchEnumFacing.AXIS_LOOKUP[entityFacing.getAxis().ordinal()])
                     {
                         case 1:
                             return DOWN_X;
                         case 2:
                             return DOWN_Z;
                         default:
                             throw new IllegalArgumentException("Invalid entityFacing " + entityFacing + " for facing " + clickedSide);
                     }
+
                 case 2:
+
                     switch (BlockLever.SwitchEnumFacing.AXIS_LOOKUP[entityFacing.getAxis().ordinal()])
                     {
                         case 1:
                             return UP_X;
                         case 2:
                             return UP_Z;
                         default:
                             throw new IllegalArgumentException("Invalid entityFacing " + entityFacing + " for facing " + clickedSide);
                     }
+
                 case 3:
                     return NORTH;
                 case 4:
                     return SOUTH;
                 case 5:
@@ -339,10 +361,11 @@
         }
     }
 
     static final class SwitchEnumFacing
         {
+
             static final int[] FACING_LOOKUP;
 
             static final int[] ORIENTATION_LOOKUP;
 
             static final int[] AXIS_LOOKUP = new int[EnumFacing.Axis.values().length];
