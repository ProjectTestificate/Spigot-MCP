---a/net/minecraft/block/BlockSapling.java
+++b/net/minecraft/block/BlockSapling.java
@@ -2,6 +2,7 @@
 
 import java.util.List;
 import java.util.Random;
+
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyEnum;
 import net.minecraft.block.properties.PropertyInteger;
@@ -9,8 +9,6 @@
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.init.Blocks;
-import net.minecraft.item.Item;
-import net.minecraft.item.ItemStack;
 import net.minecraft.util.BlockPos;
 import net.minecraft.world.World;
 import net.minecraft.world.gen.feature.WorldGenBigTree;
@@ -22,62 +22,86 @@
 import net.minecraft.world.gen.feature.WorldGenTaiga2;
 import net.minecraft.world.gen.feature.WorldGenTrees;
 import net.minecraft.world.gen.feature.WorldGenerator;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockSapling extends BlockBush implements IGrowable
-{
+import org.bukkit.Location;
+import org.bukkit.TreeType;
+import org.bukkit.event.world.StructureGrowEvent;
+
+public class BlockSapling extends BlockBush implements IGrowable {
+
     public static final PropertyEnum TYPE = PropertyEnum.create("type", BlockPlanks.EnumType.class);
     public static final PropertyInteger STAGE = PropertyInteger.create("stage", 0, 1);
+    public static TreeType treeType; // CraftBukkit
     private static final String __OBFID = "CL_00000305";
 
-    protected BlockSapling()
-    {
+    protected BlockSapling() {
         this.setDefaultState(this.blockState.getBaseState().withProperty(TYPE, BlockPlanks.EnumType.OAK).withProperty(STAGE, Integer.valueOf(0)));
         float f = 0.4F;
         this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, f * 2.0F, 0.5F + f);
         this.setCreativeTab(CreativeTabs.tabDecorations);
     }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        if (!worldIn.isRemote)
-        {
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
+        if (!worldIn.isRemote) {
             super.updateTick(worldIn, pos, state, rand);
 
-            if (worldIn.getLightFromNeighbors(pos.up()) >= 9 && rand.nextInt(7) == 0)
-            {
+            if (worldIn.getLightFromNeighbors(pos.up()) >= 9 && rand.nextInt(7) == 0) {
+                // CraftBukkit start
+                worldIn.captureTreeGeneration = true;
+                // CraftBukkit end
                 this.grow(worldIn, pos, state, rand);
+                // CraftBukkit start
+                worldIn.captureTreeGeneration = false;
+                if (worldIn.capturedBlockStates.size() > 0) {
+                    TreeType treeType = BlockSapling.treeType;
+                    BlockSapling.treeType = null;
+                    Location location = new Location(worldIn.getWorld(), pos.getX(), pos.getY(), pos.getZ());
+                    List<org.bukkit.block.BlockState> blocks = (List<org.bukkit.block.BlockState>) worldIn.capturedBlockStates.clone();
+                    worldIn.capturedBlockStates.clear();
+                    StructureGrowEvent event = null;
+                    if (treeType != null) {
+                        event = new StructureGrowEvent(location, treeType, false, null, blocks);
+                        org.bukkit.Bukkit.getPluginManager().callEvent(event);
+                    }
+                    if (event == null || !event.isCancelled()) {
+                        for (org.bukkit.block.BlockState blockstate : blocks) {
+                            blockstate.update(true);
+                        }
+                    }
+                }
+                // CraftBukkit end
             }
         }
     }
 
-    public void grow(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        if (((Integer)state.getValue(STAGE)).intValue() == 0)
-        {
+    public void grow(World worldIn, BlockPos pos, IBlockState state, Random rand) {
+        if (((Integer) state.getValue(STAGE)).intValue() == 0) {
             worldIn.setBlockState(pos, state.cycleProperty(STAGE), 4);
-        }
-        else
-        {
+        } else {
             this.generateTree(worldIn, pos, state, rand);
         }
     }
 
-    public void generateTree(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        Object object = rand.nextInt(10) == 0 ? new WorldGenBigTree(true) : new WorldGenTrees(true);
+    public void generateTree(World worldIn, BlockPos pos, IBlockState state, Random rand) {
+        // CraftBukkit start - Turn ternary operator into if statement to set treeType
+        // Object object = rand.nextInt(10) == 0 ? new WorldGenBigTree(true) : new WorldGenTrees(true);
+        Object object;
+        if (rand.nextInt(10) == 0) {
+            treeType = TreeType.BIG_TREE;
+            object = new WorldGenBigTree(true);
+        } else {
+            treeType = TreeType.TREE;
+            object = new WorldGenTrees(true);
+        }
+        // CraftBukkit end
         int i = 0;
         int j = 0;
         boolean flag = false;
 
-        switch (BlockSapling.SwitchEnumType.WOOD_TYPE_LOOKUP[((BlockPlanks.EnumType)state.getValue(TYPE)).ordinal()])
-        {
+        switch (BlockSapling.SwitchEnumType.WOOD_TYPE_LOOKUP[((BlockPlanks.EnumType) state.getValue(TYPE)).ordinal()]) {
             case 1:
                 label78:
 
-                for (i = 0; i >= -1; --i)
-                {
-                    for (j = 0; j >= -1; --j)
-                    {
-                        if (this.isTypeAt(worldIn, pos.add(i, 0, j), BlockPlanks.EnumType.SPRUCE) && this.isTypeAt(worldIn, pos.add(i + 1, 0, j), BlockPlanks.EnumType.SPRUCE) && this.isTypeAt(worldIn, pos.add(i, 0, j + 1), BlockPlanks.EnumType.SPRUCE) && this.isTypeAt(worldIn, pos.add(i + 1, 0, j + 1), BlockPlanks.EnumType.SPRUCE))
-                        {
+                for (i = 0; i >= -1; --i) {
+                    for (j = 0; j >= -1; --j) {
+                        if (this.isTypeAt(worldIn, pos.add(i, 0, j), BlockPlanks.EnumType.SPRUCE) && this.isTypeAt(worldIn, pos.add(i + 1, 0, j), BlockPlanks.EnumType.SPRUCE) && this.isTypeAt(worldIn, pos.add(i, 0, j + 1), BlockPlanks.EnumType.SPRUCE) && this.isTypeAt(worldIn, pos.add(i + 1, 0, j + 1), BlockPlanks.EnumType.SPRUCE)) {
+                            treeType = TreeType.MEGA_REDWOOD; // CraftBukkit
                             object = new WorldGenMegaPineTree(false, rand.nextBoolean());
                             flag = true;
                             break label78;
@@ -89,22 +89,22 @@
                     }
                 }
 
-                if (!flag)
-                {
+                if (!flag) {
                     j = 0;
                     i = 0;
+                    treeType = TreeType.REDWOOD; // CraftBukkit
                     object = new WorldGenTaiga2(true);
                 }
 
                 break;
             case 2:
+                treeType = TreeType.BIRCH; // CraftBukkit
                 object = new WorldGenForest(true, false);
                 break;
             case 3:
                 label93:
 
-                for (i = 0; i >= -1; --i)
-                {
-                    for (j = 0; j >= -1; --j)
-                    {
-                        if (this.isTypeAt(worldIn, pos.add(i, 0, j), BlockPlanks.EnumType.JUNGLE) && this.isTypeAt(worldIn, pos.add(i + 1, 0, j), BlockPlanks.EnumType.JUNGLE) && this.isTypeAt(worldIn, pos.add(i, 0, j + 1), BlockPlanks.EnumType.JUNGLE) && this.isTypeAt(worldIn, pos.add(i + 1, 0, j + 1), BlockPlanks.EnumType.JUNGLE))
-                        {
+                for (i = 0; i >= -1; --i) {
+                    for (j = 0; j >= -1; --j) {
+                        if (this.isTypeAt(worldIn, pos.add(i, 0, j), BlockPlanks.EnumType.JUNGLE) && this.isTypeAt(worldIn, pos.add(i + 1, 0, j), BlockPlanks.EnumType.JUNGLE) && this.isTypeAt(worldIn, pos.add(i, 0, j + 1), BlockPlanks.EnumType.JUNGLE) && this.isTypeAt(worldIn, pos.add(i + 1, 0, j + 1), BlockPlanks.EnumType.JUNGLE)) {
+                            treeType = TreeType.JUNGLE; // CraftBukkit
                             object = new WorldGenMegaJungle(true, 10, 20, BlockPlanks.EnumType.JUNGLE.getMetadata(), BlockPlanks.EnumType.JUNGLE.getMetadata());
                             flag = true;
                             break label93;
@@ -116,22 +116,22 @@
                     }
                 }
 
-                if (!flag)
-                {
+                if (!flag) {
                     j = 0;
                     i = 0;
+                    treeType = TreeType.SMALL_JUNGLE; // CraftBukkit
                     object = new WorldGenTrees(true, 4 + rand.nextInt(7), BlockPlanks.EnumType.JUNGLE.getMetadata(), BlockPlanks.EnumType.JUNGLE.getMetadata(), false);
                 }
 
                 break;
             case 4:
+                treeType = TreeType.ACACIA; // CraftBukki
                 object = new WorldGenSavannaTree(true);
                 break;
             case 5:
                 label108:
 
-                for (i = 0; i >= -1; --i)
-                {
-                    for (j = 0; j >= -1; --j)
-                    {
-                        if (this.isTypeAt(worldIn, pos.add(i, 0, j), BlockPlanks.EnumType.DARK_OAK) && this.isTypeAt(worldIn, pos.add(i + 1, 0, j), BlockPlanks.EnumType.DARK_OAK) && this.isTypeAt(worldIn, pos.add(i, 0, j + 1), BlockPlanks.EnumType.DARK_OAK) && this.isTypeAt(worldIn, pos.add(i + 1, 0, j + 1), BlockPlanks.EnumType.DARK_OAK))
-                        {
+                for (i = 0; i >= -1; --i) {
+                    for (j = 0; j >= -1; --j) {
+                        if (this.isTypeAt(worldIn, pos.add(i, 0, j), BlockPlanks.EnumType.DARK_OAK) && this.isTypeAt(worldIn, pos.add(i + 1, 0, j), BlockPlanks.EnumType.DARK_OAK) && this.isTypeAt(worldIn, pos.add(i, 0, j + 1), BlockPlanks.EnumType.DARK_OAK) && this.isTypeAt(worldIn, pos.add(i + 1, 0, j + 1), BlockPlanks.EnumType.DARK_OAK)) {
+                            treeType = TreeType.DARK_OAK; // CraftBukkit
                             object = new WorldGenCanopyTree(true);
                             flag = true;
                             break label108;
@@ -143,8 +143,7 @@
                     }
                 }
 
-                if (!flag)
-                {
+                if (!flag) {
                     return;
                 }
             case 6:
@@ -152,152 +152,104 @@
 
         IBlockState iblockstate1 = Blocks.air.getDefaultState();
 
-        if (flag)
-        {
+        if (flag) {
             worldIn.setBlockState(pos.add(i, 0, j), iblockstate1, 4);
             worldIn.setBlockState(pos.add(i + 1, 0, j), iblockstate1, 4);
             worldIn.setBlockState(pos.add(i, 0, j + 1), iblockstate1, 4);
             worldIn.setBlockState(pos.add(i + 1, 0, j + 1), iblockstate1, 4);
-        }
-        else
-        {
+        } else {
             worldIn.setBlockState(pos, iblockstate1, 4);
         }
 
-        if (!((WorldGenerator)object).generate(worldIn, rand, pos.add(i, 0, j)))
-        {
-            if (flag)
-            {
+        if (!((WorldGenerator) object).generate(worldIn, rand, pos.add(i, 0, j))) {
+            if (flag) {
                 worldIn.setBlockState(pos.add(i, 0, j), state, 4);
                 worldIn.setBlockState(pos.add(i + 1, 0, j), state, 4);
                 worldIn.setBlockState(pos.add(i, 0, j + 1), state, 4);
                 worldIn.setBlockState(pos.add(i + 1, 0, j + 1), state, 4);
-            }
-            else
-            {
+            } else {
                 worldIn.setBlockState(pos, state, 4);
             }
         }
     }
 
-    public boolean isTypeAt(World worldIn, BlockPos pos, BlockPlanks.EnumType type)
-    {
+    public boolean isTypeAt(World worldIn, BlockPos pos, BlockPlanks.EnumType type) {
         IBlockState iblockstate = worldIn.getBlockState(pos);
         return iblockstate.getBlock() == this && iblockstate.getValue(TYPE) == type;
     }
 
-    public int damageDropped(IBlockState state)
-    {
-        return ((BlockPlanks.EnumType)state.getValue(TYPE)).getMetadata();
+    public int damageDropped(IBlockState state) {
+        return ((BlockPlanks.EnumType) state.getValue(TYPE)).getMetadata();
     }
 
-    @SideOnly(Side.CLIENT)
-    public void getSubBlocks(Item itemIn, CreativeTabs tab, List list)
-    {
-        BlockPlanks.EnumType[] aenumtype = BlockPlanks.EnumType.values();
-        int i = aenumtype.length;
-
-        for (int j = 0; j < i; ++j)
-        {
-            BlockPlanks.EnumType enumtype = aenumtype[j];
-            list.add(new ItemStack(itemIn, 1, enumtype.getMetadata()));
-        }
-    }
-
-    public boolean canGrow(World worldIn, BlockPos pos, IBlockState state, boolean isClient)
-    {
+    public boolean canGrow(World worldIn, BlockPos pos, IBlockState state, boolean isClient) {
         return true;
     }
 
-    public boolean canUseBonemeal(World worldIn, Random rand, BlockPos pos, IBlockState state)
-    {
-        return (double)worldIn.rand.nextFloat() < 0.45D;
+    public boolean canUseBonemeal(World worldIn, Random rand, BlockPos pos, IBlockState state) {
+        return (double) worldIn.rand.nextFloat() < 0.45D;
     }
 
-    public void grow(World worldIn, Random rand, BlockPos pos, IBlockState state)
-    {
+    public void grow(World worldIn, Random rand, BlockPos pos, IBlockState state) {
         this.grow(worldIn, pos, state, rand);
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(TYPE, BlockPlanks.EnumType.byMetadata(meta & 7)).withProperty(STAGE, Integer.valueOf((meta & 8) >> 3));
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
+    public int getMetaFromState(IBlockState state) {
         byte b0 = 0;
-        int i = b0 | ((BlockPlanks.EnumType)state.getValue(TYPE)).getMetadata();
-        i |= ((Integer)state.getValue(STAGE)).intValue() << 3;
+        int i = b0 | ((BlockPlanks.EnumType) state.getValue(TYPE)).getMetadata();
+        i |= ((Integer) state.getValue(STAGE)).intValue() << 3;
         return i;
     }
 
-    protected BlockState createBlockState()
-    {
-        return new BlockState(this, new IProperty[] {TYPE, STAGE});
+    protected BlockState createBlockState() {
+        return new BlockState(this, new IProperty[]{TYPE, STAGE});
     }
 
-    static final class SwitchEnumType
-        {
-            static final int[] WOOD_TYPE_LOOKUP = new int[BlockPlanks.EnumType.values().length];
-            private static final String __OBFID = "CL_00002067";
+    // CraftBukkit - imported for visibility // SpigotMCP NOTE -- Uneaded with mcp mappings
+    static final class SwitchEnumType {
 
-            static
-            {
-                try
-                {
-                    WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.SPRUCE.ordinal()] = 1;
-                }
-                catch (NoSuchFieldError var6)
-                {
-                    ;
-                }
+        static final int[] WOOD_TYPE_LOOKUP = new int[BlockPlanks.EnumType.values().length];
+        private static final String __OBFID = "CL_00002067";
 
-                try
-                {
-                    WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.BIRCH.ordinal()] = 2;
-                }
-                catch (NoSuchFieldError var5)
-                {
-                    ;
-                }
+        static {
+            try {
+                WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.SPRUCE.ordinal()] = 1;
+            } catch (NoSuchFieldError var6) {
+                ;
+            }
 
-                try
-                {
-                    WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.JUNGLE.ordinal()] = 3;
-                }
-                catch (NoSuchFieldError var4)
-                {
-                    ;
-                }
+            try {
+                WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.BIRCH.ordinal()] = 2;
+            } catch (NoSuchFieldError var5) {
+                ;
+            }
 
-                try
-                {
-                    WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.ACACIA.ordinal()] = 4;
-                }
-                catch (NoSuchFieldError var3)
-                {
-                    ;
-                }
+            try {
+                WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.JUNGLE.ordinal()] = 3;
+            } catch (NoSuchFieldError var4) {
+                ;
+            }
 
-                try
-                {
-                    WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.DARK_OAK.ordinal()] = 5;
-                }
-                catch (NoSuchFieldError var2)
-                {
-                    ;
-                }
+            try {
+                WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.ACACIA.ordinal()] = 4;
+            } catch (NoSuchFieldError var3) {
+                ;
+            }
 
-                try
-                {
-                    WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.OAK.ordinal()] = 6;
-                }
-                catch (NoSuchFieldError var1)
-                {
-                    ;
-                }
+            try {
+                WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.DARK_OAK.ordinal()] = 5;
+            } catch (NoSuchFieldError var2) {
+                ;
             }
+
+            try {
+                WOOD_TYPE_LOOKUP[BlockPlanks.EnumType.OAK.ordinal()] = 6;
+            } catch (NoSuchFieldError var1) {
+                ;
+            }
         }
-}
+    }
+}
