--- decompiled\net\minecraft\block\BlockSapling.java
+++ src\main\java\net\minecraft\block\BlockSapling.java
@@ -1,18 +1,17 @@
 package net.minecraft.block;
 
 import java.util.List;
 import java.util.Random;
+
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyEnum;
 import net.minecraft.block.properties.PropertyInteger;
 import net.minecraft.block.state.BlockState;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.init.Blocks;
-import net.minecraft.item.Item;
-import net.minecraft.item.ItemStack;
 import net.minecraft.util.BlockPos;
 import net.minecraft.world.World;
 import net.minecraft.world.gen.feature.WorldGenBigTree;
 import net.minecraft.world.gen.feature.WorldGenCanopyTree;
 import net.minecraft.world.gen.feature.WorldGenForest;
@@ -20,17 +19,21 @@
 import net.minecraft.world.gen.feature.WorldGenMegaPineTree;
 import net.minecraft.world.gen.feature.WorldGenSavannaTree;
 import net.minecraft.world.gen.feature.WorldGenTaiga2;
 import net.minecraft.world.gen.feature.WorldGenTrees;
 import net.minecraft.world.gen.feature.WorldGenerator;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import org.bukkit.Location;
+import org.bukkit.TreeType;
+import org.bukkit.event.world.StructureGrowEvent;
+
 public class BlockSapling extends BlockBush implements IGrowable
 {
+
     public static final PropertyEnum TYPE = PropertyEnum.create("type", BlockPlanks.EnumType.class);
     public static final PropertyInteger STAGE = PropertyInteger.create("stage", 0, 1);
+    public static TreeType treeType; // CraftBukkit
     private static final String __OBFID = "CL_00000305";
 
     protected BlockSapling()
     {
         this.setDefaultState(this.blockState.getBaseState().withProperty(TYPE, BlockPlanks.EnumType.OAK).withProperty(STAGE, Integer.valueOf(0)));
@@ -45,11 +48,42 @@
         {
             super.updateTick(worldIn, pos, state, rand);
 
             if (worldIn.getLightFromNeighbors(pos.up()) >= 9 && rand.nextInt(7) == 0)
             {
+                // CraftBukkit start
+                worldIn.captureTreeGeneration = true;
+                // CraftBukkit end
                 this.grow(worldIn, pos, state, rand);
+                // CraftBukkit start
+                worldIn.captureTreeGeneration = false;
+
+                if (worldIn.capturedBlockStates.size() > 0)
+                {
+                    TreeType treeType = BlockSapling.treeType;
+                    BlockSapling.treeType = null;
+                    Location location = new Location(worldIn.getWorld(), pos.getX(), pos.getY(), pos.getZ());
+                    List<org.bukkit.block.BlockState> blocks = (List<org.bukkit.block.BlockState>)worldIn.capturedBlockStates.clone();
+                    worldIn.capturedBlockStates.clear();
+                    StructureGrowEvent event = null;
+
+                    if (treeType != null)
+                    {
+                        event = new StructureGrowEvent(location, treeType, false, null, blocks);
+                        org.bukkit.Bukkit.getPluginManager().callEvent(event);
+                    }
+
+                    if (event == null || !event.isCancelled())
+                    {
+                        for (org.bukkit.block.BlockState blockstate : blocks)
+                        {
+                            blockstate.update(true);
+                        }
+                    }
+                }
+
+                // CraftBukkit end
             }
         }
     }
 
     public void grow(World worldIn, BlockPos pos, IBlockState state, Random rand)
@@ -64,11 +98,26 @@
         }
     }
 
     public void generateTree(World worldIn, BlockPos pos, IBlockState state, Random rand)
     {
-        Object object = rand.nextInt(10) == 0 ? new WorldGenBigTree(true) : new WorldGenTrees(true);
+        // CraftBukkit start - Turn ternary operator into if statement to set treeType
+        // Object object = rand.nextInt(10) == 0 ? new WorldGenBigTree(true) : new WorldGenTrees(true);
+        Object object;
+
+        if (rand.nextInt(10) == 0)
+        {
+            treeType = TreeType.BIG_TREE;
+            object = new WorldGenBigTree(true);
+        }
+        else
+        {
+            treeType = TreeType.TREE;
+            object = new WorldGenTrees(true);
+        }
+
+        // CraftBukkit end
         int i = 0;
         int j = 0;
         boolean flag = false;
 
         switch (BlockSapling.SwitchEnumType.WOOD_TYPE_LOOKUP[((BlockPlanks.EnumType)state.getValue(TYPE)).ordinal()])
@@ -80,10 +129,11 @@
                 {
                     for (j = 0; j >= -1; --j)
                     {
                         if (this.isTypeAt(worldIn, pos.add(i, 0, j), BlockPlanks.EnumType.SPRUCE) && this.isTypeAt(worldIn, pos.add(i + 1, 0, j), BlockPlanks.EnumType.SPRUCE) && this.isTypeAt(worldIn, pos.add(i, 0, j + 1), BlockPlanks.EnumType.SPRUCE) && this.isTypeAt(worldIn, pos.add(i + 1, 0, j + 1), BlockPlanks.EnumType.SPRUCE))
                         {
+                            treeType = TreeType.MEGA_REDWOOD; // CraftBukkit
                             object = new WorldGenMegaPineTree(false, rand.nextBoolean());
                             flag = true;
                             break label78;
                         }
                     }
@@ -91,15 +141,17 @@
 
                 if (!flag)
                 {
                     j = 0;
                     i = 0;
+                    treeType = TreeType.REDWOOD; // CraftBukkit
                     object = new WorldGenTaiga2(true);
                 }
 
                 break;
             case 2:
+                treeType = TreeType.BIRCH; // CraftBukkit
                 object = new WorldGenForest(true, false);
                 break;
             case 3:
                 label93:
 
@@ -107,10 +159,11 @@
                 {
                     for (j = 0; j >= -1; --j)
                     {
                         if (this.isTypeAt(worldIn, pos.add(i, 0, j), BlockPlanks.EnumType.JUNGLE) && this.isTypeAt(worldIn, pos.add(i + 1, 0, j), BlockPlanks.EnumType.JUNGLE) && this.isTypeAt(worldIn, pos.add(i, 0, j + 1), BlockPlanks.EnumType.JUNGLE) && this.isTypeAt(worldIn, pos.add(i + 1, 0, j + 1), BlockPlanks.EnumType.JUNGLE))
                         {
+                            treeType = TreeType.JUNGLE; // CraftBukkit
                             object = new WorldGenMegaJungle(true, 10, 20, BlockPlanks.EnumType.JUNGLE.getMetadata(), BlockPlanks.EnumType.JUNGLE.getMetadata());
                             flag = true;
                             break label93;
                         }
                     }
@@ -118,15 +171,17 @@
 
                 if (!flag)
                 {
                     j = 0;
                     i = 0;
+                    treeType = TreeType.SMALL_JUNGLE; // CraftBukkit
                     object = new WorldGenTrees(true, 4 + rand.nextInt(7), BlockPlanks.EnumType.JUNGLE.getMetadata(), BlockPlanks.EnumType.JUNGLE.getMetadata(), false);
                 }
 
                 break;
             case 4:
+                treeType = TreeType.ACACIA; // CraftBukki
                 object = new WorldGenSavannaTree(true);
                 break;
             case 5:
                 label108:
 
@@ -134,10 +189,11 @@
                 {
                     for (j = 0; j >= -1; --j)
                     {
                         if (this.isTypeAt(worldIn, pos.add(i, 0, j), BlockPlanks.EnumType.DARK_OAK) && this.isTypeAt(worldIn, pos.add(i + 1, 0, j), BlockPlanks.EnumType.DARK_OAK) && this.isTypeAt(worldIn, pos.add(i, 0, j + 1), BlockPlanks.EnumType.DARK_OAK) && this.isTypeAt(worldIn, pos.add(i + 1, 0, j + 1), BlockPlanks.EnumType.DARK_OAK))
                         {
+                            treeType = TreeType.DARK_OAK; // CraftBukkit
                             object = new WorldGenCanopyTree(true);
                             flag = true;
                             break label108;
                         }
                     }
@@ -145,10 +201,11 @@
 
                 if (!flag)
                 {
                     return;
                 }
+
             case 6:
         }
 
         IBlockState iblockstate1 = Blocks.air.getDefaultState();
 
@@ -189,23 +246,10 @@
     public int damageDropped(IBlockState state)
     {
         return ((BlockPlanks.EnumType)state.getValue(TYPE)).getMetadata();
     }
 
-    @SideOnly(Side.CLIENT)
-    public void getSubBlocks(Item itemIn, CreativeTabs tab, List list)
-    {
-        BlockPlanks.EnumType[] aenumtype = BlockPlanks.EnumType.values();
-        int i = aenumtype.length;
-
-        for (int j = 0; j < i; ++j)
-        {
-            BlockPlanks.EnumType enumtype = aenumtype[j];
-            list.add(new ItemStack(itemIn, 1, enumtype.getMetadata()));
-        }
-    }
-
     public boolean canGrow(World worldIn, BlockPos pos, IBlockState state, boolean isClient)
     {
         return true;
     }
 
@@ -235,12 +279,14 @@
     protected BlockState createBlockState()
     {
         return new BlockState(this, new IProperty[] {TYPE, STAGE});
     }
 
+    // CraftBukkit - imported for visibility // SpigotMCP NOTE -- Uneaded with mcp mappings
     static final class SwitchEnumType
         {
+
             static final int[] WOOD_TYPE_LOOKUP = new int[BlockPlanks.EnumType.values().length];
             private static final String __OBFID = "CL_00002067";
 
             static
             {
