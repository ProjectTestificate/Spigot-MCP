---a/net/minecraft/block/BlockRedstoneWire.java
+++b/net/minecraft/block/BlockRedstoneWire.java
@@ -1,14 +1,10 @@
 package net.minecraft.block;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Sets;
 import java.util.ArrayList;
 import java.util.EnumSet;
 import java.util.Iterator;
 import java.util.Random;
 import java.util.Set;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyEnum;
@@ -19,17 +19,10 @@
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumParticleTypes;
-import net.minecraft.util.EnumWorldBlockLayer;
 import net.minecraft.util.IStringSerializable;
-import net.minecraft.util.MathHelper;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockRedstoneWire extends Block
-{
+import org.bukkit.event.block.BlockRedstoneEvent;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Sets;
+
+public class BlockRedstoneWire extends Block {
+
     public static final PropertyEnum NORTH = PropertyEnum.create("north", BlockRedstoneWire.EnumAttachPosition.class);
     public static final PropertyEnum EAST = PropertyEnum.create("east", BlockRedstoneWire.EnumAttachPosition.class);
     public static final PropertyEnum SOUTH = PropertyEnum.create("south", BlockRedstoneWire.EnumAttachPosition.class);
@@ -39,15 +39,13 @@
     private final Set blocksNeedingUpdate = Sets.newHashSet();
     private static final String __OBFID = "CL_00000295";
 
-    public BlockRedstoneWire()
-    {
+    public BlockRedstoneWire() {
         super(Material.circuits);
         this.setDefaultState(this.blockState.getBaseState().withProperty(NORTH, BlockRedstoneWire.EnumAttachPosition.NONE).withProperty(EAST, BlockRedstoneWire.EnumAttachPosition.NONE).withProperty(SOUTH, BlockRedstoneWire.EnumAttachPosition.NONE).withProperty(WEST, BlockRedstoneWire.EnumAttachPosition.NONE).withProperty(POWER, Integer.valueOf(0)));
         this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.0625F, 1.0F);
     }
 
-    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos)
-    {
+    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos) {
         state = state.withProperty(WEST, this.getAttachPosition(worldIn, pos, EnumFacing.WEST));
         state = state.withProperty(EAST, this.getAttachPosition(worldIn, pos, EnumFacing.EAST));
         state = state.withProperty(NORTH, this.getAttachPosition(worldIn, pos, EnumFacing.NORTH));
@@ -55,131 +55,107 @@
         return state;
     }
 
-    private BlockRedstoneWire.EnumAttachPosition getAttachPosition(IBlockAccess worldIn, BlockPos pos, EnumFacing direction)
-    {
+    private BlockRedstoneWire.EnumAttachPosition getAttachPosition(IBlockAccess worldIn, BlockPos pos, EnumFacing direction) {
         BlockPos blockpos1 = pos.offset(direction);
         Block block = worldIn.getBlockState(pos.offset(direction)).getBlock();
 
-        if (!canConnectTo(worldIn.getBlockState(blockpos1), direction) && (block.isSolidFullCube() || !canConnectUpwardsTo(worldIn.getBlockState(blockpos1.down()))))
-        {
+        if (!canConnectTo(worldIn.getBlockState(blockpos1), direction) && (block.isSolidFullCube() || !canConnectUpwardsTo(worldIn.getBlockState(blockpos1.down())))) {
             Block block1 = worldIn.getBlockState(pos.up()).getBlock();
             return !block1.isSolidFullCube() && block.isSolidFullCube() && canConnectUpwardsTo(worldIn.getBlockState(blockpos1.up())) ? BlockRedstoneWire.EnumAttachPosition.UP : BlockRedstoneWire.EnumAttachPosition.NONE;
-        }
-        else
-        {
+        } else {
             return BlockRedstoneWire.EnumAttachPosition.SIDE;
         }
     }
 
-    public AxisAlignedBB getCollisionBoundingBox(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public AxisAlignedBB getCollisionBoundingBox(World worldIn, BlockPos pos, IBlockState state) {
         return null;
     }
 
-    public boolean isOpaqueCube()
-    {
+    public boolean isOpaqueCube() {
         return false;
     }
 
-    public boolean isFullCube()
-    {
+    public boolean isFullCube() {
         return false;
     }
 
-    @SideOnly(Side.CLIENT)
-    public int colorMultiplier(IBlockAccess worldIn, BlockPos pos, int renderPass)
-    {
-        IBlockState iblockstate = worldIn.getBlockState(pos);
-        return iblockstate.getBlock() != this ? super.colorMultiplier(worldIn, pos, renderPass) : this.colorMultiplier(((Integer)iblockstate.getValue(POWER)).intValue());
-    }
-
-    public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
-    {
+    public boolean canPlaceBlockAt(World worldIn, BlockPos pos) {
         return World.doesBlockHaveSolidTopSurface(worldIn, pos.down()) || worldIn.getBlockState(pos.down()).getBlock() == Blocks.glowstone;
     }
 
-    private IBlockState updateSurroundingRedstone(World worldIn, BlockPos pos, IBlockState state)
-    {
+    private IBlockState updateSurroundingRedstone(World worldIn, BlockPos pos, IBlockState state) {
         state = this.calculateCurrentChanges(worldIn, pos, pos, state);
         ArrayList arraylist = Lists.newArrayList(this.blocksNeedingUpdate);
         this.blocksNeedingUpdate.clear();
         Iterator iterator = arraylist.iterator();
 
-        while (iterator.hasNext())
-        {
-            BlockPos blockpos1 = (BlockPos)iterator.next();
+        while (iterator.hasNext()) {
+            BlockPos blockpos1 = (BlockPos) iterator.next();
             worldIn.notifyNeighborsOfStateChange(blockpos1, this);
         }
 
         return state;
     }
 
-    private IBlockState calculateCurrentChanges(World worldIn, BlockPos pos1, BlockPos pos2, IBlockState state)
-    {
+    private IBlockState calculateCurrentChanges(World worldIn, BlockPos pos1, BlockPos pos2, IBlockState state) {
         IBlockState iblockstate1 = state;
-        int i = ((Integer)state.getValue(POWER)).intValue();
+        int i = ((Integer) state.getValue(POWER)).intValue();
         byte b0 = 0;
         int l = this.getMaxCurrentStrength(worldIn, pos2, b0);
         this.canProvidePower = false;
         int j = worldIn.isBlockIndirectlyGettingPowered(pos1);
         this.canProvidePower = true;
 
-        if (j > 0 && j > l - 1)
-        {
+        if (j > 0 && j > l - 1) {
             l = j;
         }
 
         int k = 0;
         Iterator iterator = EnumFacing.Plane.HORIZONTAL.iterator();
 
-        while (iterator.hasNext())
-        {
-            EnumFacing enumfacing = (EnumFacing)iterator.next();
+        while (iterator.hasNext()) {
+            EnumFacing enumfacing = (EnumFacing) iterator.next();
             BlockPos blockpos2 = pos1.offset(enumfacing);
             boolean flag = blockpos2.getX() != pos2.getX() || blockpos2.getZ() != pos2.getZ();
 
-            if (flag)
-            {
+            if (flag) {
                 k = this.getMaxCurrentStrength(worldIn, blockpos2, k);
             }
 
-            if (worldIn.getBlockState(blockpos2).getBlock().isNormalCube() && !worldIn.getBlockState(pos1.up()).getBlock().isNormalCube())
-            {
-                if (flag && pos1.getY() >= pos2.getY())
-                {
+            if (worldIn.getBlockState(blockpos2).getBlock().isNormalCube() && !worldIn.getBlockState(pos1.up()).getBlock().isNormalCube()) {
+                if (flag && pos1.getY() >= pos2.getY()) {
                     k = this.getMaxCurrentStrength(worldIn, blockpos2.up(), k);
                 }
-            }
-            else if (!worldIn.getBlockState(blockpos2).getBlock().isNormalCube() && flag && pos1.getY() <= pos2.getY())
-            {
+            } else if (!worldIn.getBlockState(blockpos2).getBlock().isNormalCube() && flag && pos1.getY() <= pos2.getY()) {
                 k = this.getMaxCurrentStrength(worldIn, blockpos2.down(), k);
             }
         }
 
-        if (k > l)
-        {
+        if (k > l) {
             l = k - 1;
-        }
-        else if (l > 0)
-        {
+        } else if (l > 0) {
             --l;
-        }
-        else
-        {
+        } else {
             l = 0;
         }
 
-        if (j > l - 1)
-        {
+        if (j > l - 1) {
             l = j;
         }
 
-        if (i != l)
-        {
+        // CraftBukkit start
+        if (i != j) {
+            BlockRedstoneEvent event = new BlockRedstoneEvent(worldIn.getWorld().getBlockAt(pos1.getX(), pos1.getY(), pos1.getZ()), i, j);
+            worldIn.getServer().getPluginManager().callEvent(event);
+
+            j = event.getNewCurrent();
+        }
+        // CraftBukkit end
+
+        if (i != l) {
             state = state.withProperty(POWER, Integer.valueOf(l));
 
-            if (worldIn.getBlockState(pos1) == iblockstate1)
-            {
+            if (worldIn.getBlockState(pos1) == iblockstate1) {
                 worldIn.setBlockState(pos1, state, 2);
             }
 
@@ -187,8 +187,7 @@
             EnumFacing[] aenumfacing = EnumFacing.values();
             int i1 = aenumfacing.length;
 
-            for (int j1 = 0; j1 < i1; ++j1)
-            {
+            for (int j1 = 0; j1 < i1; ++j1) {
                 EnumFacing enumfacing1 = aenumfacing[j1];
                 this.blocksNeedingUpdate.add(pos1.offset(enumfacing1));
             }
@@ -197,76 +197,61 @@
         return state;
     }
 
-    private void notifyWireNeighborsOfStateChange(World worldIn, BlockPos pos)
-    {
-        if (worldIn.getBlockState(pos).getBlock() == this)
-        {
+    private void notifyWireNeighborsOfStateChange(World worldIn, BlockPos pos) {
+        if (worldIn.getBlockState(pos).getBlock() == this) {
             worldIn.notifyNeighborsOfStateChange(pos, this);
             EnumFacing[] aenumfacing = EnumFacing.values();
             int i = aenumfacing.length;
 
-            for (int j = 0; j < i; ++j)
-            {
+            for (int j = 0; j < i; ++j) {
                 EnumFacing enumfacing = aenumfacing[j];
                 worldIn.notifyNeighborsOfStateChange(pos.offset(enumfacing), this);
             }
         }
     }
 
-    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
-    {
-        if (!worldIn.isRemote)
-        {
+    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state) {
+        if (!worldIn.isRemote) {
             this.updateSurroundingRedstone(worldIn, pos, state);
             Iterator iterator = EnumFacing.Plane.VERTICAL.iterator();
             EnumFacing enumfacing;
 
-            while (iterator.hasNext())
-            {
-                enumfacing = (EnumFacing)iterator.next();
+            while (iterator.hasNext()) {
+                enumfacing = (EnumFacing) iterator.next();
                 worldIn.notifyNeighborsOfStateChange(pos.offset(enumfacing), this);
             }
 
             iterator = EnumFacing.Plane.HORIZONTAL.iterator();
 
-            while (iterator.hasNext())
-            {
-                enumfacing = (EnumFacing)iterator.next();
+            while (iterator.hasNext()) {
+                enumfacing = (EnumFacing) iterator.next();
                 this.notifyWireNeighborsOfStateChange(worldIn, pos.offset(enumfacing));
             }
 
             iterator = EnumFacing.Plane.HORIZONTAL.iterator();
 
-            while (iterator.hasNext())
-            {
-                enumfacing = (EnumFacing)iterator.next();
+            while (iterator.hasNext()) {
+                enumfacing = (EnumFacing) iterator.next();
                 BlockPos blockpos1 = pos.offset(enumfacing);
 
-                if (worldIn.getBlockState(blockpos1).getBlock().isNormalCube())
-                {
+                if (worldIn.getBlockState(blockpos1).getBlock().isNormalCube()) {
                     this.notifyWireNeighborsOfStateChange(worldIn, blockpos1.up());
-                }
-                else
-                {
+                } else {
                     this.notifyWireNeighborsOfStateChange(worldIn, blockpos1.down());
                 }
             }
         }
     }
 
-    public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public void breakBlock(World worldIn, BlockPos pos, IBlockState state) {
         super.breakBlock(worldIn, pos, state);
 
-        if (!worldIn.isRemote)
-        {
+        if (!worldIn.isRemote) {
             EnumFacing[] aenumfacing = EnumFacing.values();
             int i = aenumfacing.length;
 
-            for (int j = 0; j < i; ++j)
-            {
+            for (int j = 0; j < i; ++j) {
                 EnumFacing enumfacing = aenumfacing[j];
                 worldIn.notifyNeighborsOfStateChange(pos.offset(enumfacing), this);
             }
@@ -273,122 +273,89 @@
             Iterator iterator = EnumFacing.Plane.HORIZONTAL.iterator();
             EnumFacing enumfacing1;
 
-            while (iterator.hasNext())
-            {
-                enumfacing1 = (EnumFacing)iterator.next();
+            while (iterator.hasNext()) {
+                enumfacing1 = (EnumFacing) iterator.next();
                 this.notifyWireNeighborsOfStateChange(worldIn, pos.offset(enumfacing1));
             }
 
             iterator = EnumFacing.Plane.HORIZONTAL.iterator();
 
-            while (iterator.hasNext())
-            {
-                enumfacing1 = (EnumFacing)iterator.next();
+            while (iterator.hasNext()) {
+                enumfacing1 = (EnumFacing) iterator.next();
                 BlockPos blockpos1 = pos.offset(enumfacing1);
 
-                if (worldIn.getBlockState(blockpos1).getBlock().isNormalCube())
-                {
+                if (worldIn.getBlockState(blockpos1).getBlock().isNormalCube()) {
                     this.notifyWireNeighborsOfStateChange(worldIn, blockpos1.up());
-                }
-                else
-                {
+                } else {
                     this.notifyWireNeighborsOfStateChange(worldIn, blockpos1.down());
                 }
             }
         }
     }
 
-    private int getMaxCurrentStrength(World worldIn, BlockPos pos, int strength)
-    {
-        if (worldIn.getBlockState(pos).getBlock() != this)
-        {
+    public int getMaxCurrentStrength(World worldIn, BlockPos pos, int strength) { // SpigotMCP -- Apply access transformation
+        if (worldIn.getBlockState(pos).getBlock() != this) {
             return strength;
-        }
-        else
-        {
-            int j = ((Integer)worldIn.getBlockState(pos).getValue(POWER)).intValue();
+        } else {
+            int j = ((Integer) worldIn.getBlockState(pos).getValue(POWER)).intValue();
             return j > strength ? j : strength;
         }
     }
 
-    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock)
-    {
-        if (!worldIn.isRemote)
-        {
-            if (this.canPlaceBlockAt(worldIn, pos))
-            {
+    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock) {
+        if (!worldIn.isRemote) {
+            if (this.canPlaceBlockAt(worldIn, pos)) {
                 this.updateSurroundingRedstone(worldIn, pos, state);
-            }
-            else
-            {
+            } else {
                 this.dropBlockAsItem(worldIn, pos, state, 0);
                 worldIn.setBlockToAir(pos);
             }
         }
     }
 
-    public Item getItemDropped(IBlockState state, Random rand, int fortune)
-    {
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
         return Items.redstone;
     }
 
-    public int isProvidingStrongPower(IBlockAccess worldIn, BlockPos pos, IBlockState state, EnumFacing side)
-    {
+    public int isProvidingStrongPower(IBlockAccess worldIn, BlockPos pos, IBlockState state, EnumFacing side) {
         return !this.canProvidePower ? 0 : this.isProvidingWeakPower(worldIn, pos, state, side);
     }
 
-    public int isProvidingWeakPower(IBlockAccess worldIn, BlockPos pos, IBlockState state, EnumFacing side)
-    {
-        if (!this.canProvidePower)
-        {
+    public int isProvidingWeakPower(IBlockAccess worldIn, BlockPos pos, IBlockState state, EnumFacing side) {
+        if (!this.canProvidePower) {
             return 0;
-        }
-        else
-        {
-            int i = ((Integer)state.getValue(POWER)).intValue();
+        } else {
+            int i = ((Integer) state.getValue(POWER)).intValue();
 
-            if (i == 0)
-            {
+            if (i == 0) {
                 return 0;
-            }
-            else if (side == EnumFacing.UP)
-            {
+            } else if (side == EnumFacing.UP) {
                 return i;
-            }
-            else
-            {
+            } else {
                 EnumSet enumset = EnumSet.noneOf(EnumFacing.class);
                 Iterator iterator = EnumFacing.Plane.HORIZONTAL.iterator();
 
-                while (iterator.hasNext())
-                {
-                    EnumFacing enumfacing1 = (EnumFacing)iterator.next();
+                while (iterator.hasNext()) {
+                    EnumFacing enumfacing1 = (EnumFacing) iterator.next();
 
-                    if (this.func_176339_d(worldIn, pos, enumfacing1))
-                    {
+                    if (this.func_176339_d(worldIn, pos, enumfacing1)) {
                         enumset.add(enumfacing1);
                     }
                 }
 
-                if (side.getAxis().isHorizontal() && enumset.isEmpty())
-                {
+                if (side.getAxis().isHorizontal() && enumset.isEmpty()) {
                     return i;
-                }
-                else if (enumset.contains(side) && !enumset.contains(side.rotateYCCW()) && !enumset.contains(side.rotateY()))
-                {
+                } else if (enumset.contains(side) && !enumset.contains(side.rotateYCCW()) && !enumset.contains(side.rotateY())) {
                     return i;
-                }
-                else
-                {
+                } else {
                     return 0;
                 }
             }
         }
     }
 
-    private boolean func_176339_d(IBlockAccess worldIn, BlockPos pos, EnumFacing side)
-    {
+    private boolean func_176339_d(IBlockAccess worldIn, BlockPos pos, EnumFacing side) {
         BlockPos blockpos1 = pos.offset(side);
         IBlockState iblockstate = worldIn.getBlockState(blockpos1);
         Block block = iblockstate.getBlock();
@@ -396,117 +396,44 @@
         return !flag1 && flag && canConnectUpwardsTo(worldIn, blockpos1.up()) ? true : (canConnectTo(iblockstate, side) ? true : (block == Blocks.powered_repeater && iblockstate.getValue(BlockRedstoneDiode.FACING) == side ? true : !flag && canConnectUpwardsTo(worldIn, blockpos1.down())));
     }
 
-    protected static boolean canConnectUpwardsTo(IBlockAccess worldIn, BlockPos pos)
-    {
+    protected static boolean canConnectUpwardsTo(IBlockAccess worldIn, BlockPos pos) {
         return canConnectUpwardsTo(worldIn.getBlockState(pos));
     }
 
-    protected static boolean canConnectUpwardsTo(IBlockState state)
-    {
-        return canConnectTo(state, (EnumFacing)null);
+    protected static boolean canConnectUpwardsTo(IBlockState state) {
+        return canConnectTo(state, (EnumFacing) null);
     }
 
-    protected static boolean canConnectTo(IBlockState blockState, EnumFacing side)
-    {
+    protected static boolean canConnectTo(IBlockState blockState, EnumFacing side) {
         Block block = blockState.getBlock();
 
-        if (block == Blocks.redstone_wire)
-        {
+        if (block == Blocks.redstone_wire) {
             return true;
-        }
-        else if (Blocks.unpowered_repeater.isAssociated(block))
-        {
-            EnumFacing enumfacing1 = (EnumFacing)blockState.getValue(BlockRedstoneRepeater.FACING);
+        } else if (Blocks.unpowered_repeater.isAssociated(block)) {
+            EnumFacing enumfacing1 = (EnumFacing) blockState.getValue(BlockRedstoneRepeater.FACING);
             return enumfacing1 == side || enumfacing1.getOpposite() == side;
-        }
-        else
-        {
+        } else {
             return block.canProvidePower() && side != null;
         }
     }
 
-    public boolean canProvidePower()
-    {
+    public boolean canProvidePower() {
         return this.canProvidePower;
     }
 
-    @SideOnly(Side.CLIENT)
-    private int colorMultiplier(int powerLevel)
-    {
-        float f = (float)powerLevel / 15.0F;
-        float f1 = f * 0.6F + 0.4F;
-
-        if (powerLevel == 0)
-        {
-            f1 = 0.3F;
-        }
-
-        float f2 = f * f * 0.7F - 0.5F;
-        float f3 = f * f * 0.6F - 0.7F;
-
-        if (f2 < 0.0F)
-        {
-            f2 = 0.0F;
-        }
-
-        if (f3 < 0.0F)
-        {
-            f3 = 0.0F;
-        }
-
-        int j = MathHelper.clamp_int((int)(f1 * 255.0F), 0, 255);
-        int k = MathHelper.clamp_int((int)(f2 * 255.0F), 0, 255);
-        int l = MathHelper.clamp_int((int)(f3 * 255.0F), 0, 255);
-        return -16777216 | j << 16 | k << 8 | l;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public void randomDisplayTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        int i = ((Integer)state.getValue(POWER)).intValue();
-
-        if (i != 0)
-        {
-            double d0 = (double)pos.getX() + 0.5D + ((double)rand.nextFloat() - 0.5D) * 0.2D;
-            double d1 = (double)((float)pos.getY() + 0.0625F);
-            double d2 = (double)pos.getZ() + 0.5D + ((double)rand.nextFloat() - 0.5D) * 0.2D;
-            float f = (float)i / 15.0F;
-            float f1 = f * 0.6F + 0.4F;
-            float f2 = Math.max(0.0F, f * f * 0.7F - 0.5F);
-            float f3 = Math.max(0.0F, f * f * 0.6F - 0.7F);
-            worldIn.spawnParticle(EnumParticleTypes.REDSTONE, d0, d1, d2, (double)f1, (double)f2, (double)f3, new int[0]);
-        }
-    }
-
-    @SideOnly(Side.CLIENT)
-    public Item getItem(World worldIn, BlockPos pos)
-    {
-        return Items.redstone;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public EnumWorldBlockLayer getBlockLayer()
-    {
-        return EnumWorldBlockLayer.CUTOUT;
-    }
-
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(POWER, Integer.valueOf(meta));
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
-        return ((Integer)state.getValue(POWER)).intValue();
+    public int getMetaFromState(IBlockState state) {
+        return ((Integer) state.getValue(POWER)).intValue();
     }
 
-    protected BlockState createBlockState()
-    {
-        return new BlockState(this, new IProperty[] {NORTH, EAST, SOUTH, WEST, POWER});
+    protected BlockState createBlockState() {
+        return new BlockState(this, new IProperty[]{NORTH, EAST, SOUTH, WEST, POWER});
     }
 
-    static enum EnumAttachPosition implements IStringSerializable
-    {
+    static enum EnumAttachPosition implements IStringSerializable {
         UP("up"),
         SIDE("side"),
         NONE("none");
@@ -514,20 +514,16 @@
 
         private static final String __OBFID = "CL_00002070";
 
-        private EnumAttachPosition(String name)
-        {
+        private EnumAttachPosition(String name) {
             this.name = name;
         }
 
-        public String toString()
-        {
+        public String toString() {
             return this.getName();
         }
 
-        public String getName()
-        {
+        public String getName() {
             return this.name;
         }
     }
-}
+}
