--- decompiled\net\minecraft\block\BlockRedstoneWire.java
+++ src\main\java\net\minecraft\block\BlockRedstoneWire.java
@@ -1,14 +1,13 @@
 package net.minecraft.block;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Sets;
 import java.util.ArrayList;
 import java.util.EnumSet;
 import java.util.Iterator;
 import java.util.Random;
 import java.util.Set;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyEnum;
 import net.minecraft.block.properties.PropertyInteger;
 import net.minecraft.block.state.BlockState;
@@ -17,21 +16,22 @@
 import net.minecraft.init.Items;
 import net.minecraft.item.Item;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumParticleTypes;
-import net.minecraft.util.EnumWorldBlockLayer;
 import net.minecraft.util.IStringSerializable;
-import net.minecraft.util.MathHelper;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import org.bukkit.event.block.BlockRedstoneEvent;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Sets;
+
 public class BlockRedstoneWire extends Block
 {
+
     public static final PropertyEnum NORTH = PropertyEnum.create("north", BlockRedstoneWire.EnumAttachPosition.class);
     public static final PropertyEnum EAST = PropertyEnum.create("east", BlockRedstoneWire.EnumAttachPosition.class);
     public static final PropertyEnum SOUTH = PropertyEnum.create("south", BlockRedstoneWire.EnumAttachPosition.class);
     public static final PropertyEnum WEST = PropertyEnum.create("west", BlockRedstoneWire.EnumAttachPosition.class);
     public static final PropertyInteger POWER = PropertyInteger.create("power", 0, 15);
@@ -84,17 +84,10 @@
     public boolean isFullCube()
     {
         return false;
     }
 
-    @SideOnly(Side.CLIENT)
-    public int colorMultiplier(IBlockAccess worldIn, BlockPos pos, int renderPass)
-    {
-        IBlockState iblockstate = worldIn.getBlockState(pos);
-        return iblockstate.getBlock() != this ? super.colorMultiplier(worldIn, pos, renderPass) : this.colorMultiplier(((Integer)iblockstate.getValue(POWER)).intValue());
-    }
-
     public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
     {
         return World.doesBlockHaveSolidTopSurface(worldIn, pos.down()) || worldIn.getBlockState(pos.down()).getBlock() == Blocks.glowstone;
     }
 
@@ -172,10 +165,20 @@
         if (j > l - 1)
         {
             l = j;
         }
 
+        // CraftBukkit start
+        if (i != j)
+        {
+            BlockRedstoneEvent event = new BlockRedstoneEvent(worldIn.getWorld().getBlockAt(pos1.getX(), pos1.getY(), pos1.getZ()), i, j);
+            worldIn.getServer().getPluginManager().callEvent(event);
+            j = event.getNewCurrent();
+        }
+
+        // CraftBukkit end
+
         if (i != l)
         {
             state = state.withProperty(POWER, Integer.valueOf(l));
 
             if (worldIn.getBlockState(pos1) == iblockstate1)
@@ -296,11 +299,11 @@
                 }
             }
         }
     }
 
-    private int getMaxCurrentStrength(World worldIn, BlockPos pos, int strength)
+    public int getMaxCurrentStrength(World worldIn, BlockPos pos, int strength)   // SpigotMCP -- Apply access transformation
     {
         if (worldIn.getBlockState(pos).getBlock() != this)
         {
             return strength;
         }
@@ -428,70 +431,10 @@
     public boolean canProvidePower()
     {
         return this.canProvidePower;
     }
 
-    @SideOnly(Side.CLIENT)
-    private int colorMultiplier(int powerLevel)
-    {
-        float f = (float)powerLevel / 15.0F;
-        float f1 = f * 0.6F + 0.4F;
-
-        if (powerLevel == 0)
-        {
-            f1 = 0.3F;
-        }
-
-        float f2 = f * f * 0.7F - 0.5F;
-        float f3 = f * f * 0.6F - 0.7F;
-
-        if (f2 < 0.0F)
-        {
-            f2 = 0.0F;
-        }
-
-        if (f3 < 0.0F)
-        {
-            f3 = 0.0F;
-        }
-
-        int j = MathHelper.clamp_int((int)(f1 * 255.0F), 0, 255);
-        int k = MathHelper.clamp_int((int)(f2 * 255.0F), 0, 255);
-        int l = MathHelper.clamp_int((int)(f3 * 255.0F), 0, 255);
-        return -16777216 | j << 16 | k << 8 | l;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public void randomDisplayTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        int i = ((Integer)state.getValue(POWER)).intValue();
-
-        if (i != 0)
-        {
-            double d0 = (double)pos.getX() + 0.5D + ((double)rand.nextFloat() - 0.5D) * 0.2D;
-            double d1 = (double)((float)pos.getY() + 0.0625F);
-            double d2 = (double)pos.getZ() + 0.5D + ((double)rand.nextFloat() - 0.5D) * 0.2D;
-            float f = (float)i / 15.0F;
-            float f1 = f * 0.6F + 0.4F;
-            float f2 = Math.max(0.0F, f * f * 0.7F - 0.5F);
-            float f3 = Math.max(0.0F, f * f * 0.6F - 0.7F);
-            worldIn.spawnParticle(EnumParticleTypes.REDSTONE, d0, d1, d2, (double)f1, (double)f2, (double)f3, new int[0]);
-        }
-    }
-
-    @SideOnly(Side.CLIENT)
-    public Item getItem(World worldIn, BlockPos pos)
-    {
-        return Items.redstone;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public EnumWorldBlockLayer getBlockLayer()
-    {
-        return EnumWorldBlockLayer.CUTOUT;
-    }
-
     public IBlockState getStateFromMeta(int meta)
     {
         return this.getDefaultState().withProperty(POWER, Integer.valueOf(meta));
     }
 
