---a/net/minecraft/block/BlockIce.java
+++b/net/minecraft/block/BlockIce.java
@@ -1,6 +1,7 @@
 package net.minecraft.block;
 
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.creativetab.CreativeTabs;
@@ -11,44 +11,31 @@
 import net.minecraft.stats.StatList;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.BlockPos;
-import net.minecraft.util.EnumWorldBlockLayer;
 import net.minecraft.world.EnumSkyBlock;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockIce extends BlockBreakable
-{
+
+public class BlockIce extends BlockBreakable {
+
     private static final String __OBFID = "CL_00000259";
 
-    public BlockIce()
-    {
+    public BlockIce() {
         super(Material.ice, false);
         this.slipperiness = 0.98F;
         this.setTickRandomly(true);
         this.setCreativeTab(CreativeTabs.tabBlock);
     }
 
-    @SideOnly(Side.CLIENT)
-    public EnumWorldBlockLayer getBlockLayer()
-    {
-        return EnumWorldBlockLayer.TRANSLUCENT;
-    }
-
-    public void harvestBlock(World worldIn, EntityPlayer player, BlockPos pos, IBlockState state, TileEntity te)
-    {
+    public void harvestBlock(World worldIn, EntityPlayer player, BlockPos pos, IBlockState state, TileEntity te) {
         player.triggerAchievement(StatList.mineBlockStatArray[Block.getIdFromBlock(this)]);
         player.addExhaustion(0.025F);
 
-        if (this.canSilkHarvest() && EnchantmentHelper.getSilkTouchModifier(player))
-        {
+        if (this.canSilkHarvest() && EnchantmentHelper.getSilkTouchModifier(player)) {
             ItemStack itemstack = this.createStackedBlock(state);
 
-            if (itemstack != null)
-            {
+            if (itemstack != null) {
                 spawnAsEntity(worldIn, pos, itemstack);
             }
-        }
-        else
-        {
-            if (worldIn.provider.doesWaterVaporize())
-            {
+        } else {
+            if (worldIn.provider.doesWaterVaporize()) {
                 worldIn.setBlockToAir(pos);
                 return;
             }
@@ -61,37 +61,34 @@
             this.dropBlockAsItem(worldIn, pos, state, i);
             Material material = worldIn.getBlockState(pos.down()).getBlock().getMaterial();
 
-            if (material.blocksMovement() || material.isLiquid())
-            {
+            if (material.blocksMovement() || material.isLiquid()) {
                 worldIn.setBlockState(pos, Blocks.flowing_water.getDefaultState());
             }
         }
     }
 
-    public int quantityDropped(Random random)
-    {
+    public int quantityDropped(Random random) {
         return 0;
     }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        if (worldIn.getLightFor(EnumSkyBlock.BLOCK, pos) > 11 - this.getLightOpacity())
-        {
-            if (worldIn.provider.doesWaterVaporize())
-            {
-                worldIn.setBlockToAir(pos);
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
+        if (worldIn.getLightFor(EnumSkyBlock.BLOCK, pos) > 11 - this.getLightOpacity()) {
+            // CraftBukkit start
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), worldIn.provider.doesWaterVaporize() ? Blocks.air : Blocks.water).isCancelled()) {
+                return;
             }
-            else
-            {
+            // CraftBukkit end
+
+            if (worldIn.provider.doesWaterVaporize()) {
+                worldIn.setBlockToAir(pos);
+            } else {
                 this.dropBlockAsItem(worldIn, pos, worldIn.getBlockState(pos), 0);
                 worldIn.setBlockState(pos, Blocks.water.getDefaultState());
             }
         }
     }
 
-    public int getMobilityFlag()
-    {
+    public int getMobilityFlag() {
         return 0;
     }
-}
+}
