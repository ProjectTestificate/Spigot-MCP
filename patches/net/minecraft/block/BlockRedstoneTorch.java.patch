--- decompiled\net\minecraft\block\BlockRedstoneTorch.java
+++ src\main\java\net\minecraft\block\BlockRedstoneTorch.java
@@ -1,225 +1,193 @@
 package net.minecraft.block;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
+import java.util.WeakHashMap;
+
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.init.Blocks;
 import net.minecraft.item.Item;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockRedstoneTorch extends BlockTorch
-{
-    private static Map toggles = Maps.newHashMap();
+import org.bukkit.event.block.BlockRedstoneEvent;
+
+import com.google.common.collect.Lists;
+
+public class BlockRedstoneTorch extends BlockTorch {
+
+    private static Map toggles = new WeakHashMap(); // Spigot
     private final boolean isOn;
     private static final String __OBFID = "CL_00000298";
 
-    private boolean isBurnedOut(World worldIn, BlockPos pos, boolean turnOff)
-    {
-        if (!toggles.containsKey(worldIn))
-        {
+    private boolean isBurnedOut(World worldIn, BlockPos pos, boolean turnOff) {
+        if (!toggles.containsKey(worldIn)) {
             toggles.put(worldIn, Lists.newArrayList());
         }
 
-        List list = (List)toggles.get(worldIn);
+        List list = (List) toggles.get(worldIn);
 
-        if (turnOff)
-        {
+        if (turnOff) {
             list.add(new BlockRedstoneTorch.Toggle(pos, worldIn.getTotalWorldTime()));
         }
 
         int i = 0;
 
-        for (int j = 0; j < list.size(); ++j)
-        {
-            BlockRedstoneTorch.Toggle toggle = (BlockRedstoneTorch.Toggle)list.get(j);
+        for (int j = 0; j < list.size(); ++j) {
+            BlockRedstoneTorch.Toggle toggle = (BlockRedstoneTorch.Toggle) list.get(j);
 
-            if (toggle.pos.equals(pos))
-            {
+            if (toggle.pos.equals(pos)) {
                 ++i;
 
-                if (i >= 8)
-                {
+                if (i >= 8) {
                     return true;
                 }
             }
         }
 
         return false;
     }
 
-    protected BlockRedstoneTorch(boolean isOn)
-    {
+    protected BlockRedstoneTorch(boolean isOn) {
         this.isOn = isOn;
         this.setTickRandomly(true);
-        this.setCreativeTab((CreativeTabs)null);
+        this.setCreativeTab((CreativeTabs) null);
     }
 
-    public int tickRate(World worldIn)
-    {
+    public int tickRate(World worldIn) {
         return 2;
     }
 
-    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
-    {
-        if (this.isOn)
-        {
+    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state) {
+        if (this.isOn) {
             EnumFacing[] aenumfacing = EnumFacing.values();
             int i = aenumfacing.length;
 
-            for (int j = 0; j < i; ++j)
-            {
+            for (int j = 0; j < i; ++j) {
                 EnumFacing enumfacing = aenumfacing[j];
                 worldIn.notifyNeighborsOfStateChange(pos.offset(enumfacing), this);
             }
         }
     }
 
-    public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
-    {
-        if (this.isOn)
-        {
+    public void breakBlock(World worldIn, BlockPos pos, IBlockState state) {
+        if (this.isOn) {
             EnumFacing[] aenumfacing = EnumFacing.values();
             int i = aenumfacing.length;
 
-            for (int j = 0; j < i; ++j)
-            {
+            for (int j = 0; j < i; ++j) {
                 EnumFacing enumfacing = aenumfacing[j];
                 worldIn.notifyNeighborsOfStateChange(pos.offset(enumfacing), this);
             }
         }
     }
 
-    public int isProvidingWeakPower(IBlockAccess worldIn, BlockPos pos, IBlockState state, EnumFacing side)
-    {
+    public int isProvidingWeakPower(IBlockAccess worldIn, BlockPos pos, IBlockState state, EnumFacing side) {
         return this.isOn && state.getValue(FACING) != side ? 15 : 0;
     }
 
-    private boolean shouldBeOff(World worldIn, BlockPos pos, IBlockState state)
-    {
-        EnumFacing enumfacing = ((EnumFacing)state.getValue(FACING)).getOpposite();
+    private boolean shouldBeOff(World worldIn, BlockPos pos, IBlockState state) {
+        EnumFacing enumfacing = ((EnumFacing) state.getValue(FACING)).getOpposite();
         return worldIn.isSidePowered(pos.offset(enumfacing), enumfacing);
     }
 
-    public void randomTick(World worldIn, BlockPos pos, IBlockState state, Random random) {}
+    public void randomTick(World worldIn, BlockPos pos, IBlockState state, Random random) {
+    }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
         boolean flag = this.shouldBeOff(worldIn, pos, state);
-        List list = (List)toggles.get(worldIn);
+        List list = (List) toggles.get(worldIn);
 
-        while (list != null && !list.isEmpty() && worldIn.getTotalWorldTime() - ((BlockRedstoneTorch.Toggle)list.get(0)).time > 60L)
-        {
+        while (list != null && !list.isEmpty() && worldIn.getTotalWorldTime() - ((BlockRedstoneTorch.Toggle) list.get(0)).time > 60L) {
             list.remove(0);
         }
 
-        if (this.isOn)
-        {
-            if (flag)
-            {
+        // CraftBukkit start
+        org.bukkit.plugin.PluginManager manager = worldIn.getServer().getPluginManager();
+        org.bukkit.block.Block block = worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+        int oldCurrent = this.isOn ? 15 : 0;
+
+        BlockRedstoneEvent event = new BlockRedstoneEvent(block, oldCurrent, oldCurrent);
+        // CraftBukkit end
+
+        if (this.isOn) {
+            if (flag) {
+                // CraftBukkit start
+                if (oldCurrent != 0) {
+                    event.setNewCurrent(0);
+                    manager.callEvent(event);
+                    if (event.getNewCurrent() != 0) {
+                        return;
+                    }
+                }
+                // CraftBukkit end
                 worldIn.setBlockState(pos, Blocks.unlit_redstone_torch.getDefaultState().withProperty(FACING, state.getValue(FACING)), 3);
 
-                if (this.isBurnedOut(worldIn, pos, true))
-                {
-                    worldIn.playSoundEffect((double)((float)pos.getX() + 0.5F), (double)((float)pos.getY() + 0.5F), (double)((float)pos.getZ() + 0.5F), "random.fizz", 0.5F, 2.6F + (worldIn.rand.nextFloat() - worldIn.rand.nextFloat()) * 0.8F);
+                if (this.isBurnedOut(worldIn, pos, true)) {
+                    worldIn.playSoundEffect((double) ((float) pos.getX() + 0.5F), (double) ((float) pos.getY() + 0.5F), (double) ((float) pos.getZ() + 0.5F), "random.fizz", 0.5F, 2.6F + (worldIn.rand.nextFloat() - worldIn.rand.nextFloat()) * 0.8F);
 
-                    for (int i = 0; i < 5; ++i)
-                    {
-                        double d0 = (double)pos.getX() + rand.nextDouble() * 0.6D + 0.2D;
-                        double d1 = (double)pos.getY() + rand.nextDouble() * 0.6D + 0.2D;
-                        double d2 = (double)pos.getZ() + rand.nextDouble() * 0.6D + 0.2D;
+                    for (int i = 0; i < 5; ++i) {
+                        double d0 = (double) pos.getX() + rand.nextDouble() * 0.6D + 0.2D;
+                        double d1 = (double) pos.getY() + rand.nextDouble() * 0.6D + 0.2D;
+                        double d2 = (double) pos.getZ() + rand.nextDouble() * 0.6D + 0.2D;
                         worldIn.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
                     }
 
                     worldIn.scheduleUpdate(pos, worldIn.getBlockState(pos).getBlock(), 160);
                 }
             }
-        }
-        else if (!flag && !this.isBurnedOut(worldIn, pos, false))
-        {
+        } else if (!flag && !this.isBurnedOut(worldIn, pos, false)) {
+            // CraftBukkit start
+            if (oldCurrent != 15) {
+                event.setNewCurrent(15);
+                manager.callEvent(event);
+                if (event.getNewCurrent() != 15) {
+                    return;
+                }
+            }
+            // CraftBukkit end
             worldIn.setBlockState(pos, Blocks.redstone_torch.getDefaultState().withProperty(FACING, state.getValue(FACING)), 3);
         }
     }
 
-    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock)
-    {
-        if (!this.onNeighborChangeInternal(worldIn, pos, state))
-        {
-            if (this.isOn == this.shouldBeOff(worldIn, pos, state))
-            {
+    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock) {
+        if (!this.onNeighborChangeInternal(worldIn, pos, state)) {
+            if (this.isOn == this.shouldBeOff(worldIn, pos, state)) {
                 worldIn.scheduleUpdate(pos, this, this.tickRate(worldIn));
             }
         }
     }
 
-    public int isProvidingStrongPower(IBlockAccess worldIn, BlockPos pos, IBlockState state, EnumFacing side)
-    {
+    public int isProvidingStrongPower(IBlockAccess worldIn, BlockPos pos, IBlockState state, EnumFacing side) {
         return side == EnumFacing.DOWN ? this.isProvidingWeakPower(worldIn, pos, state, side) : 0;
     }
 
-    public Item getItemDropped(IBlockState state, Random rand, int fortune)
-    {
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
         return Item.getItemFromBlock(Blocks.redstone_torch);
     }
 
-    public boolean canProvidePower()
-    {
+    public boolean canProvidePower() {
         return true;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void randomDisplayTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        if (this.isOn)
-        {
-            double d0 = (double)((float)pos.getX() + 0.5F) + (double)(rand.nextFloat() - 0.5F) * 0.2D;
-            double d1 = (double)((float)pos.getY() + 0.7F) + (double)(rand.nextFloat() - 0.5F) * 0.2D;
-            double d2 = (double)((float)pos.getZ() + 0.5F) + (double)(rand.nextFloat() - 0.5F) * 0.2D;
-            EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
-
-            if (enumfacing.getAxis().isHorizontal())
-            {
-                EnumFacing enumfacing1 = enumfacing.getOpposite();
-                double d3 = 0.27000001072883606D;
-                d0 += 0.27000001072883606D * (double)enumfacing1.getFrontOffsetX();
-                d1 += 0.2199999988079071D;
-                d2 += 0.27000001072883606D * (double)enumfacing1.getFrontOffsetZ();
-            }
-
-            worldIn.spawnParticle(EnumParticleTypes.REDSTONE, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
-        }
-    }
-
-    @SideOnly(Side.CLIENT)
-    public Item getItem(World worldIn, BlockPos pos)
-    {
-        return Item.getItemFromBlock(Blocks.redstone_torch);
-    }
-
-    public boolean isAssociatedBlock(Block other)
-    {
+    public boolean isAssociatedBlock(Block other) {
         return other == Blocks.unlit_redstone_torch || other == Blocks.redstone_torch;
     }
 
-    static class Toggle
-        {
-            BlockPos pos;
-            long time;
-            private static final String __OBFID = "CL_00000299";
+    static class Toggle {
 
-            public Toggle(BlockPos pos, long time)
-            {
-                this.pos = pos;
-                this.time = time;
-            }
+        BlockPos pos;
+        long time;
+        private static final String __OBFID = "CL_00000299";
+
+        public Toggle(BlockPos pos, long time) {
+            this.pos = pos;
+            this.time = time;
         }
+    }
 }
