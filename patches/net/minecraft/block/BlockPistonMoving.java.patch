--- decompiled\net\minecraft\block\BlockPistonMoving.java
+++ src\main\java\net\minecraft\block\BlockPistonMoving.java
@@ -1,8 +1,9 @@
 package net.minecraft.block;
 
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyDirection;
 import net.minecraft.block.properties.PropertyEnum;
 import net.minecraft.block.state.BlockState;
@@ -17,270 +18,208 @@
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockPistonMoving extends BlockContainer
-{
+
+public class BlockPistonMoving extends BlockContainer {
+
     public static final PropertyDirection FACING = BlockPistonExtension.FACING;
     public static final PropertyEnum TYPE = BlockPistonExtension.TYPE;
     private static final String __OBFID = "CL_00000368";
 
-    public BlockPistonMoving()
-    {
+    public BlockPistonMoving() {
         super(Material.piston);
         this.setDefaultState(this.blockState.getBaseState().withProperty(FACING, EnumFacing.NORTH).withProperty(TYPE, BlockPistonExtension.EnumPistonType.DEFAULT));
         this.setHardness(-1.0F);
     }
 
-    public TileEntity createNewTileEntity(World worldIn, int meta)
-    {
+    public TileEntity createNewTileEntity(World worldIn, int meta) {
         return null;
     }
 
-    public static TileEntity newTileEntity(IBlockState state, EnumFacing facing, boolean extending, boolean renderHead)
-    {
+    public static TileEntity newTileEntity(IBlockState state, EnumFacing facing, boolean extending, boolean renderHead) {
         return new TileEntityPiston(state, facing, extending, renderHead);
     }
 
-    public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public void breakBlock(World worldIn, BlockPos pos, IBlockState state) {
         TileEntity tileentity = worldIn.getTileEntity(pos);
 
-        if (tileentity instanceof TileEntityPiston)
-        {
-            ((TileEntityPiston)tileentity).clearPistonTileEntity();
-        }
-        else
-        {
+        if (tileentity instanceof TileEntityPiston) {
+            ((TileEntityPiston) tileentity).clearPistonTileEntity();
+        } else {
             super.breakBlock(worldIn, pos, state);
         }
     }
 
-    public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
-    {
+    public boolean canPlaceBlockAt(World worldIn, BlockPos pos) {
         return false;
     }
 
-    public boolean canPlaceBlockOnSide(World worldIn, BlockPos pos, EnumFacing side)
-    {
+    public boolean canPlaceBlockOnSide(World worldIn, BlockPos pos, EnumFacing side) {
         return false;
     }
 
-    public void onBlockDestroyedByPlayer(World worldIn, BlockPos pos, IBlockState state)
-    {
-        BlockPos blockpos1 = pos.offset(((EnumFacing)state.getValue(FACING)).getOpposite());
+    public void onBlockDestroyedByPlayer(World worldIn, BlockPos pos, IBlockState state) {
+        BlockPos blockpos1 = pos.offset(((EnumFacing) state.getValue(FACING)).getOpposite());
         IBlockState iblockstate1 = worldIn.getBlockState(blockpos1);
 
-        if (iblockstate1.getBlock() instanceof BlockPistonBase && ((Boolean)iblockstate1.getValue(BlockPistonBase.EXTENDED)).booleanValue())
-        {
+        if (iblockstate1.getBlock() instanceof BlockPistonBase && ((Boolean) iblockstate1.getValue(BlockPistonBase.EXTENDED)).booleanValue()) {
             worldIn.setBlockToAir(blockpos1);
         }
     }
 
-    public boolean isOpaqueCube()
-    {
+    public boolean isOpaqueCube() {
         return false;
     }
 
-    public boolean isFullCube()
-    {
+    public boolean isFullCube() {
         return false;
     }
 
-    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ)
-    {
-        if (!worldIn.isRemote && worldIn.getTileEntity(pos) == null)
-        {
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ) {
+        if (!worldIn.isRemote && worldIn.getTileEntity(pos) == null) {
             worldIn.setBlockToAir(pos);
             return true;
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
 
-    public Item getItemDropped(IBlockState state, Random rand, int fortune)
-    {
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
         return null;
     }
 
-    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune)
-    {
-        if (!worldIn.isRemote)
-        {
+    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune) {
+        if (!worldIn.isRemote) {
             TileEntityPiston tileentitypiston = this.getTileEntity(worldIn, pos);
 
-            if (tileentitypiston != null)
-            {
+            if (tileentitypiston != null) {
                 IBlockState iblockstate1 = tileentitypiston.getPistonState();
                 iblockstate1.getBlock().dropBlockAsItem(worldIn, pos, iblockstate1, 0);
             }
         }
     }
 
-    public MovingObjectPosition collisionRayTrace(World worldIn, BlockPos pos, Vec3 start, Vec3 end)
-    {
+    public MovingObjectPosition collisionRayTrace(World worldIn, BlockPos pos, Vec3 start, Vec3 end) {
         return null;
     }
 
-    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock)
-    {
-        if (!worldIn.isRemote)
-        {
+    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock) {
+        if (!worldIn.isRemote) {
             worldIn.getTileEntity(pos);
         }
     }
 
-    public AxisAlignedBB getCollisionBoundingBox(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public AxisAlignedBB getCollisionBoundingBox(World worldIn, BlockPos pos, IBlockState state) {
         TileEntityPiston tileentitypiston = this.getTileEntity(worldIn, pos);
 
-        if (tileentitypiston == null)
-        {
+        if (tileentitypiston == null) {
             return null;
-        }
-        else
-        {
+        } else {
             float f = tileentitypiston.func_145860_a(0.0F);
 
-            if (tileentitypiston.isExtending())
-            {
+            if (tileentitypiston.isExtending()) {
                 f = 1.0F - f;
             }
 
             return this.getBoundingBox(worldIn, pos, tileentitypiston.getPistonState(), f, tileentitypiston.getFacing());
         }
     }
 
-    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos)
-    {
+    public void setBlockBoundsBasedOnState(IBlockAccess worldIn, BlockPos pos) {
         TileEntityPiston tileentitypiston = this.getTileEntity(worldIn, pos);
 
-        if (tileentitypiston != null)
-        {
+        if (tileentitypiston != null) {
             IBlockState iblockstate = tileentitypiston.getPistonState();
             Block block = iblockstate.getBlock();
 
-            if (block == this || block.getMaterial() == Material.air)
-            {
+            if (block == this || block.getMaterial() == Material.air) {
                 return;
             }
 
             float f = tileentitypiston.func_145860_a(0.0F);
 
-            if (tileentitypiston.isExtending())
-            {
+            if (tileentitypiston.isExtending()) {
                 f = 1.0F - f;
             }
 
             block.setBlockBoundsBasedOnState(worldIn, pos);
 
-            if (block == Blocks.piston || block == Blocks.sticky_piston)
-            {
+            if (block == Blocks.piston || block == Blocks.sticky_piston) {
                 f = 0.0F;
             }
 
             EnumFacing enumfacing = tileentitypiston.getFacing();
-            this.minX = block.getBlockBoundsMinX() - (double)((float)enumfacing.getFrontOffsetX() * f);
-            this.minY = block.getBlockBoundsMinY() - (double)((float)enumfacing.getFrontOffsetY() * f);
-            this.minZ = block.getBlockBoundsMinZ() - (double)((float)enumfacing.getFrontOffsetZ() * f);
-            this.maxX = block.getBlockBoundsMaxX() - (double)((float)enumfacing.getFrontOffsetX() * f);
-            this.maxY = block.getBlockBoundsMaxY() - (double)((float)enumfacing.getFrontOffsetY() * f);
-            this.maxZ = block.getBlockBoundsMaxZ() - (double)((float)enumfacing.getFrontOffsetZ() * f);
+            this.minX = block.getBlockBoundsMinX() - (double) ((float) enumfacing.getFrontOffsetX() * f);
+            this.minY = block.getBlockBoundsMinY() - (double) ((float) enumfacing.getFrontOffsetY() * f);
+            this.minZ = block.getBlockBoundsMinZ() - (double) ((float) enumfacing.getFrontOffsetZ() * f);
+            this.maxX = block.getBlockBoundsMaxX() - (double) ((float) enumfacing.getFrontOffsetX() * f);
+            this.maxY = block.getBlockBoundsMaxY() - (double) ((float) enumfacing.getFrontOffsetY() * f);
+            this.maxZ = block.getBlockBoundsMaxZ() - (double) ((float) enumfacing.getFrontOffsetZ() * f);
         }
     }
 
-    public AxisAlignedBB getBoundingBox(World worldIn, BlockPos pos, IBlockState extendingBlock, float progress, EnumFacing direction)
-    {
-        if (extendingBlock.getBlock() != this && extendingBlock.getBlock().getMaterial() != Material.air)
-        {
+    public AxisAlignedBB getBoundingBox(World worldIn, BlockPos pos, IBlockState extendingBlock, float progress, EnumFacing direction) {
+        if (extendingBlock.getBlock() != this && extendingBlock.getBlock().getMaterial() != Material.air) {
             AxisAlignedBB axisalignedbb = extendingBlock.getBlock().getCollisionBoundingBox(worldIn, pos, extendingBlock);
 
-            if (axisalignedbb == null)
-            {
+            if (axisalignedbb == null) {
                 return null;
-            }
-            else
-            {
+            } else {
                 double d0 = axisalignedbb.minX;
                 double d1 = axisalignedbb.minY;
                 double d2 = axisalignedbb.minZ;
                 double d3 = axisalignedbb.maxX;
                 double d4 = axisalignedbb.maxY;
                 double d5 = axisalignedbb.maxZ;
 
-                if (direction.getFrontOffsetX() < 0)
-                {
-                    d0 -= (double)((float)direction.getFrontOffsetX() * progress);
+                if (direction.getFrontOffsetX() < 0) {
+                    d0 -= (double) ((float) direction.getFrontOffsetX() * progress);
+                } else {
+                    d3 -= (double) ((float) direction.getFrontOffsetX() * progress);
                 }
-                else
-                {
-                    d3 -= (double)((float)direction.getFrontOffsetX() * progress);
-                }
 
-                if (direction.getFrontOffsetY() < 0)
-                {
-                    d1 -= (double)((float)direction.getFrontOffsetY() * progress);
+                if (direction.getFrontOffsetY() < 0) {
+                    d1 -= (double) ((float) direction.getFrontOffsetY() * progress);
+                } else {
+                    d4 -= (double) ((float) direction.getFrontOffsetY() * progress);
                 }
-                else
-                {
-                    d4 -= (double)((float)direction.getFrontOffsetY() * progress);
-                }
 
-                if (direction.getFrontOffsetZ() < 0)
-                {
-                    d2 -= (double)((float)direction.getFrontOffsetZ() * progress);
+                if (direction.getFrontOffsetZ() < 0) {
+                    d2 -= (double) ((float) direction.getFrontOffsetZ() * progress);
+                } else {
+                    d5 -= (double) ((float) direction.getFrontOffsetZ() * progress);
                 }
-                else
-                {
-                    d5 -= (double)((float)direction.getFrontOffsetZ() * progress);
-                }
 
                 return new AxisAlignedBB(d0, d1, d2, d3, d4, d5);
             }
-        }
-        else
-        {
+        } else {
             return null;
         }
     }
 
-    private TileEntityPiston getTileEntity(IBlockAccess worldIn, BlockPos pos)
-    {
+    private TileEntityPiston getTileEntity(IBlockAccess worldIn, BlockPos pos) {
         TileEntity tileentity = worldIn.getTileEntity(pos);
-        return tileentity instanceof TileEntityPiston ? (TileEntityPiston)tileentity : null;
+        return tileentity instanceof TileEntityPiston ? (TileEntityPiston) tileentity : null;
     }
 
-    @SideOnly(Side.CLIENT)
-    public Item getItem(World worldIn, BlockPos pos)
-    {
-        return null;
-    }
-
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(FACING, BlockPistonExtension.getFacing(meta)).withProperty(TYPE, (meta & 8) > 0 ? BlockPistonExtension.EnumPistonType.STICKY : BlockPistonExtension.EnumPistonType.DEFAULT);
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
+    public int getMetaFromState(IBlockState state) {
         byte b0 = 0;
-        int i = b0 | ((EnumFacing)state.getValue(FACING)).getIndex();
+        int i = b0 | ((EnumFacing) state.getValue(FACING)).getIndex();
 
-        if (state.getValue(TYPE) == BlockPistonExtension.EnumPistonType.STICKY)
-        {
+        if (state.getValue(TYPE) == BlockPistonExtension.EnumPistonType.STICKY) {
             i |= 8;
         }
 
         return i;
     }
 
-    protected BlockState createBlockState()
-    {
-        return new BlockState(this, new IProperty[] {FACING, TYPE});
+    protected BlockState createBlockState() {
+        return new BlockState(this, new IProperty[]{FACING, TYPE});
     }
 }
