--- decompiled\net\minecraft\block\BlockFarmland.java
+++ src\main\java\net\minecraft\block\BlockFarmland.java
@@ -1,9 +1,10 @@
 package net.minecraft.block;
 
 import java.util.Iterator;
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyInteger;
 import net.minecraft.block.state.BlockState;
 import net.minecraft.block.state.IBlockState;
@@ -13,137 +14,131 @@
 import net.minecraft.init.Blocks;
 import net.minecraft.item.Item;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.BlockPos;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockFarmland extends Block
-{
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityInteractEvent;
+
+public class BlockFarmland extends Block {
+
     public static final PropertyInteger MOISTURE = PropertyInteger.create("moisture", 0, 7);
     private static final String __OBFID = "CL_00000241";
 
-    protected BlockFarmland()
-    {
+    protected BlockFarmland() {
         super(Material.ground);
         this.setDefaultState(this.blockState.getBaseState().withProperty(MOISTURE, Integer.valueOf(0)));
         this.setTickRandomly(true);
         this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.9375F, 1.0F);
         this.setLightOpacity(255);
     }
 
-    public AxisAlignedBB getCollisionBoundingBox(World worldIn, BlockPos pos, IBlockState state)
-    {
-        return new AxisAlignedBB((double)pos.getX(), (double)pos.getY(), (double)pos.getZ(), (double)(pos.getX() + 1), (double)(pos.getY() + 1), (double)(pos.getZ() + 1));
+    public AxisAlignedBB getCollisionBoundingBox(World worldIn, BlockPos pos, IBlockState state) {
+        return new AxisAlignedBB((double) pos.getX(), (double) pos.getY(), (double) pos.getZ(), (double) (pos.getX() + 1), (double) (pos.getY() + 1), (double) (pos.getZ() + 1));
     }
 
-    public boolean isOpaqueCube()
-    {
+    public boolean isOpaqueCube() {
         return false;
     }
 
-    public boolean isFullCube()
-    {
+    public boolean isFullCube() {
         return false;
     }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        int i = ((Integer)state.getValue(MOISTURE)).intValue();
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
+        int i = ((Integer) state.getValue(MOISTURE)).intValue();
 
-        if (!this.hasWater(worldIn, pos) && !worldIn.canLightningStrike(pos.up()))
-        {
-            if (i > 0)
-            {
+        if (!this.hasWater(worldIn, pos) && !worldIn.canLightningStrike(pos.up())) {
+            if (i > 0) {
                 worldIn.setBlockState(pos, state.withProperty(MOISTURE, Integer.valueOf(i - 1)), 2);
-            }
-            else if (!this.hasCrops(worldIn, pos))
-            {
+            } else if (!this.hasCrops(worldIn, pos)) {
+                // CraftBukkit start
+                org.bukkit.block.Block block = worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+                if (CraftEventFactory.callBlockFadeEvent(block, Blocks.dirt).isCancelled()) {
+                    return;
+                }
+                // CraftBukkit end
                 worldIn.setBlockState(pos, Blocks.dirt.getDefaultState());
             }
-        }
-        else if (i < 7)
-        {
+        } else if (i < 7) {
             worldIn.setBlockState(pos, state.withProperty(MOISTURE, Integer.valueOf(7)), 2);
         }
     }
 
-    public void onFallenUpon(World worldIn, BlockPos pos, Entity entityIn, float fallDistance)
-    {
-        if (entityIn instanceof EntityLivingBase)
-        {
-            if (!worldIn.isRemote && worldIn.rand.nextFloat() < fallDistance - 0.5F)
-            {
-                if (!(entityIn instanceof EntityPlayer) && !worldIn.getGameRules().getGameRuleBooleanValue("mobGriefing"))
-                {
+    public void onFallenUpon(World worldIn, BlockPos pos, Entity entityIn, float fallDistance) {
+        super.onFallenUpon(worldIn, pos, entityIn, fallDistance); // CraftBukkit - moved here as game rules / events shouldn't affect fall damage.
+        if (entityIn instanceof EntityLivingBase) {
+            if (!worldIn.isRemote && worldIn.rand.nextFloat() < fallDistance - 0.5F) {
+                if (!(entityIn instanceof EntityPlayer) && !worldIn.getGameRules().getGameRuleBooleanValue("mobGriefing")) {
                     return;
                 }
 
+                // CraftBukkit start - Interact soil
+                org.bukkit.event.Cancellable cancellable;
+                if (entityIn instanceof EntityPlayer) {
+                    cancellable = CraftEventFactory.callPlayerInteractEvent((EntityPlayer) entityIn, org.bukkit.event.block.Action.PHYSICAL, pos, null, null);
+                } else {
+                    cancellable = new EntityInteractEvent(entityIn.getBukkitEntity(), worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
+                    worldIn.getServer().getPluginManager().callEvent((EntityInteractEvent) cancellable);
+                }
+
+                if (cancellable.isCancelled()) {
+                    return;
+                }
+
+                if (CraftEventFactory.callEntityChangeBlockEvent(entityIn, pos.getX(), pos.getY(), pos.getZ(), Blocks.dirt, 0).isCancelled()) {
+                    return;
+                }
+                // CraftBukkit end
+
                 worldIn.setBlockState(pos, Blocks.dirt.getDefaultState());
             }
 
-            super.onFallenUpon(worldIn, pos, entityIn, fallDistance);
+            // super.onFallenUpon(worldIn, pos, entityIn, fallDistance); // CraftBukkit - moved up
         }
     }
 
-    private boolean hasCrops(World worldIn, BlockPos pos)
-    {
+    private boolean hasCrops(World worldIn, BlockPos pos) {
         Block block = worldIn.getBlockState(pos.up()).getBlock();
         return block instanceof BlockCrops || block instanceof BlockStem;
     }
 
-    private boolean hasWater(World worldIn, BlockPos pos)
-    {
+    private boolean hasWater(World worldIn, BlockPos pos) {
         Iterator iterator = BlockPos.getAllInBoxMutable(pos.add(-4, 0, -4), pos.add(4, 1, 4)).iterator();
         BlockPos.MutableBlockPos mutableblockpos;
 
-        do
-        {
-            if (!iterator.hasNext())
-            {
+        do {
+            if (!iterator.hasNext()) {
                 return false;
             }
 
-            mutableblockpos = (BlockPos.MutableBlockPos)iterator.next();
-        }
-        while (worldIn.getBlockState(mutableblockpos).getBlock().getMaterial() != Material.water);
+            mutableblockpos = (BlockPos.MutableBlockPos) iterator.next();
+        } while (worldIn.getBlockState(mutableblockpos).getBlock().getMaterial() != Material.water);
 
         return true;
     }
 
-    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock)
-    {
+    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock) {
         super.onNeighborBlockChange(worldIn, pos, state, neighborBlock);
 
-        if (worldIn.getBlockState(pos.up()).getBlock().getMaterial().isSolid())
-        {
+        if (worldIn.getBlockState(pos.up()).getBlock().getMaterial().isSolid()) {
             worldIn.setBlockState(pos, Blocks.dirt.getDefaultState());
         }
     }
 
-    public Item getItemDropped(IBlockState state, Random rand, int fortune)
-    {
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
         return Blocks.dirt.getItemDropped(Blocks.dirt.getDefaultState().withProperty(BlockDirt.VARIANT, BlockDirt.DirtType.DIRT), rand, fortune);
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(MOISTURE, Integer.valueOf(meta & 7));
     }
 
-    @SideOnly(Side.CLIENT)
-    public Item getItem(World worldIn, BlockPos pos)
-    {
-        return Item.getItemFromBlock(Blocks.dirt);
+    public int getMetaFromState(IBlockState state) {
+        return ((Integer) state.getValue(MOISTURE)).intValue();
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
-        return ((Integer)state.getValue(MOISTURE)).intValue();
+    protected BlockState createBlockState() {
+        return new BlockState(this, new IProperty[]{MOISTURE});
     }
-
-    protected BlockState createBlockState()
-    {
-        return new BlockState(this, new IProperty[] {MOISTURE});
-    }
 }
