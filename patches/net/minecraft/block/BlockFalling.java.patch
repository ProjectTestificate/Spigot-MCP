--- decompiled\net\minecraft\block\BlockFalling.java
+++ src\main\java\net\minecraft\block\BlockFalling.java
@@ -1,94 +1,81 @@
 package net.minecraft.block;
 
 import java.util.Random;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.entity.item.EntityFallingBlock;
 import net.minecraft.init.Blocks;
 import net.minecraft.util.BlockPos;
 import net.minecraft.world.World;
 
-public class BlockFalling extends Block
-{
+public class BlockFalling extends Block {
+
     public static boolean fallInstantly;
     private static final String __OBFID = "CL_00000240";
 
-    public BlockFalling()
-    {
+    public BlockFalling() {
         super(Material.sand);
         this.setCreativeTab(CreativeTabs.tabBlock);
     }
 
-    public BlockFalling(Material materialIn)
-    {
+    public BlockFalling(Material materialIn) {
         super(materialIn);
     }
 
-    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state) {
         worldIn.scheduleUpdate(pos, this, this.tickRate(worldIn));
     }
 
-    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock)
-    {
+    public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock) {
         worldIn.scheduleUpdate(pos, this, this.tickRate(worldIn));
     }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        if (!worldIn.isRemote)
-        {
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
+        if (!worldIn.isRemote) {
             this.checkFallable(worldIn, pos);
         }
     }
 
-    private void checkFallable(World worldIn, BlockPos pos)
-    {
-        if (canFallInto(worldIn, pos.down()) && pos.getY() >= 0)
-        {
+    private void checkFallable(World worldIn, BlockPos pos) {
+        if (canFallInto(worldIn, pos.down()) && pos.getY() >= 0) {
             byte b0 = 32;
 
-            if (!fallInstantly && worldIn.isAreaLoaded(pos.add(-b0, -b0, -b0), pos.add(b0, b0, b0)))
-            {
-                if (!worldIn.isRemote)
-                {
-                    EntityFallingBlock entityfallingblock = new EntityFallingBlock(worldIn, (double)pos.getX() + 0.5D, (double)pos.getY(), (double)pos.getZ() + 0.5D, worldIn.getBlockState(pos));
+            if (!fallInstantly && worldIn.isAreaLoaded(pos.add(-b0, -b0, -b0), pos.add(b0, b0, b0))) {
+                if (!worldIn.isRemote) {
+                    EntityFallingBlock entityfallingblock = new EntityFallingBlock(worldIn, (double) pos.getX() + 0.5D, (double) pos.getY(), (double) pos.getZ() + 0.5D, worldIn.getBlockState(pos));
                     this.onStartFalling(entityfallingblock);
                     worldIn.spawnEntityInWorld(entityfallingblock);
                 }
-            }
-            else
-            {
+            } else {
                 worldIn.setBlockToAir(pos);
                 BlockPos blockpos1;
 
-                for (blockpos1 = pos.down(); canFallInto(worldIn, blockpos1) && blockpos1.getY() > 0; blockpos1 = blockpos1.down())
-                {
+                for (blockpos1 = pos.down(); canFallInto(worldIn, blockpos1) && blockpos1.getY() > 0; blockpos1 = blockpos1.down()) {
                     ;
                 }
 
-                if (blockpos1.getY() > 0)
-                {
+                if (blockpos1.getY() > 0) {
                     worldIn.setBlockState(blockpos1.up(), this.getDefaultState());
                 }
             }
         }
     }
 
-    protected void onStartFalling(EntityFallingBlock fallingEntity) {}
+    protected void onStartFalling(EntityFallingBlock fallingEntity) {
+    }
 
-    public int tickRate(World worldIn)
-    {
+    public int tickRate(World worldIn) {
         return 2;
     }
 
-    public static boolean canFallInto(World worldIn, BlockPos pos)
-    {
+    public static boolean canFallInto(World worldIn, BlockPos pos) {
         Block block = worldIn.getBlockState(pos).getBlock();
         Material material = block.blockMaterial;
         return block == Blocks.fire || material == Material.air || material == Material.water || material == Material.lava;
     }
 
-    public void onEndFalling(World worldIn, BlockPos pos) {}
+    public void onEndFalling(World worldIn, BlockPos pos) {
+    }
 }
