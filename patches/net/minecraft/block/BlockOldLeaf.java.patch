--- decompiled\net\minecraft\block\BlockOldLeaf.java
+++ src\main\java\net\minecraft\block\BlockOldLeaf.java
@@ -1,29 +1,25 @@
 package net.minecraft.block;
 
-import com.google.common.base.Predicate;
-import java.util.List;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyEnum;
 import net.minecraft.block.state.BlockState;
 import net.minecraft.block.state.IBlockState;
-import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Items;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.stats.StatList;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.BlockPos;
-import net.minecraft.world.ColorizerFoliage;
-import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import com.google.common.base.Predicate;
+
 public class BlockOldLeaf extends BlockLeaves
 {
+
     public static final PropertyEnum VARIANT = PropertyEnum.create("variant", BlockPlanks.EnumType.class, new Predicate()
     {
         private static final String __OBFID = "CL_00002085";
         public boolean apply(BlockPlanks.EnumType type)
         {
@@ -39,47 +35,10 @@
     public BlockOldLeaf()
     {
         this.setDefaultState(this.blockState.getBaseState().withProperty(VARIANT, BlockPlanks.EnumType.OAK).withProperty(CHECK_DECAY, Boolean.valueOf(true)).withProperty(DECAYABLE, Boolean.valueOf(true)));
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getRenderColor(IBlockState state)
-    {
-        if (state.getBlock() != this)
-        {
-            return super.getRenderColor(state);
-        }
-        else
-        {
-            BlockPlanks.EnumType enumtype = (BlockPlanks.EnumType)state.getValue(VARIANT);
-            return enumtype == BlockPlanks.EnumType.SPRUCE ? ColorizerFoliage.getFoliageColorPine() : (enumtype == BlockPlanks.EnumType.BIRCH ? ColorizerFoliage.getFoliageColorBirch() : super.getRenderColor(state));
-        }
-    }
-
-    @SideOnly(Side.CLIENT)
-    public int colorMultiplier(IBlockAccess worldIn, BlockPos pos, int renderPass)
-    {
-        IBlockState iblockstate = worldIn.getBlockState(pos);
-
-        if (iblockstate.getBlock() == this)
-        {
-            BlockPlanks.EnumType enumtype = (BlockPlanks.EnumType)iblockstate.getValue(VARIANT);
-
-            if (enumtype == BlockPlanks.EnumType.SPRUCE)
-            {
-                return ColorizerFoliage.getFoliageColorPine();
-            }
-
-            if (enumtype == BlockPlanks.EnumType.BIRCH)
-            {
-                return ColorizerFoliage.getFoliageColorBirch();
-            }
-        }
-
-        return super.colorMultiplier(worldIn, pos, renderPass);
-    }
-
     protected void dropApple(World worldIn, BlockPos pos, IBlockState state, int chance)
     {
         if (state.getValue(VARIANT) == BlockPlanks.EnumType.OAK && worldIn.rand.nextInt(chance) == 0)
         {
             spawnAsEntity(worldIn, pos, new ItemStack(Items.apple, 1, 0));
@@ -89,19 +48,10 @@
     protected int getSaplingDropChance(IBlockState state)
     {
         return state.getValue(VARIANT) == BlockPlanks.EnumType.JUNGLE ? 40 : super.getSaplingDropChance(state);
     }
 
-    @SideOnly(Side.CLIENT)
-    public void getSubBlocks(Item itemIn, CreativeTabs tab, List list)
-    {
-        list.add(new ItemStack(itemIn, 1, BlockPlanks.EnumType.OAK.getMetadata()));
-        list.add(new ItemStack(itemIn, 1, BlockPlanks.EnumType.SPRUCE.getMetadata()));
-        list.add(new ItemStack(itemIn, 1, BlockPlanks.EnumType.BIRCH.getMetadata()));
-        list.add(new ItemStack(itemIn, 1, BlockPlanks.EnumType.JUNGLE.getMetadata()));
-    }
-
     protected ItemStack createStackedBlock(IBlockState state)
     {
         return new ItemStack(Item.getItemFromBlock(this), 1, ((BlockPlanks.EnumType)state.getValue(VARIANT)).getMetadata());
     }
 
