---a/net/minecraft/world/WorldServer.java
+++b/net/minecraft/world/WorldServer.java
@@ -1,16 +1,6 @@
 package net.minecraft.world;
 
-import com.google.common.base.Predicate;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-import com.google.common.collect.Sets;
-import com.google.common.util.concurrent.ListenableFuture;
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -13,8 +13,12 @@
 import java.util.Set;
 import java.util.TreeSet;
 import java.util.UUID;
+import java.util.logging.Level;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockEventData;
+import net.minecraft.block.BlockJukebox.TileEntityJukebox;
+import net.minecraft.block.ITileEntityProvider;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.crash.CrashReport;
@@ -23,9 +23,7 @@
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.EntityTracker;
 import net.minecraft.entity.EnumCreatureType;
-import net.minecraft.entity.INpc;
 import net.minecraft.entity.effect.EntityLightningBolt;
-import net.minecraft.entity.passive.EntityAnimal;
-import net.minecraft.entity.passive.EntityWaterMob;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Blocks;
@@ -36,7 +36,6 @@
 import net.minecraft.network.play.server.S24PacketBlockAction;
 import net.minecraft.network.play.server.S27PacketExplosion;
 import net.minecraft.network.play.server.S2APacketParticles;
-import net.minecraft.network.play.server.S2BPacketChangeGameState;
 import net.minecraft.network.play.server.S2CPacketSpawnGlobalEntity;
 import net.minecraft.profiler.Profiler;
 import net.minecraft.scoreboard.ScoreboardSaveData;
@@ -44,6 +44,17 @@
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.management.PlayerManager;
 import net.minecraft.tileentity.TileEntity;
+import net.minecraft.tileentity.TileEntityBeacon;
+import net.minecraft.tileentity.TileEntityBrewingStand;
+import net.minecraft.tileentity.TileEntityChest;
+import net.minecraft.tileentity.TileEntityDispenser;
+import net.minecraft.tileentity.TileEntityDropper;
+import net.minecraft.tileentity.TileEntityEnderChest;
+import net.minecraft.tileentity.TileEntityFurnace;
+import net.minecraft.tileentity.TileEntityHopper;
+import net.minecraft.tileentity.TileEntityMobSpawner;
+import net.minecraft.tileentity.TileEntityNote;
+import net.minecraft.tileentity.TileEntitySign;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumParticleTypes;
@@ -67,17 +67,38 @@
 import net.minecraft.world.storage.ISaveHandler;
 import net.minecraft.world.storage.MapStorage;
 import net.minecraft.world.storage.WorldInfo;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.WeatherType;
+import org.bukkit.World.Environment;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.CraftTravelAgent;
+import org.bukkit.craftbukkit.generator.CustomChunkGenerator;
+import org.bukkit.craftbukkit.generator.InternalChunkGenerator;
+import org.bukkit.craftbukkit.generator.NetherChunkGenerator;
+import org.bukkit.craftbukkit.generator.NormalChunkGenerator;
+import org.bukkit.craftbukkit.generator.SkyLandsChunkGenerator;
+import org.bukkit.event.block.BlockFormEvent;
+import org.bukkit.event.weather.LightningStrikeEvent;
+import org.bukkit.event.world.WorldSaveEvent;
+import org.bukkit.generator.ChunkGenerator;
 
-public class WorldServer extends World implements IThreadListener
-{
+import com.google.common.base.Predicate;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
+import com.google.common.util.concurrent.ListenableFuture;
+
+import gnu.trove.iterator.TLongShortIterator;
+
+public class WorldServer extends World implements IThreadListener {
+
     private static final Logger logger = LogManager.getLogger();
     private final MinecraftServer mcServer;
-    private final EntityTracker theEntityTracker;
+    public EntityTracker theEntityTracker; // SpigotMCP -- Apply access transformation
     private final PlayerManager thePlayerManager;
     private final Set pendingTickListEntriesHashSet = Sets.newHashSet();
     private final TreeSet pendingTickListEntriesTreeSet = new TreeSet();
@@ -88,84 +88,173 @@
     private final Teleporter worldTeleporter;
     private final SpawnerAnimals mobSpawner = new SpawnerAnimals();
     protected final VillageSiege villageSiege = new VillageSiege(this);
-    private WorldServer.ServerBlockEventList[] field_147490_S = new WorldServer.ServerBlockEventList[] {new WorldServer.ServerBlockEventList(null), new WorldServer.ServerBlockEventList(null)};
+    private WorldServer.ServerBlockEventList[] field_147490_S = new WorldServer.ServerBlockEventList[]{new WorldServer.ServerBlockEventList(null), new WorldServer.ServerBlockEventList(null)};
     private int blockEventCacheIndex;
-    private static final List bonusChestContent = Lists.newArrayList(new WeightedRandomChestContent[] {new WeightedRandomChestContent(Items.stick, 0, 1, 3, 10), new WeightedRandomChestContent(Item.getItemFromBlock(Blocks.planks), 0, 1, 3, 10), new WeightedRandomChestContent(Item.getItemFromBlock(Blocks.log), 0, 1, 3, 10), new WeightedRandomChestContent(Items.stone_axe, 0, 1, 1, 3), new WeightedRandomChestContent(Items.wooden_axe, 0, 1, 1, 5), new WeightedRandomChestContent(Items.stone_pickaxe, 0, 1, 1, 3), new WeightedRandomChestContent(Items.wooden_pickaxe, 0, 1, 1, 5), new WeightedRandomChestContent(Items.apple, 0, 2, 3, 5), new WeightedRandomChestContent(Items.bread, 0, 2, 3, 3), new WeightedRandomChestContent(Item.getItemFromBlock(Blocks.log2), 0, 1, 3, 10)});
+    private static final List bonusChestContent = Lists.newArrayList(new WeightedRandomChestContent[]{
+            new WeightedRandomChestContent(Items.stick, 0, 1, 3, 10),
+            new WeightedRandomChestContent(Item.getItemFromBlock(Blocks.planks), 0, 1, 3, 10),
+            new WeightedRandomChestContent(Item.getItemFromBlock(Blocks.log), 0, 1, 3, 10),
+            new WeightedRandomChestContent(Items.stone_axe, 0, 1, 1, 3),
+            new WeightedRandomChestContent(Items.wooden_axe, 0, 1, 1, 5),
+            new WeightedRandomChestContent(Items.stone_pickaxe, 0, 1, 1, 3),
+            new WeightedRandomChestContent(Items.wooden_pickaxe, 0, 1, 1, 5),
+            new WeightedRandomChestContent(Items.apple, 0, 2, 3, 5),
+            new WeightedRandomChestContent(Items.bread, 0, 2, 3, 3),
+            new WeightedRandomChestContent(Item.getItemFromBlock(Blocks.log2), 0, 1, 3, 10)
+    });
     private List pendingTickListEntriesThisTick = Lists.newArrayList();
     private static final String __OBFID = "CL_00001437";
 
-    public WorldServer(MinecraftServer server, ISaveHandler saveHandlerIn, WorldInfo info, int dimensionId, Profiler profilerIn)
-    {
-        super(saveHandlerIn, info, WorldProvider.getProviderForDimension(dimensionId), profilerIn, false);
+    // CraftBukkit start
+    public final int dimension;
+
+    // Add env and gen to constructor
+    public WorldServer(MinecraftServer server, ISaveHandler saveHandlerIn, WorldInfo info, int dimensionId, Profiler profilerIn, Environment env, ChunkGenerator gen) {
+        super(saveHandlerIn, info, WorldProvider.getProviderForDimension(dimensionId), profilerIn, false, gen, env);
+        this.dimension = dimensionId;
+        this.pvpMode = server.isPVPEnabled();
+        // CraftBukkit end
         this.mcServer = server;
         this.theEntityTracker = new EntityTracker(this);
-        this.thePlayerManager = new PlayerManager(this);
+        this.thePlayerManager = new PlayerManager(this, spigotConfig.viewDistance); // Spigot
         this.provider.registerWorld(this);
         this.chunkProvider = this.createChunkProvider();
-        this.worldTeleporter = new Teleporter(this);
+        this.worldTeleporter = new CraftTravelAgent(this); // CraftBukkit
         this.calculateInitialSkylight();
         this.calculateInitialWeather();
         this.getWorldBorder().setSize(server.getMaxWorldSize());
     }
 
-    public World init()
-    {
+    public World init() {
         this.mapStorage = new MapStorage(this.saveHandler);
         String s = VillageCollection.fileNameForProvider(this.provider);
-        VillageCollection villagecollection = (VillageCollection)this.mapStorage.loadData(VillageCollection.class, s);
+        VillageCollection villagecollection = (VillageCollection) this.mapStorage.loadData(VillageCollection.class, s);
 
-        if (villagecollection == null)
-        {
+        if (villagecollection == null) {
             this.villageCollectionObj = new VillageCollection(this);
             this.mapStorage.setData(s, this.villageCollectionObj);
-        }
-        else
-        {
+        } else {
             this.villageCollectionObj = villagecollection;
             this.villageCollectionObj.setWorldsForAll(this);
         }
 
         this.worldScoreboard = new ServerScoreboard(this.mcServer);
-        ScoreboardSaveData scoreboardsavedata = (ScoreboardSaveData)this.mapStorage.loadData(ScoreboardSaveData.class, "scoreboard");
+        ScoreboardSaveData scoreboardsavedata = (ScoreboardSaveData) this.mapStorage.loadData(ScoreboardSaveData.class, "scoreboard");
 
-        if (scoreboardsavedata == null)
-        {
+        if (scoreboardsavedata == null) {
             scoreboardsavedata = new ScoreboardSaveData();
             this.mapStorage.setData("scoreboard", scoreboardsavedata);
         }
 
         scoreboardsavedata.setScoreboard(this.worldScoreboard);
-        ((ServerScoreboard)this.worldScoreboard).func_96547_a(scoreboardsavedata);
+        ((ServerScoreboard) this.worldScoreboard).func_96547_a(scoreboardsavedata);
         this.getWorldBorder().setCenter(this.worldInfo.getBorderCenterX(), this.worldInfo.getBorderCenterZ());
         this.getWorldBorder().setDamageAmount(this.worldInfo.getBorderDamagePerBlock());
         this.getWorldBorder().setDamageBuffer(this.worldInfo.getBorderSafeZone());
         this.getWorldBorder().setWarningDistance(this.worldInfo.getBorderWarningDistance());
         this.getWorldBorder().setWarningTime(this.worldInfo.getBorderWarningTime());
 
-        if (this.worldInfo.getBorderLerpTime() > 0L)
-        {
+        if (this.worldInfo.getBorderLerpTime() > 0L) {
             this.getWorldBorder().setTransition(this.worldInfo.func_176137_E(), this.worldInfo.getBorderLerpTarget(), this.worldInfo.getBorderLerpTime());
-        }
-        else
-        {
+        } else {
             this.getWorldBorder().setTransition(this.worldInfo.func_176137_E());
         }
 
         return this;
     }
 
-    public void tick()
-    {
+    // CraftBukkit start
+    @Override
+    public net.minecraft.tileentity.TileEntity getTileEntity(BlockPos pos) {
+        TileEntity result = super.getTileEntity(pos);
+        Block type = getBlockState(pos).getBlock();
+
+        if (type == Blocks.chest || type == Blocks.trapped_chest) { // Spigot
+            if (!(result instanceof TileEntityChest)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.furnace) {
+            if (!(result instanceof TileEntityFurnace)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.dropper) {
+            if (!(result instanceof TileEntityDropper)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.dispenser) {
+            if (!(result instanceof TileEntityDispenser)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.jukebox) {
+            if (!(result instanceof TileEntityJukebox)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.noteblock) {
+            if (!(result instanceof TileEntityNote)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.mob_spawner) {
+            if (!(result instanceof TileEntityMobSpawner)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if ((type == Blocks.standing_sign) || (type == Blocks.wall_sign)) {
+            if (!(result instanceof TileEntitySign)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.ender_chest) {
+            if (!(result instanceof TileEntityEnderChest)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.brewing_stand) {
+            if (!(result instanceof TileEntityBrewingStand)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.beacon) {
+            if (!(result instanceof TileEntityBeacon)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.hopper) {
+            if (!(result instanceof TileEntityHopper)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        }
+
+        return result;
+    }
+
+    private net.minecraft.tileentity.TileEntity fixTileEntity(BlockPos pos, Block type, TileEntity found) {
+        this.getServer().getLogger().log(Level.SEVERE, "Block at {0},{1},{2} is {3} but has {4}" + ". " + "Bukkit will attempt to fix this, but there may be additional damage that we cannot recover.", new Object[]{pos.getX(), pos.getY(), pos.getZ(), org.bukkit.Material.getMaterial(Block.getIdFromBlock(type)).toString(), found});
+
+        if (type instanceof ITileEntityProvider) {
+            TileEntity replacement = ((ITileEntityProvider) type).createNewTileEntity(this, type.getMetaFromState(this.getBlockState(pos)));
+            replacement.worldObj = this;
+            this.setTileEntity(pos, replacement);
+            return replacement;
+        } else {
+            this.getServer().getLogger().severe("Don't know how to fix for this type... Can't do anything! :(");
+            return found;
+        }
+    }
+
+    private boolean canSpawn(int x, int z) {
+        if (this.generator != null) {
+            return this.generator.canSpawn(this.getWorld(), x, z);
+        } else {
+            return this.provider.canCoordinateBeSpawn(x, z);
+        }
+    }
+    // CraftBukkit end
+
+    public void tick() {
         super.tick();
 
-        if (this.getWorldInfo().isHardcoreModeEnabled() && this.getDifficulty() != EnumDifficulty.HARD)
-        {
+        if (this.getWorldInfo().isHardcoreModeEnabled() && this.getDifficulty() != EnumDifficulty.HARD) {
             this.getWorldInfo().setDifficulty(EnumDifficulty.HARD);
         }
 
         this.provider.getWorldChunkManager().cleanupCache();
 
-        if (this.areAllPlayersAsleep())
-        {
-            if (this.getGameRules().getGameRuleBooleanValue("doDaylightCycle"))
-            {
+        if (this.areAllPlayersAsleep()) {
+            if (this.getGameRules().getGameRuleBooleanValue("doDaylightCycle")) {
                 long i = this.worldInfo.getWorldTime() + 24000L;
                 this.worldInfo.setWorldTime(i - i % 24000L);
             }
@@ -177,76 +177,92 @@
         }
 
         this.theProfiler.startSection("mobSpawner");
-
-        if (this.getGameRules().getGameRuleBooleanValue("doMobSpawning") && this.worldInfo.getTerrainType() != WorldType.DEBUG_WORLD)
-        {
-            this.mobSpawner.findChunksForSpawning(this, this.spawnHostileMobs, this.spawnPeacefulMobs, this.worldInfo.getWorldTotalTime() % 400L == 0L);
+        // CraftBukkit start - Only call spawner if we have players online and the world allows for mobs or animals
+        long time = this.worldInfo.getWorldTotalTime();
+        if (this.getGameRules().getGameRuleBooleanValue("doMobSpawning") && this.worldInfo.getTerrainType() != WorldType.DEBUG_WORLD && (this.spawnHostileMobs || this.spawnPeacefulMobs) && (this instanceof WorldServer && this.playerEntities.size() > 0)) {
+            timings.mobSpawn.startTiming(); // Spigot
+            this.mobSpawner.findChunksForSpawning(this, this.spawnHostileMobs && (this.ticksPerMonsterSpawns != 0 && time % this.ticksPerMonsterSpawns == 0L), this.spawnPeacefulMobs && (this.ticksPerAnimalSpawns != 0 && time % this.ticksPerAnimalSpawns == 0L), this.worldInfo.getWorldTotalTime() % 400L == 0L);
+            timings.mobSpawn.stopTiming(); // Spigot
+            // CraftBukkit end
         }
-
+        // CraftBukkit end
+        timings.doChunkUnload.startTiming(); // Spigot
         this.theProfiler.endStartSection("chunkSource");
         this.chunkProvider.unloadQueuedChunks();
         int j = this.calculateSkylightSubtracted(1.0F);
 
-        if (j != this.getSkylightSubtracted())
-        {
+        if (j != this.getSkylightSubtracted()) {
             this.setSkylightSubtracted(j);
         }
 
         this.worldInfo.incrementTotalWorldTime(this.worldInfo.getWorldTotalTime() + 1L);
 
-        if (this.getGameRules().getGameRuleBooleanValue("doDaylightCycle"))
-        {
+        if (this.getGameRules().getGameRuleBooleanValue("doDaylightCycle")) {
             this.worldInfo.setWorldTime(this.worldInfo.getWorldTime() + 1L);
         }
 
+        timings.doChunkUnload.stopTiming(); // Spigot
         this.theProfiler.endStartSection("tickPending");
+        timings.doTickPending.startTiming(); // Spigot
         this.tickUpdates(false);
+        timings.doTickPending.stopTiming(); // Spigot
         this.theProfiler.endStartSection("tickBlocks");
+        timings.doTickTiles.startTiming(); // Spigot
         this.updateBlocks();
+        timings.doTickTiles.stopTiming(); // Spigot
         this.theProfiler.endStartSection("chunkMap");
+        timings.doChunkMap.startTiming(); // Spigot
         this.thePlayerManager.updatePlayerInstances();
+        timings.doChunkMap.stopTiming(); // Spigot
         this.theProfiler.endStartSection("village");
+        timings.doVillages.startTiming(); // Spigot
         this.villageCollectionObj.tick();
         this.villageSiege.tick();
+        timings.doVillages.stopTiming(); // Spigot
         this.theProfiler.endStartSection("portalForcer");
+        timings.doPortalForcer.startTiming(); // Spigot
         this.worldTeleporter.removeStalePortalLocations(this.getTotalWorldTime());
+        timings.doPortalForcer.stopTiming(); // Spigot
         this.theProfiler.endSection();
+        timings.doSounds.startTiming(); // Spigot
         this.sendQueuedBlockEvents();
+        timings.doSounds.stopTiming(); // Spigot
+
+        timings.doChunkGC.startTiming(); // Spigot
+        this.getWorld().processChunkGC(); // CraftBukkit
+        timings.doChunkGC.stopTiming(); // Spigot
     }
 
-    public BiomeGenBase.SpawnListEntry func_175734_a(EnumCreatureType p_175734_1_, BlockPos p_175734_2_)
-    {
+    public BiomeGenBase.SpawnListEntry func_175734_a(EnumCreatureType p_175734_1_, BlockPos p_175734_2_) {
         List list = this.getChunkProvider().func_177458_a(p_175734_1_, p_175734_2_);
-        return list != null && !list.isEmpty() ? (BiomeGenBase.SpawnListEntry)WeightedRandom.getRandomItem(this.rand, list) : null;
+        return list != null && !list.isEmpty() ? (BiomeGenBase.SpawnListEntry) WeightedRandom.getRandomItem(this.rand, list) : null;
     }
 
-    public boolean func_175732_a(EnumCreatureType p_175732_1_, BiomeGenBase.SpawnListEntry p_175732_2_, BlockPos p_175732_3_)
-    {
+    public boolean func_175732_a(EnumCreatureType p_175732_1_, BiomeGenBase.SpawnListEntry p_175732_2_, BlockPos p_175732_3_) {
         List list = this.getChunkProvider().func_177458_a(p_175732_1_, p_175732_3_);
         return list != null && !list.isEmpty() ? list.contains(p_175732_2_) : false;
     }
 
-    public void updateAllPlayersSleepingFlag()
-    {
+    public void updateAllPlayersSleepingFlag() {
         this.allPlayersSleeping = false;
 
-        if (!this.playerEntities.isEmpty())
-        {
+        if (!this.playerEntities.isEmpty()) {
             int i = 0;
             int j = 0;
             Iterator iterator = this.playerEntities.iterator();
 
-            while (iterator.hasNext())
-            {
-                EntityPlayer entityplayer = (EntityPlayer)iterator.next();
+            while (iterator.hasNext()) {
+                EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
-                if (entityplayer.isSpectator())
-                {
+                if (entityplayer.isSpectator()) {
                     ++i;
-                }
-                else if (entityplayer.isPlayerSleeping())
-                {
+                } else if (entityplayer.isPlayerSleeping() || entityplayer.fauxSleeping) { // CraftBukkit
                     ++j;
                 }
             }
@@ -254,17 +254,14 @@
         }
     }
 
-    protected void wakeAllPlayers()
-    {
+    protected void wakeAllPlayers() {
         this.allPlayersSleeping = false;
         Iterator iterator = this.playerEntities.iterator();
 
-        while (iterator.hasNext())
-        {
-            EntityPlayer entityplayer = (EntityPlayer)iterator.next();
+        while (iterator.hasNext()) {
+            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
-            if (entityplayer.isPlayerSleeping())
-            {
+            if (entityplayer.isPlayerSleeping()) {
                 entityplayer.wakeUpPlayer(false, false, true);
             }
         }
@@ -272,96 +272,97 @@
         this.resetRainAndThunder();
     }
 
-    private void resetRainAndThunder()
-    {
-        this.worldInfo.setRainTime(0);
+    private void resetRainAndThunder() {
+        // CraftBukkit Start
         this.worldInfo.setRaining(false);
-        this.worldInfo.setThunderTime(0);
+        // CraftBukkit start
+        // If we stop due to everyone sleeping we should reset the weather duration to some other random value.
+        // Not that everyone ever manages to get the whole server to sleep at the same time....
+        if (!this.worldInfo.isRaining()) {
+            this.worldInfo.setRainTime(0);
+        }
+        // CraftBukkit end
         this.worldInfo.setThundering(false);
+        // CraftBukkit start
+        // If we stop due to everyone sleeping we should reset the weather duration to some other random value.
+        // Not that everyone ever manages to get the whole server to sleep at the same time....
+        if (!this.worldInfo.isThundering()) {
+            this.worldInfo.setThunderTime(0);
+        }
+        // CraftBukkit end
     }
 
-    public boolean areAllPlayersAsleep()
-    {
-        if (this.allPlayersSleeping && !this.isRemote)
-        {
+    public boolean areAllPlayersAsleep() {
+        if (this.allPlayersSleeping && !this.isRemote) {
             Iterator iterator = this.playerEntities.iterator();
+
+            // CraftBukkit - This allows us to assume that some people are in bed but not really, allowing time to pass in spite of AFKers
+            boolean foundActualSleepers = false;
+
             EntityPlayer entityplayer;
 
-            do
-            {
-                if (!iterator.hasNext())
-                {
+            do {
+                if (!iterator.hasNext()) {
                     return true;
                 }
 
-                entityplayer = (EntityPlayer)iterator.next();
-            }
-            while (!entityplayer.isSpectator() && entityplayer.isPlayerFullyAsleep());
+                entityplayer = (EntityPlayer) iterator.next();
+                // CraftBukkit start
+                if (entityplayer.isPlayerFullyAsleep()) {
+                    foundActualSleepers = true;
+                }
+            } while (!entityplayer.isSpectator() && (entityplayer.isPlayerFullyAsleep() || entityplayer.fauxSleeping));
+            // CraftBukkit end
 
             return false;
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public void setInitialSpawnLocation()
-    {
-        if (this.worldInfo.getSpawnY() <= 0)
-        {
-            this.worldInfo.setSpawnY(64);
-        }
+    protected void updateBlocks() {
+        super.updateBlocks();
 
-        int i = this.worldInfo.getSpawnX();
-        int j = this.worldInfo.getSpawnZ();
-        int k = 0;
+        // SpigotMCP Note -- The following is a mess. Its in such bad shape no-one is actualy sure what it does ;)
 
-        while (this.getGroundAboveSeaLevel(new BlockPos(i, 0, j)).getMaterial() == Material.air)
-        {
-            i += this.rand.nextInt(8) - this.rand.nextInt(8);
-            j += this.rand.nextInt(8) - this.rand.nextInt(8);
-            ++k;
+        if (this.worldInfo.getTerrainType() == WorldType.DEBUG_WORLD) {
+            // Spigot start
+            TLongShortIterator iterator = this.activeChunkSet.iterator();
 
-            if (k == 10000)
-            {
-                break;
-            }
-        }
+            while (iterator.hasNext()) {
+                iterator.advance();
+                long chunkCoord = iterator.key();
 
-        this.worldInfo.setSpawnX(i);
-        this.worldInfo.setSpawnZ(j);
-    }
-
-    protected void updateBlocks()
-    {
-        super.updateBlocks();
-
-        if (this.worldInfo.getTerrainType() == WorldType.DEBUG_WORLD)
-        {
-            Iterator iterator1 = this.activeChunkSet.iterator();
-
-            while (iterator1.hasNext())
-            {
-                ChunkCoordIntPair chunkcoordintpair1 = (ChunkCoordIntPair)iterator1.next();
-                this.getChunkFromChunkCoords(chunkcoordintpair1.chunkXPos, chunkcoordintpair1.chunkZPos).func_150804_b(false);
+                this.getChunkFromChunkCoords(World.keyToX(chunkCoord), World.keyToZ(chunkCoord)).func_150804_b(false);
+                // Spigot end
             }
-        }
-        else
-        {
+        } else {
             int i = 0;
             int j = 0;
+            // CraftBukkit start
+            // for (Iterator iterator = this.activeChunkSet.iterator(); iterator.hasNext(); this.theProfiler.endSection()) {
+            //    ChunkCoordIntPair chunkcoordintpair = (ChunkCoordIntPair) iterator.next();
+            //    int k = chunkcoordintpair.chunkXPos * 16;
+            //     int l = chunkcoordintpair.chunkZPos * 16;
+            // Spigot Start
+            for (TLongShortIterator iter = activeChunkSet.iterator(); iter.hasNext(); ) {
+                iter.advance();
+                long chunkCoord = iter.key();
+                int chunkX = World.keyToX(chunkCoord);
+                int chunkZ = World.keyToZ(chunkCoord);
+                // If unloaded, or in procedd of being unloaded, drop it
+                if ((!this.chunkProvider.chunkExists(chunkX, chunkZ)) || (this.theChunkProviderServer.droppedChunksSet.contains(chunkX, chunkZ))) {
+                    iter.remove();
+                    continue;
+                }
+                // Spigot end
+                // ChunkCoordIntPair chunkcoordintpair1 = (ChunkCoordIntPair) iterator.next();
+                int k = chunkX * 16;
+                int l = chunkZ * 16;
 
-            for (Iterator iterator = this.activeChunkSet.iterator(); iterator.hasNext(); this.theProfiler.endSection())
-            {
-                ChunkCoordIntPair chunkcoordintpair = (ChunkCoordIntPair)iterator.next();
-                int k = chunkcoordintpair.chunkXPos * 16;
-                int l = chunkcoordintpair.chunkZPos * 16;
                 this.theProfiler.startSection("getChunk");
-                Chunk chunk = this.getChunkFromChunkCoords(chunkcoordintpair.chunkXPos, chunkcoordintpair.chunkZPos);
+                Chunk chunk = this.getChunkFromChunkCoords(chunkX, chunkZ);
+                // CraftBukkit end
                 this.playMoodSoundAndCheckLight(k, l, chunk);
                 this.theProfiler.endStartSection("tickChunk");
                 chunk.func_150804_b(false);
@@ -367,39 +367,51 @@
                 int i1;
                 BlockPos blockpos;
 
-                if (this.rand.nextInt(100000) == 0 && this.isRaining() && this.isThundering())
-                {
+                if (this.rand.nextInt(100000) == 0 && this.isRaining() && this.isThundering()) {
                     this.updateLCG = this.updateLCG * 3 + 1013904223;
                     i1 = this.updateLCG >> 2;
                     blockpos = this.func_175736_a(new BlockPos(k + (i1 & 15), 0, l + (i1 >> 8 & 15)));
 
-                    if (this.canLightningStrike(blockpos))
-                    {
-                        this.addWeatherEffect(new EntityLightningBolt(this, (double)blockpos.getX(), (double)blockpos.getY(), (double)blockpos.getZ()));
+                    if (this.canLightningStrike(blockpos)) {
+                        this.addWeatherEffect(new EntityLightningBolt(this, (double) blockpos.getX(), (double) blockpos.getY(), (double) blockpos.getZ()));
                     }
                 }
 
                 this.theProfiler.endStartSection("iceandsnow");
 
-                if (this.rand.nextInt(16) == 0)
-                {
+                if (this.rand.nextInt(16) == 0) {
                     this.updateLCG = this.updateLCG * 3 + 1013904223;
                     i1 = this.updateLCG >> 2;
                     blockpos = this.getPrecipitationHeight(new BlockPos(k + (i1 & 15), 0, l + (i1 >> 8 & 15)));
                     BlockPos blockpos1 = blockpos.down();
 
-                    if (this.func_175662_w(blockpos1))
-                    {
-                        this.setBlockState(blockpos1, Blocks.ice.getDefaultState());
+                    if (this.func_175662_w(blockpos1)) {
+                        // CraftBukkit start
+                        BlockState blockState = this.getWorld().getBlockAt(blockpos1.getX(), blockpos1.getY(), blockpos1.getZ()).getState();
+                        blockState.setTypeId(Block.getIdFromBlock(Blocks.ice));
+
+                        BlockFormEvent iceBlockForm = new BlockFormEvent(blockState.getBlock(), blockState);
+                        this.getServer().getPluginManager().callEvent(iceBlockForm);
+                        if (!iceBlockForm.isCancelled()) {
+                            blockState.update(true);
+                        }
+                        // CraftBukkit end
                     }
 
-                    if (this.isRaining() && this.canSnowAt(blockpos, true))
-                    {
-                        this.setBlockState(blockpos, Blocks.snow_layer.getDefaultState());
+                    if (this.isRaining() && this.canSnowAt(blockpos, true)) {
+                        // CraftBukkit start
+                        BlockState blockState = this.getWorld().getBlockAt(blockpos.getX(), blockpos.getY(), blockpos.getZ()).getState();
+                        blockState.setTypeId(Block.getIdFromBlock(Blocks.snow_layer));
+
+                        BlockFormEvent snow = new BlockFormEvent(blockState.getBlock(), blockState);
+                        this.getServer().getPluginManager().callEvent(snow);
+                        if (!snow.isCancelled()) {
+                            blockState.update(true);
+                        }
+                        // CraftBukkit end
                     }
 
-                    if (this.isRaining() && this.getBiomeGenForCoords(blockpos1).canSpawnLightningBolt())
-                    {
+                    if (this.isRaining() && this.getBiomeGenForCoords(blockpos1).canSpawnLightningBolt()) {
                         this.getBlockState(blockpos1).getBlock().fillWithRain(this, blockpos1);
                     }
                 }
@@ -407,17 +407,14 @@
                 this.theProfiler.endStartSection("tickBlocks");
                 i1 = this.getGameRules().getInt("randomTickSpeed");
 
-                if (i1 > 0)
-                {
+                if (i1 > 0) {
                     ExtendedBlockStorage[] aextendedblockstorage = chunk.getBlockStorageArray();
                     int l2 = aextendedblockstorage.length;
 
-                    for (int j1 = 0; j1 < l2; ++j1)
-                    {
+                    for (int j1 = 0; j1 < l2; ++j1) {
                         ExtendedBlockStorage extendedblockstorage = aextendedblockstorage[j1];
 
-                        if (extendedblockstorage != null && extendedblockstorage.getNeedsRandomTick())
-                        {
-                            for (int k1 = 0; k1 < i1; ++k1)
-                            {
+                        if (extendedblockstorage != null && extendedblockstorage.getNeedsRandomTick()) {
+                            for (int k1 = 0; k1 < i1; ++k1) {
                                 this.updateLCG = this.updateLCG * 3 + 1013904223;
                                 int l1 = this.updateLCG >> 2;
                                 int i2 = l1 & 15;
@@ -430,8 +430,7 @@
                                 IBlockState iblockstate = extendedblockstorage.get(i2, k2, j2);
                                 Block block = iblockstate.getBlock();
 
-                                if (block.getTickRandomly())
-                                {
+                                if (block.getTickRandomly()) {
                                     ++i;
                                     block.randomTick(this, blockpos2, iblockstate, this.rand);
                                 }
@@ -441,53 +441,56 @@
                 }
             }
         }
+        // Spigot Start
+        if (spigotConfig.clearChunksOnTick) {
+            activeChunkSet.clear();
+        }
+        // Spigot End
     }
 
-    protected BlockPos func_175736_a(BlockPos pos)
-    {
+    protected BlockPos func_175736_a(BlockPos pos) {
         BlockPos blockpos1 = this.getPrecipitationHeight(pos);
         AxisAlignedBB axisalignedbb = (new AxisAlignedBB(blockpos1, new BlockPos(blockpos1.getX(), this.getHeight(), blockpos1.getZ()))).expand(3.0D, 3.0D, 3.0D);
-        List list = this.getEntitiesWithinAABB(EntityLivingBase.class, axisalignedbb, new Predicate()
-        {
+        List list = this.getEntitiesWithinAABB(EntityLivingBase.class, axisalignedbb, new Predicate() {
+
             private static final String __OBFID = "CL_00001889";
-            public boolean applyLiving(EntityLivingBase living)
-            {
+
+            public boolean applyLiving(EntityLivingBase living) {
                 return living != null && living.isEntityAlive() && WorldServer.this.canSeeSky(living.getPosition());
             }
-            public boolean apply(Object p_apply_1_)
-            {
-                return this.applyLiving((EntityLivingBase)p_apply_1_);
+
+            public boolean apply(Object p_apply_1_) {
+                return this.applyLiving((EntityLivingBase) p_apply_1_);
             }
         });
-        return !list.isEmpty() ? ((EntityLivingBase)list.get(this.rand.nextInt(list.size()))).getPosition() : blockpos1;
+        return !list.isEmpty() ? ((EntityLivingBase) list.get(this.rand.nextInt(list.size()))).getPosition() : blockpos1;
     }
 
-    public boolean isBlockTickPending(BlockPos pos, Block blockType)
-    {
+    public boolean isBlockTickPending(BlockPos pos, Block blockType) {
         NextTickListEntry nextticklistentry = new NextTickListEntry(pos, blockType);
         return this.pendingTickListEntriesThisTick.contains(nextticklistentry);
     }
 
-    public void scheduleUpdate(BlockPos pos, Block blockIn, int delay)
-    {
+    public void scheduleUpdate(BlockPos pos, Block blockIn, int delay) {
         this.updateBlockTick(pos, blockIn, delay, 0);
     }
 
-    public void updateBlockTick(BlockPos p_175654_1_, Block p_175654_2_, int p_175654_3_, int p_175654_4_)
-    {
+    public void updateBlockTick(BlockPos p_175654_1_, Block p_175654_2_, int p_175654_3_, int p_175654_4_) {
         NextTickListEntry nextticklistentry = new NextTickListEntry(p_175654_1_, p_175654_2_);
         byte b0 = 0;
 
-        if (this.scheduledUpdatesAreImmediate && p_175654_2_.getMaterial() != Material.air)
-        {
-            if (p_175654_2_.requiresUpdates())
-            {
+        if (this.scheduledUpdatesAreImmediate && p_175654_2_.getMaterial() != Material.air) {
+            if (p_175654_2_.requiresUpdates()) {
                 b0 = 8;
 
-                if (this.isAreaLoaded(nextticklistentry.position.add(-b0, -b0, -b0), nextticklistentry.position.add(b0, b0, b0)))
-                {
+                if (this.isAreaLoaded(nextticklistentry.position.add(-b0, -b0, -b0), nextticklistentry.position.add(b0, b0, b0))) {
                     IBlockState iblockstate = this.getBlockState(nextticklistentry.position);
 
-                    if (iblockstate.getBlock().getMaterial() != Material.air && iblockstate.getBlock() == nextticklistentry.getBlock())
-                    {
+                    if (iblockstate.getBlock().getMaterial() != Material.air && iblockstate.getBlock() == nextticklistentry.getBlock()) {
                         iblockstate.getBlock().updateTick(this, nextticklistentry.position, iblockstate, this.rand);
                     }
                 }
@@ -500,94 +500,78 @@
             p_175654_3_ = 1;
         }
 
-        if (this.isAreaLoaded(p_175654_1_.add(-b0, -b0, -b0), p_175654_1_.add(b0, b0, b0)))
-        {
-            if (p_175654_2_.getMaterial() != Material.air)
-            {
-                nextticklistentry.setScheduledTime((long)p_175654_3_ + this.worldInfo.getWorldTotalTime());
+        if (this.isAreaLoaded(p_175654_1_.add(-b0, -b0, -b0), p_175654_1_.add(b0, b0, b0))) {
+            if (p_175654_2_.getMaterial() != Material.air) {
+                nextticklistentry.setScheduledTime((long) p_175654_3_ + this.worldInfo.getWorldTotalTime());
                 nextticklistentry.setPriority(p_175654_4_);
             }
 
-            if (!this.pendingTickListEntriesHashSet.contains(nextticklistentry))
-            {
+            if (!this.pendingTickListEntriesHashSet.contains(nextticklistentry)) {
                 this.pendingTickListEntriesHashSet.add(nextticklistentry);
                 this.pendingTickListEntriesTreeSet.add(nextticklistentry);
             }
         }
     }
 
-    public void func_180497_b(BlockPos pos, Block p_180497_2_, int p_180497_3_, int p_180497_4_)
-    {
+    public void func_180497_b(BlockPos pos, Block p_180497_2_, int p_180497_3_, int p_180497_4_) {
         NextTickListEntry nextticklistentry = new NextTickListEntry(pos, p_180497_2_);
         nextticklistentry.setPriority(p_180497_4_);
 
-        if (p_180497_2_.getMaterial() != Material.air)
-        {
-            nextticklistentry.setScheduledTime((long)p_180497_3_ + this.worldInfo.getWorldTotalTime());
+        if (p_180497_2_.getMaterial() != Material.air) {
+            nextticklistentry.setScheduledTime((long) p_180497_3_ + this.worldInfo.getWorldTotalTime());
         }
 
-        if (!this.pendingTickListEntriesHashSet.contains(nextticklistentry))
-        {
+        if (!this.pendingTickListEntriesHashSet.contains(nextticklistentry)) {
             this.pendingTickListEntriesHashSet.add(nextticklistentry);
             this.pendingTickListEntriesTreeSet.add(nextticklistentry);
         }
     }
 
-    public void updateEntities()
-    {
-        if (this.playerEntities.isEmpty())
-        {
-            if (this.updateEntityTick++ >= 1200)
-            {
+    public void updateEntities() {
+        if (false && this.playerEntities.isEmpty()) {  // CraftBukkit - this prevents entity cleanup, other issues on servers with no players
+            if (this.updateEntityTick++ >= 1200) {
                 return;
             }
-        }
-        else
-        {
+        } else {
             this.resetUpdateEntityTick();
         }
 
         super.updateEntities();
+        spigotConfig.currentPrimedTnt = 0; // Spigot
     }
 
-    public void resetUpdateEntityTick()
-    {
+    public void resetUpdateEntityTick() {
         this.updateEntityTick = 0;
     }
 
-    public boolean tickUpdates(boolean p_72955_1_)
-    {
-        if (this.worldInfo.getTerrainType() == WorldType.DEBUG_WORLD)
-        {
+    public boolean tickUpdates(boolean p_72955_1_) {
+        if (this.worldInfo.getTerrainType() == WorldType.DEBUG_WORLD) {
             return false;
-        }
-        else
-        {
+        } else {
             int i = this.pendingTickListEntriesTreeSet.size();
 
-            if (i != this.pendingTickListEntriesHashSet.size())
-            {
+            if (i != this.pendingTickListEntriesHashSet.size()) {
                 throw new IllegalStateException("TickNextTick list out of synch");
-            }
-            else
-            {
-                if (i > 1000)
-                {
-                    i = 1000;
+            } else {
+                if (i > 1000) {
+                    // CraftBukkit start - If the server has too much to process over time, try to alleviate that
+                    if (i > 20 * 1000) {
+                        i = i / 20;
+                    } else {
+                        i = 1000;
+                    }
+                    // CraftBukkit end
                 }
 
                 this.theProfiler.startSection("cleaning");
                 NextTickListEntry nextticklistentry;
 
-                for (int j = 0; j < i; ++j)
-                {
-                    nextticklistentry = (NextTickListEntry)this.pendingTickListEntriesTreeSet.first();
+                for (int j = 0; j < i; ++j) {
+                    nextticklistentry = (NextTickListEntry) this.pendingTickListEntriesTreeSet.first();
 
-                    if (!p_72955_1_ && nextticklistentry.scheduledTime > this.worldInfo.getWorldTotalTime())
-                    {
+                    if (!p_72955_1_ && nextticklistentry.scheduledTime > this.worldInfo.getWorldTotalTime()) {
                         break;
                     }
 
@@ -597,33 +597,26 @@
                 this.theProfiler.startSection("ticking");
                 Iterator iterator = this.pendingTickListEntriesThisTick.iterator();
 
-                while (iterator.hasNext())
-                {
-                    nextticklistentry = (NextTickListEntry)iterator.next();
+                while (iterator.hasNext()) {
+                    nextticklistentry = (NextTickListEntry) iterator.next();
                     iterator.remove();
                     byte b0 = 0;
 
-                    if (this.isAreaLoaded(nextticklistentry.position.add(-b0, -b0, -b0), nextticklistentry.position.add(b0, b0, b0)))
-                    {
+                    if (this.isAreaLoaded(nextticklistentry.position.add(-b0, -b0, -b0), nextticklistentry.position.add(b0, b0, b0))) {
                         IBlockState iblockstate = this.getBlockState(nextticklistentry.position);
 
-                        if (iblockstate.getBlock().getMaterial() != Material.air && Block.isEqualTo(iblockstate.getBlock(), nextticklistentry.getBlock()))
-                        {
-                            try
-                            {
+                        if (iblockstate.getBlock().getMaterial() != Material.air && Block.isEqualTo(iblockstate.getBlock(), nextticklistentry.getBlock())) {
+                            try {
                                 iblockstate.getBlock().updateTick(this, nextticklistentry.position, iblockstate, this.rand);
-                            }
-                            catch (Throwable throwable)
-                            {
+                            } catch (Throwable throwable) {
                                 CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Exception while ticking a block");
                                 CrashReportCategory crashreportcategory = crashreport.makeCategory("Block being ticked");
                                 CrashReportCategory.addBlockInfo(crashreportcategory, nextticklistentry.position, iblockstate);
                                 throw new ReportedException(crashreport);
                             }
                         }
-                    }
-                    else
-                    {
+                    } else {
                         this.scheduleUpdate(nextticklistentry.position, nextticklistentry.getBlock(), 0);
                     }
                 }
@@ -635,8 +635,7 @@
         }
     }
 
-    public List getPendingBlockUpdates(Chunk p_72920_1_, boolean p_72920_2_)
-    {
+    public List getPendingBlockUpdates(Chunk p_72920_1_, boolean p_72920_2_) {
         ChunkCoordIntPair chunkcoordintpair = p_72920_1_.getChunkCoordIntPair();
         int i = (chunkcoordintpair.chunkXPos << 4) - 2;
         int j = i + 16 + 2;
@@ -645,43 +645,33 @@
         return this.func_175712_a(new StructureBoundingBox(i, 0, k, j, 256, l), p_72920_2_);
     }
 
-    public List func_175712_a(StructureBoundingBox p_175712_1_, boolean p_175712_2_)
-    {
+    public List func_175712_a(StructureBoundingBox p_175712_1_, boolean p_175712_2_) {
         ArrayList arraylist = null;
 
-        for (int i = 0; i < 2; ++i)
-        {
+        for (int i = 0; i < 2; ++i) {
             Iterator iterator;
 
-            if (i == 0)
-            {
+            if (i == 0) {
                 iterator = this.pendingTickListEntriesTreeSet.iterator();
-            }
-            else
-            {
+            } else {
                 iterator = this.pendingTickListEntriesThisTick.iterator();
 
-                if (!this.pendingTickListEntriesThisTick.isEmpty())
-                {
+                if (!this.pendingTickListEntriesThisTick.isEmpty()) {
                     logger.debug("toBeTicked = " + this.pendingTickListEntriesThisTick.size());
                 }
             }
 
-            while (iterator.hasNext())
-            {
-                NextTickListEntry nextticklistentry = (NextTickListEntry)iterator.next();
+            while (iterator.hasNext()) {
+                NextTickListEntry nextticklistentry = (NextTickListEntry) iterator.next();
                 BlockPos blockpos = nextticklistentry.position;
 
-                if (blockpos.getX() >= p_175712_1_.minX && blockpos.getX() < p_175712_1_.maxX && blockpos.getZ() >= p_175712_1_.minZ && blockpos.getZ() < p_175712_1_.maxZ)
-                {
-                    if (p_175712_2_)
-                    {
+                if (blockpos.getX() >= p_175712_1_.minX && blockpos.getX() < p_175712_1_.maxX && blockpos.getZ() >= p_175712_1_.minZ && blockpos.getZ() < p_175712_1_.maxZ) {
+                    if (p_175712_2_) {
                         this.pendingTickListEntriesHashSet.remove(nextticklistentry);
                         iterator.remove();
                     }
 
-                    if (arraylist == null)
-                    {
+                    if (arraylist == null) {
                         arraylist = Lists.newArrayList();
                     }
 
@@ -693,87 +693,107 @@
         return arraylist;
     }
 
-    public void updateEntityWithOptionalForce(Entity p_72866_1_, boolean p_72866_2_)
-    {
-        if (!this.func_175735_ai() && (p_72866_1_ instanceof EntityAnimal || p_72866_1_ instanceof EntityWaterMob))
-        {
+    // CraftBukkit start - We prevent spawning in general, so this butchering is not needed
+    /*
+    public void updateEntityWithOptionalForce(Entity p_72866_1_, boolean p_72866_2_) {
+        if (!this.func_175735_ai() && (p_72866_1_ instanceof EntityAnimal || p_72866_1_ instanceof EntityWaterMob)) {
             p_72866_1_.setDead();
         }
 
-        if (!this.func_175738_ah() && p_72866_1_ instanceof INpc)
-        {
+        if (!this.func_175738_ah() && p_72866_1_ instanceof INpc) {
             p_72866_1_.setDead();
         }
 
         super.updateEntityWithOptionalForce(p_72866_1_, p_72866_2_);
     }
+    */
+    // CraftBukkit end
 
-    private boolean func_175738_ah()
-    {
+    private boolean func_175738_ah() {
         return this.mcServer.getCanSpawnNPCs();
     }
 
-    private boolean func_175735_ai()
-    {
+    private boolean func_175735_ai() {
         return this.mcServer.getCanSpawnAnimals();
     }
 
-    protected IChunkProvider createChunkProvider()
-    {
+    protected IChunkProvider createChunkProvider() {
         IChunkLoader ichunkloader = this.saveHandler.getChunkLoader(this.provider);
-        this.theChunkProviderServer = new ChunkProviderServer(this, ichunkloader, this.provider.createChunkGenerator());
+
+        // CraftBukkit start
+        InternalChunkGenerator gen;
+
+        if (this.generator != null) {
+            gen = new CustomChunkGenerator(this, this.getSeed(), this.generator);
+        } else if (this.provider instanceof WorldProviderHell) {
+            gen = new NetherChunkGenerator(this, this.getSeed());
+        } else if (this.provider instanceof WorldProviderEnd) {
+            gen = new SkyLandsChunkGenerator(this, this.getSeed());
+        } else {
+            gen = new NormalChunkGenerator(this, this.getSeed());
+        }
+
+        this.theChunkProviderServer = new ChunkProviderServer(this, ichunkloader, gen);
+        // CraftBukkit end
         return this.theChunkProviderServer;
     }
 
-    public List func_147486_a(int p_147486_1_, int p_147486_2_, int p_147486_3_, int p_147486_4_, int p_147486_5_, int p_147486_6_)
-    {
+    public List func_147486_a(int p_147486_1_, int p_147486_2_, int p_147486_3_, int p_147486_4_, int p_147486_5_, int p_147486_6_) {
         ArrayList arraylist = Lists.newArrayList();
 
-        for (int k1 = 0; k1 < this.loadedTileEntityList.size(); ++k1)
-        {
-            TileEntity tileentity = (TileEntity)this.loadedTileEntityList.get(k1);
+        // CraftBukkit start - Get tile entities from chunks instead of world
+        for (int chunkX = (p_147486_1_ >> 4); chunkX <= ((p_147486_4_ - 1) >> 4); chunkX++) {
+            for (int chunkZ = (p_147486_3_ >> 4); chunkZ <= ((p_147486_6_ - 1) >> 4); chunkZ++) {
+                Chunk chunk = getChunkFromChunkCoords(chunkX, chunkZ);
+                if (chunk == null) {
+                    continue;
+                }
+                for (Object te : chunk.chunkTileEntityMap.values()) {
+                    TileEntity tileentity = (TileEntity) te;
+                    if ((tileentity.pos.getX() >= p_147486_1_) && (tileentity.pos.getY() >= p_147486_2_) && (tileentity.pos.getZ() >= p_147486_3_) && (tileentity.pos.getX() < p_147486_4_) && (tileentity.pos.getY() < p_147486_5_) && (tileentity.pos.getZ() < p_147486_6_)) {
+                        arraylist.add(tileentity);
+                    }
+                }
+            }
+        }
+        /*
+        for (int k1 = 0; k1 < this.loadedTileEntityList.size(); ++k1) {
+            TileEntity tileentity = (TileEntity) this.loadedTileEntityList.get(k1);
             BlockPos blockpos = tileentity.getPos();
 
-            if (blockpos.getX() >= p_147486_1_ && blockpos.getY() >= p_147486_2_ && blockpos.getZ() >= p_147486_3_ && blockpos.getX() < p_147486_4_ && blockpos.getY() < p_147486_5_ && blockpos.getZ() < p_147486_6_)
-            {
+            if (blockpos.getX() >= p_147486_1_ && blockpos.getY() >= p_147486_2_ && blockpos.getZ() >= p_147486_3_ && blockpos.getX() < p_147486_4_ && blockpos.getY() < p_147486_5_ && blockpos.getZ() < p_147486_6_) {
                 arraylist.add(tileentity);
             }
         }
+        */
+        // CraftBukkit End
 
         return arraylist;
     }
 
-    public boolean isBlockModifiable(EntityPlayer player, BlockPos pos)
-    {
+    public boolean isBlockModifiable(EntityPlayer player, BlockPos pos) {
         return !this.mcServer.isBlockProtected(this, pos, player) && this.getWorldBorder().contains(pos);
     }
 
-    public void initialize(WorldSettings settings)
-    {
-        if (!this.worldInfo.isInitialized())
-        {
-            try
-            {
+    public void initialize(WorldSettings settings) {
+        if (!this.worldInfo.isInitialized()) {
+            try {
                 this.createSpawnPosition(settings);
 
-                if (this.worldInfo.getTerrainType() == WorldType.DEBUG_WORLD)
-                {
+                if (this.worldInfo.getTerrainType() == WorldType.DEBUG_WORLD) {
                     this.setDebugWorldSettings();
                 }
 
                 super.initialize(settings);
-            }
-            catch (Throwable throwable1)
-            {
+            } catch (Throwable throwable1) {
                 CrashReport crashreport = CrashReport.makeCrashReport(throwable1, "Exception initializing level");
 
-                try
-                {
+                try {
                     this.addWorldInfoToCrashReport(crashreport);
-                }
-                catch (Throwable throwable)
-                {
+                } catch (Throwable throwable) {
                     ;
                 }
 
@@ -783,8 +783,7 @@
         }
     }
 
-    private void setDebugWorldSettings()
-    {
+    private void setDebugWorldSettings() {
         this.worldInfo.setMapFeaturesEnabled(false);
         this.worldInfo.setAllowCommands(true);
         this.worldInfo.setRaining(false);
@@ -798,19 +798,13 @@
         this.getGameRules().setOrCreateGameRule("doDaylightCycle", "false");
     }
 
-    private void createSpawnPosition(WorldSettings p_73052_1_)
-    {
-        if (!this.provider.canRespawnHere())
-        {
+    private void createSpawnPosition(WorldSettings p_73052_1_) {
+        if (!this.provider.canRespawnHere()) {
             this.worldInfo.setSpawn(BlockPos.ORIGIN.up(this.provider.getAverageGroundLevel()));
-        }
-        else if (this.worldInfo.getTerrainType() == WorldType.DEBUG_WORLD)
-        {
+        } else if (this.worldInfo.getTerrainType() == WorldType.DEBUG_WORLD) {
             this.worldInfo.setSpawn(BlockPos.ORIGIN.up());
-        }
-        else
-        {
+        } else {
             this.findingSpawnPoint = true;
             WorldChunkManager worldchunkmanager = this.provider.getWorldChunkManager();
             List list = worldchunkmanager.getBiomesToSpawnIn();
@@ -819,26 +819,55 @@
             int j = this.provider.getAverageGroundLevel();
             int k = 0;
 
-            if (blockpos != null)
-            {
+            // CraftBukkit start
+            if (this.generator != null) {
+                Random rand = new Random(this.getSeed());
+                Location spawn = this.generator.getFixedSpawnLocation(((WorldServer) this).getWorld(), rand);
+
+                if (spawn != null) {
+                    if (spawn.getWorld() != ((WorldServer) this).getWorld()) {
+                        throw new IllegalStateException("Cannot set spawn point for " + this.worldInfo.getWorldName() + " to be in another world (" + spawn.getWorld().getName() + ")");
+                    } else {
+                        this.worldInfo.setSpawn(new BlockPos(spawn.getBlockX(), spawn.getBlockY(), spawn.getBlockZ()));
+                        this.findingSpawnPoint = false;
+                        return;
+                    }
+                }
+            }
+            // CraftBukkit end
+
+            if (blockpos != null) {
                 i = blockpos.getX();
                 k = blockpos.getZ();
-            }
-            else
-            {
+            } else {
                 logger.warn("Unable to find spawn biome");
             }
 
             int l = 0;
 
-            while (!this.provider.canCoordinateBeSpawn(i, k))
-            {
+            while (!this.canSpawn(i, k)) { // CraftBukkit - use our own canSpawn
                 i += random.nextInt(64) - random.nextInt(64);
                 k += random.nextInt(64) - random.nextInt(64);
                 ++l;
 
-                if (l == 1000)
-                {
+                if (l == 1000) {
                     break;
                 }
             }
@@ -846,77 +846,65 @@
             this.worldInfo.setSpawn(new BlockPos(i, j, k));
             this.findingSpawnPoint = false;
 
-            if (p_73052_1_.isBonusChestEnabled())
-            {
+            if (p_73052_1_.isBonusChestEnabled()) {
                 this.createBonusChest();
             }
         }
     }
 
-    protected void createBonusChest()
-    {
+    protected void createBonusChest() {
         WorldGeneratorBonusChest worldgeneratorbonuschest = new WorldGeneratorBonusChest(bonusChestContent, 10);
 
-        for (int i = 0; i < 10; ++i)
-        {
+        for (int i = 0; i < 10; ++i) {
             int j = this.worldInfo.getSpawnX() + this.rand.nextInt(6) - this.rand.nextInt(6);
             int k = this.worldInfo.getSpawnZ() + this.rand.nextInt(6) - this.rand.nextInt(6);
             BlockPos blockpos = this.getTopSolidOrLiquidBlock(new BlockPos(j, 0, k)).up();
 
-            if (worldgeneratorbonuschest.generate(this, this.rand, blockpos))
-            {
+            if (worldgeneratorbonuschest.generate(this, this.rand, blockpos)) {
                 break;
             }
         }
     }
 
-    public BlockPos func_180504_m()
-    {
+    public BlockPos func_180504_m() {
         return this.provider.getSpawnCoordinate();
     }
 
-    public void saveAllChunks(boolean p_73044_1_, IProgressUpdate p_73044_2_) throws MinecraftException
-    {
-        if (this.chunkProvider.canSave())
-        {
-            if (p_73044_2_ != null)
-            {
+    public void saveAllChunks(boolean p_73044_1_, IProgressUpdate p_73044_2_) throws MinecraftException { // CraftBukkit - added throws // SpigotMCP NOTE -- already added by mcp
+        if (this.chunkProvider.canSave()) {
+            Bukkit.getPluginManager().callEvent(new WorldSaveEvent(getWorld())); // CraftBukkit
+            if (p_73044_2_ != null) {
                 p_73044_2_.displaySavingString("Saving level");
             }
 
             this.saveLevel();
 
-            if (p_73044_2_ != null)
-            {
+            if (p_73044_2_ != null) {
                 p_73044_2_.displayLoadingString("Saving chunks");
             }
 
             this.chunkProvider.saveChunks(p_73044_1_, p_73044_2_);
-            List list = this.theChunkProviderServer.func_152380_a();
+            // CraftBukkit - ArrayList -> Collection
+            Collection list = this.theChunkProviderServer.func_152380_a();
             Iterator iterator = list.iterator();
 
-            while (iterator.hasNext())
-            {
-                Chunk chunk = (Chunk)iterator.next();
+            while (iterator.hasNext()) {
+                Chunk chunk = (Chunk) iterator.next();
 
-                if (!this.thePlayerManager.hasPlayerInstance(chunk.xPosition, chunk.zPosition))
-                {
+                if (!this.thePlayerManager.hasPlayerInstance(chunk.xPosition, chunk.zPosition)) {
                     this.theChunkProviderServer.dropChunk(chunk.xPosition, chunk.zPosition);
                 }
             }
         }
     }
 
-    public void saveChunkData()
-    {
-        if (this.chunkProvider.canSave())
-        {
+    public void saveChunkData() {
+        if (this.chunkProvider.canSave()) {
             this.chunkProvider.saveExtraData();
         }
     }
 
-    protected void saveLevel() throws MinecraftException
-    {
+    protected void saveLevel() throws MinecraftException { // CraftBukkit - added throws // SpigotMCP Note -- mcp al    ready added
         this.checkSessionLock();
         this.worldInfo.setBorderSize(this.getWorldBorder().getDiameter());
         this.worldInfo.getBorderCenterX(this.getWorldBorder().getCenterX());
@@ -927,117 +927,119 @@
         this.worldInfo.setBorderWarningTime(this.getWorldBorder().getWarningTime());
         this.worldInfo.setBorderLerpTarget(this.getWorldBorder().getTargetSize());
         this.worldInfo.setBorderLerpTime(this.getWorldBorder().getTimeUntilTarget());
+        // CraftBukkit start - save worldMaps once, rather than once per shared world
+        if (!(this instanceof WorldServerMulti)) {
+            this.mapStorage.saveAllData();
+        }
         this.saveHandler.saveWorldInfoWithPlayer(this.worldInfo, this.mcServer.getConfigurationManager().getHostPlayerData());
-        this.mapStorage.saveAllData();
+        // CraftBukkit end
     }
 
-    protected void onEntityAdded(Entity p_72923_1_)
-    {
+    public void onEntityAdded(Entity p_72923_1_) {
         super.onEntityAdded(p_72923_1_);
         this.entitiesById.addKey(p_72923_1_.getEntityId(), p_72923_1_);
         this.entitiesByUuid.put(p_72923_1_.getUniqueID(), p_72923_1_);
         Entity[] aentity = p_72923_1_.getParts();
 
-        if (aentity != null)
-        {
-            for (int i = 0; i < aentity.length; ++i)
-            {
+        if (aentity != null) {
+            for (int i = 0; i < aentity.length; ++i) {
                 this.entitiesById.addKey(aentity[i].getEntityId(), aentity[i]);
             }
         }
     }
 
-    protected void onEntityRemoved(Entity p_72847_1_)
-    {
+    public void onEntityRemoved(Entity p_72847_1_) {
         super.onEntityRemoved(p_72847_1_);
         this.entitiesById.removeObject(p_72847_1_.getEntityId());
         this.entitiesByUuid.remove(p_72847_1_.getUniqueID());
         Entity[] aentity = p_72847_1_.getParts();
 
-        if (aentity != null)
-        {
-            for (int i = 0; i < aentity.length; ++i)
-            {
+        if (aentity != null) {
+            for (int i = 0; i < aentity.length; ++i) {
                 this.entitiesById.removeObject(aentity[i].getEntityId());
             }
         }
     }
 
-    public boolean addWeatherEffect(Entity p_72942_1_)
-    {
-        if (super.addWeatherEffect(p_72942_1_))
-        {
-            this.mcServer.getConfigurationManager().sendToAllNear(p_72942_1_.posX, p_72942_1_.posY, p_72942_1_.posZ, 512.0D, this.provider.getDimensionId(), new S2CPacketSpawnGlobalEntity(p_72942_1_));
-            return true;
+    public boolean addWeatherEffect(Entity p_72942_1_) {
+        // CraftBukkit start
+        LightningStrikeEvent lightning = new LightningStrikeEvent(this.getWorld(), (org.bukkit.entity.LightningStrike) p_72942_1_.getBukkitEntity());
+        this.getServer().getPluginManager().callEvent(lightning);
+
+        if (lightning.isCancelled()) {
+            return false;
         }
-        else
-        {
+        if (super.addWeatherEffect(p_72942_1_)) {
+            this.mcServer.getConfigurationManager().sendToAllNear(p_72942_1_.posX, p_72942_1_.posY, p_72942_1_.posZ, 512.0D, this.dimension, new S2CPacketSpawnGlobalEntity(p_72942_1_));
+            // CraftBukkit end
+            return true;
+        } else {
             return false;
         }
     }
 
-    public void setEntityState(Entity entityIn, byte state)
-    {
+    public void setEntityState(Entity entityIn, byte state) {
         this.getEntityTracker().func_151248_b(entityIn, new S19PacketEntityStatus(entityIn, state));
     }
 
-    public Explosion newExplosion(Entity p_72885_1_, double p_72885_2_, double p_72885_4_, double p_72885_6_, float p_72885_8_, boolean p_72885_9_, boolean p_72885_10_)
-    {
+    public Explosion newExplosion(Entity p_72885_1_, double p_72885_2_, double p_72885_4_, double p_72885_6_, float p_72885_8_, boolean p_72885_9_, boolean p_72885_10_) {
+        // CraftBukkit start
+        Explosion explosion = super.newExplosion(p_72885_1_, p_72885_2_, p_72885_4_, p_72885_6_, p_72885_8_, p_72885_9_, p_72885_10_);
+
+        if (explosion.wasCanceled) {
+            return explosion;
+        }
+        /*
         Explosion explosion = new Explosion(this, p_72885_1_, p_72885_2_, p_72885_4_, p_72885_6_, p_72885_8_, p_72885_9_, p_72885_10_);
         explosion.doExplosionA();
         explosion.doExplosionB(false);
-
-        if (!p_72885_10_)
-        {
+        */
+        // CraftBukkit end - TODO: Check if explosions are still properly implemented
+        if (!p_72885_10_) {
             explosion.func_180342_d();
         }
 
         Iterator iterator = this.playerEntities.iterator();
 
-        while (iterator.hasNext())
-        {
-            EntityPlayer entityplayer = (EntityPlayer)iterator.next();
+        while (iterator.hasNext()) {
+            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
-            if (entityplayer.getDistanceSq(p_72885_2_, p_72885_4_, p_72885_6_) < 4096.0D)
-            {
-                ((EntityPlayerMP)entityplayer).playerNetServerHandler.sendPacket(new S27PacketExplosion(p_72885_2_, p_72885_4_, p_72885_6_, p_72885_8_, explosion.func_180343_e(), (Vec3)explosion.func_77277_b().get(entityplayer)));
+            if (entityplayer.getDistanceSq(p_72885_2_, p_72885_4_, p_72885_6_) < 4096.0D) {
+                ((EntityPlayerMP) entityplayer).playerNetServerHandler.sendPacket(new S27PacketExplosion(p_72885_2_, p_72885_4_, p_72885_6_, p_72885_8_, explosion.func_180343_e(), (Vec3) explosion.func_77277_b().get(entityplayer)));
             }
         }
 
         return explosion;
     }
 
-    public void addBlockEvent(BlockPos pos, Block blockIn, int eventID, int eventParam)
-    {
+    public void addBlockEvent(BlockPos pos, Block blockIn, int eventID, int eventParam) {
         BlockEventData blockeventdata = new BlockEventData(pos, blockIn, eventID, eventParam);
         Iterator iterator = this.field_147490_S[this.blockEventCacheIndex].iterator();
         BlockEventData blockeventdata1;
 
-        do
-        {
-            if (!iterator.hasNext())
-            {
+        do {
+            if (!iterator.hasNext()) {
                 this.field_147490_S[this.blockEventCacheIndex].add(blockeventdata);
                 return;
             }
 
-            blockeventdata1 = (BlockEventData)iterator.next();
-        }
-        while (!blockeventdata1.equals(blockeventdata));
+            blockeventdata1 = (BlockEventData) iterator.next();
+        } while (!blockeventdata1.equals(blockeventdata));
     }
 
-    private void sendQueuedBlockEvents()
-    {
-        while (!this.field_147490_S[this.blockEventCacheIndex].isEmpty())
-        {
+    private void sendQueuedBlockEvents() {
+        while (!this.field_147490_S[this.blockEventCacheIndex].isEmpty()) {
             int i = this.blockEventCacheIndex;
             this.blockEventCacheIndex ^= 1;
             Iterator iterator = this.field_147490_S[i].iterator();
 
-            while (iterator.hasNext())
-            {
-                BlockEventData blockeventdata = (BlockEventData)iterator.next();
+            while (iterator.hasNext()) {
+                BlockEventData blockeventdata = (BlockEventData) iterator.next();
 
-                if (this.fireBlockEvent(blockeventdata))
-                {
-                    this.mcServer.getConfigurationManager().sendToAllNear((double)blockeventdata.getPosition().getX(), (double)blockeventdata.getPosition().getY(), (double)blockeventdata.getPosition().getZ(), 64.0D, this.provider.getDimensionId(), new S24PacketBlockAction(blockeventdata.getPosition(), blockeventdata.getBlock(), blockeventdata.getEventID(), blockeventdata.getEventParameter()));
+                if (this.fireBlockEvent(blockeventdata)) {
+                    // CraftBukkit - this.worldProvider.dimension -> this.dimension
+                    this.mcServer.getConfigurationManager().sendToAllNear((double) blockeventdata.getPosition().getX(), (double) blockeventdata.getPosition().getY(), (double) blockeventdata.getPosition().getZ(), 64.0D, this.dimension, new S24PacketBlockAction(blockeventdata.getPosition(), blockeventdata.getBlock(), blockeventdata.getEventID(), blockeventdata.getEventParameter()));
                 }
             }
 
@@ -1048,120 +1048,115 @@
         }
     }
 
-    private boolean fireBlockEvent(BlockEventData event)
-    {
+    private boolean fireBlockEvent(BlockEventData event) {
         IBlockState iblockstate = this.getBlockState(event.getPosition());
         return iblockstate.getBlock() == event.getBlock() ? iblockstate.getBlock().onBlockEventReceived(this, event.getPosition(), iblockstate, event.getEventID(), event.getEventParameter()) : false;
     }
 
-    public void flush()
-    {
+    public void flush() {
         this.saveHandler.flush();
     }
 
-    protected void updateWeather()
-    {
+    protected void updateWeather() {
         boolean flag = this.isRaining();
         super.updateWeather();
-
-        if (this.prevRainingStrength != this.rainingStrength)
-        {
+        // CraftBukkit Start
+        /*
+        if (this.prevRainingStrength != this.rainingStrength) {
             this.mcServer.getConfigurationManager().sendPacketToAllPlayersInDimension(new S2BPacketChangeGameState(7, this.rainingStrength), this.provider.getDimensionId());
         }
 
-        if (this.prevThunderingStrength != this.thunderingStrength)
-        {
+        if (this.prevThunderingStrength != this.thunderingStrength) {
             this.mcServer.getConfigurationManager().sendPacketToAllPlayersInDimension(new S2BPacketChangeGameState(8, this.thunderingStrength), this.provider.getDimensionId());
         }
 
-        if (flag != this.isRaining())
-        {
-            if (flag)
-            {
+        if (flag != this.isRaining()) {
+            if (flag) {
                 this.mcServer.getConfigurationManager().sendPacketToAllPlayers(new S2BPacketChangeGameState(2, 0.0F));
-            }
-            else
-            {
+            } else {
                 this.mcServer.getConfigurationManager().sendPacketToAllPlayers(new S2BPacketChangeGameState(1, 0.0F));
             }
 
             this.mcServer.getConfigurationManager().sendPacketToAllPlayers(new S2BPacketChangeGameState(7, this.rainingStrength));
             this.mcServer.getConfigurationManager().sendPacketToAllPlayers(new S2BPacketChangeGameState(8, this.thunderingStrength));
         }
+        */
+        if (flag != this.isRaining()) {
+            // Only send weather packets to those affected
+            for (int i = 0; i < this.playerEntities.size(); ++i) {
+                if (((EntityPlayer) this.playerEntities.get(i)).worldObj == this) {
+                    ((EntityPlayerMP) this.playerEntities.get(i)).setPlayerWeather((!flag ? WeatherType.DOWNFALL : WeatherType.CLEAR), false);
+                }
+            }
+        }
+        for (int i = 0; i < this.playerEntities.size(); ++i) {
+            if (((EntityPlayer) this.playerEntities.get(i)).worldObj == this) {
+                ((EntityPlayerMP) this.playerEntities.get(i)).updateWeather(this.prevRainingStrength, this.rainingStrength, this.prevThunderingStrength, this.thunderingStrength);
+            }
+        }
+        // CraftBukkit end
     }
 
-    protected int getRenderDistanceChunks()
-    {
+    protected int getRenderDistanceChunks() {
         return this.mcServer.getConfigurationManager().getViewDistance();
     }
 
-    public MinecraftServer getMinecraftServer()
-    {
+    public MinecraftServer getMinecraftServer() {
         return this.mcServer;
     }
 
-    public EntityTracker getEntityTracker()
-    {
+    public EntityTracker getEntityTracker() {
         return this.theEntityTracker;
     }
 
-    public PlayerManager getPlayerManager()
-    {
+    public PlayerManager getPlayerManager() {
         return this.thePlayerManager;
     }
 
-    public Teleporter getDefaultTeleporter()
-    {
+    public Teleporter getDefaultTeleporter() {
         return this.worldTeleporter;
     }
 
-    public void spawnParticle(EnumParticleTypes particleType, double xCoord, double yCoord, double zCoord, int numberOfParticles, double p_175739_9_, double p_175739_11_, double p_175739_13_, double p_175739_15_, int ... p_175739_17_)
-    {
+    public void spawnParticle(EnumParticleTypes particleType, double xCoord, double yCoord, double zCoord, int numberOfParticles, double p_175739_9_, double p_175739_11_, double p_175739_13_, double p_175739_15_, int... p_175739_17_) {
         this.spawnParticle(particleType, false, xCoord, yCoord, zCoord, numberOfParticles, p_175739_9_, p_175739_11_, p_175739_13_, p_175739_15_, p_175739_17_);
     }
 
-    public void spawnParticle(EnumParticleTypes particleType, boolean p_180505_2_, double xCoord, double yCoord, double zCoord, int numberOfParticles, double xOffset, double yOffset, double zOffset, double p_180505_16_, int ... p_180505_18_)
-    {
-        S2APacketParticles s2apacketparticles = new S2APacketParticles(particleType, p_180505_2_, (float)xCoord, (float)yCoord, (float)zCoord, (float)xOffset, (float)yOffset, (float)zOffset, (float)p_180505_16_, numberOfParticles, p_180505_18_);
+    public void spawnParticle(EnumParticleTypes particleType, boolean p_180505_2_, double xCoord, double yCoord, double zCoord, int numberOfParticles, double xOffset, double yOffset, double zOffset, double p_180505_16_, int... p_180505_18_) {
+        this.spawnParticle(null, particleType, p_180505_2_, xCoord, yCoord, zCoord, numberOfParticles, xOffset, yOffset, zOffset, p_180505_16_, p_180505_18_);
+    }
 
-        for (int k = 0; k < this.playerEntities.size(); ++k)
-        {
-            EntityPlayerMP entityplayermp = (EntityPlayerMP)this.playerEntities.get(k);
+    public void spawnParticle(EntityPlayerMP sender, EnumParticleTypes particleType, boolean p_180505_2_, double xCoord, double yCoord, double zCoord, int numberOfParticles, double xOffset, double yOffset, double zOffset, double p_180505_16_, int... p_180505_18_) {
+        // CraftBukkit End
+        S2APacketParticles s2apacketparticles = new S2APacketParticles(particleType, p_180505_2_, (float) xCoord, (float) yCoord, (float) zCoord, (float) xOffset, (float) yOffset, (float) zOffset, (float) p_180505_16_, numberOfParticles, p_180505_18_);
+
+        for (int k = 0; k < this.playerEntities.size(); ++k) {
+            EntityPlayerMP entityplayermp = (EntityPlayerMP) this.playerEntities.get(k);
+            if (sender != null && !entityplayermp.getBukkitEntity().canSee(sender.getBukkitEntity())) continue; // CraftBukkit
             BlockPos blockpos = entityplayermp.getPosition();
             double d7 = blockpos.distanceSq(xCoord, yCoord, zCoord);
 
-            if (d7 <= 256.0D || p_180505_2_ && d7 <= 65536.0D)
-            {
+            if (d7 <= 256.0D || p_180505_2_ && d7 <= 65536.0D) {
                 entityplayermp.playerNetServerHandler.sendPacket(s2apacketparticles);
             }
         }
     }
 
-    public Entity getEntityFromUuid(UUID uuid)
-    {
-        return (Entity)this.entitiesByUuid.get(uuid);
+    public Entity getEntityFromUuid(UUID uuid) {
+        return (Entity) this.entitiesByUuid.get(uuid);
     }
 
-    public ListenableFuture addScheduledTask(Runnable runnableToSchedule)
-    {
+    public ListenableFuture addScheduledTask(Runnable runnableToSchedule) {
         return this.mcServer.addScheduledTask(runnableToSchedule);
     }
 
-    public boolean isCallingFromMinecraftThread()
-    {
+    public boolean isCallingFromMinecraftThread() {
         return this.mcServer.isCallingFromMinecraftThread();
     }
 
-    static class ServerBlockEventList extends ArrayList
-        {
-            private static final String __OBFID = "CL_00001439";
+    static class ServerBlockEventList extends ArrayList {
 
-            private ServerBlockEventList() {}
+        private static final String __OBFID = "CL_00001439";
 
-            ServerBlockEventList(Object p_i1521_1_)
-            {
-                this();
-            }
+        private ServerBlockEventList() {
         }
-}
+
+        ServerBlockEventList(Object p_i1521_1_) {
+            this();
+        }
+    }
+}
