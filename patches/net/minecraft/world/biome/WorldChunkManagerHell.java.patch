--- decompiled\net\minecraft\world\biome\WorldChunkManagerHell.java
+++ src\main\java\net\minecraft\world\biome\WorldChunkManagerHell.java
@@ -1,72 +1,62 @@
 package net.minecraft.world.biome;
 
 import java.util.Arrays;
 import java.util.List;
 import java.util.Random;
+
 import net.minecraft.util.BlockPos;
 
-public class WorldChunkManagerHell extends WorldChunkManager
-{
+public class WorldChunkManagerHell extends WorldChunkManager {
+
     private BiomeGenBase biomeGenerator;
     private float rainfall;
     private static final String __OBFID = "CL_00000169";
 
-    public WorldChunkManagerHell(BiomeGenBase p_i45374_1_, float p_i45374_2_)
-    {
+    public WorldChunkManagerHell(BiomeGenBase p_i45374_1_, float p_i45374_2_) {
         this.biomeGenerator = p_i45374_1_;
         this.rainfall = p_i45374_2_;
     }
 
-    public BiomeGenBase getBiomeGenerator(BlockPos p_180631_1_)
-    {
+    public BiomeGenBase getBiomeGenerator(BlockPos p_180631_1_) {
         return this.biomeGenerator;
     }
 
-    public BiomeGenBase[] getBiomesForGeneration(BiomeGenBase[] p_76937_1_, int p_76937_2_, int p_76937_3_, int p_76937_4_, int p_76937_5_)
-    {
-        if (p_76937_1_ == null || p_76937_1_.length < p_76937_4_ * p_76937_5_)
-        {
+    public BiomeGenBase[] getBiomesForGeneration(BiomeGenBase[] p_76937_1_, int p_76937_2_, int p_76937_3_, int p_76937_4_, int p_76937_5_) {
+        if (p_76937_1_ == null || p_76937_1_.length < p_76937_4_ * p_76937_5_) {
             p_76937_1_ = new BiomeGenBase[p_76937_4_ * p_76937_5_];
         }
 
         Arrays.fill(p_76937_1_, 0, p_76937_4_ * p_76937_5_, this.biomeGenerator);
         return p_76937_1_;
     }
 
-    public float[] getRainfall(float[] listToReuse, int x, int z, int width, int length)
-    {
-        if (listToReuse == null || listToReuse.length < width * length)
-        {
+    public float[] getRainfall(float[] listToReuse, int x, int z, int width, int length) {
+        if (listToReuse == null || listToReuse.length < width * length) {
             listToReuse = new float[width * length];
         }
 
         Arrays.fill(listToReuse, 0, width * length, this.rainfall);
         return listToReuse;
     }
 
-    public BiomeGenBase[] loadBlockGeneratorData(BiomeGenBase[] oldBiomeList, int x, int z, int width, int depth)
-    {
-        if (oldBiomeList == null || oldBiomeList.length < width * depth)
-        {
+    public BiomeGenBase[] loadBlockGeneratorData(BiomeGenBase[] oldBiomeList, int x, int z, int width, int depth) {
+        if (oldBiomeList == null || oldBiomeList.length < width * depth) {
             oldBiomeList = new BiomeGenBase[width * depth];
         }
 
         Arrays.fill(oldBiomeList, 0, width * depth, this.biomeGenerator);
         return oldBiomeList;
     }
 
-    public BiomeGenBase[] getBiomeGenAt(BiomeGenBase[] listToReuse, int x, int z, int width, int length, boolean cacheFlag)
-    {
+    public BiomeGenBase[] getBiomeGenAt(BiomeGenBase[] listToReuse, int x, int z, int width, int length, boolean cacheFlag) {
         return this.loadBlockGeneratorData(listToReuse, x, z, width, length);
     }
 
-    public BlockPos findBiomePosition(int x, int z, int range, List biomes, Random random)
-    {
+    public BlockPos findBiomePosition(int x, int z, int range, List biomes, Random random) {
         return biomes.contains(this.biomeGenerator) ? new BlockPos(x - range + random.nextInt(range * 2 + 1), 0, z - range + random.nextInt(range * 2 + 1)) : null;
     }
 
-    public boolean areBiomesViable(int p_76940_1_, int p_76940_2_, int p_76940_3_, List p_76940_4_)
-    {
+    public boolean areBiomesViable(int p_76940_1_, int p_76940_2_, int p_76940_3_, List p_76940_4_) {
         return p_76940_4_.contains(this.biomeGenerator);
     }
 }
