--- decompiled\net\minecraft\world\biome\WorldChunkManager.java
+++ src\main\java\net\minecraft\world\biome\WorldChunkManager.java
@@ -1,32 +1,31 @@
 package net.minecraft.world.biome;
 
-import com.google.common.collect.Lists;
 import java.util.List;
 import java.util.Random;
+
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.ReportedException;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldType;
 import net.minecraft.world.gen.layer.GenLayer;
 import net.minecraft.world.gen.layer.IntCache;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class WorldChunkManager
-{
+import com.google.common.collect.Lists;
+
+public class WorldChunkManager {
+
     private GenLayer genBiomes;
     private GenLayer biomeIndexLayer;
     private BiomeCache biomeCache;
     private List biomesToSpawnIn;
     private String field_180301_f;
     private static final String __OBFID = "CL_00000166";
 
-    protected WorldChunkManager()
-    {
+    protected WorldChunkManager() {
         this.biomeCache = new BiomeCache(this);
         this.field_180301_f = "";
         this.biomesToSpawnIn = Lists.newArrayList();
         this.biomesToSpawnIn.add(BiomeGenBase.forest);
         this.biomesToSpawnIn.add(BiomeGenBase.plains);
@@ -35,65 +34,53 @@
         this.biomesToSpawnIn.add(BiomeGenBase.forestHills);
         this.biomesToSpawnIn.add(BiomeGenBase.jungle);
         this.biomesToSpawnIn.add(BiomeGenBase.jungleHills);
     }
 
-    public WorldChunkManager(long p_i45744_1_, WorldType p_i45744_3_, String p_i45744_4_)
-    {
+    public WorldChunkManager(long p_i45744_1_, WorldType p_i45744_3_, String p_i45744_4_) {
         this();
         this.field_180301_f = p_i45744_4_;
         GenLayer[] agenlayer = GenLayer.initializeAllBiomeGenerators(p_i45744_1_, p_i45744_3_, p_i45744_4_);
         this.genBiomes = agenlayer[0];
         this.biomeIndexLayer = agenlayer[1];
     }
 
-    public WorldChunkManager(World worldIn)
-    {
+    public WorldChunkManager(World worldIn) {
         this(worldIn.getSeed(), worldIn.getWorldInfo().getTerrainType(), worldIn.getWorldInfo().getGeneratorOptions());
     }
 
-    public List getBiomesToSpawnIn()
-    {
+    public List getBiomesToSpawnIn() {
         return this.biomesToSpawnIn;
     }
 
-    public BiomeGenBase getBiomeGenerator(BlockPos p_180631_1_)
-    {
-        return this.func_180300_a(p_180631_1_, (BiomeGenBase)null);
+    public BiomeGenBase getBiomeGenerator(BlockPos p_180631_1_) {
+        return this.func_180300_a(p_180631_1_, (BiomeGenBase) null);
     }
 
-    public BiomeGenBase func_180300_a(BlockPos p_180300_1_, BiomeGenBase p_180300_2_)
-    {
+    public BiomeGenBase func_180300_a(BlockPos p_180300_1_, BiomeGenBase p_180300_2_) {
         return this.biomeCache.func_180284_a(p_180300_1_.getX(), p_180300_1_.getZ(), p_180300_2_);
     }
 
-    public float[] getRainfall(float[] listToReuse, int x, int z, int width, int length)
-    {
+    public float[] getRainfall(float[] listToReuse, int x, int z, int width, int length) {
         IntCache.resetIntCache();
 
-        if (listToReuse == null || listToReuse.length < width * length)
-        {
+        if (listToReuse == null || listToReuse.length < width * length) {
             listToReuse = new float[width * length];
         }
 
         int[] aint = this.biomeIndexLayer.getInts(x, z, width, length);
 
-        for (int i1 = 0; i1 < width * length; ++i1)
-        {
-            try
-            {
-                float f = (float)BiomeGenBase.getBiomeFromBiomeList(aint[i1], BiomeGenBase.field_180279_ad).getIntRainfall() / 65536.0F;
+        for (int i1 = 0; i1 < width * length; ++i1) {
+            try {
+                float f = (float) BiomeGenBase.getBiomeFromBiomeList(aint[i1], BiomeGenBase.field_180279_ad).getIntRainfall() / 65536.0F;
 
-                if (f > 1.0F)
-                {
+                if (f > 1.0F) {
                     f = 1.0F;
                 }
 
                 listToReuse[i1] = f;
-            }
-            catch (Throwable throwable)
-            {
+            } catch (Throwable throwable) {
                 CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Invalid Biome id");
                 CrashReportCategory crashreportcategory = crashreport.makeCategory("DownfallBlock");
                 crashreportcategory.addCrashSection("biome id", Integer.valueOf(i1));
                 crashreportcategory.addCrashSection("downfalls[] size", Integer.valueOf(listToReuse.length));
                 crashreportcategory.addCrashSection("x", Integer.valueOf(x));
@@ -105,38 +92,26 @@
         }
 
         return listToReuse;
     }
 
-    @SideOnly(Side.CLIENT)
-    public float getTemperatureAtHeight(float p_76939_1_, int p_76939_2_)
-    {
-        return p_76939_1_;
-    }
-
-    public BiomeGenBase[] getBiomesForGeneration(BiomeGenBase[] p_76937_1_, int p_76937_2_, int p_76937_3_, int p_76937_4_, int p_76937_5_)
-    {
+    public BiomeGenBase[] getBiomesForGeneration(BiomeGenBase[] p_76937_1_, int p_76937_2_, int p_76937_3_, int p_76937_4_, int p_76937_5_) {
         IntCache.resetIntCache();
 
-        if (p_76937_1_ == null || p_76937_1_.length < p_76937_4_ * p_76937_5_)
-        {
+        if (p_76937_1_ == null || p_76937_1_.length < p_76937_4_ * p_76937_5_) {
             p_76937_1_ = new BiomeGenBase[p_76937_4_ * p_76937_5_];
         }
 
         int[] aint = this.genBiomes.getInts(p_76937_2_, p_76937_3_, p_76937_4_, p_76937_5_);
 
-        try
-        {
-            for (int i1 = 0; i1 < p_76937_4_ * p_76937_5_; ++i1)
-            {
+        try {
+            for (int i1 = 0; i1 < p_76937_4_ * p_76937_5_; ++i1) {
                 p_76937_1_[i1] = BiomeGenBase.getBiomeFromBiomeList(aint[i1], BiomeGenBase.field_180279_ad);
             }
 
             return p_76937_1_;
-        }
-        catch (Throwable throwable)
-        {
+        } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Invalid Biome id");
             CrashReportCategory crashreportcategory = crashreport.makeCategory("RawBiomeBlock");
             crashreportcategory.addCrashSection("biomes[] size", Integer.valueOf(p_76937_1_.length));
             crashreportcategory.addCrashSection("x", Integer.valueOf(p_76937_2_));
             crashreportcategory.addCrashSection("z", Integer.valueOf(p_76937_3_));
@@ -144,70 +119,57 @@
             crashreportcategory.addCrashSection("h", Integer.valueOf(p_76937_5_));
             throw new ReportedException(crashreport);
         }
     }
 
-    public BiomeGenBase[] loadBlockGeneratorData(BiomeGenBase[] oldBiomeList, int x, int z, int width, int depth)
-    {
+    public BiomeGenBase[] loadBlockGeneratorData(BiomeGenBase[] oldBiomeList, int x, int z, int width, int depth) {
         return this.getBiomeGenAt(oldBiomeList, x, z, width, depth, true);
     }
 
-    public BiomeGenBase[] getBiomeGenAt(BiomeGenBase[] listToReuse, int x, int z, int width, int length, boolean cacheFlag)
-    {
+    public BiomeGenBase[] getBiomeGenAt(BiomeGenBase[] listToReuse, int x, int z, int width, int length, boolean cacheFlag) {
         IntCache.resetIntCache();
 
-        if (listToReuse == null || listToReuse.length < width * length)
-        {
+        if (listToReuse == null || listToReuse.length < width * length) {
             listToReuse = new BiomeGenBase[width * length];
         }
 
-        if (cacheFlag && width == 16 && length == 16 && (x & 15) == 0 && (z & 15) == 0)
-        {
+        if (cacheFlag && width == 16 && length == 16 && (x & 15) == 0 && (z & 15) == 0) {
             BiomeGenBase[] abiomegenbase1 = this.biomeCache.getCachedBiomes(x, z);
             System.arraycopy(abiomegenbase1, 0, listToReuse, 0, width * length);
             return listToReuse;
-        }
-        else
-        {
+        } else {
             int[] aint = this.biomeIndexLayer.getInts(x, z, width, length);
 
-            for (int i1 = 0; i1 < width * length; ++i1)
-            {
+            for (int i1 = 0; i1 < width * length; ++i1) {
                 listToReuse[i1] = BiomeGenBase.getBiomeFromBiomeList(aint[i1], BiomeGenBase.field_180279_ad);
             }
 
             return listToReuse;
         }
     }
 
-    public boolean areBiomesViable(int p_76940_1_, int p_76940_2_, int p_76940_3_, List p_76940_4_)
-    {
+    public boolean areBiomesViable(int p_76940_1_, int p_76940_2_, int p_76940_3_, List p_76940_4_) {
         IntCache.resetIntCache();
         int l = p_76940_1_ - p_76940_3_ >> 2;
         int i1 = p_76940_2_ - p_76940_3_ >> 2;
         int j1 = p_76940_1_ + p_76940_3_ >> 2;
         int k1 = p_76940_2_ + p_76940_3_ >> 2;
         int l1 = j1 - l + 1;
         int i2 = k1 - i1 + 1;
         int[] aint = this.genBiomes.getInts(l, i1, l1, i2);
 
-        try
-        {
-            for (int j2 = 0; j2 < l1 * i2; ++j2)
-            {
+        try {
+            for (int j2 = 0; j2 < l1 * i2; ++j2) {
                 BiomeGenBase biomegenbase = BiomeGenBase.getBiome(aint[j2]);
 
-                if (!p_76940_4_.contains(biomegenbase))
-                {
+                if (!p_76940_4_.contains(biomegenbase)) {
                     return false;
                 }
             }
 
             return true;
-        }
-        catch (Throwable throwable)
-        {
+        } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Invalid Biome id");
             CrashReportCategory crashreportcategory = crashreport.makeCategory("Layer");
             crashreportcategory.addCrashSection("Layer", this.genBiomes.toString());
             crashreportcategory.addCrashSection("x", Integer.valueOf(p_76940_1_));
             crashreportcategory.addCrashSection("z", Integer.valueOf(p_76940_2_));
@@ -215,12 +177,11 @@
             crashreportcategory.addCrashSection("allowed", p_76940_4_);
             throw new ReportedException(crashreport);
         }
     }
 
-    public BlockPos findBiomePosition(int x, int z, int range, List biomes, Random random)
-    {
+    public BlockPos findBiomePosition(int x, int z, int range, List biomes, Random random) {
         IntCache.resetIntCache();
         int l = x - range >> 2;
         int i1 = z - range >> 2;
         int j1 = x + range >> 2;
         int k1 = z + range >> 2;
@@ -228,26 +189,23 @@
         int i2 = k1 - i1 + 1;
         int[] aint = this.genBiomes.getInts(l, i1, l1, i2);
         BlockPos blockpos = null;
         int j2 = 0;
 
-        for (int k2 = 0; k2 < l1 * i2; ++k2)
-        {
+        for (int k2 = 0; k2 < l1 * i2; ++k2) {
             int l2 = l + k2 % l1 << 2;
             int i3 = i1 + k2 / l1 << 2;
             BiomeGenBase biomegenbase = BiomeGenBase.getBiome(aint[k2]);
 
-            if (biomes.contains(biomegenbase) && (blockpos == null || random.nextInt(j2 + 1) == 0))
-            {
+            if (biomes.contains(biomegenbase) && (blockpos == null || random.nextInt(j2 + 1) == 0)) {
                 blockpos = new BlockPos(l2, 0, i3);
                 ++j2;
             }
         }
 
         return blockpos;
     }
 
-    public void cleanupCache()
-    {
+    public void cleanupCache() {
         this.biomeCache.cleanupCache();
     }
 }
