---a/net/minecraft/world/biome/BiomeGenBase.java
+++b/net/minecraft/world/biome/BiomeGenBase.java
@@ -1,18 +1,10 @@
 package net.minecraft.world.biome;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-import com.google.common.collect.Sets;
-import java.awt.Color;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
 import java.util.Set;
+
 import net.minecraft.block.BlockFlower;
 import net.minecraft.block.BlockSand;
 import net.minecraft.block.BlockTallGrass;
@@ -31,9 +31,7 @@
 import net.minecraft.entity.passive.EntitySquid;
 import net.minecraft.init.Blocks;
 import net.minecraft.util.BlockPos;
-import net.minecraft.util.MathHelper;
 import net.minecraft.util.WeightedRandom;
-import net.minecraft.world.ColorizerFoliage;
-import net.minecraft.world.ColorizerGrass;
 import net.minecraft.world.World;
 import net.minecraft.world.chunk.ChunkPrimer;
 import net.minecraft.world.gen.NoiseGeneratorPerlin;
@@ -45,13 +45,11 @@
 import net.minecraft.world.gen.feature.WorldGenTallGrass;
 import net.minecraft.world.gen.feature.WorldGenTrees;
 import net.minecraft.world.gen.feature.WorldGenerator;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public abstract class BiomeGenBase
-{
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
+
+public abstract class BiomeGenBase {
+
     private static final Logger logger = LogManager.getLogger();
     protected static final BiomeGenBase.Height height_Default = new BiomeGenBase.Height(0.1F, 0.2F);
     protected static final BiomeGenBase.Height height_ShallowWaters = new BiomeGenBase.Height(-0.5F, 0.0F);
@@ -137,8 +137,7 @@
     protected WorldGenSwamp worldGeneratorSwamp;
     private static final String __OBFID = "CL_00000158";
 
-    protected BiomeGenBase(int p_i1971_1_)
-    {
+    public BiomeGenBase(int p_i1971_1_) {
         this.topBlock = Blocks.grass.getDefaultState();
         this.fillerBlock = Blocks.dirt.getDefaultState();
         this.fillerBlockMetadata = 5169201;
@@ -174,101 +174,81 @@
         this.spawnableCaveCreatureList.add(new BiomeGenBase.SpawnListEntry(EntityBat.class, 10, 8, 8));
     }
 
-    protected BiomeDecorator createBiomeDecorator()
-    {
+    public BiomeDecorator createBiomeDecorator() {
         return new BiomeDecorator();
     }
 
-    protected BiomeGenBase setTemperatureRainfall(float p_76732_1_, float p_76732_2_)
-    {
-        if (p_76732_1_ > 0.1F && p_76732_1_ < 0.2F)
-        {
+    public BiomeGenBase setTemperatureRainfall(float p_76732_1_, float p_76732_2_) {
+        if (p_76732_1_ > 0.1F && p_76732_1_ < 0.2F) {
             throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
-        }
-        else
-        {
+        } else {
             this.temperature = p_76732_1_;
             this.rainfall = p_76732_2_;
             return this;
         }
     }
 
-    protected final BiomeGenBase setHeight(BiomeGenBase.Height p_150570_1_)
-    {
+    public final BiomeGenBase setHeight(BiomeGenBase.Height p_150570_1_) {
         this.minHeight = p_150570_1_.rootHeight;
         this.maxHeight = p_150570_1_.variation;
         return this;
     }
 
-    protected BiomeGenBase setDisableRain()
-    {
+    public BiomeGenBase setDisableRain() {
         this.enableRain = false;
         return this;
     }
 
-    public WorldGenAbstractTree genBigTreeChance(Random p_150567_1_)
-    {
-        return (WorldGenAbstractTree)(p_150567_1_.nextInt(10) == 0 ? this.worldGeneratorBigTree : this.worldGeneratorTrees);
+    public WorldGenAbstractTree genBigTreeChance(Random p_150567_1_) {
+        return (WorldGenAbstractTree) (p_150567_1_.nextInt(10) == 0 ? this.worldGeneratorBigTree : this.worldGeneratorTrees);
     }
 
-    public WorldGenerator getRandomWorldGenForGrass(Random p_76730_1_)
-    {
+    public WorldGenerator getRandomWorldGenForGrass(Random p_76730_1_) {
         return new WorldGenTallGrass(BlockTallGrass.EnumType.GRASS);
     }
 
-    public BlockFlower.EnumFlowerType pickRandomFlower(Random p_180623_1_, BlockPos p_180623_2_)
-    {
+    public BlockFlower.EnumFlowerType pickRandomFlower(Random p_180623_1_, BlockPos p_180623_2_) {
         return p_180623_1_.nextInt(3) > 0 ? BlockFlower.EnumFlowerType.DANDELION : BlockFlower.EnumFlowerType.POPPY;
     }
 
-    protected BiomeGenBase setEnableSnow()
-    {
+    public BiomeGenBase setEnableSnow() {
         this.enableSnow = true;
         return this;
     }
 
-    protected BiomeGenBase setBiomeName(String p_76735_1_)
-    {
+    public BiomeGenBase setBiomeName(String p_76735_1_) {
         this.biomeName = p_76735_1_;
         return this;
     }
 
-    protected BiomeGenBase setFillerBlockMetadata(int p_76733_1_)
-    {
+    public BiomeGenBase setFillerBlockMetadata(int p_76733_1_) {
         this.fillerBlockMetadata = p_76733_1_;
         return this;
     }
 
-    protected BiomeGenBase setColor(int p_76739_1_)
-    {
+    public BiomeGenBase setColor(int p_76739_1_) {
         this.func_150557_a(p_76739_1_, false);
         return this;
     }
 
-    protected BiomeGenBase func_150563_c(int p_150563_1_)
-    {
+    public BiomeGenBase func_150563_c(int p_150563_1_) {
         this.field_150609_ah = p_150563_1_;
         return this;
     }
 
-    protected BiomeGenBase func_150557_a(int p_150557_1_, boolean p_150557_2_)
-    {
+    public BiomeGenBase func_150557_a(int p_150557_1_, boolean p_150557_2_) {
         this.color = p_150557_1_;
 
-        if (p_150557_2_)
-        {
+        if (p_150557_2_) {
             this.field_150609_ah = (p_150557_1_ & 16711422) >> 1;
-        }
-        else
-        {
+        } else {
             this.field_150609_ah = p_150557_1_;
         }
 
         return this;
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getSkyColorByTemp(float p_76731_1_)
-    {
-        p_76731_1_ /= 3.0F;
-        p_76731_1_ = MathHelper.clamp_float(p_76731_1_, -1.0F, 1.0F);
-        return Color.getHSBColor(0.62222224F - p_76731_1_ * 0.05F, 0.5F + p_76731_1_ * 0.1F, 1.0F).getRGB();
-    }
-
-    public List getSpawnableList(EnumCreatureType p_76747_1_)
-    {
-        switch (BiomeGenBase.SwitchEnumCreatureType.field_180275_a[p_76747_1_.ordinal()])
-        {
+    public List getSpawnableList(EnumCreatureType p_76747_1_) {
+        switch (BiomeGenBase.SwitchEnumCreatureType.field_180275_a[p_76747_1_.ordinal()]) {
             case 1:
                 return this.spawnableMonsterList;
             case 2:
@@ -292,156 +292,98 @@
         }
     }
 
-    public boolean getEnableSnow()
-    {
+    public boolean getEnableSnow() {
         return this.isSnowyBiome();
     }
 
-    public boolean canSpawnLightningBolt()
-    {
+    public boolean canSpawnLightningBolt() {
         return this.isSnowyBiome() ? false : this.enableRain;
     }
 
-    public boolean isHighHumidity()
-    {
+    public boolean isHighHumidity() {
         return this.rainfall > 0.85F;
     }
 
-    public float getSpawningChance()
-    {
+    public float getSpawningChance() {
         return 0.1F;
     }
 
-    public final int getIntRainfall()
-    {
-        return (int)(this.rainfall * 65536.0F);
+    public final int getIntRainfall() {
+        return (int) (this.rainfall * 65536.0F);
     }
 
-    @SideOnly(Side.CLIENT)
-    public final float getFloatRainfall()
-    {
-        return this.rainfall;
-    }
-
-    public final float getFloatTemperature(BlockPos pos)
-    {
-        if (pos.getY() > 64)
-        {
-            float f = (float)(temperatureNoise.func_151601_a((double)pos.getX() * 1.0D / 8.0D, (double)pos.getZ() * 1.0D / 8.0D) * 4.0D);
-            return this.temperature - (f + (float)pos.getY() - 64.0F) * 0.05F / 30.0F;
-        }
-        else
-        {
+    public final float getFloatTemperature(BlockPos pos) {
+        if (pos.getY() > 64) {
+            float f = (float) (temperatureNoise.func_151601_a((double) pos.getX() * 1.0D / 8.0D, (double) pos.getZ() * 1.0D / 8.0D) * 4.0D);
+            return this.temperature - (f + (float) pos.getY() - 64.0F) * 0.05F / 30.0F;
+        } else {
             return this.temperature;
         }
     }
 
-    public void decorate(World worldIn, Random p_180624_2_, BlockPos p_180624_3_)
-    {
+    public void decorate(World worldIn, Random p_180624_2_, BlockPos p_180624_3_) {
         this.theBiomeDecorator.decorate(worldIn, p_180624_2_, this, p_180624_3_);
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getGrassColorAtPos(BlockPos p_180627_1_)
-    {
-        double d0 = (double)MathHelper.clamp_float(this.getFloatTemperature(p_180627_1_), 0.0F, 1.0F);
-        double d1 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
-        return ColorizerGrass.getGrassColor(d0, d1);
-    }
-
-    @SideOnly(Side.CLIENT)
-    public int getFoliageColorAtPos(BlockPos p_180625_1_)
-    {
-        double d0 = (double)MathHelper.clamp_float(this.getFloatTemperature(p_180625_1_), 0.0F, 1.0F);
-        double d1 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
-        return ColorizerFoliage.getFoliageColor(d0, d1);
-    }
-
-    public boolean isSnowyBiome()
-    {
+    public boolean isSnowyBiome() {
         return this.enableSnow;
     }
 
-    public void genTerrainBlocks(World worldIn, Random p_180622_2_, ChunkPrimer p_180622_3_, int p_180622_4_, int p_180622_5_, double p_180622_6_)
-    {
+    public void genTerrainBlocks(World worldIn, Random p_180622_2_, ChunkPrimer p_180622_3_, int p_180622_4_, int p_180622_5_, double p_180622_6_) {
         this.generateBiomeTerrain(worldIn, p_180622_2_, p_180622_3_, p_180622_4_, p_180622_5_, p_180622_6_);
     }
 
-    public final void generateBiomeTerrain(World worldIn, Random p_180628_2_, ChunkPrimer p_180628_3_, int p_180628_4_, int p_180628_5_, double p_180628_6_)
-    {
+    public final void generateBiomeTerrain(World worldIn, Random p_180628_2_, ChunkPrimer p_180628_3_, int p_180628_4_, int p_180628_5_, double p_180628_6_) {
         boolean flag = true;
         IBlockState iblockstate = this.topBlock;
         IBlockState iblockstate1 = this.fillerBlock;
         int k = -1;
-        int l = (int)(p_180628_6_ / 3.0D + 3.0D + p_180628_2_.nextDouble() * 0.25D);
+        int l = (int) (p_180628_6_ / 3.0D + 3.0D + p_180628_2_.nextDouble() * 0.25D);
         int i1 = p_180628_4_ & 15;
         int j1 = p_180628_5_ & 15;
 
-        for (int k1 = 255; k1 >= 0; --k1)
-        {
-            if (k1 <= p_180628_2_.nextInt(5))
-            {
+        for (int k1 = 255; k1 >= 0; --k1) {
+            if (k1 <= p_180628_2_.nextInt(5)) {
                 p_180628_3_.setBlockState(j1, k1, i1, Blocks.bedrock.getDefaultState());
-            }
-            else
-            {
+            } else {
                 IBlockState iblockstate2 = p_180628_3_.getBlockState(j1, k1, i1);
 
-                if (iblockstate2.getBlock().getMaterial() == Material.air)
-                {
+                if (iblockstate2.getBlock().getMaterial() == Material.air) {
                     k = -1;
-                }
-                else if (iblockstate2.getBlock() == Blocks.stone)
-                {
-                    if (k == -1)
-                    {
-                        if (l <= 0)
-                        {
+                } else if (iblockstate2.getBlock() == Blocks.stone) {
+                    if (k == -1) {
+                        if (l <= 0) {
                             iblockstate = null;
                             iblockstate1 = Blocks.stone.getDefaultState();
-                        }
-                        else if (k1 >= 59 && k1 <= 64)
-                        {
+                        } else if (k1 >= 59 && k1 <= 64) {
                             iblockstate = this.topBlock;
                             iblockstate1 = this.fillerBlock;
                         }
 
-                        if (k1 < 63 && (iblockstate == null || iblockstate.getBlock().getMaterial() == Material.air))
-                        {
-                            if (this.getFloatTemperature(new BlockPos(p_180628_4_, k1, p_180628_5_)) < 0.15F)
-                            {
+                        if (k1 < 63 && (iblockstate == null || iblockstate.getBlock().getMaterial() == Material.air)) {
+                            if (this.getFloatTemperature(new BlockPos(p_180628_4_, k1, p_180628_5_)) < 0.15F) {
                                 iblockstate = Blocks.ice.getDefaultState();
-                            }
-                            else
-                            {
+                            } else {
                                 iblockstate = Blocks.water.getDefaultState();
                             }
                         }
 
                         k = l;
 
-                        if (k1 >= 62)
-                        {
+                        if (k1 >= 62) {
                             p_180628_3_.setBlockState(j1, k1, i1, iblockstate);
-                        }
-                        else if (k1 < 56 - l)
-                        {
+                        } else if (k1 < 56 - l) {
                             iblockstate = null;
                             iblockstate1 = Blocks.stone.getDefaultState();
                             p_180628_3_.setBlockState(j1, k1, i1, Blocks.gravel.getDefaultState());
-                        }
-                        else
-                        {
+                        } else {
                             p_180628_3_.setBlockState(j1, k1, i1, iblockstate1);
                         }
-                    }
-                    else if (k > 0)
-                    {
+                    } else if (k > 0) {
                         --k;
                         p_180628_3_.setBlockState(j1, k1, i1, iblockstate1);
 
-                        if (k == 0 && iblockstate1.getBlock() == Blocks.sand)
-                        {
+                        if (k == 0 && iblockstate1.getBlock() == Blocks.sand) {
                             k = p_180628_2_.nextInt(4) + Math.max(0, k1 - 63);
                             iblockstate1 = iblockstate1.getValue(BlockSand.VARIANT) == BlockSand.EnumType.RED_SAND ? Blocks.red_sandstone.getDefaultState() : Blocks.sandstone.getDefaultState();
                         }
@@ -451,57 +451,45 @@
         }
     }
 
-    protected BiomeGenBase createMutation()
-    {
+    public BiomeGenBase createMutation() {
         return this.createMutatedBiome(this.biomeID + 128);
     }
 
-    protected BiomeGenBase createMutatedBiome(int p_180277_1_)
-    {
+    public BiomeGenBase createMutatedBiome(int p_180277_1_) {
         return new BiomeGenMutated(p_180277_1_, this);
     }
 
-    public Class getBiomeClass()
-    {
+    public Class getBiomeClass() {
         return this.getClass();
     }
 
-    public boolean isEqualTo(BiomeGenBase p_150569_1_)
-    {
+    public boolean isEqualTo(BiomeGenBase p_150569_1_) {
         return p_150569_1_ == this ? true : (p_150569_1_ == null ? false : this.getBiomeClass() == p_150569_1_.getBiomeClass());
     }
 
-    public BiomeGenBase.TempCategory getTempCategory()
-    {
-        return (double)this.temperature < 0.2D ? BiomeGenBase.TempCategory.COLD : ((double)this.temperature < 1.0D ? BiomeGenBase.TempCategory.MEDIUM : BiomeGenBase.TempCategory.WARM);
+    public BiomeGenBase.TempCategory getTempCategory() {
+        return (double) this.temperature < 0.2D ? BiomeGenBase.TempCategory.COLD : ((double) this.temperature < 1.0D ? BiomeGenBase.TempCategory.MEDIUM : BiomeGenBase.TempCategory.WARM);
     }
 
-    public static BiomeGenBase[] getBiomeGenArray()
-    {
+    public static BiomeGenBase[] getBiomeGenArray() {
         return biomeList;
     }
 
-    public static BiomeGenBase getBiome(int p_150568_0_)
-    {
-        return getBiomeFromBiomeList(p_150568_0_, (BiomeGenBase)null);
+    public static BiomeGenBase getBiome(int p_150568_0_) {
+        return getBiomeFromBiomeList(p_150568_0_, (BiomeGenBase) null);
     }
 
-    public static BiomeGenBase getBiomeFromBiomeList(int p_180276_0_, BiomeGenBase p_180276_1_)
-    {
-        if (p_180276_0_ >= 0 && p_180276_0_ <= biomeList.length)
-        {
+    public static BiomeGenBase getBiomeFromBiomeList(int p_180276_0_, BiomeGenBase p_180276_1_) {
+        if (p_180276_0_ >= 0 && p_180276_0_ <= biomeList.length) {
             BiomeGenBase biomegenbase1 = biomeList[p_180276_0_];
             return biomegenbase1 == null ? p_180276_1_ : biomegenbase1;
-        }
-        else
-        {
+        } else {
             logger.warn("Biome ID is out of bounds: " + p_180276_0_ + ", defaulting to 0 (Ocean)");
             return ocean;
         }
     }
 
-    static
-    {
+    static {
         plains.createMutation();
         desert.createMutation();
         forest.createMutation();
@@ -526,21 +526,17 @@
         BiomeGenBase[] var0 = biomeList;
         int var1 = var0.length;
 
-        for (int var2 = 0; var2 < var1; ++var2)
-        {
+        for (int var2 = 0; var2 < var1; ++var2) {
             BiomeGenBase var3 = var0[var2];
 
-            if (var3 != null)
-            {
-                if (BIOME_ID_MAP.containsKey(var3.biomeName))
-                {
-                    throw new Error("Biome \"" + var3.biomeName + "\" is defined as both ID " + ((BiomeGenBase)BIOME_ID_MAP.get(var3.biomeName)).biomeID + " and " + var3.biomeID);
+            if (var3 != null) {
+                if (BIOME_ID_MAP.containsKey(var3.biomeName)) {
+                    throw new Error("Biome \"" + var3.biomeName + "\" is defined as both ID " + ((BiomeGenBase) BIOME_ID_MAP.get(var3.biomeName)).biomeID + " and " + var3.biomeID);
                 }
 
                 BIOME_ID_MAP.put(var3.biomeName, var3);
 
-                if (var3.biomeID < 128)
-                {
+                if (var3.biomeID < 128) {
                     explorationBiomesList.add(var3);
                 }
             }
@@ -555,95 +555,74 @@
         DOUBLE_PLANT_GENERATOR = new WorldGenDoublePlant();
     }
 
-    public static class Height
-        {
-            public float rootHeight;
-            public float variation;
-            private static final String __OBFID = "CL_00000159";
+    public static class Height {
 
-            public Height(float p_i45371_1_, float p_i45371_2_)
-            {
-                this.rootHeight = p_i45371_1_;
-                this.variation = p_i45371_2_;
-            }
+        public float rootHeight;
+        public float variation;
+        private static final String __OBFID = "CL_00000159";
 
-            public BiomeGenBase.Height attenuate()
-            {
-                return new BiomeGenBase.Height(this.rootHeight * 0.8F, this.variation * 0.6F);
-            }
+        public Height(float p_i45371_1_, float p_i45371_2_) {
+            this.rootHeight = p_i45371_1_;
+            this.variation = p_i45371_2_;
         }
 
-    public static class SpawnListEntry extends WeightedRandom.Item
-        {
-            public Class entityClass;
-            public int minGroupCount;
-            public int maxGroupCount;
-            private static final String __OBFID = "CL_00000161";
+        public BiomeGenBase.Height attenuate() {
+            return new BiomeGenBase.Height(this.rootHeight * 0.8F, this.variation * 0.6F);
+        }
+    }
 
-            public SpawnListEntry(Class p_i1970_1_, int p_i1970_2_, int p_i1970_3_, int p_i1970_4_)
-            {
-                super(p_i1970_2_);
-                this.entityClass = p_i1970_1_;
-                this.minGroupCount = p_i1970_3_;
-                this.maxGroupCount = p_i1970_4_;
-            }
+    public static class SpawnListEntry extends WeightedRandom.Item {
 
-            public String toString()
-            {
-                return this.entityClass.getSimpleName() + "*(" + this.minGroupCount + "-" + this.maxGroupCount + "):" + this.itemWeight;
-            }
+        public Class entityClass;
+        public int minGroupCount;
+        public int maxGroupCount;
+        private static final String __OBFID = "CL_00000161";
+
+        public SpawnListEntry(Class p_i1970_1_, int p_i1970_2_, int p_i1970_3_, int p_i1970_4_) {
+            super(p_i1970_2_);
+            this.entityClass = p_i1970_1_;
+            this.minGroupCount = p_i1970_3_;
+            this.maxGroupCount = p_i1970_4_;
         }
 
-    static final class SwitchEnumCreatureType
-        {
-            static final int[] field_180275_a = new int[EnumCreatureType.values().length];
-            private static final String __OBFID = "CL_00002150";
+        public String toString() {
+            return this.entityClass.getSimpleName() + "*(" + this.minGroupCount + "-" + this.maxGroupCount + "):" + this.itemWeight;
+        }
+    }
 
-            static
-            {
-                try
-                {
-                    field_180275_a[EnumCreatureType.MONSTER.ordinal()] = 1;
-                }
-                catch (NoSuchFieldError var4)
-                {
-                    ;
-                }
+    static final class SwitchEnumCreatureType {
 
-                try
-                {
-                    field_180275_a[EnumCreatureType.CREATURE.ordinal()] = 2;
-                }
-                catch (NoSuchFieldError var3)
-                {
-                    ;
-                }
+        static final int[] field_180275_a = new int[EnumCreatureType.values().length];
+        private static final String __OBFID = "CL_00002150";
 
-                try
-                {
-                    field_180275_a[EnumCreatureType.WATER_CREATURE.ordinal()] = 3;
-                }
-                catch (NoSuchFieldError var2)
-                {
-                    ;
-                }
+        static {
+            try {
+                field_180275_a[EnumCreatureType.MONSTER.ordinal()] = 1;
+            } catch (NoSuchFieldError var4) {
+                ;
+            }
 
-                try
-                {
-                    field_180275_a[EnumCreatureType.AMBIENT.ordinal()] = 4;
-                }
-                catch (NoSuchFieldError var1)
-                {
-                    ;
-                }
+            try {
+                field_180275_a[EnumCreatureType.CREATURE.ordinal()] = 2;
+            } catch (NoSuchFieldError var3) {
+                ;
             }
+
+            try {
+                field_180275_a[EnumCreatureType.WATER_CREATURE.ordinal()] = 3;
+            } catch (NoSuchFieldError var2) {
+                ;
+            }
+
+            try {
+                field_180275_a[EnumCreatureType.AMBIENT.ordinal()] = 4;
+            } catch (NoSuchFieldError var1) {
+                ;
+            }
         }
+    }
 
-    public static enum TempCategory
-    {
+    public static enum TempCategory {
         OCEAN,
         COLD,
         MEDIUM,
@@ -648,4 +648,4 @@
 
         private static final String __OBFID = "CL_00000160";
     }
-}
+}
