---a/net/minecraft/world/storage/MapData.java
+++b/net/minecraft/world/storage/MapData.java
@@ -1,12 +1,12 @@
 package net.minecraft.world.storage;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
+import java.util.ArrayList;
+import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.UUID;
+
 import net.minecraft.entity.item.EntityItemFrame;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.ItemStack;
@@ -18,65 +18,109 @@
 import net.minecraft.world.World;
 import net.minecraft.world.WorldSavedData;
 
-public class MapData extends WorldSavedData
-{
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.map.CraftMapView;
+import org.bukkit.craftbukkit.map.RenderData;
+import org.bukkit.map.MapCursor;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
+public class MapData extends WorldSavedData {
+
     public int xCenter;
     public int zCenter;
     public byte dimension;
     public byte scale;
     public byte[] colors = new byte[16384];
     public List playersArrayList = Lists.newArrayList();
-    private Map playersHashMap = Maps.newHashMap();
+    public Map playersHashMap = Maps.newHashMap(); // Spigot -- make public
     public Map playersVisibleOnMap = Maps.newLinkedHashMap();
     private static final String __OBFID = "CL_00000577";
 
-    public MapData(String p_i2140_1_)
-    {
+    // CraftBukkit start
+    public final CraftMapView mapView;
+    private CraftServer server;
+    private UUID uniqueId = null;
+    // CraftBukkit end
+
+    public MapData(String p_i2140_1_) {
         super(p_i2140_1_);
+        // CraftBukkit start
+        mapView = new CraftMapView(this);
+        server = (CraftServer) org.bukkit.Bukkit.getServer();
+        // CraftBukkit end
     }
 
-    public void func_176054_a(double p_176054_1_, double p_176054_3_, int p_176054_5_)
-    {
+    public void func_176054_a(double p_176054_1_, double p_176054_3_, int p_176054_5_) {
         int j = 128 * (1 << p_176054_5_);
-        int k = MathHelper.floor_double((p_176054_1_ + 64.0D) / (double)j);
-        int l = MathHelper.floor_double((p_176054_3_ + 64.0D) / (double)j);
+        int k = MathHelper.floor_double((p_176054_1_ + 64.0D) / (double) j);
+        int l = MathHelper.floor_double((p_176054_3_ + 64.0D) / (double) j);
         this.xCenter = k * j + j / 2 - 64;
         this.zCenter = l * j + j / 2 - 64;
     }
 
-    public void readFromNBT(NBTTagCompound nbt)
-    {
-        this.dimension = nbt.getByte("dimension");
+    public void readFromNBT(NBTTagCompound nbt) {
+        // CraftBukkit start
+        byte dimension = nbt.getByte("dimension");
+
+        if (dimension >= 10) {
+            long least = nbt.getLong("UUIDLeast");
+            long most = nbt.getLong("UUIDMost");
+
+            if (least != 0L && most != 0L) {
+                this.uniqueId = new UUID(most, least);
+
+                CraftWorld world = (CraftWorld) server.getWorld(this.uniqueId);
+                // Check if the stored world details are correct.
+                if (world == null) {
+                    /* All Maps which do not have their valid world loaded are set to a dimension which hopefully won't be reached.
+                       This is to prevent them being corrupted with the wrong map data. */
+                    dimension = 127;
+                } else {
+                    dimension = (byte) world.getHandle().dimension;
+                }
+            }
+        }
+
+        this.dimension = dimension;
+        // CraftBukkit end
         this.xCenter = nbt.getInteger("xCenter");
         this.zCenter = nbt.getInteger("zCenter");
         this.scale = nbt.getByte("scale");
-        this.scale = (byte)MathHelper.clamp_int(this.scale, 0, 4);
+        this.scale = (byte) MathHelper.clamp_int(this.scale, 0, 4);
         short short1 = nbt.getShort("width");
         short short2 = nbt.getShort("height");
 
-        if (short1 == 128 && short2 == 128)
-        {
+        if (short1 == 128 && short2 == 128) {
             this.colors = nbt.getByteArray("colors");
-        }
-        else
-        {
+        } else {
             byte[] abyte = nbt.getByteArray("colors");
             this.colors = new byte[16384];
             int i = (128 - short1) / 2;
             int j = (128 - short2) / 2;
 
-            for (int k = 0; k < short2; ++k)
-            {
+            for (int k = 0; k < short2; ++k) {
                 int l = k + j;
 
-                if (l >= 0 || l < 128)
-                {
-                    for (int i1 = 0; i1 < short1; ++i1)
-                    {
+                if (l >= 0 || l < 128) {
+                    for (int i1 = 0; i1 < short1; ++i1) {
                         int j1 = i1 + i;
 
-                        if (j1 >= 0 || j1 < 128)
-                        {
+                        if (j1 >= 0 || j1 < 128) {
                             this.colors[j1 + l * 128] = abyte[i1 + k * short1];
                         }
                     }
@@ -85,94 +85,115 @@
         }
     }
 
-    public void writeToNBT(NBTTagCompound nbt)
-    {
+    public void writeToNBT(NBTTagCompound nbt) {
+        // CraftBukkit start
+        if (this.dimension >= 10) {
+            if (this.uniqueId == null) {
+                for (org.bukkit.World world : server.getWorlds()) {
+                    CraftWorld cWorld = (CraftWorld) world;
+                    if (cWorld.getHandle().dimension == this.dimension) {
+                        this.uniqueId = cWorld.getUID();
+                        break;
+                    }
+                }
+            }
+            /* Perform a second check to see if a matching world was found, this is a necessary
+               change incase Maps are forcefully unlinked from a World and lack a UID.*/
+            if (this.uniqueId != null) {
+                nbt.setLong("UUIDLeast", this.uniqueId.getLeastSignificantBits());
+                nbt.setLong("UUIDMost", this.uniqueId.getMostSignificantBits());
+            }
+        }
+        // CraftBukkit end
         nbt.setByte("dimension", this.dimension);
         nbt.setInteger("xCenter", this.xCenter);
         nbt.setInteger("zCenter", this.zCenter);
         nbt.setByte("scale", this.scale);
-        nbt.setShort("width", (short)128);
-        nbt.setShort("height", (short)128);
+        nbt.setShort("width", (short) 128);
+        nbt.setShort("height", (short) 128);
         nbt.setByteArray("colors", this.colors);
     }
 
-    public void updateVisiblePlayers(EntityPlayer player, ItemStack mapStack)
-    {
-        if (!this.playersHashMap.containsKey(player))
-        {
+    public void updateVisiblePlayers(EntityPlayer player, ItemStack mapStack) {
+        if (!this.playersHashMap.containsKey(player)) {
             MapData.MapInfo mapinfo = new MapData.MapInfo(player);
             this.playersHashMap.put(player, mapinfo);
             this.playersArrayList.add(mapinfo);
         }
 
-        if (!player.inventory.hasItemStack(mapStack))
-        {
+        if (!player.inventory.hasItemStack(mapStack)) {
             this.playersVisibleOnMap.remove(player.getName());
         }
 
-        for (int i = 0; i < this.playersArrayList.size(); ++i)
-        {
-            MapData.MapInfo mapinfo1 = (MapData.MapInfo)this.playersArrayList.get(i);
+        for (int i = 0; i < this.playersArrayList.size(); ++i) {
+            MapData.MapInfo mapinfo1 = (MapData.MapInfo) this.playersArrayList.get(i);
 
-            if (!mapinfo1.entityplayerObj.isDead && (mapinfo1.entityplayerObj.inventory.hasItemStack(mapStack) || mapStack.isOnItemFrame()))
-            {
-                if (!mapStack.isOnItemFrame() && mapinfo1.entityplayerObj.dimension == this.dimension)
-                {
-                    this.updatePlayersVisibleOnMap(0, mapinfo1.entityplayerObj.worldObj, mapinfo1.entityplayerObj.getName(), mapinfo1.entityplayerObj.posX, mapinfo1.entityplayerObj.posZ, (double)mapinfo1.entityplayerObj.rotationYaw);
+            if (!mapinfo1.entityplayerObj.isDead && (mapinfo1.entityplayerObj.inventory.hasItemStack(mapStack) || mapStack.isOnItemFrame())) {
+                if (!mapStack.isOnItemFrame() && mapinfo1.entityplayerObj.dimension == this.dimension) {
+                    this.updatePlayersVisibleOnMap(0, mapinfo1.entityplayerObj.worldObj, mapinfo1.entityplayerObj.getName(), mapinfo1.entityplayerObj.posX, mapinfo1.entityplayerObj.posZ, (double) mapinfo1.entityplayerObj.rotationYaw);
                 }
-            }
-            else
-            {
+            } else {
                 this.playersHashMap.remove(mapinfo1.entityplayerObj);
                 this.playersArrayList.remove(mapinfo1);
             }
         }
 
-        if (mapStack.isOnItemFrame())
-        {
+        if (mapStack.isOnItemFrame()) {
             EntityItemFrame entityitemframe = mapStack.getItemFrame();
             BlockPos blockpos = entityitemframe.func_174857_n();
-            this.updatePlayersVisibleOnMap(1, player.worldObj, "frame-" + entityitemframe.getEntityId(), (double)blockpos.getX(), (double)blockpos.getZ(), (double)(entityitemframe.field_174860_b.getHorizontalIndex() * 90));
+            this.updatePlayersVisibleOnMap(1, player.worldObj, "frame-" + entityitemframe.getEntityId(), (double) blockpos.getX(), (double) blockpos.getZ(), (double) (entityitemframe.field_174860_b.getHorizontalIndex() * 90));
         }
 
-        if (mapStack.hasTagCompound() && mapStack.getTagCompound().hasKey("Decorations", 9))
-        {
+        if (mapStack.hasTagCompound() && mapStack.getTagCompound().hasKey("Decorations", 9)) {
             NBTTagList nbttaglist = mapStack.getTagCompound().getTagList("Decorations", 10);
 
-            for (int j = 0; j < nbttaglist.tagCount(); ++j)
-            {
+            for (int j = 0; j < nbttaglist.tagCount(); ++j) {
                 NBTTagCompound nbttagcompound = nbttaglist.getCompoundTagAt(j);
 
-                if (!this.playersVisibleOnMap.containsKey(nbttagcompound.getString("id")))
-                {
+                if (!this.playersVisibleOnMap.containsKey(nbttagcompound.getString("id"))) {
                     this.updatePlayersVisibleOnMap(nbttagcompound.getByte("type"), player.worldObj, nbttagcompound.getString("id"), nbttagcompound.getDouble("x"), nbttagcompound.getDouble("z"), nbttagcompound.getDouble("rot"));
                 }
             }
         }
     }
 
-    private void updatePlayersVisibleOnMap(int p_82567_1_, World worldIn, String p_82567_3_, double p_82567_4_, double p_82567_6_, double p_82567_8_)
-    {
+    private void updatePlayersVisibleOnMap(int p_82567_1_, World worldIn, String p_82567_3_, double p_82567_4_, double p_82567_6_, double p_82567_8_) {
         int j = 1 << this.scale;
-        float f = (float)(p_82567_4_ - (double)this.xCenter) / (float)j;
-        float f1 = (float)(p_82567_6_ - (double)this.zCenter) / (float)j;
-        byte b0 = (byte)((int)((double)(f * 2.0F) + 0.5D));
-        byte b1 = (byte)((int)((double)(f1 * 2.0F) + 0.5D));
+        float f = (float) (p_82567_4_ - (double) this.xCenter) / (float) j;
+        float f1 = (float) (p_82567_6_ - (double) this.zCenter) / (float) j;
+        byte b0 = (byte) ((int) ((double) (f * 2.0F) + 0.5D));
+        byte b1 = (byte) ((int) ((double) (f1 * 2.0F) + 0.5D));
         byte b3 = 63;
         byte b2;
 
-        if (f >= (float)(-b3) && f1 >= (float)(-b3) && f <= (float)b3 && f1 <= (float)b3)
-        {
+        if (f >= (float) (-b3) && f1 >= (float) (-b3) && f <= (float) b3 && f1 <= (float) b3) {
             p_82567_8_ += p_82567_8_ < 0.0D ? -8.0D : 8.0D;
-            b2 = (byte)((int)(p_82567_8_ * 16.0D / 360.0D));
+            b2 = (byte) ((int) (p_82567_8_ * 16.0D / 360.0D));
 
-            if (this.dimension < 0)
-            {
-                int k = (int)(worldIn.getWorldInfo().getWorldTime() / 10L);
-                b2 = (byte)(k * k * 34187121 + k * 121 >> 15 & 15);
+            if (this.dimension < 0) {
+                int k = (int) (worldIn.getWorldInfo().getWorldTime() / 10L);
+                b2 = (byte) (k * k * 34187121 + k * 121 >> 15 & 15);
             }
-        }
-        else
-        {
-            if (Math.abs(f) >= 320.0F || Math.abs(f1) >= 320.0F)
-            {
+        } else {
+            if (Math.abs(f) >= 320.0F || Math.abs(f1) >= 320.0F) {
                 this.playersVisibleOnMap.remove(p_82567_3_);
                 return;
             }
@@ -183,55 +183,46 @@
             p_82567_1_ = 6;
             b2 = 0;
 
-            if (f <= (float)(-b3))
-            {
-                b0 = (byte)((int)((double)(b3 * 2) + 2.5D));
+            if (f <= (float) (-b3)) {
+                b0 = (byte) ((int) ((double) (b3 * 2) + 2.5D));
             }
 
-            if (f1 <= (float)(-b3))
-            {
-                b1 = (byte)((int)((double)(b3 * 2) + 2.5D));
+            if (f1 <= (float) (-b3)) {
+                b1 = (byte) ((int) ((double) (b3 * 2) + 2.5D));
             }
 
-            if (f >= (float)b3)
-            {
-                b0 = (byte)(b3 * 2 + 1);
+            if (f >= (float) b3) {
+                b0 = (byte) (b3 * 2 + 1);
             }
 
-            if (f1 >= (float)b3)
-            {
-                b1 = (byte)(b3 * 2 + 1);
+            if (f1 >= (float) b3) {
+                b1 = (byte) (b3 * 2 + 1);
             }
         }
 
-        this.playersVisibleOnMap.put(p_82567_3_, new Vec4b((byte)p_82567_1_, b0, b1, b2));
+        this.playersVisibleOnMap.put(p_82567_3_, new Vec4b((byte) p_82567_1_, b0, b1, b2));
     }
 
-    public Packet getMapPacket(ItemStack mapStack, World worldIn, EntityPlayer player)
-    {
-        MapData.MapInfo mapinfo = (MapData.MapInfo)this.playersHashMap.get(player);
+    public Packet getMapPacket(ItemStack mapStack, World worldIn, EntityPlayer player) {
+        MapData.MapInfo mapinfo = (MapData.MapInfo) this.playersHashMap.get(player);
         return mapinfo == null ? null : mapinfo.getPacket(mapStack);
     }
 
-    public void updateMapData(int p_176053_1_, int p_176053_2_)
-    {
+    public void updateMapData(int p_176053_1_, int p_176053_2_) {
         super.markDirty();
         Iterator iterator = this.playersArrayList.iterator();
 
-        while (iterator.hasNext())
-        {
-            MapData.MapInfo mapinfo = (MapData.MapInfo)iterator.next();
+        while (iterator.hasNext()) {
+            MapData.MapInfo mapinfo = (MapData.MapInfo) iterator.next();
             mapinfo.update(p_176053_1_, p_176053_2_);
         }
     }
 
-    public MapData.MapInfo getMapInfo(EntityPlayer p_82568_1_)
-    {
-        MapData.MapInfo mapinfo = (MapData.MapInfo)this.playersHashMap.get(p_82568_1_);
+    public MapData.MapInfo getMapInfo(EntityPlayer p_82568_1_) {
+        MapData.MapInfo mapinfo = (MapData.MapInfo) this.playersHashMap.get(p_82568_1_);
 
-        if (mapinfo == null)
-        {
+        if (mapinfo == null) {
             mapinfo = new MapData.MapInfo(p_82568_1_);
             this.playersHashMap.put(p_82568_1_, mapinfo);
             this.playersArrayList.add(mapinfo);
@@ -239,8 +239,8 @@
         return mapinfo;
     }
 
-    public class MapInfo
-    {
+    public class MapInfo {
+
         public final EntityPlayer entityplayerObj;
         private boolean field_176105_d = true;
         private int minX = 0;
@@ -251,34 +251,40 @@
         public int field_82569_d;
         private static final String __OBFID = "CL_00000578";
 
-        public MapInfo(EntityPlayer p_i2138_2_)
-        {
+        public MapInfo(EntityPlayer p_i2138_2_) {
             this.entityplayerObj = p_i2138_2_;
         }
 
-        public Packet getPacket(ItemStack p_176101_1_)
-        {
-            if (this.field_176105_d)
-            {
+        public Packet getPacket(ItemStack stack) { // SpigotMCP -- Use sensible names
+            // CraftBukkit start
+            RenderData render = MapData.this.mapView.render((CraftPlayer) this.entityplayerObj.getBukkitEntity()); // CraftBukkit
+
+            Collection<Vec4b> icons = new ArrayList();
+
+            for (MapCursor cursor : render.cursors) {
+
+                if (cursor.isVisible()) {
+                    icons.add(new Vec4b(cursor.getRawType(), cursor.getX(), cursor.getY(), cursor.getDirection()));
+                }
+            }
+
+
+            if (this.field_176105_d) {
                 this.field_176105_d = false;
-                return new S34PacketMaps(p_176101_1_.getMetadata(), MapData.this.scale, MapData.this.playersVisibleOnMap.values(), MapData.this.colors, this.minX, this.minY, this.maxX + 1 - this.minX, this.maxY + 1 - this.minY);
+                return new S34PacketMaps(stack.getMetadata(), MapData.this.scale, icons, render.buffer, this.minX, this.minY, this.maxX + 1 - this.minX, this.maxY + 1 - this.minY);
+            } else {
+                return this.field_176109_i++ % 5 == 0 ? new S34PacketMaps(stack.getMetadata(), MapData.this.scale, icons, render.buffer, 0, 0, 0, 0) : null;
             }
-            else
-            {
-                return this.field_176109_i++ % 5 == 0 ? new S34PacketMaps(p_176101_1_.getMetadata(), MapData.this.scale, MapData.this.playersVisibleOnMap.values(), MapData.this.colors, 0, 0, 0, 0) : null;
-            }
+            // CraftBukkit end
         }
 
-        public void update(int p_176102_1_, int p_176102_2_)
-        {
-            if (this.field_176105_d)
-            {
+        public void update(int p_176102_1_, int p_176102_2_) {
+            if (this.field_176105_d) {
                 this.minX = Math.min(this.minX, p_176102_1_);
                 this.minY = Math.min(this.minY, p_176102_2_);
                 this.maxX = Math.max(this.maxX, p_176102_1_);
                 this.maxY = Math.max(this.maxY, p_176102_2_);
-            }
-            else
-            {
+            } else {
                 this.field_176105_d = true;
                 this.minX = p_176102_1_;
                 this.minY = p_176102_2_;
@@ -288,4 +288,4 @@
             }
         }
     }
-}
+}
