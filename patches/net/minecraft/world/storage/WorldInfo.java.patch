---a/net/minecraft/world/storage/WorldInfo.java
+++b/net/minecraft/world/storage/WorldInfo.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.storage;
 
 import java.util.concurrent.Callable;
+
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.server.MinecraftServer;
@@ -9,11 +9,7 @@
 import net.minecraft.world.GameRules;
 import net.minecraft.world.WorldSettings;
 import net.minecraft.world.WorldType;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class WorldInfo
-{
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+import org.bukkit.event.weather.ThunderChangeEvent;
+import org.bukkit.event.weather.WeatherChangeEvent;
+
+public class WorldInfo {
+
     public static final EnumDifficulty DEFAULT_DIFFICULTY = EnumDifficulty.NORMAL;
     private long randomSeed;
     private WorldType terrainType;
@@ -53,8 +53,7 @@
     private GameRules theGameRules;
     private static final String __OBFID = "CL_00000587";
 
-    protected WorldInfo()
-    {
+    protected WorldInfo() {
         this.terrainType = WorldType.DEFAULT;
         this.generatorOptions = "";
         this.borderCenterX = 0.0D;
@@ -69,8 +69,7 @@
         this.theGameRules = new GameRules();
     }
 
-    public WorldInfo(NBTTagCompound nbt)
-    {
+    public WorldInfo(NBTTagCompound nbt) {
         this.terrainType = WorldType.DEFAULT;
         this.generatorOptions = "";
         this.borderCenterX = 0.0D;
@@ -85,40 +85,32 @@
         this.theGameRules = new GameRules();
         this.randomSeed = nbt.getLong("RandomSeed");
 
-        if (nbt.hasKey("generatorName", 8))
-        {
+        if (nbt.hasKey("generatorName", 8)) {
             String s = nbt.getString("generatorName");
             this.terrainType = WorldType.parseWorldType(s);
 
-            if (this.terrainType == null)
-            {
+            if (this.terrainType == null) {
                 this.terrainType = WorldType.DEFAULT;
-            }
-            else if (this.terrainType.isVersioned())
-            {
+            } else if (this.terrainType.isVersioned()) {
                 int i = 0;
 
-                if (nbt.hasKey("generatorVersion", 99))
-                {
+                if (nbt.hasKey("generatorVersion", 99)) {
                     i = nbt.getInteger("generatorVersion");
                 }
 
                 this.terrainType = this.terrainType.getWorldTypeForGeneratorVersion(i);
             }
 
-            if (nbt.hasKey("generatorOptions", 8))
-            {
+            if (nbt.hasKey("generatorOptions", 8)) {
                 this.generatorOptions = nbt.getString("generatorOptions");
             }
         }
 
         this.theGameType = WorldSettings.GameType.getByID(nbt.getInteger("GameType"));
 
-        if (nbt.hasKey("MapFeatures", 99))
-        {
+        if (nbt.hasKey("MapFeatures", 99)) {
             this.mapFeaturesEnabled = nbt.getBoolean("MapFeatures");
-        }
-        else
-        {
+        } else {
             this.mapFeaturesEnabled = true;
         }
 
@@ -128,11 +128,9 @@
         this.spawnZ = nbt.getInteger("SpawnZ");
         this.totalTime = nbt.getLong("Time");
 
-        if (nbt.hasKey("DayTime", 99))
-        {
+        if (nbt.hasKey("DayTime", 99)) {
             this.worldTime = nbt.getLong("DayTime");
-        }
-        else
-        {
+        } else {
             this.worldTime = this.totalTime;
         }
 
@@ -148,93 +148,73 @@
         this.thundering = nbt.getBoolean("thundering");
         this.hardcore = nbt.getBoolean("hardcore");
 
-        if (nbt.hasKey("initialized", 99))
-        {
+        if (nbt.hasKey("initialized", 99)) {
             this.initialized = nbt.getBoolean("initialized");
-        }
-        else
-        {
+        } else {
             this.initialized = true;
         }
 
-        if (nbt.hasKey("allowCommands", 99))
-        {
+        if (nbt.hasKey("allowCommands", 99)) {
             this.allowCommands = nbt.getBoolean("allowCommands");
-        }
-        else
-        {
+        } else {
             this.allowCommands = this.theGameType == WorldSettings.GameType.CREATIVE;
         }
 
-        if (nbt.hasKey("Player", 10))
-        {
+        if (nbt.hasKey("Player", 10)) {
             this.playerTag = nbt.getCompoundTag("Player");
             this.dimension = this.playerTag.getInteger("Dimension");
         }
 
-        if (nbt.hasKey("GameRules", 10))
-        {
+        if (nbt.hasKey("GameRules", 10)) {
             this.theGameRules.readGameRulesFromNBT(nbt.getCompoundTag("GameRules"));
         }
 
-        if (nbt.hasKey("Difficulty", 99))
-        {
+        if (nbt.hasKey("Difficulty", 99)) {
             this.difficulty = EnumDifficulty.getDifficultyEnum(nbt.getByte("Difficulty"));
         }
 
-        if (nbt.hasKey("DifficultyLocked", 1))
-        {
+        if (nbt.hasKey("DifficultyLocked", 1)) {
             this.difficultyLocked = nbt.getBoolean("DifficultyLocked");
         }
 
-        if (nbt.hasKey("BorderCenterX", 99))
-        {
+        if (nbt.hasKey("BorderCenterX", 99)) {
             this.borderCenterX = nbt.getDouble("BorderCenterX");
         }
 
-        if (nbt.hasKey("BorderCenterZ", 99))
-        {
+        if (nbt.hasKey("BorderCenterZ", 99)) {
             this.borderCenterZ = nbt.getDouble("BorderCenterZ");
         }
 
-        if (nbt.hasKey("BorderSize", 99))
-        {
+        if (nbt.hasKey("BorderSize", 99)) {
             this.borderSize = nbt.getDouble("BorderSize");
         }
 
-        if (nbt.hasKey("BorderSizeLerpTime", 99))
-        {
+        if (nbt.hasKey("BorderSizeLerpTime", 99)) {
             this.borderSizeLerpTime = nbt.getLong("BorderSizeLerpTime");
         }
 
-        if (nbt.hasKey("BorderSizeLerpTarget", 99))
-        {
+        if (nbt.hasKey("BorderSizeLerpTarget", 99)) {
             this.borderSizeLerpTarget = nbt.getDouble("BorderSizeLerpTarget");
         }
 
-        if (nbt.hasKey("BorderSafeZone", 99))
-        {
+        if (nbt.hasKey("BorderSafeZone", 99)) {
             this.borderSafeZone = nbt.getDouble("BorderSafeZone");
         }
 
-        if (nbt.hasKey("BorderDamagePerBlock", 99))
-        {
+        if (nbt.hasKey("BorderDamagePerBlock", 99)) {
             this.borderDamagePerBlock = nbt.getDouble("BorderDamagePerBlock");
         }
 
-        if (nbt.hasKey("BorderWarningBlocks", 99))
-        {
+        if (nbt.hasKey("BorderWarningBlocks", 99)) {
             this.borderWarningDistance = nbt.getInteger("BorderWarningBlocks");
         }
 
-        if (nbt.hasKey("BorderWarningTime", 99))
-        {
+        if (nbt.hasKey("BorderWarningTime", 99)) {
             this.borderWarningTime = nbt.getInteger("BorderWarningTime");
         }
     }
 
-    public WorldInfo(WorldSettings settings, String name)
-    {
+    public WorldInfo(WorldSettings settings, String name) {
         this.terrainType = WorldType.DEFAULT;
         this.generatorOptions = "";
         this.borderCenterX = 0.0D;
@@ -253,8 +253,7 @@
         this.initialized = false;
     }
 
-    public void populateFromWorldSettings(WorldSettings settings)
-    {
+    public void populateFromWorldSettings(WorldSettings settings) {
         this.randomSeed = settings.getSeed();
         this.theGameType = settings.getGameType();
         this.mapFeaturesEnabled = settings.isMapFeaturesEnabled();
@@ -264,8 +264,7 @@
         this.allowCommands = settings.areCommandsAllowed();
     }
 
-    public WorldInfo(WorldInfo worldInformation)
-    {
+    public WorldInfo(WorldInfo worldInformation) {
         this.terrainType = WorldType.DEFAULT;
         this.generatorOptions = "";
         this.borderCenterX = 0.0D;
@@ -315,22 +315,19 @@
         this.borderWarningDistance = worldInformation.borderWarningDistance;
     }
 
-    public NBTTagCompound getNBTTagCompound()
-    {
+    public NBTTagCompound getNBTTagCompound() {
         NBTTagCompound nbttagcompound = new NBTTagCompound();
         this.updateTagCompound(nbttagcompound, this.playerTag);
         return nbttagcompound;
     }
 
-    public NBTTagCompound cloneNBTCompound(NBTTagCompound nbt)
-    {
+    public NBTTagCompound cloneNBTCompound(NBTTagCompound nbt) {
         NBTTagCompound nbttagcompound1 = new NBTTagCompound();
         this.updateTagCompound(nbttagcompound1, nbt);
         return nbttagcompound1;
     }
 
-    private void updateTagCompound(NBTTagCompound nbt, NBTTagCompound playerNbt)
-    {
+    private void updateTagCompound(NBTTagCompound nbt, NBTTagCompound playerNbt) {
         nbt.setLong("RandomSeed", this.randomSeed);
         nbt.setString("generatorName", this.terrainType.getWorldTypeName());
         nbt.setInteger("generatorVersion", this.terrainType.getGeneratorVersion());
@@ -361,447 +361,374 @@
         nbt.setDouble("BorderSafeZone", this.borderSafeZone);
         nbt.setDouble("BorderDamagePerBlock", this.borderDamagePerBlock);
         nbt.setDouble("BorderSizeLerpTarget", this.borderSizeLerpTarget);
-        nbt.setDouble("BorderWarningBlocks", (double)this.borderWarningDistance);
-        nbt.setDouble("BorderWarningTime", (double)this.borderWarningTime);
+        nbt.setDouble("BorderWarningBlocks", (double) this.borderWarningDistance);
+        nbt.setDouble("BorderWarningTime", (double) this.borderWarningTime);
 
-        if (this.difficulty != null)
-        {
-            nbt.setByte("Difficulty", (byte)this.difficulty.getDifficultyId());
+        if (this.difficulty != null) {
+            nbt.setByte("Difficulty", (byte) this.difficulty.getDifficultyId());
         }
 
         nbt.setBoolean("DifficultyLocked", this.difficultyLocked);
         nbt.setTag("GameRules", this.theGameRules.writeGameRulesToNBT());
 
-        if (playerNbt != null)
-        {
+        if (playerNbt != null) {
             nbt.setTag("Player", playerNbt);
         }
     }
 
-    public long getSeed()
-    {
+    public long getSeed() {
         return this.randomSeed;
     }
 
-    public int getSpawnX()
-    {
+    public int getSpawnX() {
         return this.spawnX;
     }
 
-    public int getSpawnY()
-    {
+    public int getSpawnY() {
         return this.spawnY;
     }
 
-    public int getSpawnZ()
-    {
+    public int getSpawnZ() {
         return this.spawnZ;
     }
 
-    public long getWorldTotalTime()
-    {
+    public long getWorldTotalTime() {
         return this.totalTime;
     }
 
-    public long getWorldTime()
-    {
+    public long getWorldTime() {
         return this.worldTime;
     }
 
-    @SideOnly(Side.CLIENT)
-    public long getSizeOnDisk()
-    {
-        return this.sizeOnDisk;
-    }
-
-    public NBTTagCompound getPlayerNBTTagCompound()
-    {
+    public NBTTagCompound getPlayerNBTTagCompound() {
         return this.playerTag;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void setSpawnX(int x)
-    {
-        this.spawnX = x;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public void setSpawnY(int y)
-    {
-        this.spawnY = y;
-    }
-
-    public void incrementTotalWorldTime(long time)
-    {
+    public void incrementTotalWorldTime(long time) {
         this.totalTime = time;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void setSpawnZ(int z)
-    {
-        this.spawnZ = z;
-    }
-
-    public void setWorldTime(long time)
-    {
+    public void setWorldTime(long time) {
         this.worldTime = time;
     }
 
-    public void setSpawn(BlockPos spawnPoint)
-    {
+    public void setSpawn(BlockPos spawnPoint) {
         this.spawnX = spawnPoint.getX();
         this.spawnY = spawnPoint.getY();
         this.spawnZ = spawnPoint.getZ();
     }
 
-    public String getWorldName()
-    {
+    public String getWorldName() {
         return this.levelName;
     }
 
-    public void setWorldName(String worldName)
-    {
+    public void setWorldName(String worldName) {
         this.levelName = worldName;
     }
 
-    public int getSaveVersion()
-    {
+    public int getSaveVersion() {
         return this.saveVersion;
     }
 
-    public void setSaveVersion(int version)
-    {
+    public void setSaveVersion(int version) {
         this.saveVersion = version;
     }
 
-    @SideOnly(Side.CLIENT)
-    public long getLastTimePlayed()
-    {
-        return this.lastTimePlayed;
-    }
-
-    public int getCleanWeatherTime()
-    {
+    public int getCleanWeatherTime() {
         return this.cleanWeatherTime;
     }
 
-    public void setCleanWeatherTime(int cleanWeatherTimeIn)
-    {
+    public void setCleanWeatherTime(int cleanWeatherTimeIn) {
         this.cleanWeatherTime = cleanWeatherTimeIn;
     }
 
-    public boolean isThundering()
-    {
+    public boolean isThundering() {
         return this.thundering;
     }
 
-    public void setThundering(boolean thunderingIn)
-    {
+    public void setThundering(boolean thunderingIn) {
+        // CraftBukkit start
+        World world = Bukkit.getWorld(getWorldName());
+        if (world != null) {
+            ThunderChangeEvent thunder = new ThunderChangeEvent(world, thunderingIn);
+            Bukkit.getServer().getPluginManager().callEvent(thunder);
+            if (thunder.isCancelled()) {
+                return;
+            }
+
+            setThunderTime(0); // Will force a time reset
+        }
+        // CraftBukkit end
         this.thundering = thunderingIn;
     }
 
-    public int getThunderTime()
-    {
+    public int getThunderTime() {
         return this.thunderTime;
     }
 
-    public void setThunderTime(int time)
-    {
+    public void setThunderTime(int time) {
         this.thunderTime = time;
     }
 
-    public boolean isRaining()
-    {
+    public boolean isRaining() {
         return this.raining;
     }
 
-    public void setRaining(boolean isRaining)
-    {
+    public void setRaining(boolean isRaining) {
+        // CraftBukkit start
+        World world = Bukkit.getWorld(getWorldName());
+        if (world != null) {
+            WeatherChangeEvent weather = new WeatherChangeEvent(world, isRaining);
+            Bukkit.getServer().getPluginManager().callEvent(weather);
+            if (weather.isCancelled()) {
+                return;
+            }
+
+            setRainTime(0); // Will force a time reset
+        }
+        // CraftBukkit end
         this.raining = isRaining;
     }
 
-    public int getRainTime()
-    {
+    public int getRainTime() {
         return this.rainTime;
     }
 
-    public void setRainTime(int time)
-    {
+    public void setRainTime(int time) {
         this.rainTime = time;
     }
 
-    public WorldSettings.GameType getGameType()
-    {
+    public WorldSettings.GameType getGameType() {
         return this.theGameType;
     }
 
-    public boolean isMapFeaturesEnabled()
-    {
+    public boolean isMapFeaturesEnabled() {
         return this.mapFeaturesEnabled;
     }
 
-    public void setMapFeaturesEnabled(boolean enabled)
-    {
+    public void setMapFeaturesEnabled(boolean enabled) {
         this.mapFeaturesEnabled = enabled;
     }
 
-    public void setGameType(WorldSettings.GameType type)
-    {
+    public void setGameType(WorldSettings.GameType type) {
         this.theGameType = type;
     }
 
-    public boolean isHardcoreModeEnabled()
-    {
+    public boolean isHardcoreModeEnabled() {
         return this.hardcore;
     }
 
-    public void setHardcore(boolean hardcoreIn)
-    {
+    public void setHardcore(boolean hardcoreIn) {
         this.hardcore = hardcoreIn;
     }
 
-    public WorldType getTerrainType()
-    {
+    public WorldType getTerrainType() {
         return this.terrainType;
     }
 
-    public void setTerrainType(WorldType type)
-    {
+    public void setTerrainType(WorldType type) {
         this.terrainType = type;
     }
 
-    public String getGeneratorOptions()
-    {
+    public String getGeneratorOptions() {
         return this.generatorOptions;
     }
 
-    public boolean areCommandsAllowed()
-    {
+    public boolean areCommandsAllowed() {
         return this.allowCommands;
     }
 
-    public void setAllowCommands(boolean allow)
-    {
+    public void setAllowCommands(boolean allow) {
         this.allowCommands = allow;
     }
 
-    public boolean isInitialized()
-    {
+    public boolean isInitialized() {
         return this.initialized;
     }
 
-    public void setServerInitialized(boolean initializedIn)
-    {
+    public void setServerInitialized(boolean initializedIn) {
         this.initialized = initializedIn;
     }
 
-    public GameRules getGameRulesInstance()
-    {
+    public GameRules getGameRulesInstance() {
         return this.theGameRules;
     }
 
-    public double getBorderCenterX()
-    {
+    public double getBorderCenterX() {
         return this.borderCenterX;
     }
 
-    public double getBorderCenterZ()
-    {
+    public double getBorderCenterZ() {
         return this.borderCenterZ;
     }
 
-    public double func_176137_E()
-    {
+    public double func_176137_E() {
         return this.borderSize;
     }
 
-    public void setBorderSize(double size)
-    {
+    public void setBorderSize(double size) {
         this.borderSize = size;
     }
 
-    public long getBorderLerpTime()
-    {
+    public long getBorderLerpTime() {
         return this.borderSizeLerpTime;
     }
 
-    public void setBorderLerpTime(long time)
-    {
+    public void setBorderLerpTime(long time) {
         this.borderSizeLerpTime = time;
     }
 
-    public double getBorderLerpTarget()
-    {
+    public double getBorderLerpTarget() {
         return this.borderSizeLerpTarget;
     }
 
-    public void setBorderLerpTarget(double lerpSize)
-    {
+    public void setBorderLerpTarget(double lerpSize) {
         this.borderSizeLerpTarget = lerpSize;
     }
 
-    public void getBorderCenterZ(double posZ)
-    {
+    public void getBorderCenterZ(double posZ) {
         this.borderCenterZ = posZ;
     }
 
-    public void getBorderCenterX(double posX)
-    {
+    public void getBorderCenterX(double posX) {
         this.borderCenterX = posX;
     }
 
-    public double getBorderSafeZone()
-    {
+    public double getBorderSafeZone() {
         return this.borderSafeZone;
     }
 
-    public void setBorderSafeZone(double amount)
-    {
+    public void setBorderSafeZone(double amount) {
         this.borderSafeZone = amount;
     }
 
-    public double getBorderDamagePerBlock()
-    {
+    public double getBorderDamagePerBlock() {
         return this.borderDamagePerBlock;
     }
 
-    public void setBorderDamagePerBlock(double damage)
-    {
+    public void setBorderDamagePerBlock(double damage) {
         this.borderDamagePerBlock = damage;
     }
 
-    public int getBorderWarningDistance()
-    {
+    public int getBorderWarningDistance() {
         return this.borderWarningDistance;
     }
 
-    public int getBorderWarningTime()
-    {
+    public int getBorderWarningTime() {
         return this.borderWarningTime;
     }
 
-    public void setBorderWarningDistance(int amountOfBlocks)
-    {
+    public void setBorderWarningDistance(int amountOfBlocks) {
         this.borderWarningDistance = amountOfBlocks;
     }
 
-    public void setBorderWarningTime(int ticks)
-    {
+    public void setBorderWarningTime(int ticks) {
         this.borderWarningTime = ticks;
     }
 
-    public EnumDifficulty getDifficulty()
-    {
+    public EnumDifficulty getDifficulty() {
         return this.difficulty;
     }
 
-    public void setDifficulty(EnumDifficulty newDifficulty)
-    {
+    public void setDifficulty(EnumDifficulty newDifficulty) {
         this.difficulty = newDifficulty;
     }
 
-    public boolean isDifficultyLocked()
-    {
+    public boolean isDifficultyLocked() {
         return this.difficultyLocked;
     }
 
-    public void setDifficultyLocked(boolean locked)
-    {
+    public void setDifficultyLocked(boolean locked) {
         this.difficultyLocked = locked;
     }
 
-    public void addToCrashReport(CrashReportCategory category)
-    {
-        category.addCrashSectionCallable("Level seed", new Callable()
-        {
+    public void addToCrashReport(CrashReportCategory category) {
+        category.addCrashSectionCallable("Level seed", new Callable() {
+
             private static final String __OBFID = "CL_00000588";
-            public String call()
-            {
+
+            public String call() {
                 return String.valueOf(WorldInfo.this.getSeed());
             }
         });
-        category.addCrashSectionCallable("Level generator", new Callable()
-        {
+        category.addCrashSectionCallable("Level generator", new Callable() {
+
             private static final String __OBFID = "CL_00000589";
-            public String call()
-            {
-                return String.format("ID %02d - %s, ver %d. Features enabled: %b", new Object[] {Integer.valueOf(WorldInfo.this.terrainType.getWorldTypeID()), WorldInfo.this.terrainType.getWorldTypeName(), Integer.valueOf(WorldInfo.this.terrainType.getGeneratorVersion()), Boolean.valueOf(WorldInfo.this.mapFeaturesEnabled)});
+
+            public String call() {
+                return String.format("ID %02d - %s, ver %d. Features enabled: %b", new Object[]{Integer.valueOf(WorldInfo.this.terrainType.getWorldTypeID()), WorldInfo.this.terrainType.getWorldTypeName(), Integer.valueOf(WorldInfo.this.terrainType.getGeneratorVersion()), Boolean.valueOf(WorldInfo.this.mapFeaturesEnabled)});
             }
         });
-        category.addCrashSectionCallable("Level generator options", new Callable()
-        {
+        category.addCrashSectionCallable("Level generator options", new Callable() {
+
             private static final String __OBFID = "CL_00000590";
-            public String call()
-            {
+
+            public String call() {
                 return WorldInfo.this.generatorOptions;
             }
         });
-        category.addCrashSectionCallable("Level spawn location", new Callable()
-        {
+        category.addCrashSectionCallable("Level spawn location", new Callable() {
+
             private static final String __OBFID = "CL_00000591";
-            public String call()
-            {
-                return CrashReportCategory.getCoordinateInfo((double)WorldInfo.this.spawnX, (double)WorldInfo.this.spawnY, (double)WorldInfo.this.spawnZ);
+
+            public String call() {
+                return CrashReportCategory.getCoordinateInfo((double) WorldInfo.this.spawnX, (double) WorldInfo.this.spawnY, (double) WorldInfo.this.spawnZ);
             }
         });
-        category.addCrashSectionCallable("Level time", new Callable()
-        {
+        category.addCrashSectionCallable("Level time", new Callable() {
+
             private static final String __OBFID = "CL_00000592";
-            public String call()
-            {
-                return String.format("%d game time, %d day time", new Object[] {Long.valueOf(WorldInfo.this.totalTime), Long.valueOf(WorldInfo.this.worldTime)});
+
+            public String call() {
+                return String.format("%d game time, %d day time", new Object[]{Long.valueOf(WorldInfo.this.totalTime), Long.valueOf(WorldInfo.this.worldTime)});
             }
         });
-        category.addCrashSectionCallable("Level dimension", new Callable()
-        {
+        category.addCrashSectionCallable("Level dimension", new Callable() {
+
             private static final String __OBFID = "CL_00000593";
-            public String call()
-            {
+
+            public String call() {
                 return String.valueOf(WorldInfo.this.dimension);
             }
         });
-        category.addCrashSectionCallable("Level storage version", new Callable()
-        {
+        category.addCrashSectionCallable("Level storage version", new Callable() {
+
             private static final String __OBFID = "CL_00000594";
-            public String call()
-            {
+
+            public String call() {
                 String s = "Unknown?";
 
-                try
-                {
-                    switch (WorldInfo.this.saveVersion)
-                    {
+                try {
+                    switch (WorldInfo.this.saveVersion) {
                         case 19132:
                             s = "McRegion";
                             break;
                         case 19133:
                             s = "Anvil";
                     }
-                }
-                catch (Throwable throwable)
-                {
+                } catch (Throwable throwable) {
                     ;
                 }
 
-                return String.format("0x%05X - %s", new Object[] {Integer.valueOf(WorldInfo.this.saveVersion), s});
+                return String.format("0x%05X - %s", new Object[]{Integer.valueOf(WorldInfo.this.saveVersion), s});
             }
         });
-        category.addCrashSectionCallable("Level weather", new Callable()
-        {
+        category.addCrashSectionCallable("Level weather", new Callable() {
+
             private static final String __OBFID = "CL_00000595";
-            public String call()
-            {
-                return String.format("Rain time: %d (now: %b), thunder time: %d (now: %b)", new Object[] {Integer.valueOf(WorldInfo.this.rainTime), Boolean.valueOf(WorldInfo.this.raining), Integer.valueOf(WorldInfo.this.thunderTime), Boolean.valueOf(WorldInfo.this.thundering)});
+
+            public String call() {
+                return String.format("Rain time: %d (now: %b), thunder time: %d (now: %b)", new Object[]{Integer.valueOf(WorldInfo.this.rainTime), Boolean.valueOf(WorldInfo.this.raining), Integer.valueOf(WorldInfo.this.thunderTime), Boolean.valueOf(WorldInfo.this.thundering)});
             }
         });
-        category.addCrashSectionCallable("Level game mode", new Callable()
-        {
+        category.addCrashSectionCallable("Level game mode", new Callable() {
+
             private static final String __OBFID = "CL_00000597";
-            public String call()
-            {
-                return String.format("Game mode: %s (ID %d). Hardcore: %b. Cheats: %b", new Object[] {WorldInfo.this.theGameType.getName(), Integer.valueOf(WorldInfo.this.theGameType.getID()), Boolean.valueOf(WorldInfo.this.hardcore), Boolean.valueOf(WorldInfo.this.allowCommands)});
+
+            public String call() {
+                return String.format("Game mode: %s (ID %d). Hardcore: %b. Cheats: %b", new Object[]{WorldInfo.this.theGameType.getName(), Integer.valueOf(WorldInfo.this.theGameType.getID()), Boolean.valueOf(WorldInfo.this.hardcore), Boolean.valueOf(WorldInfo.this.allowCommands)});
             }
         });
     }
-}
+
+    // CraftBukkit start - Check if the name stored in NBT is the correct one
+    public void checkName(String name) {
+        if (!this.levelName.equals(name)) {
+            this.levelName = name;
+        }
+    }
+    // CraftBukkit end
+}
