--- decompiled\net\minecraft\world\storage\SaveHandler.java
+++ src\main\java\net\minecraft\world\storage\SaveHandler.java
@@ -4,301 +4,338 @@
 import java.io.DataOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStream;
+import java.util.UUID;
+
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.nbt.CompressedStreamTools;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.MinecraftException;
 import net.minecraft.world.WorldProvider;
 import net.minecraft.world.chunk.storage.IChunkLoader;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
 
-public class SaveHandler implements ISaveHandler, IPlayerFileData
-{
+public class SaveHandler implements ISaveHandler, IPlayerFileData {
+
     private static final Logger logger = LogManager.getLogger();
     private final File worldDirectory;
     private final File playersDirectory;
     private final File mapDataDir;
     private final long initializationTime = MinecraftServer.getCurrentTimeMillis();
     private final String saveDirectoryName;
     private static final String __OBFID = "CL_00000585";
+    private UUID uuid = null; // CraftBukkit
 
-    public SaveHandler(File savesDirectory, String p_i2146_2_, boolean p_i2146_3_)
-    {
+    public SaveHandler(File savesDirectory, String p_i2146_2_, boolean p_i2146_3_) {
         this.worldDirectory = new File(savesDirectory, p_i2146_2_);
         this.worldDirectory.mkdirs();
         this.playersDirectory = new File(this.worldDirectory, "playerdata");
         this.mapDataDir = new File(this.worldDirectory, "data");
         this.mapDataDir.mkdirs();
         this.saveDirectoryName = p_i2146_2_;
 
-        if (p_i2146_3_)
-        {
+        if (p_i2146_3_) {
             this.playersDirectory.mkdirs();
         }
 
         this.setSessionLock();
     }
 
-    private void setSessionLock()
-    {
-        try
-        {
+    private void setSessionLock() {
+        try {
             File file1 = new File(this.worldDirectory, "session.lock");
             DataOutputStream dataoutputstream = new DataOutputStream(new FileOutputStream(file1));
 
-            try
-            {
+            try {
                 dataoutputstream.writeLong(this.initializationTime);
-            }
-            finally
-            {
+            } finally {
                 dataoutputstream.close();
             }
-        }
-        catch (IOException ioexception)
-        {
+        } catch (IOException ioexception) {
             ioexception.printStackTrace();
-            throw new RuntimeException("Failed to check session lock, aborting");
+            throw new RuntimeException("Failed to check session lock for world located at " + this.worldDirectory + ", aborting. Stop the server and delete the session.lock in this world to prevent further issues."); // Spigot
         }
     }
 
-    public File getWorldDirectory()
-    {
+    public File getWorldDirectory() {
         return this.worldDirectory;
     }
 
-    public void checkSessionLock() throws MinecraftException
-    {
-        try
-        {
+    public void checkSessionLock() throws MinecraftException { // CraftBukkit - throws ExceptionWorldConflict // SpigotMCP NOTE -- MCP already added
+        try {
             File file1 = new File(this.worldDirectory, "session.lock");
             DataInputStream datainputstream = new DataInputStream(new FileInputStream(file1));
 
-            try
-            {
-                if (datainputstream.readLong() != this.initializationTime)
-                {
-                    throw new MinecraftException("The save is being accessed from another location, aborting");
+            try {
+                if (datainputstream.readLong() != this.initializationTime) {
+                    throw new MinecraftException("The save for world located at " + this.worldDirectory + " is being accessed from another location, aborting");  // Spigot
                 }
-            }
-            finally
-            {
+            } finally {
                 datainputstream.close();
             }
+        } catch (IOException ioexception) {
+            throw new MinecraftException("Failed to check session lock for world located at " + this.worldDirectory + ", aborting. Stop the server and delete the session.lock in this world to prevent further issues."); // Spigot
         }
-        catch (IOException ioexception)
-        {
-            throw new MinecraftException("Failed to check session lock, aborting");
-        }
     }
 
-    public IChunkLoader getChunkLoader(WorldProvider provider)
-    {
+    public IChunkLoader getChunkLoader(WorldProvider provider) {
         throw new RuntimeException("Old Chunk Storage is no longer supported.");
     }
 
-    public WorldInfo loadWorldInfo()
-    {
+    public WorldInfo loadWorldInfo() {
         File file1 = new File(this.worldDirectory, "level.dat");
         NBTTagCompound nbttagcompound;
         NBTTagCompound nbttagcompound1;
 
-        if (file1.exists())
-        {
-            try
-            {
+        if (file1.exists()) {
+            try {
                 nbttagcompound = CompressedStreamTools.readCompressed(new FileInputStream(file1));
                 nbttagcompound1 = nbttagcompound.getCompoundTag("Data");
                 return new WorldInfo(nbttagcompound1);
-            }
-            catch (Exception exception1)
-            {
+            } catch (Exception exception1) {
                 exception1.printStackTrace();
             }
         }
 
         file1 = new File(this.worldDirectory, "level.dat_old");
 
-        if (file1.exists())
-        {
-            try
-            {
+        if (file1.exists()) {
+            try {
                 nbttagcompound = CompressedStreamTools.readCompressed(new FileInputStream(file1));
                 nbttagcompound1 = nbttagcompound.getCompoundTag("Data");
                 return new WorldInfo(nbttagcompound1);
-            }
-            catch (Exception exception)
-            {
+            } catch (Exception exception) {
                 exception.printStackTrace();
             }
         }
 
         return null;
     }
 
-    public void saveWorldInfoWithPlayer(WorldInfo worldInformation, NBTTagCompound tagCompound)
-    {
+    public void saveWorldInfoWithPlayer(WorldInfo worldInformation, NBTTagCompound tagCompound) {
         NBTTagCompound nbttagcompound1 = worldInformation.cloneNBTCompound(tagCompound);
         NBTTagCompound nbttagcompound2 = new NBTTagCompound();
         nbttagcompound2.setTag("Data", nbttagcompound1);
 
-        try
-        {
+        try {
             File file1 = new File(this.worldDirectory, "level.dat_new");
             File file2 = new File(this.worldDirectory, "level.dat_old");
             File file3 = new File(this.worldDirectory, "level.dat");
             CompressedStreamTools.writeCompressed(nbttagcompound2, new FileOutputStream(file1));
 
-            if (file2.exists())
-            {
+            if (file2.exists()) {
                 file2.delete();
             }
 
             file3.renameTo(file2);
 
-            if (file3.exists())
-            {
+            if (file3.exists()) {
                 file3.delete();
             }
 
             file1.renameTo(file3);
 
-            if (file1.exists())
-            {
+            if (file1.exists()) {
                 file1.delete();
             }
-        }
-        catch (Exception exception)
-        {
+        } catch (Exception exception) {
             exception.printStackTrace();
         }
     }
 
-    public void saveWorldInfo(WorldInfo worldInformation)
-    {
+    public void saveWorldInfo(WorldInfo worldInformation) {
         NBTTagCompound nbttagcompound = worldInformation.getNBTTagCompound();
         NBTTagCompound nbttagcompound1 = new NBTTagCompound();
         nbttagcompound1.setTag("Data", nbttagcompound);
 
-        try
-        {
+        try {
             File file1 = new File(this.worldDirectory, "level.dat_new");
             File file2 = new File(this.worldDirectory, "level.dat_old");
             File file3 = new File(this.worldDirectory, "level.dat");
             CompressedStreamTools.writeCompressed(nbttagcompound1, new FileOutputStream(file1));
 
-            if (file2.exists())
-            {
+            if (file2.exists()) {
                 file2.delete();
             }
 
             file3.renameTo(file2);
 
-            if (file3.exists())
-            {
+            if (file3.exists()) {
                 file3.delete();
             }
 
             file1.renameTo(file3);
 
-            if (file1.exists())
-            {
+            if (file1.exists()) {
                 file1.delete();
             }
-        }
-        catch (Exception exception)
-        {
+        } catch (Exception exception) {
             exception.printStackTrace();
         }
     }
 
-    public void writePlayerData(EntityPlayer p_75753_1_)
-    {
-        try
-        {
+    public void writePlayerData(EntityPlayer p_75753_1_) {
+        try {
             NBTTagCompound nbttagcompound = new NBTTagCompound();
             p_75753_1_.writeToNBT(nbttagcompound);
             File file1 = new File(this.playersDirectory, p_75753_1_.getUniqueID().toString() + ".dat.tmp");
             File file2 = new File(this.playersDirectory, p_75753_1_.getUniqueID().toString() + ".dat");
             CompressedStreamTools.writeCompressed(nbttagcompound, new FileOutputStream(file1));
 
-            if (file2.exists())
-            {
+            if (file2.exists()) {
                 file2.delete();
             }
 
             file1.renameTo(file2);
-        }
-        catch (Exception exception)
-        {
+        } catch (Exception exception) {
             logger.warn("Failed to save player data for " + p_75753_1_.getName());
         }
     }
 
-    public NBTTagCompound readPlayerData(EntityPlayer p_75752_1_)
-    {
+    public NBTTagCompound readPlayerData(EntityPlayer p_75752_1_) {
         NBTTagCompound nbttagcompound = null;
 
-        try
-        {
+        try {
             File file1 = new File(this.playersDirectory, p_75752_1_.getUniqueID().toString() + ".dat");
+            // Spigot Start
+            boolean usingWrongFile = false;
+            if (!file1.exists()) {
+                file1 = new File(this.playersDirectory, UUID.nameUUIDFromBytes(("OfflinePlayer:" + p_75752_1_.getName()).getBytes("UTF-8")).toString() + ".dat");
+                if (file1.exists()) {
+                    usingWrongFile = true;
+                    Bukkit.getServer().getLogger().warning("Using offline mode UUID file for player " + p_75752_1_.getName() + " as it is the only copy we can find.");
+                }
+            }
+            // Spigot End
 
-            if (file1.exists() && file1.isFile())
-            {
+            if (file1.exists() && file1.isFile()) {
                 nbttagcompound = CompressedStreamTools.readCompressed(new FileInputStream(file1));
             }
-        }
-        catch (Exception exception)
-        {
+            if (usingWrongFile) {
+                file1.renameTo(new File(file1.getPath() + ".offline-read"));
+            }
+            // Spigot End
+        } catch (Exception exception) {
             logger.warn("Failed to load player data for " + p_75752_1_.getName());
         }
 
-        if (nbttagcompound != null)
-        {
+        if (nbttagcompound != null) {
+            // CraftBukkit start
+            if (p_75752_1_ instanceof EntityPlayerMP) {
+                CraftPlayer player = (CraftPlayer) p_75752_1_.getBukkitEntity();
+                // Only update first played if it is older than the one we have
+                long modified = new File(this.playersDirectory, p_75752_1_.getUniqueID().toString() + ".dat").lastModified();
+                if (modified < player.getFirstPlayed()) {
+                    player.setFirstPlayed(modified);
+                }
+            }
+            // CraftBukkit end
+
             p_75752_1_.readFromNBT(nbttagcompound);
         }
 
         return nbttagcompound;
     }
 
-    public IPlayerFileData getPlayerNBTManager()
-    {
+    // CraftBukkit start
+    public NBTTagCompound getPlayerData(String s) {
+        try {
+            File file1 = new File(this.playersDirectory, s + ".dat");
+
+            if (file1.exists()) {
+                return CompressedStreamTools.readCompressed((InputStream) (new FileInputStream(file1)));
+            }
+        } catch (Exception exception) {
+            logger.warn("Failed to load player data for " + s);
+        }
+
+        return null;
+    }
+    // CraftBukkit end
+
+    public IPlayerFileData getPlayerNBTManager() {
         return this;
     }
 
-    public String[] getAvailablePlayerDat()
-    {
+    public String[] getAvailablePlayerDat() {
         String[] astring = this.playersDirectory.list();
 
-        if (astring == null)
-        {
+        if (astring == null) {
             astring = new String[0];
         }
 
-        for (int i = 0; i < astring.length; ++i)
-        {
-            if (astring[i].endsWith(".dat"))
-            {
+        for (int i = 0; i < astring.length; ++i) {
+            if (astring[i].endsWith(".dat")) {
                 astring[i] = astring[i].substring(0, astring[i].length() - 4);
             }
         }
 
         return astring;
     }
 
-    public void flush() {}
+    public void flush() {
+    }
 
-    public File getMapFileFromName(String mapName)
-    {
+    public File getMapFileFromName(String mapName) {
         return new File(this.mapDataDir, mapName + ".dat");
     }
 
-    public String getWorldDirectoryName()
-    {
+    public String getWorldDirectoryName() {
         return this.saveDirectoryName;
     }
+
+    // CraftBukkit start
+    public UUID getUUID() {
+        if (uuid != null) return uuid;
+        File file1 = new File(this.worldDirectory, "uid.dat");
+        if (file1.exists()) {
+            DataInputStream dis = null;
+            try {
+                dis = new DataInputStream(new FileInputStream(file1));
+                return uuid = new UUID(dis.readLong(), dis.readLong());
+            } catch (IOException ex) {
+                logger.warn("Failed to read " + file1 + ", generating new random UUID", ex);
+            } finally {
+                if (dis != null) {
+                    try {
+                        dis.close();
+                    } catch (IOException ex) {
+                        // NOOP
+                    }
+                }
+            }
+        }
+        uuid = UUID.randomUUID();
+        DataOutputStream dos = null;
+        try {
+            dos = new DataOutputStream(new FileOutputStream(file1));
+            dos.writeLong(uuid.getMostSignificantBits());
+            dos.writeLong(uuid.getLeastSignificantBits());
+        } catch (IOException ex) {
+            logger.warn("Failed to write " + file1, ex);
+        } finally {
+            if (dos != null) {
+                try {
+                    dos.close();
+                } catch (IOException ex) {
+                    // NOOP
+                }
+            }
+        }
+        return uuid;
+    }
+
+    public File getPlayerDir() {
+        return playersDirectory;
+    }
+    // CraftBukkit end
+
 }
