---a/net/minecraft/world/gen/ChunkProviderFlat.java
+++b/net/minecraft/world/gen/ChunkProviderFlat.java
@@ -1,11 +1,9 @@
 package net.minecraft.world.gen;
 
-import com.google.common.collect.Lists;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
+
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.EnumCreatureType;
 import net.minecraft.init.Blocks;
@@ -25,8 +25,10 @@
 import net.minecraft.world.gen.structure.MapGenVillage;
 import net.minecraft.world.gen.structure.StructureOceanMonument;
 
-public class ChunkProviderFlat implements IChunkProvider
-{
+import com.google.common.collect.Lists;
+
+public class ChunkProviderFlat implements IChunkProvider {
+
     private World worldObj;
     private Random random;
     private final IBlockState[] cachedBlockIDs = new IBlockState[256];
@@ -38,56 +38,46 @@
     private WorldGenLakes lavaLakeGenerator;
     private static final String __OBFID = "CL_00000391";
 
-    public ChunkProviderFlat(World worldIn, long p_i2004_2_, boolean p_i2004_4_, String p_i2004_5_)
-    {
+    public ChunkProviderFlat(World worldIn, long p_i2004_2_, boolean p_i2004_4_, String p_i2004_5_) {
         this.worldObj = worldIn;
         this.random = new Random(p_i2004_2_);
         this.flatWorldGenInfo = FlatGeneratorInfo.createFlatGeneratorFromString(p_i2004_5_);
 
-        if (p_i2004_4_)
-        {
+        if (p_i2004_4_) {
             Map map = this.flatWorldGenInfo.getWorldFeatures();
 
-            if (map.containsKey("village"))
-            {
-                Map map1 = (Map)map.get("village");
+            if (map.containsKey("village")) {
+                Map map1 = (Map) map.get("village");
 
-                if (!map1.containsKey("size"))
-                {
+                if (!map1.containsKey("size")) {
                     map1.put("size", "1");
                 }
 
                 this.structureGenerators.add(new MapGenVillage(map1));
             }
 
-            if (map.containsKey("biome_1"))
-            {
-                this.structureGenerators.add(new MapGenScatteredFeature((Map)map.get("biome_1")));
+            if (map.containsKey("biome_1")) {
+                this.structureGenerators.add(new MapGenScatteredFeature((Map) map.get("biome_1")));
             }
 
-            if (map.containsKey("mineshaft"))
-            {
-                this.structureGenerators.add(new MapGenMineshaft((Map)map.get("mineshaft")));
+            if (map.containsKey("mineshaft")) {
+                this.structureGenerators.add(new MapGenMineshaft((Map) map.get("mineshaft")));
             }
 
-            if (map.containsKey("stronghold"))
-            {
-                this.structureGenerators.add(new MapGenStronghold((Map)map.get("stronghold")));
+            if (map.containsKey("stronghold")) {
+                this.structureGenerators.add(new MapGenStronghold((Map) map.get("stronghold")));
             }
 
-            if (map.containsKey("oceanmonument"))
-            {
-                this.structureGenerators.add(new StructureOceanMonument((Map)map.get("oceanmonument")));
+            if (map.containsKey("oceanmonument")) {
+                this.structureGenerators.add(new StructureOceanMonument((Map) map.get("oceanmonument")));
             }
         }
 
-        if (this.flatWorldGenInfo.getWorldFeatures().containsKey("lake"))
-        {
+        if (this.flatWorldGenInfo.getWorldFeatures().containsKey("lake")) {
             this.waterLakeGenerator = new WorldGenLakes(Blocks.water);
         }
 
-        if (this.flatWorldGenInfo.getWorldFeatures().containsKey("lava_lake"))
-        {
+        if (this.flatWorldGenInfo.getWorldFeatures().containsKey("lava_lake")) {
             this.lavaLakeGenerator = new WorldGenLakes(Blocks.lava);
         }
 
@@ -95,17 +95,14 @@
         boolean flag1 = true;
         Iterator iterator = this.flatWorldGenInfo.getFlatLayers().iterator();
 
-        while (iterator.hasNext())
-        {
-            FlatLayerInfo flatlayerinfo = (FlatLayerInfo)iterator.next();
+        while (iterator.hasNext()) {
+            FlatLayerInfo flatlayerinfo = (FlatLayerInfo) iterator.next();
 
-            for (int j = flatlayerinfo.getMinY(); j < flatlayerinfo.getMinY() + flatlayerinfo.getLayerCount(); ++j)
-            {
+            for (int j = flatlayerinfo.getMinY(); j < flatlayerinfo.getMinY() + flatlayerinfo.getLayerCount(); ++j) {
                 IBlockState iblockstate = flatlayerinfo.func_175900_c();
 
-                if (iblockstate.getBlock() != Blocks.air)
-                {
+                if (iblockstate.getBlock() != Blocks.air) {
                     flag1 = false;
                     this.cachedBlockIDs[j] = iblockstate;
                 }
@@ -114,17 +114,14 @@
         this.hasDecoration = flag1 ? false : this.flatWorldGenInfo.getWorldFeatures().containsKey("decoration");
     }
 
-    public Chunk provideChunk(int x, int z)
-    {
+    public Chunk provideChunk(int x, int z) {
         ChunkPrimer chunkprimer = new ChunkPrimer();
         int i1;
 
-        for (int k = 0; k < this.cachedBlockIDs.length; ++k)
-        {
+        for (int k = 0; k < this.cachedBlockIDs.length; ++k) {
             IBlockState iblockstate = this.cachedBlockIDs[k];
 
-            if (iblockstate != null)
-            {
-                for (int l = 0; l < 16; ++l)
-                {
-                    for (i1 = 0; i1 < 16; ++i1)
-                    {
+            if (iblockstate != null) {
+                for (int l = 0; l < 16; ++l) {
+                    for (i1 = 0; i1 < 16; ++i1) {
                         chunkprimer.setBlockState(l, k, i1, iblockstate);
                     }
                 }
@@ -137,33 +137,29 @@
 
         Iterator iterator = this.structureGenerators.iterator();
 
-        while (iterator.hasNext())
-        {
-            MapGenBase mapgenbase = (MapGenBase)iterator.next();
+        while (iterator.hasNext()) {
+            MapGenBase mapgenbase = (MapGenBase) iterator.next();
             mapgenbase.func_175792_a(this, this.worldObj, x, z, chunkprimer);
         }
 
         Chunk chunk = new Chunk(this.worldObj, chunkprimer, x, z);
-        BiomeGenBase[] abiomegenbase = this.worldObj.getWorldChunkManager().loadBlockGeneratorData((BiomeGenBase[])null, x * 16, z * 16, 16, 16);
+        BiomeGenBase[] abiomegenbase = this.worldObj.getWorldChunkManager().loadBlockGeneratorData((BiomeGenBase[]) null, x * 16, z * 16, 16, 16);
         byte[] abyte = chunk.getBiomeArray();
 
-        for (i1 = 0; i1 < abyte.length; ++i1)
-        {
-            abyte[i1] = (byte)abiomegenbase[i1].biomeID;
+        for (i1 = 0; i1 < abyte.length; ++i1) {
+            abyte[i1] = (byte) abiomegenbase[i1].biomeID;
         }
 
         chunk.generateSkylightMap();
         return chunk;
     }
 
-    public boolean chunkExists(int x, int z)
-    {
+    public boolean chunkExists(int x, int z) {
         return true;
     }
 
-    public void populate(IChunkProvider p_73153_1_, int p_73153_2_, int p_73153_3_)
-    {
+    public void populate(IChunkProvider p_73153_1_, int p_73153_2_, int p_73153_3_) {
         int k = p_73153_2_ * 16;
         int l = p_73153_3_ * 16;
         BlockPos blockpos = new BlockPos(k, 0, l);
@@ -171,94 +171,78 @@
         this.random.setSeed(this.worldObj.getSeed());
         long i1 = this.random.nextLong() / 2L * 2L + 1L;
         long j1 = this.random.nextLong() / 2L * 2L + 1L;
-        this.random.setSeed((long)p_73153_2_ * i1 + (long)p_73153_3_ * j1 ^ this.worldObj.getSeed());
+        this.random.setSeed((long) p_73153_2_ * i1 + (long) p_73153_3_ * j1 ^ this.worldObj.getSeed());
         ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(p_73153_2_, p_73153_3_);
         Iterator iterator = this.structureGenerators.iterator();
 
-        while (iterator.hasNext())
-        {
-            MapGenStructure mapgenstructure = (MapGenStructure)iterator.next();
+        while (iterator.hasNext()) {
+            MapGenStructure mapgenstructure = (MapGenStructure) iterator.next();
             boolean flag1 = mapgenstructure.func_175794_a(this.worldObj, this.random, chunkcoordintpair);
 
-            if (mapgenstructure instanceof MapGenVillage)
-            {
+            if (mapgenstructure instanceof MapGenVillage) {
                 flag |= flag1;
             }
         }
 
-        if (this.waterLakeGenerator != null && !flag && this.random.nextInt(4) == 0)
-        {
+        if (this.waterLakeGenerator != null && !flag && this.random.nextInt(4) == 0) {
             this.waterLakeGenerator.generate(this.worldObj, this.random, blockpos.add(this.random.nextInt(16) + 8, this.random.nextInt(256), this.random.nextInt(16) + 8));
         }
 
-        if (this.lavaLakeGenerator != null && !flag && this.random.nextInt(8) == 0)
-        {
+        if (this.lavaLakeGenerator != null && !flag && this.random.nextInt(8) == 0) {
             BlockPos blockpos1 = blockpos.add(this.random.nextInt(16) + 8, this.random.nextInt(this.random.nextInt(248) + 8), this.random.nextInt(16) + 8);
 
-            if (blockpos1.getY() < 63 || this.random.nextInt(10) == 0)
-            {
+            if (blockpos1.getY() < 63 || this.random.nextInt(10) == 0) {
                 this.lavaLakeGenerator.generate(this.worldObj, this.random, blockpos1);
             }
         }
 
-        if (this.hasDungeons)
-        {
-            for (int k1 = 0; k1 < 8; ++k1)
-            {
+        if (this.hasDungeons) {
+            for (int k1 = 0; k1 < 8; ++k1) {
                 (new WorldGenDungeons()).generate(this.worldObj, this.random, blockpos.add(this.random.nextInt(16) + 8, this.random.nextInt(256), this.random.nextInt(16) + 8));
             }
         }
 
-        if (this.hasDecoration)
-        {
+        if (this.hasDecoration) {
             biomegenbase.decorate(this.worldObj, this.random, new BlockPos(k, 0, l));
         }
     }
 
-    public boolean func_177460_a(IChunkProvider p_177460_1_, Chunk p_177460_2_, int p_177460_3_, int p_177460_4_)
-    {
+    public boolean func_177460_a(IChunkProvider p_177460_1_, Chunk p_177460_2_, int p_177460_3_, int p_177460_4_) {
         return false;
     }
 
-    public boolean saveChunks(boolean p_73151_1_, IProgressUpdate p_73151_2_)
-    {
+    public boolean saveChunks(boolean p_73151_1_, IProgressUpdate p_73151_2_) {
         return true;
     }
 
-    public void saveExtraData() {}
+    public void saveExtraData() {
+    }
 
-    public boolean unloadQueuedChunks()
-    {
+    public boolean unloadQueuedChunks() {
         return false;
     }
 
-    public boolean canSave()
-    {
+    public boolean canSave() {
         return true;
     }
 
-    public String makeString()
-    {
+    public String makeString() {
         return "FlatLevelSource";
     }
 
-    public List func_177458_a(EnumCreatureType p_177458_1_, BlockPos p_177458_2_)
-    {
+    public List func_177458_a(EnumCreatureType p_177458_1_, BlockPos p_177458_2_) {
         BiomeGenBase biomegenbase = this.worldObj.getBiomeGenForCoords(p_177458_2_);
         return biomegenbase.getSpawnableList(p_177458_1_);
     }
 
-    public BlockPos getStrongholdGen(World worldIn, String p_180513_2_, BlockPos p_180513_3_)
-    {
-        if ("Stronghold".equals(p_180513_2_))
-        {
+    public BlockPos getStrongholdGen(World worldIn, String p_180513_2_, BlockPos p_180513_3_) {
+        if ("Stronghold".equals(p_180513_2_)) {
             Iterator iterator = this.structureGenerators.iterator();
 
-            while (iterator.hasNext())
-            {
-                MapGenStructure mapgenstructure = (MapGenStructure)iterator.next();
+            while (iterator.hasNext()) {
+                MapGenStructure mapgenstructure = (MapGenStructure) iterator.next();
 
-                if (mapgenstructure instanceof MapGenStronghold)
-                {
+                if (mapgenstructure instanceof MapGenStronghold) {
                     return mapgenstructure.getClosestStrongholdPos(worldIn, p_180513_3_);
                 }
             }
@@ -268,25 +268,20 @@
         return null;
     }
 
-    public int getLoadedChunkCount()
-    {
+    public int getLoadedChunkCount() {
         return 0;
     }
 
-    public void recreateStructures(Chunk p_180514_1_, int p_180514_2_, int p_180514_3_)
-    {
+    public void recreateStructures(Chunk p_180514_1_, int p_180514_2_, int p_180514_3_) {
         Iterator iterator = this.structureGenerators.iterator();
 
-        while (iterator.hasNext())
-        {
-            MapGenStructure mapgenstructure = (MapGenStructure)iterator.next();
-            mapgenstructure.func_175792_a(this, this.worldObj, p_180514_2_, p_180514_3_, (ChunkPrimer)null);
+        while (iterator.hasNext()) {
+            MapGenStructure mapgenstructure = (MapGenStructure) iterator.next();
+            mapgenstructure.func_175792_a(this, this.worldObj, p_180514_2_, p_180514_3_, (ChunkPrimer) null);
         }
     }
 
-    public Chunk provideChunk(BlockPos blockPosIn)
-    {
+    public Chunk provideChunk(BlockPos blockPosIn) {
         return this.provideChunk(blockPosIn.getX() >> 4, blockPosIn.getZ() >> 4);
     }
-}
+}
