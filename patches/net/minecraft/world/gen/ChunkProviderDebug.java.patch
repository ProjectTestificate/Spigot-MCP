---a/net/minecraft/world/gen/ChunkProviderDebug.java
+++b/net/minecraft/world/gen/ChunkProviderDebug.java
@@ -1,9 +1,7 @@
 package net.minecraft.world.gen;
 
-import com.google.common.collect.Lists;
 import java.util.Iterator;
 import java.util.List;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.EnumCreatureType;
@@ -16,34 +16,34 @@
 import net.minecraft.world.chunk.ChunkPrimer;
 import net.minecraft.world.chunk.IChunkProvider;
 
-public class ChunkProviderDebug implements IChunkProvider
-{
+import com.google.common.collect.Lists;
+
+public class ChunkProviderDebug implements IChunkProvider {
+
     private static final List field_177464_a = Lists.newArrayList();
     private static final int field_177462_b;
     private final World world;
     private static final String __OBFID = "CL_00002002";
 
-    public ChunkProviderDebug(World worldIn)
-    {
+    public ChunkProviderDebug(World worldIn) {
         this.world = worldIn;
     }
 
-    public Chunk provideChunk(int x, int z)
-    {
+    public Chunk provideChunk(int x, int z) {
         ChunkPrimer chunkprimer = new ChunkPrimer();
         int j1;
 
-        for (int k = 0; k < 16; ++k)
-        {
-            for (int l = 0; l < 16; ++l)
-            {
+        for (int k = 0; k < 16; ++k) {
+            for (int l = 0; l < 16; ++l) {
                 int i1 = x * 16 + k;
                 j1 = z * 16 + l;
                 chunkprimer.setBlockState(k, 60, l, Blocks.barrier.getDefaultState());
                 IBlockState iblockstate = func_177461_b(i1, j1);
 
-                if (iblockstate != null)
-                {
+                if (iblockstate != null) {
                     chunkprimer.setBlockState(k, 70, l, iblockstate);
                 }
             }
@@ -51,32 +51,28 @@
 
         Chunk chunk = new Chunk(this.world, chunkprimer, x, z);
         chunk.generateSkylightMap();
-        BiomeGenBase[] abiomegenbase = this.world.getWorldChunkManager().loadBlockGeneratorData((BiomeGenBase[])null, x * 16, z * 16, 16, 16);
+        BiomeGenBase[] abiomegenbase = this.world.getWorldChunkManager().loadBlockGeneratorData((BiomeGenBase[]) null, x * 16, z * 16, 16, 16);
         byte[] abyte = chunk.getBiomeArray();
 
-        for (j1 = 0; j1 < abyte.length; ++j1)
-        {
-            abyte[j1] = (byte)abiomegenbase[j1].biomeID;
+        for (j1 = 0; j1 < abyte.length; ++j1) {
+            abyte[j1] = (byte) abiomegenbase[j1].biomeID;
         }
 
         chunk.generateSkylightMap();
         return chunk;
     }
 
-    public static IBlockState func_177461_b(int p_177461_0_, int p_177461_1_)
-    {
+    public static IBlockState func_177461_b(int p_177461_0_, int p_177461_1_) {
         IBlockState iblockstate = null;
 
-        if (p_177461_0_ > 0 && p_177461_1_ > 0 && p_177461_0_ % 2 != 0 && p_177461_1_ % 2 != 0)
-        {
+        if (p_177461_0_ > 0 && p_177461_1_ > 0 && p_177461_0_ % 2 != 0 && p_177461_1_ % 2 != 0) {
             p_177461_0_ /= 2;
             p_177461_1_ /= 2;
 
-            if (p_177461_0_ <= field_177462_b && p_177461_1_ <= field_177462_b)
-            {
+            if (p_177461_0_ <= field_177462_b && p_177461_1_ <= field_177462_b) {
                 int k = MathHelper.abs_int(p_177461_0_ * field_177462_b + p_177461_1_);
 
-                if (k < field_177464_a.size())
-                {
-                    iblockstate = (IBlockState)field_177464_a.get(k);
+                if (k < field_177464_a.size()) {
+                    iblockstate = (IBlockState) field_177464_a.get(k);
                 }
             }
         }
@@ -86,74 +86,64 @@
         return iblockstate;
     }
 
-    public boolean chunkExists(int x, int z)
-    {
+    public boolean chunkExists(int x, int z) {
         return true;
     }
 
-    public void populate(IChunkProvider p_73153_1_, int p_73153_2_, int p_73153_3_) {}
+    public void populate(IChunkProvider p_73153_1_, int p_73153_2_, int p_73153_3_) {
+    }
 
-    public boolean func_177460_a(IChunkProvider p_177460_1_, Chunk p_177460_2_, int p_177460_3_, int p_177460_4_)
-    {
+    public boolean func_177460_a(IChunkProvider p_177460_1_, Chunk p_177460_2_, int p_177460_3_, int p_177460_4_) {
         return false;
     }
 
-    public boolean saveChunks(boolean p_73151_1_, IProgressUpdate p_73151_2_)
-    {
+    public boolean saveChunks(boolean p_73151_1_, IProgressUpdate p_73151_2_) {
         return true;
     }
 
-    public void saveExtraData() {}
+    public void saveExtraData() {
+    }
 
-    public boolean unloadQueuedChunks()
-    {
+    public boolean unloadQueuedChunks() {
         return false;
     }
 
-    public boolean canSave()
-    {
+    public boolean canSave() {
         return true;
     }
 
-    public String makeString()
-    {
+    public String makeString() {
         return "DebugLevelSource";
     }
 
-    public List func_177458_a(EnumCreatureType p_177458_1_, BlockPos p_177458_2_)
-    {
+    public List func_177458_a(EnumCreatureType p_177458_1_, BlockPos p_177458_2_) {
         BiomeGenBase biomegenbase = this.world.getBiomeGenForCoords(p_177458_2_);
         return biomegenbase.getSpawnableList(p_177458_1_);
     }
 
-    public BlockPos getStrongholdGen(World worldIn, String p_180513_2_, BlockPos p_180513_3_)
-    {
+    public BlockPos getStrongholdGen(World worldIn, String p_180513_2_, BlockPos p_180513_3_) {
         return null;
     }
 
-    public int getLoadedChunkCount()
-    {
+    public int getLoadedChunkCount() {
         return 0;
     }
 
-    public void recreateStructures(Chunk p_180514_1_, int p_180514_2_, int p_180514_3_) {}
+    public void recreateStructures(Chunk p_180514_1_, int p_180514_2_, int p_180514_3_) {
+    }
 
-    public Chunk provideChunk(BlockPos blockPosIn)
-    {
+    public Chunk provideChunk(BlockPos blockPosIn) {
         return this.provideChunk(blockPosIn.getX() >> 4, blockPosIn.getZ() >> 4);
     }
 
-    static
-    {
+    static {
         Iterator var0 = Block.blockRegistry.iterator();
 
-        while (var0.hasNext())
-        {
-            Block var1 = (Block)var0.next();
+        while (var0.hasNext()) {
+            Block var1 = (Block) var0.next();
             field_177464_a.addAll(var1.getBlockState().getValidStates());
         }
 
-        field_177462_b = MathHelper.ceiling_float_int(MathHelper.sqrt_float((float)field_177464_a.size()));
+        field_177462_b = MathHelper.ceiling_float_int(MathHelper.sqrt_float((float) field_177464_a.size()));
     }
-}
+}
