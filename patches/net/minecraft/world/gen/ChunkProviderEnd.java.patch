---a/net/minecraft/world/gen/ChunkProviderEnd.java
+++b/net/minecraft/world/gen/ChunkProviderEnd.java
@@ -2,6 +2,7 @@
 
 import java.util.List;
 import java.util.Random;
+
 import net.minecraft.block.BlockFalling;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
@@ -16,8 +16,8 @@
 import net.minecraft.world.chunk.ChunkPrimer;
 import net.minecraft.world.chunk.IChunkProvider;
 
-public class ChunkProviderEnd implements IChunkProvider
-{
+public class ChunkProviderEnd implements IChunkProvider {
+
     private Random endRNG;
     private NoiseGeneratorOctaves noiseGen1;
     private NoiseGeneratorOctaves noiseGen2;
@@ -34,8 +34,7 @@
     double[] noiseData5;
     private static final String __OBFID = "CL_00000397";
 
-    public ChunkProviderEnd(World worldIn, long p_i2007_2_)
-    {
+    public ChunkProviderEnd(World worldIn, long p_i2007_2_) {
         this.endWorld = worldIn;
         this.endRNG = new Random(p_i2007_2_);
         this.noiseGen1 = new NoiseGeneratorOctaves(this.endRNG, 16);
@@ -45,16 +45,14 @@
         this.noiseGen5 = new NoiseGeneratorOctaves(this.endRNG, 16);
     }
 
-    public void func_180520_a(int p_180520_1_, int p_180520_2_, ChunkPrimer p_180520_3_)
-    {
+    public void func_180520_a(int p_180520_1_, int p_180520_2_, ChunkPrimer p_180520_3_) {
         byte b0 = 2;
         int k = b0 + 1;
         byte b1 = 33;
         int l = b0 + 1;
         this.densities = this.initializeNoiseField(this.densities, p_180520_1_ * b0, 0, p_180520_2_ * b0, k, b1, l);
 
-        for (int i1 = 0; i1 < b0; ++i1)
-        {
-            for (int j1 = 0; j1 < b0; ++j1)
-            {
-                for (int k1 = 0; k1 < 32; ++k1)
-                {
+        for (int i1 = 0; i1 < b0; ++i1) {
+            for (int j1 = 0; j1 < b0; ++j1) {
+                for (int k1 = 0; k1 < 32; ++k1) {
                     double d0 = 0.25D;
                     double d1 = this.densities[((i1 + 0) * l + j1 + 0) * b1 + k1 + 0];
                     double d2 = this.densities[((i1 + 0) * l + j1 + 1) * b1 + k1 + 0];
@@ -69,26 +69,22 @@
                     double d7 = (this.densities[((i1 + 1) * l + j1 + 0) * b1 + k1 + 1] - d3) * d0;
                     double d8 = (this.densities[((i1 + 1) * l + j1 + 1) * b1 + k1 + 1] - d4) * d0;
 
-                    for (int l1 = 0; l1 < 4; ++l1)
-                    {
+                    for (int l1 = 0; l1 < 4; ++l1) {
                         double d9 = 0.125D;
                         double d10 = d1;
                         double d11 = d2;
                         double d12 = (d3 - d1) * d9;
                         double d13 = (d4 - d2) * d9;
 
-                        for (int i2 = 0; i2 < 8; ++i2)
-                        {
+                        for (int i2 = 0; i2 < 8; ++i2) {
                             double d14 = 0.125D;
                             double d15 = d10;
                             double d16 = (d11 - d10) * d14;
 
-                            for (int j2 = 0; j2 < 8; ++j2)
-                            {
+                            for (int j2 = 0; j2 < 8; ++j2) {
                                 IBlockState iblockstate = null;
 
-                                if (d15 > 0.0D)
-                                {
+                                if (d15 > 0.0D) {
                                     iblockstate = Blocks.end_stone.getDefaultState();
                                 }
 
@@ -113,51 +113,36 @@
         }
     }
 
-    public void func_180519_a(ChunkPrimer p_180519_1_)
-    {
-        for (int i = 0; i < 16; ++i)
-        {
-            for (int j = 0; j < 16; ++j)
-            {
+    public void func_180519_a(ChunkPrimer p_180519_1_) {
+        for (int i = 0; i < 16; ++i) {
+            for (int j = 0; j < 16; ++j) {
                 byte b0 = 1;
                 int k = -1;
                 IBlockState iblockstate = Blocks.end_stone.getDefaultState();
                 IBlockState iblockstate1 = Blocks.end_stone.getDefaultState();
 
-                for (int l = 127; l >= 0; --l)
-                {
+                for (int l = 127; l >= 0; --l) {
                     IBlockState iblockstate2 = p_180519_1_.getBlockState(i, l, j);
 
-                    if (iblockstate2.getBlock().getMaterial() == Material.air)
-                    {
+                    if (iblockstate2.getBlock().getMaterial() == Material.air) {
                         k = -1;
-                    }
-                    else if (iblockstate2.getBlock() == Blocks.stone)
-                    {
-                        if (k == -1)
-                        {
-                            if (b0 <= 0)
-                            {
+                    } else if (iblockstate2.getBlock() == Blocks.stone) {
+                        if (k == -1) {
+                            if (b0 <= 0) {
                                 iblockstate = Blocks.air.getDefaultState();
                                 iblockstate1 = Blocks.end_stone.getDefaultState();
                             }
 
                             k = b0;
 
-                            if (l >= 0)
-                            {
+                            if (l >= 0) {
                                 p_180519_1_.setBlockState(i, l, j, iblockstate);
-                            }
-                            else
-                            {
+                            } else {
                                 p_180519_1_.setBlockState(i, l, j, iblockstate1);
                             }
-                        }
-                        else if (k > 0)
-                        {
+                        } else if (k > 0) {
                             --k;
                             p_180519_1_.setBlockState(i, l, j, iblockstate1);
                         }
@@ -164,9 +164,8 @@
         }
     }
 
-    public Chunk provideChunk(int x, int z)
-    {
-        this.endRNG.setSeed((long)x * 341873128712L + (long)z * 132897987541L);
+    public Chunk provideChunk(int x, int z) {
+        this.endRNG.setSeed((long) x * 341873128712L + (long) z * 132897987541L);
         ChunkPrimer chunkprimer = new ChunkPrimer();
         this.biomesForGeneration = this.endWorld.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration, x * 16, z * 16, 16, 16);
         this.func_180520_a(x, z, chunkprimer);
@@ -174,18 +174,16 @@
         Chunk chunk = new Chunk(this.endWorld, chunkprimer, x, z);
         byte[] abyte = chunk.getBiomeArray();
 
-        for (int k = 0; k < abyte.length; ++k)
-        {
-            abyte[k] = (byte)this.biomesForGeneration[k].biomeID;
+        for (int k = 0; k < abyte.length; ++k) {
+            abyte[k] = (byte) this.biomesForGeneration[k].biomeID;
         }
 
         chunk.generateSkylightMap();
         return chunk;
     }
 
-    private double[] initializeNoiseField(double[] p_73187_1_, int p_73187_2_, int p_73187_3_, int p_73187_4_, int p_73187_5_, int p_73187_6_, int p_73187_7_)
-    {
-        if (p_73187_1_ == null)
-        {
+    private double[] initializeNoiseField(double[] p_73187_1_, int p_73187_2_, int p_73187_3_, int p_73187_4_, int p_73187_5_, int p_73187_6_, int p_73187_7_) {
+        if (p_73187_1_ == null) {
             p_73187_1_ = new double[p_73187_5_ * p_73187_6_ * p_73187_7_];
         }
 
@@ -200,64 +200,51 @@
         this.noiseData3 = this.noiseGen2.generateNoiseOctaves(this.noiseData3, p_73187_2_, p_73187_3_, p_73187_4_, p_73187_5_, p_73187_6_, p_73187_7_, d0, d1, d0);
         int k1 = 0;
 
-        for (int l1 = 0; l1 < p_73187_5_; ++l1)
-        {
-            for (int i2 = 0; i2 < p_73187_7_; ++i2)
-            {
-                float f = (float)(l1 + p_73187_2_) / 1.0F;
-                float f1 = (float)(i2 + p_73187_4_) / 1.0F;
+        for (int l1 = 0; l1 < p_73187_5_; ++l1) {
+            for (int i2 = 0; i2 < p_73187_7_; ++i2) {
+                float f = (float) (l1 + p_73187_2_) / 1.0F;
+                float f1 = (float) (i2 + p_73187_4_) / 1.0F;
                 float f2 = 100.0F - MathHelper.sqrt_float(f * f + f1 * f1) * 8.0F;
 
-                if (f2 > 80.0F)
-                {
+                if (f2 > 80.0F) {
                     f2 = 80.0F;
                 }
 
-                if (f2 < -100.0F)
-                {
+                if (f2 < -100.0F) {
                     f2 = -100.0F;
                 }
 
-                for (int j2 = 0; j2 < p_73187_6_; ++j2)
-                {
+                for (int j2 = 0; j2 < p_73187_6_; ++j2) {
                     double d2 = 0.0D;
                     double d3 = this.noiseData2[k1] / 512.0D;
                     double d4 = this.noiseData3[k1] / 512.0D;
                     double d5 = (this.noiseData1[k1] / 10.0D + 1.0D) / 2.0D;
 
-                    if (d5 < 0.0D)
-                    {
+                    if (d5 < 0.0D) {
                         d2 = d3;
-                    }
-                    else if (d5 > 1.0D)
-                    {
+                    } else if (d5 > 1.0D) {
                         d2 = d4;
-                    }
-                    else
-                    {
+                    } else {
                         d2 = d3 + (d4 - d3) * d5;
                     }
 
                     d2 -= 8.0D;
-                    d2 += (double)f2;
+                    d2 += (double) f2;
                     byte b0 = 2;
                     double d6;
 
-                    if (j2 > p_73187_6_ / 2 - b0)
-                    {
-                        d6 = (double)((float)(j2 - (p_73187_6_ / 2 - b0)) / 64.0F);
+                    if (j2 > p_73187_6_ / 2 - b0) {
+                        d6 = (double) ((float) (j2 - (p_73187_6_ / 2 - b0)) / 64.0F);
                         d6 = MathHelper.clamp_double(d6, 0.0D, 1.0D);
                         d2 = d2 * (1.0D - d6) + -3000.0D * d6;
                     }
 
                     b0 = 8;
 
-                    if (j2 < b0)
-                    {
-                        d6 = (double)((float)(b0 - j2) / ((float)b0 - 1.0F));
+                    if (j2 < b0) {
+                        d6 = (double) ((float) (b0 - j2) / ((float) b0 - 1.0F));
                         d2 = d2 * (1.0D - d6) + -30.0D * d6;
                     }
 
@@ -267,66 +267,56 @@
         return p_73187_1_;
     }
 
-    public boolean chunkExists(int x, int z)
-    {
+    public boolean chunkExists(int x, int z) {
         return true;
     }
 
-    public void populate(IChunkProvider p_73153_1_, int p_73153_2_, int p_73153_3_)
-    {
+    public void populate(IChunkProvider p_73153_1_, int p_73153_2_, int p_73153_3_) {
         BlockFalling.fallInstantly = true;
         BlockPos blockpos = new BlockPos(p_73153_2_ * 16, 0, p_73153_3_ * 16);
         this.endWorld.getBiomeGenForCoords(blockpos.add(16, 0, 16)).decorate(this.endWorld, this.endWorld.rand, blockpos);
         BlockFalling.fallInstantly = false;
     }
 
-    public boolean func_177460_a(IChunkProvider p_177460_1_, Chunk p_177460_2_, int p_177460_3_, int p_177460_4_)
-    {
+    public boolean func_177460_a(IChunkProvider p_177460_1_, Chunk p_177460_2_, int p_177460_3_, int p_177460_4_) {
         return false;
     }
 
-    public boolean saveChunks(boolean p_73151_1_, IProgressUpdate p_73151_2_)
-    {
+    public boolean saveChunks(boolean p_73151_1_, IProgressUpdate p_73151_2_) {
         return true;
     }
 
-    public void saveExtraData() {}
+    public void saveExtraData() {
+    }
 
-    public boolean unloadQueuedChunks()
-    {
+    public boolean unloadQueuedChunks() {
         return false;
     }
 
-    public boolean canSave()
-    {
+    public boolean canSave() {
         return true;
     }
 
-    public String makeString()
-    {
+    public String makeString() {
         return "RandomLevelSource";
     }
 
-    public List func_177458_a(EnumCreatureType p_177458_1_, BlockPos p_177458_2_)
-    {
+    public List func_177458_a(EnumCreatureType p_177458_1_, BlockPos p_177458_2_) {
         return this.endWorld.getBiomeGenForCoords(p_177458_2_).getSpawnableList(p_177458_1_);
     }
 
-    public BlockPos getStrongholdGen(World worldIn, String p_180513_2_, BlockPos p_180513_3_)
-    {
+    public BlockPos getStrongholdGen(World worldIn, String p_180513_2_, BlockPos p_180513_3_) {
         return null;
     }
 
-    public int getLoadedChunkCount()
-    {
+    public int getLoadedChunkCount() {
         return 0;
     }
 
-    public void recreateStructures(Chunk p_180514_1_, int p_180514_2_, int p_180514_3_) {}
+    public void recreateStructures(Chunk p_180514_1_, int p_180514_2_, int p_180514_3_) {
+    }
 
-    public Chunk provideChunk(BlockPos blockPosIn)
-    {
+    public Chunk provideChunk(BlockPos blockPosIn) {
         return this.provideChunk(blockPosIn.getX() >> 4, blockPosIn.getZ() >> 4);
     }
-}
+}
