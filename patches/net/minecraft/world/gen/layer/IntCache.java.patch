--- decompiled\net\minecraft\world\gen\layer\IntCache.java
+++ src\main\java\net\minecraft\world\gen\layer\IntCache.java
@@ -1,12 +1,16 @@
 package net.minecraft.world.gen.layer;
 
-import com.google.common.collect.Lists;
 import java.util.List;
 
+import org.spigotmc.SpigotConfig;
+
+import com.google.common.collect.Lists;
+
 public class IntCache
 {
+
     private static int intCacheSize = 256;
     private static List freeSmallArrays = Lists.newArrayList();
     private static List inUseSmallArrays = Lists.newArrayList();
     private static List freeLargeArrays = Lists.newArrayList();
     private static List inUseLargeArrays = Lists.newArrayList();
@@ -19,39 +23,49 @@
         if (p_76445_0_ <= 256)
         {
             if (freeSmallArrays.isEmpty())
             {
                 aint = new int[256];
-                inUseSmallArrays.add(aint);
+
+                if (inUseSmallArrays.size() < SpigotConfig.intCacheLimit) inUseSmallArrays.add(aint); // Spigot
+
                 return aint;
             }
             else
             {
                 aint = (int[])freeSmallArrays.remove(freeSmallArrays.size() - 1);
-                inUseSmallArrays.add(aint);
+
+                if (inUseSmallArrays.size() < SpigotConfig.intCacheLimit) inUseSmallArrays.add(aint); // Spigot
+
                 return aint;
             }
         }
         else if (p_76445_0_ > intCacheSize)
         {
             intCacheSize = p_76445_0_;
             freeLargeArrays.clear();
             inUseLargeArrays.clear();
             aint = new int[intCacheSize];
-            inUseLargeArrays.add(aint);
+
+            if (inUseSmallArrays.size() < SpigotConfig.intCacheLimit) inUseLargeArrays.add(aint); // Spigot
+
             return aint;
         }
         else if (freeLargeArrays.isEmpty())
         {
             aint = new int[intCacheSize];
-            inUseLargeArrays.add(aint);
+
+            if (inUseSmallArrays.size() < SpigotConfig.intCacheLimit) inUseLargeArrays.add(aint); // Spigot
+
             return aint;
         }
         else
         {
             aint = (int[])freeLargeArrays.remove(freeLargeArrays.size() - 1);
-            inUseLargeArrays.add(aint);
+
+            if (inUseSmallArrays.size() < SpigotConfig.intCacheLimit) inUseLargeArrays.add(aint); // Spigot
+
             return aint;
         }
     }
 
     public static synchronized void resetIntCache()
