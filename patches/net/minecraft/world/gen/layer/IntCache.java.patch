---a/net/minecraft/world/gen/layer/IntCache.java
+++b/net/minecraft/world/gen/layer/IntCache.java
@@ -1,9 +1,7 @@
 package net.minecraft.world.gen.layer;
 
-import com.google.common.collect.Lists;
 import java.util.List;
 
-public class IntCache
-{
+import org.spigotmc.SpigotConfig;
+
+import com.google.common.collect.Lists;
+
+public class IntCache {
+
     private static int intCacheSize = 256;
     private static List freeSmallArrays = Lists.newArrayList();
     private static List inUseSmallArrays = Lists.newArrayList();
@@ -12,57 +12,43 @@
     private static List inUseLargeArrays = Lists.newArrayList();
     private static final String __OBFID = "CL_00000557";
 
-    public static synchronized int[] getIntCache(int p_76445_0_)
-    {
+    public static synchronized int[] getIntCache(int p_76445_0_) {
         int[] aint;
 
-        if (p_76445_0_ <= 256)
-        {
-            if (freeSmallArrays.isEmpty())
-            {
+        if (p_76445_0_ <= 256) {
+            if (freeSmallArrays.isEmpty()) {
                 aint = new int[256];
-                inUseSmallArrays.add(aint);
+                if (inUseSmallArrays.size() < SpigotConfig.intCacheLimit) inUseSmallArrays.add(aint); // Spigot
                 return aint;
-            }
-            else
-            {
-                aint = (int[])freeSmallArrays.remove(freeSmallArrays.size() - 1);
-                inUseSmallArrays.add(aint);
+            } else {
+                aint = (int[]) freeSmallArrays.remove(freeSmallArrays.size() - 1);
+                if (inUseSmallArrays.size() < SpigotConfig.intCacheLimit) inUseSmallArrays.add(aint); // Spigot
                 return aint;
             }
-        }
-        else if (p_76445_0_ > intCacheSize)
-        {
+        } else if (p_76445_0_ > intCacheSize) {
             intCacheSize = p_76445_0_;
             freeLargeArrays.clear();
             inUseLargeArrays.clear();
             aint = new int[intCacheSize];
-            inUseLargeArrays.add(aint);
+            if (inUseSmallArrays.size() < SpigotConfig.intCacheLimit) inUseLargeArrays.add(aint); // Spigot
             return aint;
-        }
-        else if (freeLargeArrays.isEmpty())
-        {
+        } else if (freeLargeArrays.isEmpty()) {
             aint = new int[intCacheSize];
-            inUseLargeArrays.add(aint);
+            if (inUseSmallArrays.size() < SpigotConfig.intCacheLimit) inUseLargeArrays.add(aint); // Spigot
             return aint;
-        }
-        else
-        {
-            aint = (int[])freeLargeArrays.remove(freeLargeArrays.size() - 1);
-            inUseLargeArrays.add(aint);
+        } else {
+            aint = (int[]) freeLargeArrays.remove(freeLargeArrays.size() - 1);
+            if (inUseSmallArrays.size() < SpigotConfig.intCacheLimit) inUseLargeArrays.add(aint); // Spigot
             return aint;
         }
     }
 
-    public static synchronized void resetIntCache()
-    {
-        if (!freeLargeArrays.isEmpty())
-        {
+    public static synchronized void resetIntCache() {
+        if (!freeLargeArrays.isEmpty()) {
             freeLargeArrays.remove(freeLargeArrays.size() - 1);
         }
 
-        if (!freeSmallArrays.isEmpty())
-        {
+        if (!freeSmallArrays.isEmpty()) {
             freeSmallArrays.remove(freeSmallArrays.size() - 1);
         }
 
@@ -72,9 +72,7 @@
         inUseSmallArrays.clear();
     }
 
-    public static synchronized String getCacheSizes()
-    {
+    public static synchronized String getCacheSizes() {
         return "cache: " + freeLargeArrays.size() + ", tcache: " + freeSmallArrays.size() + ", allocated: " + inUseLargeArrays.size() + ", tallocated: " + inUseSmallArrays.size();
     }
-}
+}
