--- decompiled\net\minecraft\world\gen\ChunkProviderServer.java
+++ src\main\java\net\minecraft\world\gen\ChunkProviderServer.java
@@ -1,43 +1,51 @@
 package net.minecraft.world.gen;
 
-import com.google.common.collect.Lists;
-import java.io.IOException;
-import java.util.Collections;
+import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
+import java.util.Random;
+
+import net.minecraft.block.BlockSand;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.entity.EnumCreatureType;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.IProgressUpdate;
-import net.minecraft.util.LongHashMap;
 import net.minecraft.util.ReportedException;
-import net.minecraft.world.ChunkCoordIntPair;
-import net.minecraft.world.MinecraftException;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.chunk.EmptyChunk;
 import net.minecraft.world.chunk.IChunkProvider;
+import net.minecraft.world.chunk.storage.AnvilChunkLoader;
 import net.minecraft.world.chunk.storage.IChunkLoader;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Server;
+import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
+import org.bukkit.craftbukkit.util.LongHash;
+import org.bukkit.craftbukkit.util.LongHashSet;
+import org.bukkit.craftbukkit.util.LongObjectHashMap;
+import org.bukkit.event.world.ChunkLoadEvent;
+import org.bukkit.event.world.ChunkPopulateEvent;
+import org.bukkit.event.world.ChunkUnloadEvent;
+import org.bukkit.generator.BlockPopulator;
 
 public class ChunkProviderServer implements IChunkProvider
 {
+
     private static final Logger logger = LogManager.getLogger();
-    private Set droppedChunksSet = Collections.newSetFromMap(new ConcurrentHashMap());
-    private Chunk dummyChunk;
-    private IChunkProvider serverChunkGenerator;
-    private IChunkLoader chunkLoader;
-    public boolean chunkLoadOverride = true;
-    private LongHashMap id2ChunkMap = new LongHashMap();
-    private List loadedChunks = Lists.newArrayList();
-    private WorldServer worldObj;
+    public LongHashSet droppedChunksSet = new LongHashSet(); // CraftBukkit - LongHashSet // SpigotMCP -- Apply access transform
+    public Chunk dummyChunk; // SpigotMCP -- Apply access transform
+    public IChunkProvider serverChunkGenerator;
+    public IChunkLoader chunkLoader;
+    public boolean chunkLoadOverride = false; // CraftBukkit - true -> false
+    public LongObjectHashMap<Chunk> id2ChunkMap = new LongObjectHashMap<Chunk>(); // CraftBukkit -- LongHashMap -> LongObjectHashMap
+    // public List loadedChunks = Lists.newArrayList(); // CraftBukkit - remove
+    public WorldServer worldObj; // CraftBukkit - public // SpigotMCP NOTE -- Already public
     private static final String __OBFID = "CL_00001436";
 
     public ChunkProviderServer(WorldServer p_i1520_1_, IChunkLoader p_i1520_2_, IChunkProvider p_i1520_3_)
     {
         this.dummyChunk = new EmptyChunk(p_i1520_1_, 0, 0);
@@ -46,52 +54,124 @@
         this.serverChunkGenerator = p_i1520_3_;
     }
 
     public boolean chunkExists(int x, int z)
     {
-        return this.id2ChunkMap.containsItem(ChunkCoordIntPair.chunkXZ2Int(x, z));
+        return this.id2ChunkMap.containsKey(LongHash.toLong(x, z)); // CraftBukkit
     }
 
-    public List func_152380_a()
+    // CraftBukkit start - Change return type to Collection and return the values of our chunk map
+    public Collection func_152380_a()
     {
-        return this.loadedChunks;
+        // return this.chunkList;
+        return this.id2ChunkMap.values();
+        // CraftBukkit end
     }
 
     public void dropChunk(int p_73241_1_, int p_73241_2_)
     {
         if (this.worldObj.provider.canRespawnHere())
         {
             if (!this.worldObj.isSpawnChunk(p_73241_1_, p_73241_2_))
             {
-                this.droppedChunksSet.add(Long.valueOf(ChunkCoordIntPair.chunkXZ2Int(p_73241_1_, p_73241_2_)));
+                // CraftBukkit start
+                this.droppedChunksSet.add(p_73241_1_, p_73241_2_);
+                Chunk c = id2ChunkMap.get(LongHash.toLong(p_73241_1_, p_73241_2_));
+
+                if (c != null)
+                {
+                    c.mustSave = true;
+                }
+
+                // CraftBukkit end
             }
         }
         else
         {
-            this.droppedChunksSet.add(Long.valueOf(ChunkCoordIntPair.chunkXZ2Int(p_73241_1_, p_73241_2_)));
+            // CraftBukkit start
+            this.droppedChunksSet.add(p_73241_1_, p_73241_2_);
+            Chunk c = id2ChunkMap.get(LongHash.toLong(p_73241_1_, p_73241_2_));
+
+            if (c != null)
+            {
+                c.mustSave = true;
+            }
+
+            // CraftBukkit end
         }
     }
 
     public void unloadAllChunks()
     {
-        Iterator iterator = this.loadedChunks.iterator();
+        Iterator iterator = this.id2ChunkMap.values().iterator(); // CraftBukkit
 
         while (iterator.hasNext())
         {
             Chunk chunk = (Chunk)iterator.next();
             this.dropChunk(chunk.xPosition, chunk.zPosition);
         }
     }
 
-    public Chunk loadChunk(int p_73158_1_, int p_73158_2_)
+    // CraftBukkit start - Add async variant, provide compatibility
+    public net.minecraft.world.chunk.Chunk getChunkIfLoaded(int x, int z)
     {
-        long k = ChunkCoordIntPair.chunkXZ2Int(p_73158_1_, p_73158_2_);
-        this.droppedChunksSet.remove(Long.valueOf(k));
-        Chunk chunk = (Chunk)this.id2ChunkMap.getValueByKey(k);
+        return id2ChunkMap.get(LongHash.toLong(x, z));
+    }
 
+    public net.minecraft.world.chunk.Chunk loadChunk(int i, int j)
+    {
+        return getChunkAt(i, j, null);
+    }
+
+    public net.minecraft.world.chunk.Chunk getChunkAt(int i, int j, Runnable runnable)
+    {
+        droppedChunksSet.remove(i, j);
+        Chunk chunk = id2ChunkMap.get(LongHash.toLong(i, j));
+        AnvilChunkLoader loader = null;
+
+        if (this.chunkLoader instanceof AnvilChunkLoader)
+        {
+            loader = (AnvilChunkLoader)this.chunkLoader;
+        }
+
+        // We can only use the queue for already generated chunks
+        if (chunk == null && loader != null && loader.chunkExists(worldObj, i, j))
+        {
+            if (runnable != null)
+            {
+                ChunkIOExecutor.queueChunkLoad(worldObj, loader, this, i, j, runnable);
+                return null;
+            }
+            else
+            {
+                chunk = ChunkIOExecutor.syncChunkLoad(worldObj, loader, this, i, j);
+            }
+        }
+        else if (chunk == null)
+        {
+            chunk = originalGetChunkAt(i, j);
+        }
+
+        // If we didn't load the chunk async and have a callback run it now
+        if (runnable != null)
+        {
+            runnable.run();
+        }
+
+        return chunk;
+    }
+
+    public Chunk originalGetChunkAt(int p_73158_1_, int p_73158_2_)
+    {
+        this.droppedChunksSet.remove(p_73158_1_, p_73158_2_);
+        Chunk chunk = (Chunk)this.id2ChunkMap.get(LongHash.toLong(p_73158_1_, p_73158_2_)); // CraftBukkit
+        boolean newChunk = false;
+
+        // CraftBukkit end
         if (chunk == null)
         {
+            worldObj.timings.syncChunkLoadTimer.startTiming(); // Spigot
             chunk = this.loadChunkFromFile(p_73158_1_, p_73158_2_);
 
             if (chunk == null)
             {
                 if (this.serverChunkGenerator == null)
@@ -107,30 +187,82 @@
                     catch (Throwable throwable)
                     {
                         CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Exception generating new chunk");
                         CrashReportCategory crashreportcategory = crashreport.makeCategory("Chunk to be generated");
                         crashreportcategory.addCrashSection("Location", String.format("%d,%d", new Object[] {Integer.valueOf(p_73158_1_), Integer.valueOf(p_73158_2_)}));
-                        crashreportcategory.addCrashSection("Position hash", Long.valueOf(k));
+                        crashreportcategory.addCrashSection("Position hash", Long.valueOf(LongHash.toLong(p_73158_1_, p_73158_2_))); // CraftBukkit - Use LongHash
                         crashreportcategory.addCrashSection("Generator", this.serverChunkGenerator.makeString());
                         throw new ReportedException(crashreport);
                     }
                 }
+
+                newChunk = true; // CraftBukkit
             }
 
-            this.id2ChunkMap.add(k, chunk);
-            this.loadedChunks.add(chunk);
+            this.id2ChunkMap.put(LongHash.toLong(p_73158_1_, p_73158_2_), chunk); // CraftBukkit
+            // this.loadedChunks.add(chunk);  // CraftBukkit
             chunk.onChunkLoad();
+            // CraftBukkit start
+            Server server = worldObj.getServer();
+
+            if (server != null)
+            {
+                /*
+                 * If it's a new world, the first few chunks are generated inside
+                 * the World constructor. We can't reliably alter that, so we have
+                 * no way of creating a CraftWorld/CraftServer at that point.
+                 */
+                server.getPluginManager().callEvent(new ChunkLoadEvent(chunk.bukkitChunk, newChunk));
+            }
+
+            // Update neighbor counts
+            for (int x = -2; x < 3; x++)
+            {
+                for (int z = -2; z < 3; z++)
+                {
+                    if (x == 0 && z == 0)
+                    {
+                        continue;
+                    }
+
+                    Chunk neighbor = this.getChunkIfLoaded(chunk.xPosition + x, chunk.zPosition + z);
+
+                    if (neighbor != null)
+                    {
+                        neighbor.setNeighborLoaded(-x, -z);
+                        chunk.setNeighborLoaded(x, z);
+                    }
+                }
+            }
+
+            // CraftBukkit end
             chunk.populateChunk(this, this, p_73158_1_, p_73158_2_);
+            worldObj.timings.syncChunkLoadTimer.stopTiming(); // Spigot
         }
 
         return chunk;
     }
 
     public Chunk provideChunk(int x, int z)
     {
-        Chunk chunk = (Chunk)this.id2ChunkMap.getValueByKey(ChunkCoordIntPair.chunkXZ2Int(x, z));
-        return chunk == null ? (!this.worldObj.isFindingSpawnPoint() && !this.chunkLoadOverride ? this.dummyChunk : this.loadChunk(x, z)) : chunk;
+        // CraftBukkit start
+        Chunk chunk = (Chunk)this.id2ChunkMap.get(LongHash.toLong(x, z));
+        chunk = chunk == null ? (!this.worldObj.isFindingSpawnPoint() && !this.chunkLoadOverride ? this.dummyChunk : this.loadChunk(x, z)) : chunk;
+
+        if (chunk == dummyChunk) return chunk;
+
+        if (x != chunk.xPosition || z != chunk.zPosition)
+        {
+            logger.error("Chunk (" + chunk.xPosition + ", " + chunk.zPosition + ") stored at  (" + x + ", " + z + ") in world '" + worldObj.getWorld().getName() + "'");
+            logger.error(chunk.getClass().getName());
+            Throwable ex = new Throwable();
+            ex.fillInStackTrace();
+            ex.printStackTrace();
+        }
+
+        return chunk;
+        // CraftBukkit end
     }
 
     private Chunk loadChunkFromFile(int p_73239_1_, int p_73239_2_)
     {
         if (this.chunkLoader == null)
@@ -147,11 +279,13 @@
                 {
                     chunk.setLastSaveTime(this.worldObj.getTotalWorldTime());
 
                     if (this.serverChunkGenerator != null)
                     {
+                        worldObj.timings.syncChunkLoadStructuresTimer.startTiming(); // Spigot
                         this.serverChunkGenerator.recreateStructures(chunk, p_73239_1_, p_73239_2_);
+                        worldObj.timings.syncChunkLoadStructuresTimer.stopTiming(); // Spigot
                     }
                 }
 
                 return chunk;
             }
@@ -161,11 +295,11 @@
                 return null;
             }
         }
     }
 
-    private void saveChunkExtraData(Chunk p_73243_1_)
+    public void saveChunkExtraData(Chunk p_73243_1_)   // SpigotMCP -- Apply access transformation
     {
         if (this.chunkLoader != null)
         {
             try
             {
@@ -176,26 +310,28 @@
                 logger.error("Couldn\'t save entities", exception);
             }
         }
     }
 
-    private void saveChunkData(Chunk p_73242_1_)
+    public void saveChunkData(Chunk p_73242_1_)   // SpigotMCP -- Apply access transformation
     {
         if (this.chunkLoader != null)
         {
             try
             {
                 p_73242_1_.setLastSaveTime(this.worldObj.getTotalWorldTime());
                 this.chunkLoader.saveChunk(this.worldObj, p_73242_1_);
+                // CraftBukkit start - IOException to Exception
             }
-            catch (IOException ioexception)
+            catch (Exception ioexception)
             {
                 logger.error("Couldn\'t save chunk", ioexception);
-            }
-            catch (MinecraftException minecraftexception)
-            {
+                /* Remove extra exception
+                } catch (MinecraftException minecraftexception) {
                 logger.error("Couldn\'t save chunk; already in use by another instance of Minecraft?", minecraftexception);
+                */
+                // CraftBukkit end
             }
         }
     }
 
     public void populate(IChunkProvider p_73153_1_, int p_73153_2_, int p_73153_3_)
@@ -207,10 +343,39 @@
             chunk.func_150809_p();
 
             if (this.serverChunkGenerator != null)
             {
                 this.serverChunkGenerator.populate(p_73153_1_, p_73153_2_, p_73153_3_);
+                // CraftBukkit start
+                BlockSand.fallInstantly = true;
+                Random random = new Random();
+                random.setSeed(worldObj.getSeed());
+                long xRand = random.nextLong() / 2L * 2L + 1L;
+                long zRand = random.nextLong() / 2L * 2L + 1L;
+                random.setSeed((long)p_73153_2_ * xRand + (long)p_73153_3_ * zRand ^ worldObj.getSeed());
+                org.bukkit.World world = this.worldObj.getWorld();
+
+                if (world != null)
+                {
+                    this.worldObj.populating = true;
+
+                    try
+                    {
+                        for (BlockPopulator populator : world.getPopulators())
+                        {
+                            populator.populate(world, random, chunk.bukkitChunk);
+                        }
+                    }
+                    finally
+                    {
+                        this.worldObj.populating = false;
+                    }
+                }
+
+                BlockSand.fallInstantly = false;
+                this.worldObj.getServer().getPluginManager().callEvent(new ChunkPopulateEvent(chunk.bukkitChunk));
+                // CraftBukkit end
                 chunk.setChunkModified();
             }
         }
     }
 
@@ -229,14 +394,17 @@
     }
 
     public boolean saveChunks(boolean p_73151_1_, IProgressUpdate p_73151_2_)
     {
         int i = 0;
+        // CraftBukkit start
+        Iterator<Chunk> iterator = this.id2ChunkMap.values().iterator();
 
-        for (int j = 0; j < this.loadedChunks.size(); ++j)
+        while (iterator.hasNext())
         {
-            Chunk chunk = (Chunk)this.loadedChunks.get(j);
+            Chunk chunk = iterator.next();
+            // CraftBukkit end
 
             if (p_73151_1_)
             {
                 this.saveChunkExtraData(chunk);
             }
@@ -267,30 +435,58 @@
 
     public boolean unloadQueuedChunks()
     {
         if (!this.worldObj.disableLevelSaving)
         {
-            for (int i = 0; i < 100; ++i)
+            // CraftBukkit start
+            Server server = this.worldObj.getServer();
+
+            for (int i = 0; i < 100 && !this.droppedChunksSet.isEmpty(); ++i)
             {
-                if (!this.droppedChunksSet.isEmpty())
+                Long olong = (Long)this.droppedChunksSet.popFirst();
+                Chunk chunk = (Chunk)this.id2ChunkMap.get(olong);
+
+                if (chunk == null) continue;
+
+                ChunkUnloadEvent event = new ChunkUnloadEvent(chunk.bukkitChunk);
+                server.getPluginManager().callEvent(event);
+
+                if (event.isCancelled()) continue; // SpigotMCP -- Use continue instead of if-block
+
+                if (chunk != null)
                 {
-                    Long olong = (Long)this.droppedChunksSet.iterator().next();
-                    Chunk chunk = (Chunk)this.id2ChunkMap.getValueByKey(olong.longValue());
+                    chunk.onChunkUnload();
+                    this.saveChunkData(chunk);
+                    this.saveChunkExtraData(chunk);
+                    this.id2ChunkMap.remove(olong);
+                    // this.loadedChunks.remove(chunk);
+                }
 
-                    if (chunk != null)
+                // this.droppedChunksSet.remove(olong);
+                // Update neighbor counts
+                for (int x = -2; x < 3; x++)
+                {
+                    for (int z = -2; z < 3; z++)
                     {
-                        chunk.onChunkUnload();
-                        this.saveChunkData(chunk);
-                        this.saveChunkExtraData(chunk);
-                        this.id2ChunkMap.remove(olong.longValue());
-                        this.loadedChunks.remove(chunk);
-                    }
+                        if (x == 0 && z == 0)
+                        {
+                            continue;
+                        }
 
-                    this.droppedChunksSet.remove(olong);
+                        Chunk neighbor = this.getChunkIfLoaded(chunk.xPosition + x, chunk.zPosition + z);
+
+                        if (neighbor != null)
+                        {
+                            neighbor.setNeighborUnloaded(-x, -z);
+                            chunk.setNeighborUnloaded(x, z);
+                        }
+                    }
                 }
             }
 
+            // CraftBukkit end
+
             if (this.chunkLoader != null)
             {
                 this.chunkLoader.chunkTick();
             }
         }
@@ -303,11 +499,12 @@
         return !this.worldObj.disableLevelSaving;
     }
 
     public String makeString()
     {
-        return "ServerChunkCache: " + this.id2ChunkMap.getNumHashElements() + " Drop: " + this.droppedChunksSet.size();
+        // CraftBukkit - this.chunks.count() -> .size()
+        return "ServerChunkCache: " + this.id2ChunkMap.size() + " Drop: " + this.droppedChunksSet.size();
     }
 
     public List func_177458_a(EnumCreatureType p_177458_1_, BlockPos p_177458_2_)
     {
         return this.serverChunkGenerator.func_177458_a(p_177458_1_, p_177458_2_);
@@ -318,14 +515,17 @@
         return this.serverChunkGenerator.getStrongholdGen(worldIn, p_180513_2_, p_180513_3_);
     }
 
     public int getLoadedChunkCount()
     {
-        return this.id2ChunkMap.getNumHashElements();
+        // CraftBukkit - this.chunks.count() -> this.chunks.size()
+        return this.id2ChunkMap.size();
     }
 
-    public void recreateStructures(Chunk p_180514_1_, int p_180514_2_, int p_180514_3_) {}
+    public void recreateStructures(Chunk p_180514_1_, int p_180514_2_, int p_180514_3_)
+    {
+    }
 
     public Chunk provideChunk(BlockPos blockPosIn)
     {
         return this.provideChunk(blockPosIn.getX() >> 4, blockPosIn.getZ() >> 4);
     }
