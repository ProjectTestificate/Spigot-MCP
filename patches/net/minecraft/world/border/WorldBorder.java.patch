---a/net/minecraft/world/border/WorldBorder.java
+++b/net/minecraft/world/border/WorldBorder.java
@@ -1,16 +1,14 @@
 package net.minecraft.world.border;
 
-import com.google.common.collect.Lists;
 import java.util.Iterator;
 import java.util.List;
+
 import net.minecraft.entity.Entity;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.BlockPos;
 import net.minecraft.world.ChunkCoordIntPair;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+import net.minecraft.world.WorldServer;
 
-public class WorldBorder
-{
+import com.google.common.collect.Lists;
+
+public class WorldBorder {
+
     private final List listeners = Lists.newArrayList();
     private double centerX = 0.0D;
     private double centerZ = 0.0D;
@@ -25,7 +25,9 @@
     private int warningTime;
     private int warningDistance;
     private static final String __OBFID = "CL_00002012";
+    public WorldServer world; // CraftBukkit
 
-    public WorldBorder()
-    {
+    public WorldBorder() {
         this.endDiameter = this.startDiameter;
         this.worldSize = 29999984;
         this.damageAmount = 0.2D;
@@ -36,29 +36,36 @@
         this.warningDistance = 5;
     }
 
-    public boolean contains(BlockPos pos)
-    {
-        return (double)(pos.getX() + 1) > this.minX() && (double)pos.getX() < this.maxX() && (double)(pos.getZ() + 1) > this.minZ() && (double)pos.getZ() < this.maxZ();
+    public boolean contains(BlockPos pos) {
+        return (double) (pos.getX() + 1) > this.minX() && (double) pos.getX() < this.maxX() && (double) (pos.getZ() + 1) > this.minZ() && (double) pos.getZ() < this.maxZ();
     }
 
-    public boolean contains(ChunkCoordIntPair range)
-    {
-        return (double)range.getXEnd() > this.minX() && (double)range.getXStart() < this.maxX() && (double)range.getZEnd() > this.minZ() && (double)range.getZStart() < this.maxZ();
+    // CraftBukkit start - split method
+    public boolean contains(ChunkCoordIntPair range) {
+        return isInBounds(range.chunkXPos, range.chunkZPos);
     }
 
-    public boolean contains(AxisAlignedBB bb)
-    {
+    // Inlined the getters from ChunkCoordIntPair
+    public boolean isInBounds(long chunkcoords) {
+        return isInBounds(org.bukkit.craftbukkit.util.LongHash.msw(chunkcoords), org.bukkit.craftbukkit.util.LongHash.lsw(chunkcoords));
+    }
+
+    // Inlined the getters from ChunkCoordIntPair
+    public boolean isInBounds(int x, int z) {
+        return (double) ((x << 4) + 15) > this.minX() && (double) (x << 4) < this.maxX() && (double) ((z << 4) + 15) > this.minZ() && (double) (x << 4) < this.maxZ();
+    }
+    // CraftBukkit end
+
+    public boolean contains(AxisAlignedBB bb) {
         return bb.maxX > this.minX() && bb.minX < this.maxX() && bb.maxZ > this.minZ() && bb.minZ < this.maxZ();
     }
 
-    public double getClosestDistance(Entity entityIn)
-    {
+    public double getClosestDistance(Entity entityIn) {
         return this.getClosestDistance(entityIn.posX, entityIn.posZ);
     }
 
-    public double getClosestDistance(double x, double z)
-    {
+    public double getClosestDistance(double x, double z) {
         double d2 = z - this.minZ();
         double d3 = this.maxZ() - z;
         double d4 = x - this.minX();
@@ -67,90 +67,74 @@
         return Math.min(d6, d3);
     }
 
-    public EnumBorderStatus getStatus()
-    {
+    public EnumBorderStatus getStatus() {
         return this.endDiameter < this.startDiameter ? EnumBorderStatus.SHRINKING : (this.endDiameter > this.startDiameter ? EnumBorderStatus.GROWING : EnumBorderStatus.STATIONARY);
     }
 
-    public double minX()
-    {
+    public double minX() {
         double d0 = this.getCenterX() - this.getDiameter() / 2.0D;
 
-        if (d0 < (double)(-this.worldSize))
-        {
-            d0 = (double)(-this.worldSize);
+        if (d0 < (double) (-this.worldSize)) {
+            d0 = (double) (-this.worldSize);
         }
 
         return d0;
     }
 
-    public double minZ()
-    {
+    public double minZ() {
         double d0 = this.getCenterZ() - this.getDiameter() / 2.0D;
 
-        if (d0 < (double)(-this.worldSize))
-        {
-            d0 = (double)(-this.worldSize);
+        if (d0 < (double) (-this.worldSize)) {
+            d0 = (double) (-this.worldSize);
         }
 
         return d0;
     }
 
-    public double maxX()
-    {
+    public double maxX() {
         double d0 = this.getCenterX() + this.getDiameter() / 2.0D;
 
-        if (d0 > (double)this.worldSize)
-        {
-            d0 = (double)this.worldSize;
+        if (d0 > (double) this.worldSize) {
+            d0 = (double) this.worldSize;
         }
 
         return d0;
     }
 
-    public double maxZ()
-    {
+    public double maxZ() {
         double d0 = this.getCenterZ() + this.getDiameter() / 2.0D;
 
-        if (d0 > (double)this.worldSize)
-        {
-            d0 = (double)this.worldSize;
+        if (d0 > (double) this.worldSize) {
+            d0 = (double) this.worldSize;
         }
 
         return d0;
     }
 
-    public double getCenterX()
-    {
+    public double getCenterX() {
         return this.centerX;
     }
 
-    public double getCenterZ()
-    {
+    public double getCenterZ() {
         return this.centerZ;
     }
 
-    public void setCenter(double x, double z)
-    {
+    public void setCenter(double x, double z) {
         this.centerX = x;
         this.centerZ = z;
         Iterator iterator = this.getListeners().iterator();
 
-        while (iterator.hasNext())
-        {
-            IBorderListener iborderlistener = (IBorderListener)iterator.next();
+        while (iterator.hasNext()) {
+            IBorderListener iborderlistener = (IBorderListener) iterator.next();
             iborderlistener.onCenterChanged(this, x, z);
         }
     }
 
-    public double getDiameter()
-    {
-        if (this.getStatus() != EnumBorderStatus.STATIONARY)
-        {
-            double d0 = (double)((float)(System.currentTimeMillis() - this.startTime) / (float)(this.endTime - this.startTime));
+    public double getDiameter() {
+        if (this.getStatus() != EnumBorderStatus.STATIONARY) {
+            double d0 = (double) ((float) (System.currentTimeMillis() - this.startTime) / (float) (this.endTime - this.startTime));
 
-            if (d0 < 1.0D)
-            {
+            if (d0 < 1.0D) {
                 return this.startDiameter + (this.endDiameter - this.startDiameter) * d0;
             }
 
@@ -160,138 +160,110 @@
         return this.startDiameter;
     }
 
-    public long getTimeUntilTarget()
-    {
+    public long getTimeUntilTarget() {
         return this.getStatus() != EnumBorderStatus.STATIONARY ? this.endTime - System.currentTimeMillis() : 0L;
     }
 
-    public double getTargetSize()
-    {
+    public double getTargetSize() {
         return this.endDiameter;
     }
 
-    public void setTransition(double newSize)
-    {
+    public void setTransition(double newSize) {
         this.startDiameter = newSize;
         this.endDiameter = newSize;
         this.endTime = System.currentTimeMillis();
         this.startTime = this.endTime;
         Iterator iterator = this.getListeners().iterator();
 
-        while (iterator.hasNext())
-        {
-            IBorderListener iborderlistener = (IBorderListener)iterator.next();
+        while (iterator.hasNext()) {
+            IBorderListener iborderlistener = (IBorderListener) iterator.next();
             iborderlistener.onSizeChanged(this, newSize);
         }
     }
 
-    public void setTransition(double oldSize, double newSize, long time)
-    {
+    public void setTransition(double oldSize, double newSize, long time) {
         this.startDiameter = oldSize;
         this.endDiameter = newSize;
         this.startTime = System.currentTimeMillis();
         this.endTime = this.startTime + time;
         Iterator iterator = this.getListeners().iterator();
 
-        while (iterator.hasNext())
-        {
-            IBorderListener iborderlistener = (IBorderListener)iterator.next();
+        while (iterator.hasNext()) {
+            IBorderListener iborderlistener = (IBorderListener) iterator.next();
             iborderlistener.onTransitionStarted(this, oldSize, newSize, time);
         }
     }
 
-    protected List getListeners()
-    {
+    protected List getListeners() {
         return Lists.newArrayList(this.listeners);
     }
 
-    public void addListener(IBorderListener listener)
-    {
+    public void addListener(IBorderListener listener) {
+        if (listeners.contains(listener)) return; // CraftBukkit
         this.listeners.add(listener);
     }
 
-    public void setSize(int size)
-    {
+    public void setSize(int size) {
         this.worldSize = size;
     }
 
-    public int getSize()
-    {
+    public int getSize() {
         return this.worldSize;
     }
 
-    public double getDamageBuffer()
-    {
+    public double getDamageBuffer() {
         return this.damageBuffer;
     }
 
-    public void setDamageBuffer(double bufferSize)
-    {
+    public void setDamageBuffer(double bufferSize) {
         this.damageBuffer = bufferSize;
         Iterator iterator = this.getListeners().iterator();
 
-        while (iterator.hasNext())
-        {
-            IBorderListener iborderlistener = (IBorderListener)iterator.next();
+        while (iterator.hasNext()) {
+            IBorderListener iborderlistener = (IBorderListener) iterator.next();
             iborderlistener.onDamageBufferChanged(this, bufferSize);
         }
     }
 
-    public double getDamageAmount()
-    {
+    public double getDamageAmount() {
         return this.damageAmount;
     }
 
-    public void setDamageAmount(double newAmount)
-    {
+    public void setDamageAmount(double newAmount) {
         this.damageAmount = newAmount;
         Iterator iterator = this.getListeners().iterator();
 
-        while (iterator.hasNext())
-        {
-            IBorderListener iborderlistener = (IBorderListener)iterator.next();
+        while (iterator.hasNext()) {
+            IBorderListener iborderlistener = (IBorderListener) iterator.next();
             iborderlistener.onDamageAmountChanged(this, newAmount);
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public double getResizeSpeed()
-    {
-        return this.endTime == this.startTime ? 0.0D : Math.abs(this.startDiameter - this.endDiameter) / (double)(this.endTime - this.startTime);
-    }
-
-    public int getWarningTime()
-    {
+    public int getWarningTime() {
         return this.warningTime;
     }
 
-    public void setWarningTime(int warningTime)
-    {
+    public void setWarningTime(int warningTime) {
         this.warningTime = warningTime;
         Iterator iterator = this.getListeners().iterator();
 
-        while (iterator.hasNext())
-        {
-            IBorderListener iborderlistener = (IBorderListener)iterator.next();
+        while (iterator.hasNext()) {
+            IBorderListener iborderlistener = (IBorderListener) iterator.next();
             iborderlistener.onWarningTimeChanged(this, warningTime);
         }
     }
 
-    public int getWarningDistance()
-    {
+    public int getWarningDistance() {
         return this.warningDistance;
     }
 
-    public void setWarningDistance(int warningDistance)
-    {
+    public void setWarningDistance(int warningDistance) {
         this.warningDistance = warningDistance;
         Iterator iterator = this.getListeners().iterator();
 
-        while (iterator.hasNext())
-        {
-            IBorderListener iborderlistener = (IBorderListener)iterator.next();
+        while (iterator.hasNext()) {
+            IBorderListener iborderlistener = (IBorderListener) iterator.next();
             iborderlistener.onWarningDistanceChanged(this, warningDistance);
         }
     }
-}
+}
