--- decompiled\net\minecraft\world\border\WorldBorder.java
+++ src\main\java\net\minecraft\world\border\WorldBorder.java
@@ -1,19 +1,21 @@
 package net.minecraft.world.border;
 
-import com.google.common.collect.Lists;
 import java.util.Iterator;
 import java.util.List;
+
 import net.minecraft.entity.Entity;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.BlockPos;
 import net.minecraft.world.ChunkCoordIntPair;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+import net.minecraft.world.WorldServer;
 
+import com.google.common.collect.Lists;
+
 public class WorldBorder
 {
+
     private final List listeners = Lists.newArrayList();
     private double centerX = 0.0D;
     private double centerZ = 0.0D;
     private double startDiameter = 6.0E7D;
     private double endDiameter;
@@ -23,10 +25,11 @@
     private double damageAmount;
     private double damageBuffer;
     private int warningTime;
     private int warningDistance;
     private static final String __OBFID = "CL_00002012";
+    public WorldServer world; // CraftBukkit
 
     public WorldBorder()
     {
         this.endDiameter = this.startDiameter;
         this.worldSize = 29999984;
@@ -39,15 +42,29 @@
     public boolean contains(BlockPos pos)
     {
         return (double)(pos.getX() + 1) > this.minX() && (double)pos.getX() < this.maxX() && (double)(pos.getZ() + 1) > this.minZ() && (double)pos.getZ() < this.maxZ();
     }
 
+    // CraftBukkit start - split method
     public boolean contains(ChunkCoordIntPair range)
     {
-        return (double)range.getXEnd() > this.minX() && (double)range.getXStart() < this.maxX() && (double)range.getZEnd() > this.minZ() && (double)range.getZStart() < this.maxZ();
+        return isInBounds(range.chunkXPos, range.chunkZPos);
     }
 
+    // Inlined the getters from ChunkCoordIntPair
+    public boolean isInBounds(long chunkcoords)
+    {
+        return isInBounds(org.bukkit.craftbukkit.util.LongHash.msw(chunkcoords), org.bukkit.craftbukkit.util.LongHash.lsw(chunkcoords));
+    }
+
+    // Inlined the getters from ChunkCoordIntPair
+    public boolean isInBounds(int x, int z)
+    {
+        return (double)((x << 4) + 15) > this.minX() && (double)(x << 4) < this.maxX() && (double)((z << 4) + 15) > this.minZ() && (double)(x << 4) < this.maxZ();
+    }
+    // CraftBukkit end
+
     public boolean contains(AxisAlignedBB bb)
     {
         return bb.maxX > this.minX() && bb.minX < this.maxX() && bb.maxZ > this.minZ() && bb.minZ < this.maxZ();
     }
 
@@ -205,10 +222,12 @@
         return Lists.newArrayList(this.listeners);
     }
 
     public void addListener(IBorderListener listener)
     {
+        if (listeners.contains(listener)) return; // CraftBukkit
+
         this.listeners.add(listener);
     }
 
     public void setSize(int size)
     {
@@ -252,16 +271,10 @@
             IBorderListener iborderlistener = (IBorderListener)iterator.next();
             iborderlistener.onDamageAmountChanged(this, newAmount);
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public double getResizeSpeed()
-    {
-        return this.endTime == this.startTime ? 0.0D : Math.abs(this.startDiameter - this.endDiameter) / (double)(this.endTime - this.startTime);
-    }
-
     public int getWarningTime()
     {
         return this.warningTime;
     }
 
