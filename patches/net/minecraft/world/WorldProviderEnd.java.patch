--- decompiled\net\minecraft\world\WorldProviderEnd.java
+++ src\main\java\net\minecraft\world\WorldProviderEnd.java
@@ -1,107 +1,55 @@
 package net.minecraft.world;
 
 import net.minecraft.util.BlockPos;
-import net.minecraft.util.MathHelper;
-import net.minecraft.util.Vec3;
 import net.minecraft.world.biome.BiomeGenBase;
 import net.minecraft.world.biome.WorldChunkManagerHell;
 import net.minecraft.world.chunk.IChunkProvider;
 import net.minecraft.world.gen.ChunkProviderEnd;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class WorldProviderEnd extends WorldProvider
-{
+
+public class WorldProviderEnd extends WorldProvider {
+
     private static final String __OBFID = "CL_00000389";
 
-    public void registerWorldChunkManager()
-    {
+    public void registerWorldChunkManager() {
         this.worldChunkMgr = new WorldChunkManagerHell(BiomeGenBase.sky, 0.0F);
         this.dimensionId = 1;
         this.hasNoSky = true;
     }
 
-    public IChunkProvider createChunkGenerator()
-    {
+    public IChunkProvider createChunkGenerator() {
         return new ChunkProviderEnd(this.worldObj, this.worldObj.getSeed());
     }
 
-    public float calculateCelestialAngle(long p_76563_1_, float p_76563_3_)
-    {
+    public float calculateCelestialAngle(long p_76563_1_, float p_76563_3_) {
         return 0.0F;
     }
 
-    @SideOnly(Side.CLIENT)
-    public float[] calcSunriseSunsetColors(float celestialAngle, float partialTicks)
-    {
-        return null;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public Vec3 getFogColor(float p_76562_1_, float p_76562_2_)
-    {
-        int i = 10518688;
-        float f2 = MathHelper.cos(p_76562_1_ * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
-        f2 = MathHelper.clamp_float(f2, 0.0F, 1.0F);
-        float f3 = (float)(i >> 16 & 255) / 255.0F;
-        float f4 = (float)(i >> 8 & 255) / 255.0F;
-        float f5 = (float)(i & 255) / 255.0F;
-        f3 *= f2 * 0.0F + 0.15F;
-        f4 *= f2 * 0.0F + 0.15F;
-        f5 *= f2 * 0.0F + 0.15F;
-        return new Vec3((double)f3, (double)f4, (double)f5);
-    }
-
-    @SideOnly(Side.CLIENT)
-    public boolean isSkyColored()
-    {
+    public boolean canRespawnHere() {
         return false;
     }
 
-    public boolean canRespawnHere()
-    {
+    public boolean isSurfaceWorld() {
         return false;
     }
 
-    public boolean isSurfaceWorld()
-    {
-        return false;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public float getCloudHeight()
-    {
-        return 8.0F;
-    }
-
-    public boolean canCoordinateBeSpawn(int x, int z)
-    {
+    public boolean canCoordinateBeSpawn(int x, int z) {
         return this.worldObj.getGroundAboveSeaLevel(new BlockPos(x, 0, z)).getMaterial().blocksMovement();
     }
 
-    public BlockPos getSpawnCoordinate()
-    {
+    public BlockPos getSpawnCoordinate() {
         return new BlockPos(100, 50, 0);
     }
 
-    public int getAverageGroundLevel()
-    {
+    public int getAverageGroundLevel() {
         return 50;
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean doesXZShowFog(int x, int z)
-    {
-        return true;
-    }
-
-    public String getDimensionName()
-    {
+    public String getDimensionName() {
         return "The End";
     }
 
-    public String getInternalNameSuffix()
-    {
+    public String getInternalNameSuffix() {
         return "_end";
     }
 }
