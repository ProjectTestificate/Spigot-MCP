--- decompiled\net\minecraft\world\chunk\storage\RegionFile.java
+++ src\main\java\net\minecraft\world\chunk\storage\RegionFile.java
@@ -1,8 +1,7 @@
 package net.minecraft.world.chunk.storage;
 
-import com.google.common.collect.Lists;
 import java.io.BufferedInputStream;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
@@ -11,14 +10,18 @@
 import java.io.RandomAccessFile;
 import java.util.List;
 import java.util.zip.DeflaterOutputStream;
 import java.util.zip.GZIPInputStream;
 import java.util.zip.InflaterInputStream;
+
 import net.minecraft.server.MinecraftServer;
 
+import com.google.common.collect.Lists;
+
 public class RegionFile
 {
+
     private static final byte[] emptySector = new byte[4096];
     private final File fileName;
     private RandomAccessFile dataFile;
     private final int[] offsets = new int[1024];
     private final int[] chunkTimestamps = new int[1024];
@@ -57,17 +60,17 @@
                 this.sizeDelta += 8192;
             }
 
             if ((this.dataFile.length() & 4095L) != 0L)
             {
-                for (i = 0; (long)i < (this.dataFile.length() & 4095L); ++i)
+                for (i = 0; (long) i < (this.dataFile.length() & 4095L); ++i)
                 {
                     this.dataFile.write(0);
                 }
             }
 
-            i = (int)this.dataFile.length() / 4096;
+            i = (int) this.dataFile.length() / 4096;
             this.sectorFree = Lists.newArrayListWithCapacity(i);
             int j;
 
             for (j = 0; j < i; ++j)
             {
@@ -103,10 +106,65 @@
         {
             ioexception.printStackTrace();
         }
     }
 
+    // CraftBukkit start - This is a copy (sort of) of the method below it, make sure they stay in sync
+
+    public synchronized boolean chunkExists(int i, int j)
+    {
+        if (this.outOfBounds(i, j))
+        {
+            return false;
+        }
+        else
+        {
+            try
+            {
+                int k = this.getOffset(i, j);
+
+                if (k == 0)
+                {
+                    return false;
+                }
+                else
+                {
+                    int l = k >> 8;
+                    int i1 = k & 255;
+
+                    if (l + i1 > this.sectorFree.size())
+                    {
+                        return false;
+                    }
+
+                    this.dataFile.seek((long)(l * 4096));
+                    int j1 = this.dataFile.readInt();
+
+                    if (j1 > 4096 * i1 || j1 <= 0)
+                    {
+                        return false;
+                    }
+
+                    byte b0 = this.dataFile.readByte();
+
+                    if (b0 == 1 || b0 == 2)
+                    {
+                        return true;
+                    }
+                }
+            }
+            catch (IOException ioexception)
+            {
+                return false;
+            }
+        }
+
+        return false;
+    }
+
+    // CraftBukkit end
+
     public synchronized DataInputStream getChunkDataInputStream(int x, int z)
     {
         if (this.outOfBounds(x, z))
         {
             return null;
@@ -215,20 +273,20 @@
                 {
                     for (j2 = l1; j2 < this.sectorFree.size(); ++j2)
                     {
                         if (i2 != 0)
                         {
-                            if (((Boolean)this.sectorFree.get(j2)).booleanValue())
+                            if (((Boolean) this.sectorFree.get(j2)).booleanValue())
                             {
                                 ++i2;
                             }
                             else
                             {
                                 i2 = 0;
                             }
                         }
-                        else if (((Boolean)this.sectorFree.get(j2)).booleanValue())
+                        else if (((Boolean) this.sectorFree.get(j2)).booleanValue())
                         {
                             l1 = j2;
                             i2 = 1;
                         }
 
@@ -274,11 +332,11 @@
         {
             ioexception.printStackTrace();
         }
     }
 
-    private void write(int sectorNumber, byte[] data, int length) throws IOException
+    private void write(int sectorNumber, byte[] data, int length) throws IOException   // CraftBukkit - added throws // SpigotMCP NOTE -- MCP already added
     {
         this.dataFile.seek((long)(sectorNumber * 4096));
         this.dataFile.writeInt(length + 1);
         this.dataFile.writeByte(2);
         this.dataFile.write(data, 0, length);
@@ -297,34 +355,35 @@
     public boolean isChunkSaved(int x, int z)
     {
         return this.getOffset(x, z) != 0;
     }
 
-    private void setOffset(int x, int z, int offset) throws IOException
+    private void setOffset(int x, int z, int offset) throws IOException   // CraftBukkit - added throws // SpigotMCP NOTE -- MCP already added
     {
         this.offsets[x + z * 32] = offset;
         this.dataFile.seek((long)((x + z * 32) * 4));
         this.dataFile.writeInt(offset);
     }
 
-    private void setChunkTimestamp(int x, int z, int timestamp) throws IOException
+    private void setChunkTimestamp(int x, int z, int timestamp) throws IOException   // CraftBukkit - added throws // SpigotMCP NOTE -- MCP already added
     {
         this.chunkTimestamps[x + z * 32] = timestamp;
         this.dataFile.seek((long)(4096 + (x + z * 32) * 4));
         this.dataFile.writeInt(timestamp);
     }
 
-    public void close() throws IOException
+    public void close() throws IOException   // CraftBukkit - added throws // SpigotMCP NOTE -- MCP already added
     {
         if (this.dataFile != null)
         {
             this.dataFile.close();
         }
     }
 
     class ChunkBuffer extends ByteArrayOutputStream
     {
+
         private int chunkX;
         private int chunkZ;
         private static final String __OBFID = "CL_00000382";
 
         public ChunkBuffer(int x, int z)
