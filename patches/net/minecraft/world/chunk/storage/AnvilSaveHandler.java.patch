---a/net/minecraft/world/chunk/storage/AnvilSaveHandler.java
+++b/net/minecraft/world/chunk/storage/AnvilSaveHandler.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.chunk.storage;
 
 import java.io.File;
+
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.world.WorldProvider;
 import net.minecraft.world.WorldProviderEnd;
@@ -9,56 +9,44 @@
 import net.minecraft.world.storage.ThreadedFileIOBase;
 import net.minecraft.world.storage.WorldInfo;
 
-public class AnvilSaveHandler extends SaveHandler
-{
+public class AnvilSaveHandler extends SaveHandler {
+
     private static final String __OBFID = "CL_00000581";
 
-    public AnvilSaveHandler(File savesDirectory, String p_i2142_2_, boolean p_i2142_3_)
-    {
+    public AnvilSaveHandler(File savesDirectory, String p_i2142_2_, boolean p_i2142_3_) {
         super(savesDirectory, p_i2142_2_, p_i2142_3_);
     }
 
-    public IChunkLoader getChunkLoader(WorldProvider provider)
-    {
+    public IChunkLoader getChunkLoader(WorldProvider provider) {
         File file1 = this.getWorldDirectory();
         File file2;
 
-        if (provider instanceof WorldProviderHell)
-        {
+        if (provider instanceof WorldProviderHell) {
             file2 = new File(file1, "DIM-1");
             file2.mkdirs();
             return new AnvilChunkLoader(file2);
-        }
-        else if (provider instanceof WorldProviderEnd)
-        {
+        } else if (provider instanceof WorldProviderEnd) {
             file2 = new File(file1, "DIM1");
             file2.mkdirs();
             return new AnvilChunkLoader(file2);
-        }
-        else
-        {
+        } else {
             return new AnvilChunkLoader(file1);
         }
     }
 
-    public void saveWorldInfoWithPlayer(WorldInfo worldInformation, NBTTagCompound tagCompound)
-    {
+    public void saveWorldInfoWithPlayer(WorldInfo worldInformation, NBTTagCompound tagCompound) {
         worldInformation.setSaveVersion(19133);
         super.saveWorldInfoWithPlayer(worldInformation, tagCompound);
     }
 
-    public void flush()
-    {
-        try
-        {
+    public void flush() {
+        try {
             ThreadedFileIOBase.getThreadedIOInstance().waitForFinish();
-        }
-        catch (InterruptedException interruptedexception)
-        {
+        } catch (InterruptedException interruptedexception) {
             interruptedexception.printStackTrace();
         }
 
         RegionFileCache.clearRegionFileReferences();
     }
-}
+}
