--- decompiled\net\minecraft\world\chunk\storage\AnvilSaveConverter.java
+++ src\main\java\net\minecraft\world\chunk\storage\AnvilSaveConverter.java
@@ -1,95 +1,44 @@
 package net.minecraft.world.chunk.storage;
 
-import com.google.common.collect.Lists;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.File;
 import java.io.FilenameFilter;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
-import java.util.List;
-import net.minecraft.client.AnvilConverterException;
+
 import net.minecraft.nbt.CompressedStreamTools;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.util.IProgressUpdate;
 import net.minecraft.world.WorldType;
 import net.minecraft.world.biome.BiomeGenBase;
 import net.minecraft.world.biome.WorldChunkManager;
 import net.minecraft.world.biome.WorldChunkManagerHell;
 import net.minecraft.world.storage.ISaveHandler;
-import net.minecraft.world.storage.SaveFormatComparator;
 import net.minecraft.world.storage.SaveFormatOld;
 import net.minecraft.world.storage.WorldInfo;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
-import org.apache.commons.lang3.StringUtils;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import com.google.common.collect.Lists;
+
 public class AnvilSaveConverter extends SaveFormatOld
 {
+
     private static final Logger logger = LogManager.getLogger();
     private static final String __OBFID = "CL_00000582";
 
     public AnvilSaveConverter(File p_i2144_1_)
     {
         super(p_i2144_1_);
     }
 
-    @SideOnly(Side.CLIENT)
-    public String getName()
-    {
-        return "Anvil";
-    }
-
-    @SideOnly(Side.CLIENT)
-    public List getSaveList() throws AnvilConverterException
-    {
-        if (this.savesDirectory != null && this.savesDirectory.exists() && this.savesDirectory.isDirectory())
-        {
-            ArrayList arraylist = Lists.newArrayList();
-            File[] afile = this.savesDirectory.listFiles();
-            File[] afile1 = afile;
-            int i = afile.length;
-
-            for (int j = 0; j < i; ++j)
-            {
-                File file1 = afile1[j];
-
-                if (file1.isDirectory())
-                {
-                    String s = file1.getName();
-                    WorldInfo worldinfo = this.getWorldInfo(s);
-
-                    if (worldinfo != null && (worldinfo.getSaveVersion() == 19132 || worldinfo.getSaveVersion() == 19133))
-                    {
-                        boolean flag = worldinfo.getSaveVersion() != this.getSaveVersion();
-                        String s1 = worldinfo.getWorldName();
-
-                        if (StringUtils.isEmpty(s1))
-                        {
-                            s1 = s;
-                        }
-
-                        long k = 0L;
-                        arraylist.add(new SaveFormatComparator(s, s1, worldinfo.getLastTimePlayed(), k, worldinfo.getGameType(), flag, worldinfo.isHardcoreModeEnabled(), worldinfo.areCommandsAllowed()));
-                    }
-                }
-            }
-
-            return arraylist;
-        }
-        else
-        {
-            throw new AnvilConverterException("Unable to read or access folder where game worlds are saved!");
-        }
-    }
-
     protected int getSaveVersion()
     {
         return 19133;
     }
 
@@ -101,17 +50,10 @@
     public ISaveHandler getSaveLoader(String p_75804_1_, boolean p_75804_2_)
     {
         return new AnvilSaveHandler(this.savesDirectory, p_75804_1_, p_75804_2_);
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean func_154334_a(String saveName)
-    {
-        WorldInfo worldinfo = this.getWorldInfo(saveName);
-        return worldinfo != null && worldinfo.getSaveVersion() == 19132;
-    }
-
     public boolean isOldMapFormat(String saveName)
     {
         WorldInfo worldinfo = this.getWorldInfo(saveName);
         return worldinfo != null && worldinfo.getSaveVersion() != this.getSaveVersion();
     }
@@ -150,11 +92,11 @@
         else
         {
             object = new WorldChunkManager(worldinfo.getSeed(), worldinfo.getTerrainType(), worldinfo.getGeneratorOptions());
         }
 
-        this.convertFile(new File(file1, "region"), arraylist, (WorldChunkManager)object, 0, i, p_75805_2_);
+        this.convertFile(new File(file1, "region"), arraylist, (WorldChunkManager) object, 0, i, p_75805_2_);
         this.convertFile(new File(file2, "region"), arraylist1, new WorldChunkManagerHell(BiomeGenBase.hell, 0.0F), arraylist.size(), i, p_75805_2_);
         this.convertFile(new File(file3, "region"), arraylist2, new WorldChunkManagerHell(BiomeGenBase.sky, 0.0F), arraylist.size() + arraylist1.size(), i, p_75805_2_);
         worldinfo.setSaveVersion(19133);
 
         if (worldinfo.getTerrainType() == WorldType.DEFAULT_1_1)
@@ -200,14 +142,14 @@
     {
         Iterator iterator = p_75813_2_.iterator();
 
         while (iterator.hasNext())
         {
-            File file2 = (File)iterator.next();
+            File file2 = (File) iterator.next();
             this.convertChunks(p_75813_1_, file2, p_75813_3_, p_75813_4_, p_75813_5_, p_75813_6_);
             ++p_75813_4_;
-            int k = (int)Math.round(100.0D * (double)p_75813_4_ / (double)p_75813_5_);
+            int k = (int) Math.round(100.0D * (double) p_75813_4_ / (double) p_75813_5_);
             p_75813_6_.setLoadingProgress(k);
         }
     }
 
     private void convertChunks(File p_75811_1_, File p_75811_2_, WorldChunkManager p_75811_3_, int p_75811_4_, int p_75811_5_, IProgressUpdate p_75811_6_)
@@ -247,12 +189,12 @@
                             dataoutputstream.close();
                         }
                     }
                 }
 
-                l = (int)Math.round(100.0D * (double)(p_75811_4_ * 1024) / (double)(p_75811_5_ * 1024));
-                int i1 = (int)Math.round(100.0D * (double)((k + 1) * 32 + p_75811_4_ * 1024) / (double)(p_75811_5_ * 1024));
+                l = (int) Math.round(100.0D * (double)(p_75811_4_ * 1024) / (double)(p_75811_5_ * 1024));
+                int i1 = (int) Math.round(100.0D * (double)((k + 1) * 32 + p_75811_4_ * 1024) / (double)(p_75811_5_ * 1024));
 
                 if (i1 > l)
                 {
                     p_75811_6_.setLoadingProgress(i1);
                 }
