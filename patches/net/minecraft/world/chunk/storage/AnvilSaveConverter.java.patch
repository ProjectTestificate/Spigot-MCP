---a/net/minecraft/world/chunk/storage/AnvilSaveConverter.java
+++b/net/minecraft/world/chunk/storage/AnvilSaveConverter.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.chunk.storage;
 
-import com.google.common.collect.Lists;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.File;
@@ -10,8 +10,7 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
-import java.util.List;
-import net.minecraft.client.AnvilConverterException;
+
 import net.minecraft.nbt.CompressedStreamTools;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.util.IProgressUpdate;
@@ -20,103 +20,40 @@
 import net.minecraft.world.biome.WorldChunkManager;
 import net.minecraft.world.biome.WorldChunkManagerHell;
 import net.minecraft.world.storage.ISaveHandler;
-import net.minecraft.world.storage.SaveFormatComparator;
 import net.minecraft.world.storage.SaveFormatOld;
 import net.minecraft.world.storage.WorldInfo;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
-import org.apache.commons.lang3.StringUtils;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class AnvilSaveConverter extends SaveFormatOld
-{
+import com.google.common.collect.Lists;
+
+public class AnvilSaveConverter extends SaveFormatOld {
+
     private static final Logger logger = LogManager.getLogger();
     private static final String __OBFID = "CL_00000582";
 
-    public AnvilSaveConverter(File p_i2144_1_)
-    {
+    public AnvilSaveConverter(File p_i2144_1_) {
         super(p_i2144_1_);
     }
 
-    @SideOnly(Side.CLIENT)
-    public String getName()
-    {
-        return "Anvil";
-    }
-
-    @SideOnly(Side.CLIENT)
-    public List getSaveList() throws AnvilConverterException
-    {
-        if (this.savesDirectory != null && this.savesDirectory.exists() && this.savesDirectory.isDirectory())
-        {
-            ArrayList arraylist = Lists.newArrayList();
-            File[] afile = this.savesDirectory.listFiles();
-            File[] afile1 = afile;
-            int i = afile.length;
-
-            for (int j = 0; j < i; ++j)
-            {
-                File file1 = afile1[j];
-
-                if (file1.isDirectory())
-                {
-                    String s = file1.getName();
-                    WorldInfo worldinfo = this.getWorldInfo(s);
-
-                    if (worldinfo != null && (worldinfo.getSaveVersion() == 19132 || worldinfo.getSaveVersion() == 19133))
-                    {
-                        boolean flag = worldinfo.getSaveVersion() != this.getSaveVersion();
-                        String s1 = worldinfo.getWorldName();
-
-                        if (StringUtils.isEmpty(s1))
-                        {
-                            s1 = s;
-                        }
-
-                        long k = 0L;
-                        arraylist.add(new SaveFormatComparator(s, s1, worldinfo.getLastTimePlayed(), k, worldinfo.getGameType(), flag, worldinfo.isHardcoreModeEnabled(), worldinfo.areCommandsAllowed()));
-                    }
-                }
-            }
-
-            return arraylist;
-        }
-        else
-        {
-            throw new AnvilConverterException("Unable to read or access folder where game worlds are saved!");
-        }
-    }
-
-    protected int getSaveVersion()
-    {
+    protected int getSaveVersion() {
         return 19133;
     }
 
-    public void flushCache()
-    {
+    public void flushCache() {
         RegionFileCache.clearRegionFileReferences();
     }
 
-    public ISaveHandler getSaveLoader(String p_75804_1_, boolean p_75804_2_)
-    {
+    public ISaveHandler getSaveLoader(String p_75804_1_, boolean p_75804_2_) {
         return new AnvilSaveHandler(this.savesDirectory, p_75804_1_, p_75804_2_);
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean func_154334_a(String saveName)
-    {
+    public boolean isOldMapFormat(String saveName) {
         WorldInfo worldinfo = this.getWorldInfo(saveName);
-        return worldinfo != null && worldinfo.getSaveVersion() == 19132;
-    }
-
-    public boolean isOldMapFormat(String saveName)
-    {
-        WorldInfo worldinfo = this.getWorldInfo(saveName);
         return worldinfo != null && worldinfo.getSaveVersion() != this.getSaveVersion();
     }
 
-    public boolean convertMapFormat(String filename, IProgressUpdate p_75805_2_)
-    {
+    public boolean convertMapFormat(String filename, IProgressUpdate p_75805_2_) {
         p_75805_2_.setLoadingProgress(0);
         ArrayList arraylist = Lists.newArrayList();
         ArrayList arraylist1 = Lists.newArrayList();
@@ -128,13 +128,11 @@
         logger.info("Scanning folders...");
         this.addRegionFilesToCollection(file1, arraylist);
 
-        if (file2.exists())
-        {
+        if (file2.exists()) {
             this.addRegionFilesToCollection(file2, arraylist1);
         }
 
-        if (file3.exists())
-        {
+        if (file3.exists()) {
             this.addRegionFilesToCollection(file3, arraylist2);
         }
 
@@ -143,22 +143,18 @@
         WorldInfo worldinfo = this.getWorldInfo(filename);
         Object object = null;
 
-        if (worldinfo.getTerrainType() == WorldType.FLAT)
-        {
+        if (worldinfo.getTerrainType() == WorldType.FLAT) {
             object = new WorldChunkManagerHell(BiomeGenBase.plains, 0.5F);
-        }
-        else
-        {
+        } else {
             object = new WorldChunkManager(worldinfo.getSeed(), worldinfo.getTerrainType(), worldinfo.getGeneratorOptions());
         }
 
-        this.convertFile(new File(file1, "region"), arraylist, (WorldChunkManager)object, 0, i, p_75805_2_);
+        this.convertFile(new File(file1, "region"), arraylist, (WorldChunkManager) object, 0, i, p_75805_2_);
         this.convertFile(new File(file2, "region"), arraylist1, new WorldChunkManagerHell(BiomeGenBase.hell, 0.0F), arraylist.size(), i, p_75805_2_);
         this.convertFile(new File(file3, "region"), arraylist2, new WorldChunkManagerHell(BiomeGenBase.sky, 0.0F), arraylist.size() + arraylist1.size(), i, p_75805_2_);
         worldinfo.setSaveVersion(19133);
 
-        if (worldinfo.getTerrainType() == WorldType.DEFAULT_1_1)
-        {
+        if (worldinfo.getTerrainType() == WorldType.DEFAULT_1_1) {
             worldinfo.setTerrainType(WorldType.DEFAULT);
         }
 
@@ -168,71 +168,54 @@
         return true;
     }
 
-    private void createFile(String filename)
-    {
+    private void createFile(String filename) {
         File file1 = new File(this.savesDirectory, filename);
 
-        if (!file1.exists())
-        {
+        if (!file1.exists()) {
             logger.warn("Unable to create level.dat_mcr backup");
-        }
-        else
-        {
+        } else {
             File file2 = new File(file1, "level.dat");
 
-            if (!file2.exists())
-            {
+            if (!file2.exists()) {
                 logger.warn("Unable to create level.dat_mcr backup");
-            }
-            else
-            {
+            } else {
                 File file3 = new File(file1, "level.dat_mcr");
 
-                if (!file2.renameTo(file3))
-                {
+                if (!file2.renameTo(file3)) {
                     logger.warn("Unable to create level.dat_mcr backup");
                 }
             }
         }
     }
 
-    private void convertFile(File p_75813_1_, Iterable p_75813_2_, WorldChunkManager p_75813_3_, int p_75813_4_, int p_75813_5_, IProgressUpdate p_75813_6_)
-    {
+    private void convertFile(File p_75813_1_, Iterable p_75813_2_, WorldChunkManager p_75813_3_, int p_75813_4_, int p_75813_5_, IProgressUpdate p_75813_6_) {
         Iterator iterator = p_75813_2_.iterator();
 
-        while (iterator.hasNext())
-        {
-            File file2 = (File)iterator.next();
+        while (iterator.hasNext()) {
+            File file2 = (File) iterator.next();
             this.convertChunks(p_75813_1_, file2, p_75813_3_, p_75813_4_, p_75813_5_, p_75813_6_);
             ++p_75813_4_;
-            int k = (int)Math.round(100.0D * (double)p_75813_4_ / (double)p_75813_5_);
+            int k = (int) Math.round(100.0D * (double) p_75813_4_ / (double) p_75813_5_);
             p_75813_6_.setLoadingProgress(k);
         }
     }
 
-    private void convertChunks(File p_75811_1_, File p_75811_2_, WorldChunkManager p_75811_3_, int p_75811_4_, int p_75811_5_, IProgressUpdate p_75811_6_)
-    {
-        try
-        {
+    private void convertChunks(File p_75811_1_, File p_75811_2_, WorldChunkManager p_75811_3_, int p_75811_4_, int p_75811_5_, IProgressUpdate p_75811_6_) {
+        try {
             String s = p_75811_2_.getName();
             RegionFile regionfile = new RegionFile(p_75811_2_);
             RegionFile regionfile1 = new RegionFile(new File(p_75811_1_, s.substring(0, s.length() - ".mcr".length()) + ".mca"));
 
-            for (int k = 0; k < 32; ++k)
-            {
+            for (int k = 0; k < 32; ++k) {
                 int l;
 
-                for (l = 0; l < 32; ++l)
-                {
-                    if (regionfile.isChunkSaved(k, l) && !regionfile1.isChunkSaved(k, l))
-                    {
+                for (l = 0; l < 32; ++l) {
+                    if (regionfile.isChunkSaved(k, l) && !regionfile1.isChunkSaved(k, l)) {
                         DataInputStream datainputstream = regionfile.getChunkDataInputStream(k, l);
 
-                        if (datainputstream == null)
-                        {
+                        if (datainputstream == null) {
                             logger.warn("Failed to fetch input stream");
-                        }
-                        else
-                        {
+                        } else {
                             NBTTagCompound nbttagcompound = CompressedStreamTools.read(datainputstream);
                             datainputstream.close();
                             NBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag("Level");
@@ -249,40 +249,35 @@
                     }
                 }
 
-                l = (int)Math.round(100.0D * (double)(p_75811_4_ * 1024) / (double)(p_75811_5_ * 1024));
-                int i1 = (int)Math.round(100.0D * (double)((k + 1) * 32 + p_75811_4_ * 1024) / (double)(p_75811_5_ * 1024));
+                l = (int) Math.round(100.0D * (double) (p_75811_4_ * 1024) / (double) (p_75811_5_ * 1024));
+                int i1 = (int) Math.round(100.0D * (double) ((k + 1) * 32 + p_75811_4_ * 1024) / (double) (p_75811_5_ * 1024));
 
-                if (i1 > l)
-                {
+                if (i1 > l) {
                     p_75811_6_.setLoadingProgress(i1);
                 }
             }
 
             regionfile.close();
             regionfile1.close();
-        }
-        catch (IOException ioexception)
-        {
+        } catch (IOException ioexception) {
             ioexception.printStackTrace();
         }
     }
 
-    private void addRegionFilesToCollection(File p_75810_1_, Collection p_75810_2_)
-    {
+    private void addRegionFilesToCollection(File p_75810_1_, Collection p_75810_2_) {
         File file2 = new File(p_75810_1_, "region");
-        File[] afile = file2.listFiles(new FilenameFilter()
-        {
+        File[] afile = file2.listFiles(new FilenameFilter() {
+
             private static final String __OBFID = "CL_00000583";
-            public boolean accept(File p_accept_1_, String p_accept_2_)
-            {
+
+            public boolean accept(File p_accept_1_, String p_accept_2_) {
                 return p_accept_2_.endsWith(".mcr");
             }
         });
 
-        if (afile != null)
-        {
+        if (afile != null) {
             Collections.addAll(p_75810_2_, afile);
         }
     }
-}
+}
