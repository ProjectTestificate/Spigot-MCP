--- decompiled\net\minecraft\world\chunk\storage\AnvilChunkLoader.java
+++ src\main\java\net\minecraft\world\chunk\storage\AnvilChunkLoader.java
@@ -1,16 +1,15 @@
 package net.minecraft.world.chunk.storage;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Sets;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.File;
 import java.io.IOException;
 import java.util.Iterator;
+import java.util.LinkedHashMap;
 import java.util.List;
-import java.util.Set;
+
 import net.minecraft.block.Block;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityList;
 import net.minecraft.nbt.CompressedStreamTools;
 import net.minecraft.nbt.NBTTagCompound;
@@ -24,46 +23,88 @@
 import net.minecraft.world.World;
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.chunk.NibbleArray;
 import net.minecraft.world.storage.IThreadedFileIO;
 import net.minecraft.world.storage.ThreadedFileIOBase;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class AnvilChunkLoader implements IChunkLoader, IThreadedFileIO
 {
+
     private static final Logger logger = LogManager.getLogger();
-    private List chunksToRemove = Lists.newArrayList();
-    private Set pendingAnvilChunksCoordinates = Sets.newHashSet();
+    // Spigot start
+    private LinkedHashMap<ChunkCoordIntPair, PendingChunk> pendingSaves = new LinkedHashMap<ChunkCoordIntPair, PendingChunk>();
+    // private List chunksToRemove = Lists.newArrayList();
+    // private Set pendingAnvilChunksCoordinates = Sets.newHashSet();
+    // Spigot end
     private Object syncLockObject = new Object();
-    private final File chunkSaveLocation;
+    public final File chunkSaveLocation;
     private static final String __OBFID = "CL_00000384";
 
     public AnvilChunkLoader(File chunkSaveLocationIn)
     {
         this.chunkSaveLocation = chunkSaveLocationIn;
     }
 
-    public Chunk loadChunk(World worldIn, int x, int z) throws IOException
+    // CraftBukkit start
+    public boolean chunkExists(World world, int i, int j)
     {
+        ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(i, j);
+
+        synchronized (this.syncLockObject)
+        {
+            // Spigot start
+            if (pendingSaves.containsKey(chunkcoordintpair))
+            {
+                return true;
+            }
+
+            // Spigot end
+        }
+
+        return RegionFileCache.createOrLoadRegionFile(this.chunkSaveLocation, i, j).chunkExists(i & 31, j & 31);
+    }
+    // CraftBukkit end
+
+    // CraftBukkit start - Add async variant, provide compatibility
+    public Chunk loadChunk(World world, int i, int j) throws IOException   // SpigotMCP -- Throw IOException
+    {
+        world.timings.syncChunkLoadDataTimer.startTiming(); // Spigot
+        Object[] data = loadChunkBukkit(world, i, j);
+        world.timings.syncChunkLoadDataTimer.stopTiming(); // Spigot
+
+        if (data != null)
+        {
+            Chunk chunk = (Chunk) data[0];
+            NBTTagCompound nbttagcompound = (NBTTagCompound) data[1];
+            loadEntities(chunk, nbttagcompound.getCompoundTag("Level"), world);
+            return chunk;
+        }
+
+        return null;
+    }
+
+    public Object[] loadChunkBukkit(World worldIn, int x, int z) throws IOException   // SpigotMCP -- Rename to avoid conflicts
+    {
+        // CraftBukkit end
         NBTTagCompound nbttagcompound = null;
         ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(x, z);
         Object object = this.syncLockObject;
 
         synchronized (this.syncLockObject)
         {
-            if (this.pendingAnvilChunksCoordinates.contains(chunkcoordintpair))
+            // Spigot start
+            PendingChunk pendingchunktosave = pendingSaves.get(chunkcoordintpair);
+
+            if (pendingchunktosave != null)
             {
-                for (int k = 0; k < this.chunksToRemove.size(); ++k)
-                {
-                    if (((AnvilChunkLoader.PendingChunk)this.chunksToRemove.get(k)).chunkCoordinate.equals(chunkcoordintpair))
-                    {
-                        nbttagcompound = ((AnvilChunkLoader.PendingChunk)this.chunksToRemove.get(k)).nbtTags;
-                        break;
-                    }
-                }
+                nbttagcompound = pendingchunktosave.nbtTags;
             }
+
+            // Spigot end
         }
 
         if (nbttagcompound == null)
         {
             DataInputStream datainputstream = RegionFileCache.getChunkInputStream(this.chunkSaveLocation, x, z);
@@ -77,11 +118,11 @@
         }
 
         return this.checkedReadChunkFromNBT(worldIn, x, z, nbttagcompound);
     }
 
-    protected Chunk checkedReadChunkFromNBT(World worldIn, int x, int z, NBTTagCompound p_75822_4_)
+    protected Object[] checkedReadChunkFromNBT(World worldIn, int x, int z, NBTTagCompound p_75822_4_)   // CraftBukkit - return Chunk -> Object[]
     {
         if (!p_75822_4_.hasKey("Level", 10))
         {
             logger.error("Chunk file at " + x + "," + z + " is missing level data, skipping");
             return null;
@@ -96,23 +137,56 @@
             Chunk chunk = this.readChunkFromNBT(worldIn, p_75822_4_.getCompoundTag("Level"));
 
             if (!chunk.isAtLocation(x, z))
             {
                 logger.error("Chunk file at " + x + "," + z + " is in the wrong location; relocating. (Expected " + x + ", " + z + ", got " + chunk.xPosition + ", " + chunk.zPosition + ")");
-                p_75822_4_.setInteger("xPos", x);
-                p_75822_4_.setInteger("zPos", z);
+                // CraftBukkit Start add "getCompoundTag("Level")" before setInteger()
+                p_75822_4_.getCompoundTag("Level").setInteger("xPos", x);
+                p_75822_4_.getCompoundTag("Level").setInteger("zPos", z);
+                // CraftBukkit end
+                // CraftBukkit start - Have to move tile entities since we don't load them at this stage
+                NBTTagList tileEntities = p_75822_4_.getCompoundTag("Level").getTagList("TileEntities", 10);
+
+                if (tileEntities != null)
+                {
+                    for (int te = 0; te < tileEntities.tagCount(); te++)
+                    {
+                        NBTTagCompound tileEntity = (NBTTagCompound) tileEntities.getCompoundTagAt(te);
+                        int relativeX = tileEntity.getInteger("x") - chunk.xPosition * 16;
+                        int relativeZ = tileEntity.getInteger("z") - chunk.zPosition * 16;
+                        tileEntity.setInteger("x", x * 16 + relativeX);
+                        tileEntity.setInteger("z", z * 16 + relativeZ);
+                    }
+                }
+
+                // CraftBukkit end
                 chunk = this.readChunkFromNBT(worldIn, p_75822_4_.getCompoundTag("Level"));
             }
 
-            return chunk;
+            // CraftBukkit start
+            Object[] data = new Object[2];
+            data[0] = chunk;
+            data[1] = p_75822_4_;
+            return data;
+            // CraftBukkit end
         }
     }
 
     public void saveChunk(World worldIn, Chunk chunkIn) throws MinecraftException, IOException
     {
-        worldIn.checkSessionLock();
+        // CraftBukkit start - "handle" exception
+        try
+        {
+            worldIn.checkSessionLock();
+        }
+        catch (MinecraftException e)
+        {
+            e.printStackTrace();
+        }
 
+        // CraftBukkit end
+
         try
         {
             NBTTagCompound nbttagcompound = new NBTTagCompound();
             NBTTagCompound nbttagcompound1 = new NBTTagCompound();
             nbttagcompound.setTag("Level", nbttagcompound1);
@@ -129,24 +203,19 @@
     {
         Object object = this.syncLockObject;
 
         synchronized (this.syncLockObject)
         {
-            if (this.pendingAnvilChunksCoordinates.contains(p_75824_1_))
+            // Spigot start
+            if (this.pendingSaves.put(p_75824_1_, new PendingChunk(p_75824_1_, p_75824_2_)) != null)
             {
-                for (int i = 0; i < this.chunksToRemove.size(); ++i)
-                {
-                    if (((AnvilChunkLoader.PendingChunk)this.chunksToRemove.get(i)).chunkCoordinate.equals(p_75824_1_))
-                    {
-                        this.chunksToRemove.set(i, new AnvilChunkLoader.PendingChunk(p_75824_1_, p_75824_2_));
-                        return;
-                    }
-                }
+                return;
             }
 
-            this.chunksToRemove.add(new AnvilChunkLoader.PendingChunk(p_75824_1_, p_75824_2_));
-            this.pendingAnvilChunksCoordinates.add(p_75824_1_);
+            // this.chunksToRemove.add(new AnvilChunkLoader.PendingChunk(p_75824_1_, p_75824_2_));
+            // this.pendingAnvilChunksCoordinates.add(p_75824_1_);
+            // Spigot end
             ThreadedFileIOBase.getThreadedIOInstance().queueIO(this);
         }
     }
 
     public boolean writeNextIO()
@@ -154,17 +223,19 @@
         AnvilChunkLoader.PendingChunk pendingchunk = null;
         Object object = this.syncLockObject;
 
         synchronized (this.syncLockObject)
         {
-            if (this.chunksToRemove.isEmpty())
+            // Spigot start
+            if (this.pendingSaves.isEmpty())
             {
                 return false;
             }
 
-            pendingchunk = (AnvilChunkLoader.PendingChunk)this.chunksToRemove.remove(0);
-            this.pendingAnvilChunksCoordinates.remove(pendingchunk.chunkCoordinate);
+            pendingchunk = this.pendingSaves.values().iterator().next();
+            this.pendingSaves.remove(pendingchunk.chunkCoordinate);
+            // Spigot end
         }
 
         if (pendingchunk != null)
         {
             try
@@ -178,20 +249,24 @@
         }
 
         return true;
     }
 
-    private void writeChunkNBTTags(AnvilChunkLoader.PendingChunk p_75821_1_) throws IOException
+    private void writeChunkNBTTags(AnvilChunkLoader.PendingChunk p_75821_1_) throws IOException   // CraftBukkit - added throws // SpigotMCP Note -- MCP already added
     {
         DataOutputStream dataoutputstream = RegionFileCache.getChunkOutputStream(this.chunkSaveLocation, p_75821_1_.chunkCoordinate.chunkXPos, p_75821_1_.chunkCoordinate.chunkZPos);
         CompressedStreamTools.write(p_75821_1_.nbtTags, dataoutputstream);
         dataoutputstream.close();
     }
 
-    public void saveExtraChunkData(World worldIn, Chunk chunkIn) {}
+    public void saveExtraChunkData(World worldIn, Chunk chunkIn)
+    {
+    }
 
-    public void chunkTick() {}
+    public void chunkTick()
+    {
+    }
 
     public void saveExtraData()
     {
         while (this.writeNextIO())
         {
@@ -199,11 +274,11 @@
         }
     }
 
     private void writeChunkToNBT(Chunk chunkIn, World worldIn, NBTTagCompound p_75820_3_)
     {
-        p_75820_3_.setByte("V", (byte)1);
+        p_75820_3_.setByte("V", (byte) 1);
         p_75820_3_.setInteger("xPos", chunkIn.xPosition);
         p_75820_3_.setInteger("zPos", chunkIn.zPosition);
         p_75820_3_.setLong("LastUpdate", worldIn.getTotalWorldTime());
         p_75820_3_.setIntArray("HeightMap", chunkIn.getHeightMap());
         p_75820_3_.setBoolean("TerrainPopulated", chunkIn.isTerrainPopulated());
@@ -282,11 +357,11 @@
         {
             iterator = chunkIn.getEntityLists()[i].iterator();
 
             while (iterator.hasNext())
             {
-                Entity entity = (Entity)iterator.next();
+                Entity entity = (Entity) iterator.next();
                 nbttagcompound1 = new NBTTagCompound();
 
                 if (entity.writeToNBTOptional(nbttagcompound1))
                 {
                     chunkIn.setHasEntities(true);
@@ -299,11 +374,11 @@
         NBTTagList nbttaglist2 = new NBTTagList();
         iterator = chunkIn.getTileEntityMap().values().iterator();
 
         while (iterator.hasNext())
         {
-            TileEntity tileentity = (TileEntity)iterator.next();
+            TileEntity tileentity = (TileEntity) iterator.next();
             nbttagcompound1 = new NBTTagCompound();
             tileentity.writeToNBT(nbttagcompound1);
             nbttaglist2.appendTag(nbttagcompound1);
         }
 
@@ -316,13 +391,13 @@
             NBTTagList nbttaglist3 = new NBTTagList();
             Iterator iterator1 = list.iterator();
 
             while (iterator1.hasNext())
             {
-                NextTickListEntry nextticklistentry = (NextTickListEntry)iterator1.next();
+                NextTickListEntry nextticklistentry = (NextTickListEntry) iterator1.next();
                 NBTTagCompound nbttagcompound2 = new NBTTagCompound();
-                ResourceLocation resourcelocation = (ResourceLocation)Block.blockRegistry.getNameForObject(nextticklistentry.getBlock());
+                ResourceLocation resourcelocation = (ResourceLocation) Block.blockRegistry.getNameForObject(nextticklistentry.getBlock());
                 nbttagcompound2.setString("i", resourcelocation == null ? "" : resourcelocation.toString());
                 nbttagcompound2.setInteger("x", nextticklistentry.position.getX());
                 nbttagcompound2.setInteger("y", nextticklistentry.position.getY());
                 nbttagcompound2.setInteger("z", nextticklistentry.position.getZ());
                 nbttagcompound2.setInteger("t", (int)(nextticklistentry.scheduledTime - k1));
@@ -362,11 +437,38 @@
             {
                 int i1 = l & 15;
                 int j1 = l >> 8 & 15;
                 int k1 = l >> 4 & 15;
                 int l1 = nibblearray1 != null ? nibblearray1.get(i1, j1, k1) : 0;
-                achar[l] = (char)(l1 << 12 | (abyte[l] & 255) << 4 | nibblearray.get(i1, j1, k1));
+                // CraftBukkit start - fix broken blocks
+                // achar[l] = (char) (l1 << 12 | (abyte[l] & 255) << 4 | nibblearray.get(i1, j1, k1));
+                int ex = l1;
+                int id = (abyte[l] & 255);
+                int data = nibblearray.get(i1, j1, k1);
+                int packed = ex << 12 | id << 4 | data;
+
+                if (Block.BLOCK_STATE_IDS.getByValue(packed) == null)
+                {
+                    Block block = Block.getBlockById(ex << 8 | id);
+
+                    if (block != null)
+                    {
+                        try
+                        {
+                            data = block.getMetaFromState(block.getStateFromMeta(data));
+                        }
+                        catch (Exception ignored)
+                        {
+                            data = block.getMetaFromState(block.getDefaultState());
+                        }
+
+                        packed = ex << 12 | id << 4 | data;
+                    }
+                }
+
+                achar[l] = (char) packed;
+                // CraftBukkit end
             }
 
             extendedblockstorage.setData(achar);
             extendedblockstorage.setBlocklightArray(new NibbleArray(nbttagcompound1.getByteArray("BlockLight")));
 
@@ -384,10 +486,18 @@
         if (p_75823_2_.hasKey("Biomes", 7))
         {
             chunk.setBiomeArray(p_75823_2_.getByteArray("Biomes"));
         }
 
+        // CraftBukkit start - End this method here and split off entity loading to another method
+        return chunk;
+    }
+
+    public void loadEntities(Chunk chunk, NBTTagCompound p_75823_2_, World worldIn)
+    {
+        // CraftBukkit end
+        worldIn.timings.syncChunkLoadEntitiesTimer.startTiming(); // Spigot
         NBTTagList nbttaglist1 = p_75823_2_.getTagList("Entities", 10);
 
         if (nbttaglist1 != null)
         {
             for (int i2 = 0; i2 < nbttaglist1.tagCount(); ++i2)
@@ -415,10 +525,12 @@
                     }
                 }
             }
         }
 
+        worldIn.timings.syncChunkLoadEntitiesTimer.stopTiming(); // Spigot
+        worldIn.timings.syncChunkLoadTileEntitiesTimer.startTiming(); // Spigot
         NBTTagList nbttaglist2 = p_75823_2_.getTagList("TileEntities", 10);
 
         if (nbttaglist2 != null)
         {
             for (int j2 = 0; j2 < nbttaglist2.tagCount(); ++j2)
@@ -431,10 +543,13 @@
                     chunk.addTileEntity(tileentity);
                 }
             }
         }
 
+        worldIn.timings.syncChunkLoadTileEntitiesTimer.stopTiming(); // Spigot
+        worldIn.timings.syncChunkLoadTileTicksTimer.startTiming(); // Spigot
+
         if (p_75823_2_.hasKey("TileTicks", 9))
         {
             NBTTagList nbttaglist3 = p_75823_2_.getTagList("TileTicks", 10);
 
             if (nbttaglist3 != null)
@@ -456,15 +571,17 @@
                     worldIn.func_180497_b(new BlockPos(nbttagcompound4.getInteger("x"), nbttagcompound4.getInteger("y"), nbttagcompound4.getInteger("z")), block, nbttagcompound4.getInteger("t"), nbttagcompound4.getInteger("p"));
                 }
             }
         }
 
-        return chunk;
+        worldIn.timings.syncChunkLoadTileTicksTimer.stopTiming(); // Spigot
+        // return chunk; // CraftBukkit
     }
 
     static class PendingChunk
         {
+
             public final ChunkCoordIntPair chunkCoordinate;
             public final NBTTagCompound nbtTags;
             private static final String __OBFID = "CL_00000385";
 
             public PendingChunk(ChunkCoordIntPair p_i2002_1_, NBTTagCompound p_i2002_2_)
