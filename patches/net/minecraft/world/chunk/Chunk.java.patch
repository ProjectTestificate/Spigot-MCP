--- decompiled\net\minecraft\world\chunk\Chunk.java
+++ src\main\java\net\minecraft\world\chunk\Chunk.java
@@ -1,25 +1,29 @@
 package net.minecraft.world.chunk;
 
-import com.google.common.base.Predicate;
-import com.google.common.collect.Maps;
-import com.google.common.collect.Queues;
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ConcurrentLinkedQueue;
+
 import net.minecraft.block.Block;
+import net.minecraft.block.BlockContainer;
 import net.minecraft.block.ITileEntityProvider;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.entity.Entity;
+import net.minecraft.entity.EntityLiving;
+import net.minecraft.entity.EnumCreatureType;
+import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
+import net.minecraft.inventory.IInventory;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.ClassInheritanceMultiMap;
 import net.minecraft.util.EnumFacing;
@@ -31,30 +35,43 @@
 import net.minecraft.world.WorldType;
 import net.minecraft.world.biome.BiomeGenBase;
 import net.minecraft.world.biome.WorldChunkManager;
 import net.minecraft.world.chunk.storage.ExtendedBlockStorage;
 import net.minecraft.world.gen.ChunkProviderDebug;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftChunk;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.craftbukkit.util.UnsafeList;
+import org.bukkit.entity.HumanEntity;
 
+import com.google.common.base.Predicate;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Queues;
+
+import gnu.trove.map.hash.TObjectIntHashMap;
+
 public class Chunk
 {
+
     private static final Logger logger = LogManager.getLogger();
     private final ExtendedBlockStorage[] storageArrays;
     private final byte[] blockBiomeArray;
     private final int[] precipitationHeightMap;
     private final boolean[] updateSkylightColumns;
     private boolean isChunkLoaded;
-    private final World worldObj;
-    private final int[] heightMap;
+    public final World worldObj; // SpigotMCP -- apply access transformation
+    public final int[] heightMap; // CraftBukkit - make public
     public final int xPosition;
     public final int zPosition;
     private boolean isGapLightingUpdated;
-    private final Map chunkTileEntityMap;
-    private final ClassInheritanceMultiMap[] entityLists;
+    public Map chunkTileEntityMap; // SpigotMCP -- apply access transformation
+    public List[] entityLists; // Spigot -- private final -> public
     private boolean isTerrainPopulated;
     private boolean isLightPopulated;
     private boolean field_150815_m;
     private boolean isModified;
     private boolean hasEntities;
@@ -62,35 +79,78 @@
     private int heightMapMinimum;
     private long inhabitedTime;
     private int queuedLightChecks;
     private ConcurrentLinkedQueue field_177447_w;
     private static final String __OBFID = "CL_00000373";
+    public TObjectIntHashMap entityCount = new TObjectIntHashMap(); // Spigot // SpigotMCP -- Make public as bukkit assumes in same package
 
+    // CraftBukkit start - Neighbor loaded cache for chunk lighting and entity ticking
+    private int neighbors = 0x1 << 12;
+
+    public boolean areNeighborsLoaded(final int radius)
+    {
+        switch (radius)
+        {
+            case 2:
+                return this.neighbors == Integer.MAX_VALUE >> 6;
+            case 1:
+                final int mask =
+                    //       x        z   offset          x        z   offset          x         z   offset
+                    (0x1 << (1 * 5 + 1 + 12)) | (0x1 << (0 * 5 + 1 + 12)) | (0x1 << (-1 * 5 + 1 + 12)) |
+                    (0x1 << (1 * 5 + 0 + 12)) | (0x1 << (0 * 5 + 0 + 12)) | (0x1 << (-1 * 5 + 0 + 12)) |
+                    (0x1 << (1 * 5 + -1 + 12)) | (0x1 << (0 * 5 + -1 + 12)) | (0x1 << (-1 * 5 + -1 + 12));
+                return (this.neighbors & mask) == mask;
+            default:
+                throw new UnsupportedOperationException(String.valueOf(radius));
+        }
+    }
+
+    public void setNeighborLoaded(final int x, final int z)
+    {
+        this.neighbors |= 0x1 << (x * 5 + 12 + z);
+    }
+
+    public void setNeighborUnloaded(final int x, final int z)
+    {
+        this.neighbors &= ~(0x1 << (x * 5 + 12 + z));
+    }
+    // CraftBukkit end
+
     public Chunk(World worldIn, int x, int z)
     {
         this.storageArrays = new ExtendedBlockStorage[16];
         this.blockBiomeArray = new byte[256];
         this.precipitationHeightMap = new int[256];
         this.updateSkylightColumns = new boolean[256];
         this.chunkTileEntityMap = Maps.newHashMap();
         this.queuedLightChecks = 4096;
         this.field_177447_w = Queues.newConcurrentLinkedQueue();
-        this.entityLists = (ClassInheritanceMultiMap[])(new ClassInheritanceMultiMap[16]);
+        this.entityLists = (List[])(new List[16]);  // Spigot
         this.worldObj = worldIn;
         this.xPosition = x;
         this.zPosition = z;
         this.heightMap = new int[256];
 
         for (int k = 0; k < this.entityLists.length; ++k)
         {
-            this.entityLists[k] = new ClassInheritanceMultiMap(Entity.class);
+            this.entityLists[k] = new UnsafeList();
         }
 
         Arrays.fill(this.precipitationHeightMap, -999);
         Arrays.fill(this.blockBiomeArray, (byte) - 1);
+
+        // CraftBukkit start
+        if (!(this instanceof EmptyChunk))
+        {
+            this.bukkitChunk = new CraftChunk(this);
+        }
     }
 
+    public CraftChunk bukkitChunk;
+    public boolean mustSave;
+    // CraftBukkit end
+
     public Chunk(World worldIn, ChunkPrimer primer, int x, int z)
     {
         this(worldIn, x, z);
         short short1 = 256;
         boolean flag = !worldIn.provider.getHasNoSky();
@@ -151,54 +211,10 @@
     public ExtendedBlockStorage[] getBlockStorageArray()
     {
         return this.storageArrays;
     }
 
-    @SideOnly(Side.CLIENT)
-    protected void generateHeightMap()
-    {
-        int i = this.getTopFilledSegment();
-        this.heightMapMinimum = Integer.MAX_VALUE;
-
-        for (int j = 0; j < 16; ++j)
-        {
-            int k = 0;
-
-            while (k < 16)
-            {
-                this.precipitationHeightMap[j + (k << 4)] = -999;
-                int l = i + 16;
-
-                while (true)
-                {
-                    if (l > 0)
-                    {
-                        Block block = this.getBlock0(j, l - 1, k);
-
-                        if (block.getLightOpacity() == 0)
-                        {
-                            --l;
-                            continue;
-                        }
-
-                        this.heightMap[k << 4 | j] = l;
-
-                        if (l < this.heightMapMinimum)
-                        {
-                            this.heightMapMinimum = l;
-                        }
-                    }
-
-                    ++k;
-                    break;
-                }
-            }
-        }
-
-        this.isModified = true;
-    }
-
     public void generateSkylightMap()
     {
         int i = this.getTopFilledSegment();
         this.heightMapMinimum = Integer.MAX_VALUE;
 
@@ -710,11 +726,12 @@
                     {
                         tileentity.updateContainingBlockInfo();
                     }
                 }
 
-                if (!this.worldObj.isRemote && block1 != block)
+                // CraftBukkit - Don't place while processing the BlockPlaceEvent, unless it's a BlockContainer. Prevents blocks such as TNT from activating when cancelled.
+                if (!this.worldObj.isRemote && block1 != block && (!this.worldObj.captureBlockStates || block instanceof BlockContainer))
                 {
                     block.onBlockAdded(this.worldObj, pos, state);
                 }
 
                 if (block instanceof ITileEntityProvider)
@@ -808,11 +825,15 @@
         int i = MathHelper.floor_double(entityIn.posX / 16.0D);
         int j = MathHelper.floor_double(entityIn.posZ / 16.0D);
 
         if (i != this.xPosition || j != this.zPosition)
         {
-            logger.warn("Wrong location! (" + i + ", " + j + ") should be (" + this.xPosition + ", " + this.zPosition + "), " + entityIn, new Object[] {entityIn});
+            // CraftBukkit start
+            Bukkit.getLogger().warning("Wrong location for " + entityIn + " in world '" + worldObj.getWorld().getName() + "'!");
+            // logger.warn("Wrong location! (" + i + ", " + j + ") should be (" + this.xPosition + ", " + this.zPosition + "), " + entityIn, new Object[]{entityIn});
+            Bukkit.getLogger().warning("Entity is at " + entityIn.posX + "," + entityIn.posZ + " (chunk " + i + "," + j + ") but was stored in chunk " + this.xPosition + "," + this.zPosition);
+            // CraftBukkit end
             entityIn.setDead();
         }
 
         int k = MathHelper.floor_double(entityIn.posY / 16.0D);
 
@@ -829,10 +850,32 @@
         entityIn.addedToChunk = true;
         entityIn.chunkCoordX = this.xPosition;
         entityIn.chunkCoordY = k;
         entityIn.chunkCoordZ = this.zPosition;
         this.entityLists[k].add(entityIn);
+
+        // Spigot start - increment creature type count
+        // Keep this synced up with World.a(Class)
+        if (entityIn instanceof EntityLiving)
+        {
+            EntityLiving entityinsentient = (EntityLiving)entityIn;
+
+            if (entityinsentient.canDespawn() && entityinsentient.isNoDespawnRequired())
+            {
+                return;
+            }
+        }
+
+        for (EnumCreatureType creatureType : EnumCreatureType.values())
+        {
+            if (creatureType.getCreatureClass().isAssignableFrom(entityIn.getClass()))
+            {
+                this.entityCount.adjustOrPutValue(creatureType.getCreatureClass(), 1, 1);
+            }
+        }
+
+        // Spigot end
     }
 
     public void removeEntity(Entity p_76622_1_)
     {
         this.removeEntityAtIndex(p_76622_1_, p_76622_1_.chunkCoordY);
@@ -849,10 +892,32 @@
         {
             p_76608_2_ = this.entityLists.length - 1;
         }
 
         this.entityLists[p_76608_2_].remove(p_76608_1_);
+
+        // Spigot start - decrement creature type count
+        // Keep this synced up with World.a(Class)
+        if (p_76608_1_ instanceof EntityLiving)
+        {
+            EntityLiving entityinsentient = (EntityLiving)p_76608_1_;
+
+            if (entityinsentient.canDespawn() && entityinsentient.isNoDespawnRequired())
+            {
+                return;
+            }
+        }
+
+        for (EnumCreatureType creatureType : EnumCreatureType.values())
+        {
+            if (creatureType.getCreatureClass().isAssignableFrom(p_76608_1_.getClass()))
+            {
+                this.entityCount.adjustValue(creatureType.getCreatureClass(), -1);
+            }
+        }
+
+        // Spigot end
     }
 
     public boolean canSeeSky(BlockPos pos)
     {
         int i = pos.getX() & 15;
@@ -914,11 +979,27 @@
                 ((TileEntity)this.chunkTileEntityMap.get(pos)).invalidate();
             }
 
             tileEntityIn.validate();
             this.chunkTileEntityMap.put(pos, tileEntityIn);
+
+            // Spigot start - The tile entity has a world, now hoppers can be born ticking.
+            if (this.worldObj.spigotConfig.altHopperTicking)
+            {
+                this.worldObj.triggerHoppersList.add(tileEntityIn);
+            }
+
+            // Spigot end
+            // CraftBukkit start
         }
+        else
+        {
+            System.out.println("Attempted to place a tile entity (" + tileEntityIn + ") at " + tileEntityIn.pos.getX() + "," + tileEntityIn.pos.getY() + "," + tileEntityIn.pos.getZ() + " (" + CraftMagicNumbers.getMaterial(getBlock(pos)) + ") where there was no entity tile!");
+            System.out.println("Chunk coordinates: " + (this.xPosition * 16) + "," + (this.zPosition * 16));
+            new Exception().printStackTrace();
+            // CraftBukkit end
+        }
     }
 
     public void removeTileEntity(BlockPos pos)
     {
         if (this.isChunkLoaded)
@@ -957,16 +1038,61 @@
         Iterator iterator = this.chunkTileEntityMap.values().iterator();
 
         while (iterator.hasNext())
         {
             TileEntity tileentity = (TileEntity)iterator.next();
+
+            // Spigot Start
+            if (tileentity instanceof IInventory)
+            {
+                for (HumanEntity h : Lists.newArrayList(((IInventory)tileentity).getViewers())) // SpigotMCP -- Fix shit
+                {
+                    if (h instanceof CraftHumanEntity)
+                    {
+                        ((CraftHumanEntity)h).getHandle().closeScreen();
+                    }
+                }
+            }
+
+            // Spigot End
             this.worldObj.markTileEntityForRemoval(tileentity);
         }
 
         for (int i = 0; i < this.entityLists.length; ++i)
         {
-            this.worldObj.unloadEntities(this.entityLists[i]);
+            // CraftBukkit start
+            List<Entity> newList = Lists.newArrayList(this.entityLists[i]);
+            Iterator<Entity> iter = newList.iterator();
+
+            while (iter.hasNext())
+            {
+                Entity entity = iter.next();
+
+                // Spigot Start
+                if (entity instanceof IInventory)
+                {
+                    for (HumanEntity h : Lists.newArrayList(((IInventory)entity).getViewers())) // SpigotMCP -- Fix shit
+                    {
+                        if (h instanceof CraftHumanEntity)
+                        {
+                            ((CraftHumanEntity)h).getHandle().closeScreen();
+                        }
+                    }
+                }
+
+                // Spigot End
+
+                // Do not pass along players, as doing so can get them stuck outside of time.
+                // (which for example disables inventory icon updates and prevents block breaking)
+                if (entity instanceof EntityPlayer)
+                {
+                    iter.remove();
+                }
+            }
+
+            this.worldObj.unloadEntities(newList);
+            // CraftBukkit end
         }
     }
 
     public void setChunkModified()
     {
@@ -1008,26 +1134,26 @@
                 }
             }
         }
     }
 
-    public void getEntitiesOfTypeWithinAAAB(Class entityClass, AxisAlignedBB aabb, List listToFill, Predicate p_177430_4_)
+    public void getEntitiesOfTypeWithinAAAB(Class entityClass, AxisAlignedBB aabb, List<Entity> listToFill, Predicate<Entity> p_177430_4_)
     {
         int i = MathHelper.floor_double((aabb.minY - 2.0D) / 16.0D);
         int j = MathHelper.floor_double((aabb.maxY + 2.0D) / 16.0D);
         i = MathHelper.clamp_int(i, 0, this.entityLists.length - 1);
         j = MathHelper.clamp_int(j, 0, this.entityLists.length - 1);
 
         for (int k = i; k <= j; ++k)
         {
-            Iterator iterator = this.entityLists[k].func_180215_b(entityClass).iterator();
+            Iterator iterator = this.entityLists[k].iterator(); // Spigot
 
             while (iterator.hasNext())
             {
                 Entity entity = (Entity)iterator.next();
 
-                if (entity.getEntityBoundingBox().intersectsWith(aabb) && (p_177430_4_ == null || p_177430_4_.apply(entity)))
+                if (entityClass.isInstance(entity) && entity.getEntityBoundingBox().intersectsWith(aabb) && (p_177430_4_ == null || p_177430_4_.apply(entity)))   // Spigot
                 {
                     listToFill.add(entity);
                 }
             }
         }
@@ -1040,11 +1166,11 @@
             if (this.hasEntities && this.worldObj.getTotalWorldTime() != this.lastSaveTime || this.isModified)
             {
                 return true;
             }
         }
-        else if (this.hasEntities && this.worldObj.getTotalWorldTime() >= this.lastSaveTime + 600L)
+        else if (this.hasEntities && this.worldObj.getTotalWorldTime() >= this.lastSaveTime + MinecraftServer.getServer().autosavePeriod * 4)   // Spigot - Only save if we've passed 2 auto save intervals without modification
         {
             return true;
         }
 
         return this.isModified;
@@ -1060,10 +1186,11 @@
         return false;
     }
 
     public void populateChunk(IChunkProvider p_76624_1_, IChunkProvider p_76624_2_, int p_76624_3_, int p_76624_4_)
     {
+        worldObj.timings.syncChunkLoadPostTimer.startTiming(); // Spigot
         boolean flag = p_76624_1_.chunkExists(p_76624_3_, p_76624_4_ - 1);
         boolean flag1 = p_76624_1_.chunkExists(p_76624_3_ + 1, p_76624_4_);
         boolean flag2 = p_76624_1_.chunkExists(p_76624_3_, p_76624_4_ + 1);
         boolean flag3 = p_76624_1_.chunkExists(p_76624_3_ - 1, p_76624_4_);
         boolean flag4 = p_76624_1_.chunkExists(p_76624_3_ - 1, p_76624_4_ - 1);
@@ -1124,10 +1251,12 @@
             else
             {
                 p_76624_1_.func_177460_a(p_76624_2_, chunk, p_76624_3_ - 1, p_76624_4_ - 1);
             }
         }
+
+        worldObj.timings.syncChunkLoadPostTimer.stopTiming(); // Spigot
     }
 
     public BlockPos getPrecipitationHeight(BlockPos pos)
     {
         int i = pos.getX() & 15;
@@ -1169,11 +1298,11 @@
             this.recheckGaps(this.worldObj.isRemote);
         }
 
         this.field_150815_m = true;
 
-        if (!this.isLightPopulated && this.isTerrainPopulated)
+        if (!this.isLightPopulated && this.isTerrainPopulated && this.worldObj.spigotConfig.randomLightUpdates)   // Spigot - also use random light updates setting to determine if we should relight
         {
             this.func_150809_p();
         }
 
         while (!this.field_177447_w.isEmpty())
@@ -1189,11 +1318,19 @@
         }
     }
 
     public boolean isPopulated()
     {
-        return this.field_150815_m && this.isTerrainPopulated && this.isLightPopulated;
+        // Spigot Start
+        /*
+         * As of 1.7, Mojang added a check to make sure that only chunks which have been lit are sent to the client.
+         * Unfortunately this interferes with our modified chunk ticking algorithm, which will only tick chunks distant from the player on a very infrequent basis.
+         * We cannot unfortunately do this lighting stage during chunk gen as it appears to put a lot more noticeable load on the server, than when it is done at play time.
+         * For now at least we will simply send all chunks, in accordance with pre 1.7 behaviour.
+         */
+        return true;
+        // Spigot End
     }
 
     public ChunkCoordIntPair getChunkCoordIntPair()
     {
         return new ChunkCoordIntPair(this.xPosition, this.zPosition);
@@ -1237,91 +1374,10 @@
                 this.storageArrays[i] = newStorageArrays[i];
             }
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public void fillChunk(byte[] p_177439_1_, int p_177439_2_, boolean p_177439_3_)
-    {
-        int j = 0;
-        boolean flag1 = !this.worldObj.provider.getHasNoSky();
-        int k;
-
-        for (k = 0; k < this.storageArrays.length; ++k)
-        {
-            if ((p_177439_2_ & 1 << k) != 0)
-            {
-                if (this.storageArrays[k] == null)
-                {
-                    this.storageArrays[k] = new ExtendedBlockStorage(k << 4, flag1);
-                }
-
-                char[] achar = this.storageArrays[k].getData();
-
-                for (int l = 0; l < achar.length; ++l)
-                {
-                    achar[l] = (char)((p_177439_1_[j + 1] & 255) << 8 | p_177439_1_[j] & 255);
-                    j += 2;
-                }
-            }
-            else if (p_177439_3_ && this.storageArrays[k] != null)
-            {
-                this.storageArrays[k] = null;
-            }
-        }
-
-        NibbleArray nibblearray;
-
-        for (k = 0; k < this.storageArrays.length; ++k)
-        {
-            if ((p_177439_2_ & 1 << k) != 0 && this.storageArrays[k] != null)
-            {
-                nibblearray = this.storageArrays[k].getBlocklightArray();
-                System.arraycopy(p_177439_1_, j, nibblearray.getData(), 0, nibblearray.getData().length);
-                j += nibblearray.getData().length;
-            }
-        }
-
-        if (flag1)
-        {
-            for (k = 0; k < this.storageArrays.length; ++k)
-            {
-                if ((p_177439_2_ & 1 << k) != 0 && this.storageArrays[k] != null)
-                {
-                    nibblearray = this.storageArrays[k].getSkylightArray();
-                    System.arraycopy(p_177439_1_, j, nibblearray.getData(), 0, nibblearray.getData().length);
-                    j += nibblearray.getData().length;
-                }
-            }
-        }
-
-        if (p_177439_3_)
-        {
-            System.arraycopy(p_177439_1_, j, this.blockBiomeArray, 0, this.blockBiomeArray.length);
-            int i1 = j + this.blockBiomeArray.length;
-        }
-
-        for (k = 0; k < this.storageArrays.length; ++k)
-        {
-            if (this.storageArrays[k] != null && (p_177439_2_ & 1 << k) != 0)
-            {
-                this.storageArrays[k].removeInvalidBlocks();
-            }
-        }
-
-        this.isLightPopulated = true;
-        this.isTerrainPopulated = true;
-        this.generateHeightMap();
-        Iterator iterator = this.chunkTileEntityMap.values().iterator();
-
-        while (iterator.hasNext())
-        {
-            TileEntity tileentity = (TileEntity)iterator.next();
-            tileentity.updateContainingBlockInfo();
-        }
-    }
-
     public BiomeGenBase getBiome(BlockPos pos, WorldChunkManager chunkManager)
     {
         int i = pos.getX() & 15;
         int j = pos.getZ() & 15;
         int k = this.blockBiomeArray[j << 4 | i] & 255;
@@ -1543,16 +1599,10 @@
     public boolean isLoaded()
     {
         return this.isChunkLoaded;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void setChunkLoaded(boolean loaded)
-    {
-        this.isChunkLoaded = loaded;
-    }
-
     public World getWorld()
     {
         return this.worldObj;
     }
 
@@ -1579,11 +1629,11 @@
     public Map getTileEntityMap()
     {
         return this.chunkTileEntityMap;
     }
 
-    public ClassInheritanceMultiMap[] getEntityLists()
+    public List<Entity>[] getEntityLists()   // Spigot
     {
         return this.entityLists;
     }
 
     public boolean isTerrainPopulated()
