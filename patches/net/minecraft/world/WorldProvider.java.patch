--- decompiled\net\minecraft\world\WorldProvider.java
+++ src\main\java\net\minecraft\world\WorldProvider.java
@@ -1,25 +1,23 @@
 package net.minecraft.world;
 
 import net.minecraft.init.Blocks;
 import net.minecraft.util.BlockPos;
-import net.minecraft.util.MathHelper;
-import net.minecraft.util.Vec3;
 import net.minecraft.world.biome.BiomeGenBase;
 import net.minecraft.world.biome.WorldChunkManager;
 import net.minecraft.world.biome.WorldChunkManagerHell;
 import net.minecraft.world.border.WorldBorder;
 import net.minecraft.world.chunk.IChunkProvider;
 import net.minecraft.world.gen.ChunkProviderDebug;
 import net.minecraft.world.gen.ChunkProviderFlat;
 import net.minecraft.world.gen.ChunkProviderGenerate;
 import net.minecraft.world.gen.FlatGeneratorInfo;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+
 public abstract class WorldProvider
 {
+
     public static final float[] moonPhaseFactors = new float[] {1.0F, 0.75F, 0.5F, 0.25F, 0.0F, 0.25F, 0.5F, 0.75F};
     protected World worldObj;
     private WorldType terrainType;
     private String generatorSettings;
     protected WorldChunkManager worldChunkMgr;
@@ -108,92 +106,30 @@
     public boolean isSurfaceWorld()
     {
         return true;
     }
 
-    @SideOnly(Side.CLIENT)
-    public float[] calcSunriseSunsetColors(float celestialAngle, float partialTicks)
-    {
-        float f2 = 0.4F;
-        float f3 = MathHelper.cos(celestialAngle * (float)Math.PI * 2.0F) - 0.0F;
-        float f4 = -0.0F;
-
-        if (f3 >= f4 - f2 && f3 <= f4 + f2)
-        {
-            float f5 = (f3 - f4) / f2 * 0.5F + 0.5F;
-            float f6 = 1.0F - (1.0F - MathHelper.sin(f5 * (float)Math.PI)) * 0.99F;
-            f6 *= f6;
-            this.colorsSunriseSunset[0] = f5 * 0.3F + 0.7F;
-            this.colorsSunriseSunset[1] = f5 * f5 * 0.7F + 0.2F;
-            this.colorsSunriseSunset[2] = f5 * f5 * 0.0F + 0.2F;
-            this.colorsSunriseSunset[3] = f6;
-            return this.colorsSunriseSunset;
-        }
-        else
-        {
-            return null;
-        }
-    }
-
-    @SideOnly(Side.CLIENT)
-    public Vec3 getFogColor(float p_76562_1_, float p_76562_2_)
-    {
-        float f2 = MathHelper.cos(p_76562_1_ * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
-        f2 = MathHelper.clamp_float(f2, 0.0F, 1.0F);
-        float f3 = 0.7529412F;
-        float f4 = 0.84705883F;
-        float f5 = 1.0F;
-        f3 *= f2 * 0.94F + 0.06F;
-        f4 *= f2 * 0.94F + 0.06F;
-        f5 *= f2 * 0.91F + 0.09F;
-        return new Vec3((double)f3, (double)f4, (double)f5);
-    }
-
     public boolean canRespawnHere()
     {
         return true;
     }
 
     public static WorldProvider getProviderForDimension(int dimension)
     {
         return (WorldProvider)(dimension == -1 ? new WorldProviderHell() : (dimension == 0 ? new WorldProviderSurface() : (dimension == 1 ? new WorldProviderEnd() : null)));
     }
 
-    @SideOnly(Side.CLIENT)
-    public float getCloudHeight()
-    {
-        return 128.0F;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public boolean isSkyColored()
-    {
-        return true;
-    }
-
     public BlockPos getSpawnCoordinate()
     {
         return null;
     }
 
     public int getAverageGroundLevel()
     {
         return this.terrainType == WorldType.FLAT ? 4 : 64;
     }
 
-    @SideOnly(Side.CLIENT)
-    public double getVoidFogYFactor()
-    {
-        return this.terrainType == WorldType.FLAT ? 1.0D : 0.03125D;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public boolean doesXZShowFog(int x, int z)
-    {
-        return false;
-    }
-
     public abstract String getDimensionName();
 
     public abstract String getInternalNameSuffix();
 
     public WorldChunkManager getWorldChunkManager()
