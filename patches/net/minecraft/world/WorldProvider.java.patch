---a/net/minecraft/world/WorldProvider.java
+++b/net/minecraft/world/WorldProvider.java
@@ -2,8 +2,6 @@
 
 import net.minecraft.init.Blocks;
 import net.minecraft.util.BlockPos;
-import net.minecraft.util.MathHelper;
-import net.minecraft.util.Vec3;
 import net.minecraft.world.biome.BiomeGenBase;
 import net.minecraft.world.biome.WorldChunkManager;
 import net.minecraft.world.biome.WorldChunkManagerHell;
@@ -13,11 +13,7 @@
 import net.minecraft.world.gen.ChunkProviderFlat;
 import net.minecraft.world.gen.ChunkProviderGenerate;
 import net.minecraft.world.gen.FlatGeneratorInfo;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public abstract class WorldProvider
-{
-    public static final float[] moonPhaseFactors = new float[] {1.0F, 0.75F, 0.5F, 0.25F, 0.0F, 0.25F, 0.5F, 0.75F};
+
+public abstract class WorldProvider {
+
+    public static final float[] moonPhaseFactors = new float[]{1.0F, 0.75F, 0.5F, 0.25F, 0.0F, 0.25F, 0.5F, 0.75F};
     protected World worldObj;
     private WorldType terrainType;
     private String generatorSettings;
@@ -30,8 +30,7 @@
     private final float[] colorsSunriseSunset = new float[4];
     private static final String __OBFID = "CL_00000386";
 
-    public final void registerWorld(World worldIn)
-    {
+    public final void registerWorld(World worldIn) {
         this.worldObj = worldIn;
         this.terrainType = worldIn.getWorldInfo().getTerrainType();
         this.generatorSettings = worldIn.getWorldInfo().getGeneratorOptions();
@@ -39,191 +39,102 @@
         this.generateLightBrightnessTable();
     }
 
-    protected void generateLightBrightnessTable()
-    {
+    protected void generateLightBrightnessTable() {
         float f = 0.0F;
 
-        for (int i = 0; i <= 15; ++i)
-        {
-            float f1 = 1.0F - (float)i / 15.0F;
+        for (int i = 0; i <= 15; ++i) {
+            float f1 = 1.0F - (float) i / 15.0F;
             this.lightBrightnessTable[i] = (1.0F - f1) / (f1 * 3.0F + 1.0F) * (1.0F - f) + f;
         }
     }
 
-    protected void registerWorldChunkManager()
-    {
+    protected void registerWorldChunkManager() {
         WorldType worldtype = this.worldObj.getWorldInfo().getTerrainType();
-
-        if (worldtype == WorldType.FLAT)
-        {
+        if (worldtype == WorldType.FLAT) {
             FlatGeneratorInfo flatgeneratorinfo = FlatGeneratorInfo.createFlatGeneratorFromString(this.worldObj.getWorldInfo().getGeneratorOptions());
             this.worldChunkMgr = new WorldChunkManagerHell(BiomeGenBase.getBiomeFromBiomeList(flatgeneratorinfo.getBiome(), BiomeGenBase.field_180279_ad), 0.5F);
-        }
-        else if (worldtype == WorldType.DEBUG_WORLD)
-        {
+        } else if (worldtype == WorldType.DEBUG_WORLD) {
             this.worldChunkMgr = new WorldChunkManagerHell(BiomeGenBase.plains, 0.0F);
-        }
-        else
-        {
+        } else {
             this.worldChunkMgr = new WorldChunkManager(this.worldObj);
         }
     }
 
-    public IChunkProvider createChunkGenerator()
-    {
+    public IChunkProvider createChunkGenerator() {
         return (IChunkProvider)(this.terrainType == WorldType.FLAT ? new ChunkProviderFlat(this.worldObj, this.worldObj.getSeed(), this.worldObj.getWorldInfo().isMapFeaturesEnabled(), this.generatorSettings) : (this.terrainType == WorldType.DEBUG_WORLD ? new ChunkProviderDebug(this.worldObj) : (this.terrainType == WorldType.CUSTOMIZED ? new ChunkProviderGenerate(this.worldObj, this.worldObj.getSeed(), this.worldObj.getWorldInfo().isMapFeaturesEnabled(), this.generatorSettings) : new ChunkProviderGenerate(this.worldObj, this.worldObj.getSeed(), this.worldObj.getWorldInfo().isMapFeaturesEnabled(), this.generatorSettings))));
     }
 
-    public boolean canCoordinateBeSpawn(int x, int z)
-    {
+    public boolean canCoordinateBeSpawn(int x, int z) {
         return this.worldObj.getGroundAboveSeaLevel(new BlockPos(x, 0, z)) == Blocks.grass;
     }
 
-    public float calculateCelestialAngle(long p_76563_1_, float p_76563_3_)
-    {
-        int j = (int)(p_76563_1_ % 24000L);
-        float f1 = ((float)j + p_76563_3_) / 24000.0F - 0.25F;
+    public float calculateCelestialAngle(long p_76563_1_, float p_76563_3_) {
+        int j = (int) (p_76563_1_ % 24000L);
+        float f1 = ((float) j + p_76563_3_) / 24000.0F - 0.25F;
 
-        if (f1 < 0.0F)
-        {
+        if (f1 < 0.0F) {
             ++f1;
         }
 
-        if (f1 > 1.0F)
-        {
+        if (f1 > 1.0F) {
             --f1;
         }
 
         float f2 = f1;
-        f1 = 1.0F - (float)((Math.cos((double)f1 * Math.PI) + 1.0D) / 2.0D);
+        f1 = 1.0F - (float) ((Math.cos((double) f1 * Math.PI) + 1.0D) / 2.0D);
         f1 = f2 + (f1 - f2) / 3.0F;
         return f1;
     }
 
-    public int getMoonPhase(long p_76559_1_)
-    {
-        return (int)(p_76559_1_ / 24000L % 8L + 8L) % 8;
+    public int getMoonPhase(long p_76559_1_) {
+        return (int) (p_76559_1_ / 24000L % 8L + 8L) % 8;
     }
 
-    public boolean isSurfaceWorld()
-    {
+    public boolean isSurfaceWorld() {
         return true;
     }
 
-    @SideOnly(Side.CLIENT)
-    public float[] calcSunriseSunsetColors(float celestialAngle, float partialTicks)
-    {
-        float f2 = 0.4F;
-        float f3 = MathHelper.cos(celestialAngle * (float)Math.PI * 2.0F) - 0.0F;
-        float f4 = -0.0F;
-
-        if (f3 >= f4 - f2 && f3 <= f4 + f2)
-        {
-            float f5 = (f3 - f4) / f2 * 0.5F + 0.5F;
-            float f6 = 1.0F - (1.0F - MathHelper.sin(f5 * (float)Math.PI)) * 0.99F;
-            f6 *= f6;
-            this.colorsSunriseSunset[0] = f5 * 0.3F + 0.7F;
-            this.colorsSunriseSunset[1] = f5 * f5 * 0.7F + 0.2F;
-            this.colorsSunriseSunset[2] = f5 * f5 * 0.0F + 0.2F;
-            this.colorsSunriseSunset[3] = f6;
-            return this.colorsSunriseSunset;
-        }
-        else
-        {
-            return null;
-        }
-    }
-
-    @SideOnly(Side.CLIENT)
-    public Vec3 getFogColor(float p_76562_1_, float p_76562_2_)
-    {
-        float f2 = MathHelper.cos(p_76562_1_ * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
-        f2 = MathHelper.clamp_float(f2, 0.0F, 1.0F);
-        float f3 = 0.7529412F;
-        float f4 = 0.84705883F;
-        float f5 = 1.0F;
-        f3 *= f2 * 0.94F + 0.06F;
-        f4 *= f2 * 0.94F + 0.06F;
-        f5 *= f2 * 0.91F + 0.09F;
-        return new Vec3((double)f3, (double)f4, (double)f5);
-    }
-
-    public boolean canRespawnHere()
-    {
+    public boolean canRespawnHere() {
         return true;
     }
 
-    public static WorldProvider getProviderForDimension(int dimension)
-    {
-        return (WorldProvider)(dimension == -1 ? new WorldProviderHell() : (dimension == 0 ? new WorldProviderSurface() : (dimension == 1 ? new WorldProviderEnd() : null)));
+    public static WorldProvider getProviderForDimension(int dimension) {
+        return (WorldProvider) (dimension == -1 ? new WorldProviderHell() : (dimension == 0 ? new WorldProviderSurface() : (dimension == 1 ? new WorldProviderEnd() : null)));
     }
 
-    @SideOnly(Side.CLIENT)
-    public float getCloudHeight()
-    {
-        return 128.0F;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public boolean isSkyColored()
-    {
-        return true;
-    }
-
-    public BlockPos getSpawnCoordinate()
-    {
+    public BlockPos getSpawnCoordinate() {
         return null;
     }
 
-    public int getAverageGroundLevel()
-    {
+    public int getAverageGroundLevel() {
         return this.terrainType == WorldType.FLAT ? 4 : 64;
     }
 
-    @SideOnly(Side.CLIENT)
-    public double getVoidFogYFactor()
-    {
-        return this.terrainType == WorldType.FLAT ? 1.0D : 0.03125D;
-    }
-
-    @SideOnly(Side.CLIENT)
-    public boolean doesXZShowFog(int x, int z)
-    {
-        return false;
-    }
-
     public abstract String getDimensionName();
 
     public abstract String getInternalNameSuffix();
 
-    public WorldChunkManager getWorldChunkManager()
-    {
+    public WorldChunkManager getWorldChunkManager() {
         return this.worldChunkMgr;
     }
 
-    public boolean doesWaterVaporize()
-    {
+    public boolean doesWaterVaporize() {
         return this.isHellWorld;
     }
 
-    public boolean getHasNoSky()
-    {
+    public boolean getHasNoSky() {
         return this.hasNoSky;
     }
 
-    public float[] getLightBrightnessTable()
-    {
+    public float[] getLightBrightnessTable() {
         return this.lightBrightnessTable;
     }
 
-    public int getDimensionId()
-    {
+    public int getDimensionId() {
         return this.dimensionId;
     }
 
-    public WorldBorder getWorldBorder()
-    {
+    public WorldBorder getWorldBorder() {
         return new WorldBorder();
     }
-}
+}
