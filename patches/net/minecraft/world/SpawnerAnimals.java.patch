--- decompiled\net\minecraft\world\SpawnerAnimals.java
+++ src\main\java\net\minecraft\world\SpawnerAnimals.java
@@ -1,12 +1,12 @@
 package net.minecraft.world;
 
-import com.google.common.collect.Sets;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
 import java.util.Set;
+
 import net.minecraft.block.Block;
 import net.minecraft.entity.EntityLiving;
 import net.minecraft.entity.EntitySpawnPlacementRegistry;
 import net.minecraft.entity.EnumCreatureType;
 import net.minecraft.entity.IEntityLivingData;
@@ -16,16 +16,44 @@
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.WeightedRandom;
 import net.minecraft.world.biome.BiomeGenBase;
 import net.minecraft.world.chunk.Chunk;
 
+import org.bukkit.craftbukkit.util.LongHash;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
+
+import com.google.common.collect.Sets;
+
 public final class SpawnerAnimals
 {
+
     private static final int MOB_COUNT_DIV = (int)Math.pow(17.0D, 2.0D);
     private final Set eligibleChunksForSpawning = Sets.newHashSet();
     private static final String __OBFID = "CL_00000152";
 
+    // Spigot start - get entity count only from chunks being processed in b
+    private int getEntityCount(WorldServer server, Class oClass)
+    {
+        int i = 0;
+        Iterator<Long> it = this.eligibleChunksForSpawning.iterator();
+
+        while (it.hasNext())
+        {
+            Long coord = it.next();
+            int x = LongHash.msw(coord);
+            int z = LongHash.lsw(coord);
+
+            if (!server.theChunkProviderServer.droppedChunksSet.contains(coord) && server.isChunkLoaded(x, z, true))
+            {
+                i += server.getChunkFromChunkCoords(x, z).entityCount.get(oClass);
+            }
+        }
+
+        return i;
+    }
+    // Spigot end
+
     public int findChunksForSpawning(WorldServer p_77192_1_, boolean p_77192_2_, boolean p_77192_3_, boolean p_77192_4_)
     {
         if (!p_77192_2_ && !p_77192_3_)
         {
             return 0;
@@ -45,27 +73,36 @@
                 if (!entityplayer.isSpectator())
                 {
                     int j = MathHelper.floor_double(entityplayer.posX / 16.0D);
                     k = MathHelper.floor_double(entityplayer.posZ / 16.0D);
                     byte b0 = 8;
+                    // Spigot Start
+                    b0 = p_77192_1_.spigotConfig.mobSpawnRange;
+                    b0 = (b0 > p_77192_1_.spigotConfig.viewDistance) ? (byte)p_77192_1_.spigotConfig.viewDistance : b0;
+                    b0 = (b0 > 8) ? 8 : b0;
+                    // Spigot End
 
                     for (int l = -b0; l <= b0; ++l)
                     {
                         for (i1 = -b0; i1 <= b0; ++i1)
                         {
                             boolean flag3 = l == -b0 || l == b0 || i1 == -b0 || i1 == b0;
-                            ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(l + j, i1 + k);
+                            // ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(l + j, i1 + k);
+                            // CraftBukkit start - use LongHash and LongHashSet
+                            long chunkCoords = LongHash.toLong(i1 + l, k + j);
 
-                            if (!this.eligibleChunksForSpawning.contains(chunkcoordintpair))
+                            if (!this.eligibleChunksForSpawning.contains(chunkCoords))
                             {
                                 ++i;
 
-                                if (!flag3 && p_77192_1_.getWorldBorder().contains(chunkcoordintpair))
+                                if (!flag3 && p_77192_1_.getWorldBorder().isInBounds(chunkCoords))
                                 {
-                                    this.eligibleChunksForSpawning.add(chunkcoordintpair);
+                                    this.eligibleChunksForSpawning.add(chunkCoords);
                                 }
                             }
+
+                            // CraftBukkit end
                         }
                     }
                 }
             }
 
@@ -75,25 +112,54 @@
             k = aenumcreaturetype.length;
 
             for (int l3 = 0; l3 < k; ++l3)
             {
                 EnumCreatureType enumcreaturetype = aenumcreaturetype[l3];
+                // CraftBukkit start - Use per-world spawn limits
+                int limit = enumcreaturetype.getMaxNumberOfCreature();
 
+                switch (enumcreaturetype)
+                {
+                    case MONSTER:
+                        limit = p_77192_1_.getWorld().getMonsterSpawnLimit();
+                        break;
+                    case CREATURE:
+                        limit = p_77192_1_.getWorld().getAnimalSpawnLimit();
+                        break;
+                    case WATER_CREATURE:
+                        limit = p_77192_1_.getWorld().getWaterAnimalSpawnLimit();
+                        break;
+                    case AMBIENT:
+                        limit = p_77192_1_.getWorld().getAmbientSpawnLimit();
+                        break;
+                }
+
+                if (limit == 0)
+                {
+                    continue;
+                }
+
+                int mobcnt = 0; // Spigot
+                // CraftBukkit end
+
                 if ((!enumcreaturetype.getPeacefulCreature() || p_77192_3_) && (enumcreaturetype.getPeacefulCreature() || p_77192_2_) && (!enumcreaturetype.getAnimal() || p_77192_4_))
                 {
                     i1 = p_77192_1_.countEntities(enumcreaturetype.getCreatureClass());
-                    int i4 = enumcreaturetype.getMaxNumberOfCreature() * i / MOB_COUNT_DIV;
+                    int i4 = limit * i / MOB_COUNT_DIV; // CraftBukkit - use per-world limits
 
                     if (i1 <= i4)
                     {
                         Iterator iterator1 = this.eligibleChunksForSpawning.iterator();
+                        int moblimit = (limit * i / 256) - mobcnt + 1; // Spigot - up to 1 more than limit
                         label115:
 
-                        while (iterator1.hasNext())
+                        while (iterator1.hasNext() && (moblimit > 0))   // Spigot - while more allowed
                         {
-                            ChunkCoordIntPair chunkcoordintpair1 = (ChunkCoordIntPair)iterator1.next();
-                            BlockPos blockpos = getRandomChunkPosition(p_77192_1_, chunkcoordintpair1.chunkXPos, chunkcoordintpair1.chunkZPos);
+                            // CraftBukkit start = use LongHash and LongObjectHashMap
+                            long key = ((Long)iterator1.next()).longValue();
+                            BlockPos blockpos = getRandomChunkPosition(p_77192_1_, LongHash.msw(key), LongHash.lsw(key));
+                            // CraftBukkit end
                             int j1 = blockpos.getX();
                             int k1 = blockpos.getY();
                             int l1 = blockpos.getZ();
                             Block block = p_77192_1_.getBlockState(blockpos).getBlock();
 
@@ -158,13 +224,21 @@
                                                             ientitylivingdata = entityliving.func_180482_a(p_77192_1_.getDifficultyForLocation(new BlockPos(entityliving)), ientitylivingdata);
 
                                                             if (entityliving.handleLavaMovement())
                                                             {
                                                                 ++i2;
-                                                                p_77192_1_.spawnEntityInWorld(entityliving);
+                                                                p_77192_1_.addEntity(entityliving, SpawnReason.NATURAL); // CraftBukkit - Added a reason for spawning this creature
                                                             }
 
+                                                            // Spigot start
+                                                            if (--moblimit <= 0)
+                                                            {
+                                                                // If we're past limit, stop spawn
+                                                                continue label115;
+                                                            }
+
+                                                            // Spigot end
                                                             if (i2 >= entityliving.getMaxSpawnedInChunk())
                                                             {
                                                                 continue label115;
                                                             }
                                                         }
@@ -271,12 +345,14 @@
                                 exception.printStackTrace();
                                 continue;
                             }
 
                             entityliving.setLocationAndAngles((double)((float)j1 + 0.5F), (double)blockpos.getY(), (double)((float)k1 + 0.5F), p_77191_6_.nextFloat() * 360.0F, 0.0F);
-                            worldIn.spawnEntityInWorld(entityliving);
+                            // CraftBukkit start - Added a reason for spawning this creature, moved entityinsentient.prepare(groupdataentity) up
                             ientitylivingdata = entityliving.func_180482_a(worldIn.getDifficultyForLocation(new BlockPos(entityliving)), ientitylivingdata);
+                            worldIn.addEntity(entityliving, SpawnReason.CHUNK_GEN);
+                            // CraftBukkit end
                             flag = true;
                         }
 
                         j1 += p_77191_6_.nextInt(5) - p_77191_6_.nextInt(5);
 
