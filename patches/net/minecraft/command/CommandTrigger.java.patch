---a/net/minecraft/command/CommandTrigger.java
+++b/net/minecraft/command/CommandTrigger.java
@@ -1,10 +1,8 @@
 package net.minecraft.command;
 
-import com.google.common.collect.Lists;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
+
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.scoreboard.IScoreObjectiveCriteria;
@@ -13,77 +13,62 @@
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.BlockPos;
 
-public class CommandTrigger extends CommandBase
-{
+import com.google.common.collect.Lists;
+
+public class CommandTrigger extends CommandBase {
+
     private static final String __OBFID = "CL_00002337";
 
-    public String getName()
-    {
+    public String getName() {
         return "trigger";
     }
 
-    public int getRequiredPermissionLevel()
-    {
+    public int getRequiredPermissionLevel() {
         return 0;
     }
 
-    public String getCommandUsage(ICommandSender sender)
-    {
+    public String getCommandUsage(ICommandSender sender) {
         return "commands.trigger.usage";
     }
 
-    public void execute(ICommandSender sender, String[] args) throws CommandException
-    {
-        if (args.length < 3)
-        {
+    public void execute(ICommandSender sender, String[] args) throws CommandException {
+        if (args.length < 3) {
             throw new WrongUsageException("commands.trigger.usage", new Object[0]);
-        }
-        else
-        {
+        } else {
             EntityPlayerMP entityplayermp;
 
-            if (sender instanceof EntityPlayerMP)
-            {
-                entityplayermp = (EntityPlayerMP)sender;
-            }
-            else
-            {
+            if (sender instanceof EntityPlayerMP) {
+                entityplayermp = (EntityPlayerMP) sender;
+            } else {
                 Entity entity = sender.getCommandSenderEntity();
 
-                if (!(entity instanceof EntityPlayerMP))
-                {
+                if (!(entity instanceof EntityPlayerMP)) {
                     throw new CommandException("commands.trigger.invalidPlayer", new Object[0]);
                 }
 
-                entityplayermp = (EntityPlayerMP)entity;
+                entityplayermp = (EntityPlayerMP) entity;
             }
 
             Scoreboard scoreboard = MinecraftServer.getServer().worldServerForDimension(0).getScoreboard();
             ScoreObjective scoreobjective = scoreboard.getObjective(args[0]);
 
-            if (scoreobjective != null && scoreobjective.getCriteria() == IScoreObjectiveCriteria.TRIGGER)
-            {
+            if (scoreobjective != null && scoreobjective.getCriteria() == IScoreObjectiveCriteria.TRIGGER) {
                 int i = parseInt(args[2]);
 
-                if (!scoreboard.entityHasObjective(entityplayermp.getName(), scoreobjective))
-                {
-                    throw new CommandException("commands.trigger.invalidObjective", new Object[] {args[0]});
-                }
-                else
-                {
+                if (!scoreboard.entityHasObjective(entityplayermp.getName(), scoreobjective)) {
+                    throw new CommandException("commands.trigger.invalidObjective", new Object[]{args[0]});
+                } else {
                     Score score = scoreboard.getValueFromObjective(entityplayermp.getName(), scoreobjective);
 
-                    if (score.isLocked())
-                    {
-                        throw new CommandException("commands.trigger.disabled", new Object[] {args[0]});
-                    }
-                    else
-                    {
-                        if ("set".equals(args[1]))
-                        {
+                    if (score.isLocked()) {
+                        throw new CommandException("commands.trigger.disabled", new Object[]{args[0]});
+                    } else {
+                        if ("set".equals(args[1])) {
                             score.setScorePoints(i);
-                        }
-                        else
-                        {
-                            if (!"add".equals(args[1]))
-                            {
-                                throw new CommandException("commands.trigger.invalidMode", new Object[] {args[1]});
+                        } else {
+                            if (!"add".equals(args[1])) {
+                                throw new CommandException("commands.trigger.invalidMode", new Object[]{args[1]});
                             }
 
                             score.increseScore(i);
@@ -95,45 +95,35 @@
 
                         score.setLocked(true);
 
-                        if (entityplayermp.theItemInWorldManager.isCreative())
-                        {
-                            notifyOperators(sender, this, "commands.trigger.success", new Object[] {args[0], args[1], args[2]});
+                        if (entityplayermp.theItemInWorldManager.isCreative()) {
+                            notifyOperators(sender, this, "commands.trigger.success", new Object[]{args[0], args[1], args[2]});
                         }
                     }
                 }
+            } else {
+                throw new CommandException("commands.trigger.invalidObjective", new Object[]{args[0]});
             }
-            else
-            {
-                throw new CommandException("commands.trigger.invalidObjective", new Object[] {args[0]});
-            }
         }
     }
 
-    public List addTabCompletionOptions(ICommandSender sender, String[] args, BlockPos pos)
-    {
-        if (args.length == 1)
-        {
+    public List addTabCompletionOptions(ICommandSender sender, String[] args, BlockPos pos) {
+        if (args.length == 1) {
             Scoreboard scoreboard = MinecraftServer.getServer().worldServerForDimension(0).getScoreboard();
             ArrayList arraylist = Lists.newArrayList();
             Iterator iterator = scoreboard.getScoreObjectives().iterator();
 
-            while (iterator.hasNext())
-            {
-                ScoreObjective scoreobjective = (ScoreObjective)iterator.next();
+            while (iterator.hasNext()) {
+                ScoreObjective scoreobjective = (ScoreObjective) iterator.next();
 
-                if (scoreobjective.getCriteria() == IScoreObjectiveCriteria.TRIGGER)
-                {
+                if (scoreobjective.getCriteria() == IScoreObjectiveCriteria.TRIGGER) {
                     arraylist.add(scoreobjective.getName());
                 }
             }
 
-            return getListOfStringsMatchingLastWord(args, (String[])arraylist.toArray(new String[arraylist.size()]));
+            return getListOfStringsMatchingLastWord(args, (String[]) arraylist.toArray(new String[arraylist.size()]));
+        } else {
+            return args.length == 2 ? getListOfStringsMatchingLastWord(args, new String[]{"add", "set"}) : null;
         }
-        else
-        {
-            return args.length == 2 ? getListOfStringsMatchingLastWord(args, new String[] {"add", "set"}): null;
-        }
     }
-}
+}
