--- decompiled\net\minecraft\command\CommandStats.java
+++ src\main\java\net\minecraft\command\CommandStats.java
@@ -1,219 +1,176 @@
 package net.minecraft.command;
 
-import com.google.common.collect.Lists;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
+
 import net.minecraft.entity.Entity;
 import net.minecraft.scoreboard.ScoreObjective;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.tileentity.TileEntityCommandBlock;
 import net.minecraft.tileentity.TileEntitySign;
 import net.minecraft.util.BlockPos;
 import net.minecraft.world.World;
 
-public class CommandStats extends CommandBase
-{
+import com.google.common.collect.Lists;
+
+public class CommandStats extends CommandBase {
+
     private static final String __OBFID = "CL_00002339";
 
-    public String getName()
-    {
+    public String getName() {
         return "stats";
     }
 
-    public int getRequiredPermissionLevel()
-    {
+    public int getRequiredPermissionLevel() {
         return 2;
     }
 
-    public String getCommandUsage(ICommandSender sender)
-    {
+    public String getCommandUsage(ICommandSender sender) {
         return "commands.stats.usage";
     }
 
-    public void execute(ICommandSender sender, String[] args) throws CommandException
-    {
-        if (args.length < 1)
-        {
+    public void execute(ICommandSender sender, String[] args) throws CommandException {
+        if (args.length < 1) {
             throw new WrongUsageException("commands.stats.usage", new Object[0]);
-        }
-        else
-        {
+        } else {
             boolean flag;
 
-            if (args[0].equals("entity"))
-            {
+            if (args[0].equals("entity")) {
                 flag = false;
-            }
-            else
-            {
-                if (!args[0].equals("block"))
-                {
+            } else {
+                if (!args[0].equals("block")) {
                     throw new WrongUsageException("commands.stats.usage", new Object[0]);
                 }
 
                 flag = true;
             }
 
             byte b0;
 
-            if (flag)
-            {
-                if (args.length < 5)
-                {
+            if (flag) {
+                if (args.length < 5) {
                     throw new WrongUsageException("commands.stats.block.usage", new Object[0]);
                 }
 
                 b0 = 4;
-            }
-            else
-            {
-                if (args.length < 3)
-                {
+            } else {
+                if (args.length < 3) {
                     throw new WrongUsageException("commands.stats.entity.usage", new Object[0]);
                 }
 
                 b0 = 2;
             }
 
             int i = b0 + 1;
             String s = args[b0];
 
-            if ("set".equals(s))
-            {
-                if (args.length < i + 3)
-                {
-                    if (i == 5)
-                    {
+            if ("set".equals(s)) {
+                if (args.length < i + 3) {
+                    if (i == 5) {
                         throw new WrongUsageException("commands.stats.block.set.usage", new Object[0]);
                     }
 
                     throw new WrongUsageException("commands.stats.entity.set.usage", new Object[0]);
                 }
-            }
-            else
-            {
-                if (!"clear".equals(s))
-                {
+            } else {
+                if (!"clear".equals(s)) {
                     throw new WrongUsageException("commands.stats.usage", new Object[0]);
                 }
 
-                if (args.length < i + 1)
-                {
-                    if (i == 5)
-                    {
+                if (args.length < i + 1) {
+                    if (i == 5) {
                         throw new WrongUsageException("commands.stats.block.clear.usage", new Object[0]);
                     }
 
                     throw new WrongUsageException("commands.stats.entity.clear.usage", new Object[0]);
                 }
             }
 
             CommandResultStats.Type type = CommandResultStats.Type.getTypeByName(args[i++]);
 
-            if (type == null)
-            {
+            if (type == null) {
                 throw new CommandException("commands.stats.failed", new Object[0]);
-            }
-            else
-            {
+            } else {
                 World world = sender.getEntityWorld();
                 CommandResultStats commandresultstats;
                 BlockPos blockpos;
                 TileEntity tileentity;
 
-                if (flag)
-                {
+                if (flag) {
                     blockpos = func_175757_a(sender, args, 1, false);
                     tileentity = world.getTileEntity(blockpos);
 
-                    if (tileentity == null)
-                    {
-                        throw new CommandException("commands.stats.noCompatibleBlock", new Object[] {Integer.valueOf(blockpos.getX()), Integer.valueOf(blockpos.getY()), Integer.valueOf(blockpos.getZ())});
+                    if (tileentity == null) {
+                        throw new CommandException("commands.stats.noCompatibleBlock", new Object[]{Integer.valueOf(blockpos.getX()), Integer.valueOf(blockpos.getY()), Integer.valueOf(blockpos.getZ())});
                     }
 
-                    if (tileentity instanceof TileEntityCommandBlock)
-                    {
-                        commandresultstats = ((TileEntityCommandBlock)tileentity).getCommandResultStats();
-                    }
-                    else
-                    {
-                        if (!(tileentity instanceof TileEntitySign))
-                        {
-                            throw new CommandException("commands.stats.noCompatibleBlock", new Object[] {Integer.valueOf(blockpos.getX()), Integer.valueOf(blockpos.getY()), Integer.valueOf(blockpos.getZ())});
+                    if (tileentity instanceof TileEntityCommandBlock) {
+                        commandresultstats = ((TileEntityCommandBlock) tileentity).getCommandResultStats();
+                    } else {
+                        if (!(tileentity instanceof TileEntitySign)) {
+                            throw new CommandException("commands.stats.noCompatibleBlock", new Object[]{Integer.valueOf(blockpos.getX()), Integer.valueOf(blockpos.getY()), Integer.valueOf(blockpos.getZ())});
                         }
 
-                        commandresultstats = ((TileEntitySign)tileentity).func_174880_d();
+                        commandresultstats = ((TileEntitySign) tileentity).func_174880_d();
                     }
-                }
-                else
-                {
+                } else {
                     Entity entity = func_175768_b(sender, args[1]);
                     commandresultstats = entity.func_174807_aT();
                 }
 
-                if ("set".equals(s))
-                {
+                if ("set".equals(s)) {
                     String s1 = args[i++];
                     String s2 = args[i];
 
-                    if (s1.length() == 0 || s2.length() == 0)
-                    {
+                    if (s1.length() == 0 || s2.length() == 0) {
                         throw new CommandException("commands.stats.failed", new Object[0]);
                     }
 
                     CommandResultStats.func_179667_a(commandresultstats, type, s1, s2);
-                    notifyOperators(sender, this, "commands.stats.success", new Object[] {type.getTypeName(), s2, s1});
+                    notifyOperators(sender, this, "commands.stats.success", new Object[]{type.getTypeName(), s2, s1});
+                } else if ("clear".equals(s)) {
+                    CommandResultStats.func_179667_a(commandresultstats, type, (String) null, (String) null);
+                    notifyOperators(sender, this, "commands.stats.cleared", new Object[]{type.getTypeName()});
                 }
-                else if ("clear".equals(s))
-                {
-                    CommandResultStats.func_179667_a(commandresultstats, type, (String)null, (String)null);
-                    notifyOperators(sender, this, "commands.stats.cleared", new Object[] {type.getTypeName()});
-                }
 
-                if (flag)
-                {
+                if (flag) {
                     blockpos = func_175757_a(sender, args, 1, false);
                     tileentity = world.getTileEntity(blockpos);
                     tileentity.markDirty();
                 }
             }
         }
     }
 
-    public List addTabCompletionOptions(ICommandSender sender, String[] args, BlockPos pos)
-    {
-        return args.length == 1 ? getListOfStringsMatchingLastWord(args, new String[] {"entity", "block"}): (args.length == 2 && args[0].equals("entity") ? getListOfStringsMatchingLastWord(args, this.func_175776_d()) : ((args.length != 3 || !args[0].equals("entity")) && (args.length != 5 || !args[0].equals("block")) ? ((args.length != 4 || !args[0].equals("entity")) && (args.length != 6 || !args[0].equals("block")) ? ((args.length != 6 || !args[0].equals("entity")) && (args.length != 8 || !args[0].equals("block")) ? null : func_175762_a(args, this.func_175777_e())) : getListOfStringsMatchingLastWord(args, CommandResultStats.Type.getTypeNames())) : getListOfStringsMatchingLastWord(args, new String[] {"set", "clear"})));
+    public List addTabCompletionOptions(ICommandSender sender, String[] args, BlockPos pos) {
+        return args.length == 1 ? getListOfStringsMatchingLastWord(args, new String[]{"entity", "block"}) : (args.length == 2 && args[0].equals("entity") ? getListOfStringsMatchingLastWord(args, this.func_175776_d()) : ((args.length != 3 || !args[0].equals("entity")) && (args.length != 5 || !args[0].equals("block")) ? ((args.length != 4 || !args[0].equals("entity")) && (args.length != 6 || !args[0].equals("block")) ? ((args.length != 6 || !args[0]
+                .equals("entity")) && (args.length != 8 || !args[0].equals("block")) ? null : func_175762_a(args, this.func_175777_e())) : getListOfStringsMatchingLastWord(args, CommandResultStats.Type.getTypeNames())) : getListOfStringsMatchingLastWord(args, new String[]{"set", "clear"})));
     }
 
-    protected String[] func_175776_d()
-    {
+    protected String[] func_175776_d() {
         return MinecraftServer.getServer().getAllUsernames();
     }
 
-    protected List func_175777_e()
-    {
+    protected List func_175777_e() {
         Collection collection = MinecraftServer.getServer().worldServerForDimension(0).getScoreboard().getScoreObjectives();
         ArrayList arraylist = Lists.newArrayList();
         Iterator iterator = collection.iterator();
 
-        while (iterator.hasNext())
-        {
-            ScoreObjective scoreobjective = (ScoreObjective)iterator.next();
+        while (iterator.hasNext()) {
+            ScoreObjective scoreobjective = (ScoreObjective) iterator.next();
 
-            if (!scoreobjective.getCriteria().isReadOnly())
-            {
+            if (!scoreobjective.getCriteria().isReadOnly()) {
                 arraylist.add(scoreobjective.getName());
             }
         }
 
         return arraylist;
     }
 
-    public boolean isUsernameIndex(String[] args, int index)
-    {
+    public boolean isUsernameIndex(String[] args, int index) {
         return args.length > 0 && args[0].equals("entity") && index == 1;
     }
 }
