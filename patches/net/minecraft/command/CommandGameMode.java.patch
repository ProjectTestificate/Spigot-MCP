--- decompiled\net\minecraft\command\CommandGameMode.java
+++ src\main\java\net\minecraft\command\CommandGameMode.java
@@ -1,79 +1,83 @@
 package net.minecraft.command;
 
 import java.util.List;
+
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.BlockPos;
+import net.minecraft.util.ChatComponentText;
 import net.minecraft.util.ChatComponentTranslation;
 import net.minecraft.world.WorldSettings;
 
-public class CommandGameMode extends CommandBase
-{
+public class CommandGameMode extends CommandBase {
+
     private static final String __OBFID = "CL_00000448";
 
-    public String getName()
-    {
+    public String getName() {
         return "gamemode";
     }
 
-    public int getRequiredPermissionLevel()
-    {
+    public int getRequiredPermissionLevel() {
         return 2;
     }
 
-    public String getCommandUsage(ICommandSender sender)
-    {
+    public String getCommandUsage(ICommandSender sender) {
         return "commands.gamemode.usage";
     }
 
-    public void execute(ICommandSender sender, String[] args) throws CommandException
+    public void execute(ICommandSender sender, String[] args) throws CommandException // CraftBukkit - added throws // SpigotMCP NOTE -- CommandException added by MCP making WrongUsageException redundant
     {
-        if (args.length <= 0)
-        {
+        if (args.length <= 0) {
             throw new WrongUsageException("commands.gamemode.usage", new Object[0]);
-        }
-        else
-        {
+        } else {
             WorldSettings.GameType gametype = this.getGameModeFromCommand(sender, args[0]);
             EntityPlayerMP entityplayermp = args.length >= 2 ? getPlayer(sender, args[1]) : getCommandSenderAsPlayer(sender);
             entityplayermp.setGameType(gametype);
+
+            // CraftBukkit start - handle event cancelling the change
+            if (entityplayermp.theItemInWorldManager.getGameType() != gametype) {
+                sender.addChatMessage(new ChatComponentText("Failed to set the gamemode of '" + entityplayermp.getName() + "'"));
+                return;
+            }
+            // CraftBukkit end
+
             entityplayermp.fallDistance = 0.0F;
 
-            if (sender.getEntityWorld().getGameRules().getGameRuleBooleanValue("sendCommandFeedback"))
-            {
+            if (sender.getEntityWorld().getGameRules().getGameRuleBooleanValue("sendCommandFeedback")) {
                 entityplayermp.addChatMessage(new ChatComponentTranslation("gameMode.changed", new Object[0]));
             }
 
             ChatComponentTranslation chatcomponenttranslation = new ChatComponentTranslation("gameMode." + gametype.getName(), new Object[0]);
 
-            if (entityplayermp != sender)
-            {
-                notifyOperators(sender, this, 1, "commands.gamemode.success.other", new Object[] {entityplayermp.getName(), chatcomponenttranslation});
+            if (entityplayermp != sender) {
+                notifyOperators(sender, this, 1, "commands.gamemode.success.other", new Object[]{entityplayermp.getName(), chatcomponenttranslation});
+            } else {
+                notifyOperators(sender, this, 1, "commands.gamemode.success.self", new Object[]{chatcomponenttranslation});
             }
-            else
-            {
-                notifyOperators(sender, this, 1, "commands.gamemode.success.self", new Object[] {chatcomponenttranslation});
-            }
         }
     }
 
-    protected WorldSettings.GameType getGameModeFromCommand(ICommandSender p_71539_1_, String p_71539_2_) throws CommandException
-    {
-        return !p_71539_2_.equalsIgnoreCase(WorldSettings.GameType.SURVIVAL.getName()) && !p_71539_2_.equalsIgnoreCase("s") ? (!p_71539_2_.equalsIgnoreCase(WorldSettings.GameType.CREATIVE.getName()) && !p_71539_2_.equalsIgnoreCase("c") ? (!p_71539_2_.equalsIgnoreCase(WorldSettings.GameType.ADVENTURE.getName()) && !p_71539_2_.equalsIgnoreCase("a") ? (!p_71539_2_.equalsIgnoreCase(WorldSettings.GameType.SPECTATOR.getName()) && !p_71539_2_.equalsIgnoreCase("sp") ? WorldSettings.getGameTypeById(parseInt(p_71539_2_, 0, WorldSettings.GameType.values().length - 2)) : WorldSettings.GameType.SPECTATOR) : WorldSettings.GameType.ADVENTURE) : WorldSettings.GameType.CREATIVE) : WorldSettings.GameType.SURVIVAL;
+    protected WorldSettings.GameType getGameModeFromCommand(ICommandSender p_71539_1_, String p_71539_2_) throws CommandException {
+        return !p_71539_2_.equalsIgnoreCase(WorldSettings.GameType.SURVIVAL.getName()) && !p_71539_2_.equalsIgnoreCase("s") ? (!p_71539_2_.equalsIgnoreCase(WorldSettings.GameType.CREATIVE.getName()) && !p_71539_2_.equalsIgnoreCase("c") ? (!p_71539_2_.equalsIgnoreCase(WorldSettings.GameType.ADVENTURE.getName()) && !p_71539_2_.equalsIgnoreCase("a") ? (!p_71539_2_.equalsIgnoreCase(WorldSettings.GameType.SPECTATOR.getName()) && !p_71539_2_.equalsIgnoreCase("sp") ? WorldSettings
+                .getGameTypeById(parseInt(p_71539_2_, 0, WorldSettings.GameType.values().length - 2)) : WorldSettings.GameType.SPECTATOR) : WorldSettings.GameType.ADVENTURE) : WorldSettings.GameType.CREATIVE) : WorldSettings.GameType.SURVIVAL;
     }
 
-    public List addTabCompletionOptions(ICommandSender sender, String[] args, BlockPos pos)
-    {
-        return args.length == 1 ? getListOfStringsMatchingLastWord(args, new String[] {"survival", "creative", "adventure", "spectator"}): (args.length == 2 ? getListOfStringsMatchingLastWord(args, this.getListOfPlayerUsernames()) : null);
+    public List addTabCompletionOptions(ICommandSender sender, String[] args, BlockPos pos) {
+        return args.length == 1 ? getListOfStringsMatchingLastWord(args, new String[]{"survival", "creative", "adventure", "spectator"}) : (args.length == 2 ? getListOfStringsMatchingLastWord(args, this.getListOfPlayerUsernames()) : null);
     }
 
-    protected String[] getListOfPlayerUsernames()
-    {
+    protected String[] getListOfPlayerUsernames() {
         return MinecraftServer.getServer().getAllUsernames();
     }
 
-    public boolean isUsernameIndex(String[] args, int index)
-    {
+    public boolean isUsernameIndex(String[] args, int index) {
         return index == 1;
     }
+
+    // CraftBukkit start - fix decompiler error
+    @Override
+    public int compareTo(Object o) {
+        return compareTo((ICommand) o);
+    }
+    // CraftBukkit end
 }
