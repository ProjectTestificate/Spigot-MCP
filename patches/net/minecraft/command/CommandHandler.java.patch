--- decompiled\net\minecraft\command\CommandHandler.java
+++ src\main\java\net\minecraft\command\CommandHandler.java
@@ -1,228 +1,188 @@
 package net.minecraft.command;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-import com.google.common.collect.Sets;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 import java.util.Map.Entry;
+import java.util.Set;
+
 import net.minecraft.entity.Entity;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.ChatComponentTranslation;
 import net.minecraft.util.EnumChatFormatting;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class CommandHandler implements ICommandManager
-{
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
+
+public class CommandHandler implements ICommandManager {
+
     private static final Logger logger = LogManager.getLogger();
     private final Map commandMap = Maps.newHashMap();
     private final Set commandSet = Sets.newHashSet();
     private static final String __OBFID = "CL_00001765";
 
-    public int executeCommand(ICommandSender sender, String rawCommand)
-    {
+    public int executeCommand(ICommandSender sender, String rawCommand) {
         rawCommand = rawCommand.trim();
 
-        if (rawCommand.startsWith("/"))
-        {
+        if (rawCommand.startsWith("/")) {
             rawCommand = rawCommand.substring(1);
         }
 
         String[] astring = rawCommand.split(" ");
         String s1 = astring[0];
         astring = dropFirstString(astring);
-        ICommand icommand = (ICommand)this.commandMap.get(s1);
+        ICommand icommand = (ICommand) this.commandMap.get(s1);
         int i = this.getUsernameIndex(icommand, astring);
         int j = 0;
         ChatComponentTranslation chatcomponenttranslation;
 
-        if (icommand == null)
-        {
+        if (icommand == null) {
             chatcomponenttranslation = new ChatComponentTranslation("commands.generic.notFound", new Object[0]);
             chatcomponenttranslation.getChatStyle().setColor(EnumChatFormatting.RED);
             sender.addChatMessage(chatcomponenttranslation);
-        }
-        else if (icommand.canCommandSenderUse(sender))
-        {
-            if (i > -1)
-            {
+        } else if (icommand.canCommandSenderUse(sender)) {
+            if (i > -1) {
                 List list = PlayerSelector.matchEntities(sender, astring[i], Entity.class);
                 String s2 = astring[i];
                 sender.setCommandStat(CommandResultStats.Type.AFFECTED_ENTITIES, list.size());
                 Iterator iterator = list.iterator();
 
-                while (iterator.hasNext())
-                {
-                    Entity entity = (Entity)iterator.next();
+                while (iterator.hasNext()) {
+                    Entity entity = (Entity) iterator.next();
                     astring[i] = entity.getUniqueID().toString();
 
-                    if (this.tryExecute(sender, astring, icommand, rawCommand))
-                    {
+                    if (this.tryExecute(sender, astring, icommand, rawCommand)) {
                         ++j;
                     }
                 }
 
                 astring[i] = s2;
-            }
-            else
-            {
+            } else {
                 sender.setCommandStat(CommandResultStats.Type.AFFECTED_ENTITIES, 1);
 
-                if (this.tryExecute(sender, astring, icommand, rawCommand))
-                {
+                if (this.tryExecute(sender, astring, icommand, rawCommand)) {
                     ++j;
                 }
             }
-        }
-        else
-        {
+        } else {
             chatcomponenttranslation = new ChatComponentTranslation("commands.generic.permission", new Object[0]);
             chatcomponenttranslation.getChatStyle().setColor(EnumChatFormatting.RED);
             sender.addChatMessage(chatcomponenttranslation);
         }
 
         sender.setCommandStat(CommandResultStats.Type.SUCCESS_COUNT, j);
         return j;
     }
 
-    protected boolean tryExecute(ICommandSender sender, String[] args, ICommand command, String input)
-    {
+    protected boolean tryExecute(ICommandSender sender, String[] args, ICommand command, String input) {
         ChatComponentTranslation chatcomponenttranslation;
 
-        try
-        {
+        try {
             command.execute(sender, args);
             return true;
-        }
-        catch (WrongUsageException wrongusageexception)
-        {
-            chatcomponenttranslation = new ChatComponentTranslation("commands.generic.usage", new Object[] {new ChatComponentTranslation(wrongusageexception.getMessage(), wrongusageexception.getErrorObjects())});
+        } catch (WrongUsageException wrongusageexception) {
+            chatcomponenttranslation = new ChatComponentTranslation("commands.generic.usage", new Object[]{new ChatComponentTranslation(wrongusageexception.getMessage(), wrongusageexception.getErrorObjects())});
             chatcomponenttranslation.getChatStyle().setColor(EnumChatFormatting.RED);
             sender.addChatMessage(chatcomponenttranslation);
-        }
-        catch (CommandException commandexception)
-        {
+        } catch (CommandException commandexception) {
             chatcomponenttranslation = new ChatComponentTranslation(commandexception.getMessage(), commandexception.getErrorObjects());
             chatcomponenttranslation.getChatStyle().setColor(EnumChatFormatting.RED);
             sender.addChatMessage(chatcomponenttranslation);
-        }
-        catch (Throwable throwable)
-        {
+        } catch (Throwable throwable) {
             chatcomponenttranslation = new ChatComponentTranslation("commands.generic.exception", new Object[0]);
             chatcomponenttranslation.getChatStyle().setColor(EnumChatFormatting.RED);
             sender.addChatMessage(chatcomponenttranslation);
             logger.error("Couldn\'t process command: \'" + input + "\'", throwable);
         }
 
         return false;
     }
 
-    public ICommand registerCommand(ICommand command)
-    {
+    public ICommand registerCommand(ICommand command) {
         this.commandMap.put(command.getName(), command);
         this.commandSet.add(command);
         Iterator iterator = command.getAliases().iterator();
 
-        while (iterator.hasNext())
-        {
-            String s = (String)iterator.next();
-            ICommand icommand1 = (ICommand)this.commandMap.get(s);
+        while (iterator.hasNext()) {
+            String s = (String) iterator.next();
+            ICommand icommand1 = (ICommand) this.commandMap.get(s);
 
-            if (icommand1 == null || !icommand1.getName().equals(s))
-            {
+            if (icommand1 == null || !icommand1.getName().equals(s)) {
                 this.commandMap.put(s, command);
             }
         }
 
         return command;
     }
 
-    private static String[] dropFirstString(String[] input)
-    {
+    private static String[] dropFirstString(String[] input) {
         String[] astring1 = new String[input.length - 1];
         System.arraycopy(input, 1, astring1, 0, input.length - 1);
         return astring1;
     }
 
-    public List getTabCompletionOptions(ICommandSender sender, String input, BlockPos pos)
-    {
+    public List getTabCompletionOptions(ICommandSender sender, String input, BlockPos pos) {
         String[] astring = input.split(" ", -1);
         String s1 = astring[0];
 
-        if (astring.length == 1)
-        {
+        if (astring.length == 1) {
             ArrayList arraylist = Lists.newArrayList();
             Iterator iterator = this.commandMap.entrySet().iterator();
 
-            while (iterator.hasNext())
-            {
-                Entry entry = (Entry)iterator.next();
+            while (iterator.hasNext()) {
+                Entry entry = (Entry) iterator.next();
 
-                if (CommandBase.doesStringStartWith(s1, (String)entry.getKey()) && ((ICommand)entry.getValue()).canCommandSenderUse(sender))
-                {
+                if (CommandBase.doesStringStartWith(s1, (String) entry.getKey()) && ((ICommand) entry.getValue()).canCommandSenderUse(sender)) {
                     arraylist.add(entry.getKey());
                 }
             }
 
             return arraylist;
-        }
-        else
-        {
-            if (astring.length > 1)
-            {
-                ICommand icommand = (ICommand)this.commandMap.get(s1);
+        } else {
+            if (astring.length > 1) {
+                ICommand icommand = (ICommand) this.commandMap.get(s1);
 
-                if (icommand != null && icommand.canCommandSenderUse(sender))
-                {
+                if (icommand != null && icommand.canCommandSenderUse(sender)) {
                     return icommand.addTabCompletionOptions(sender, dropFirstString(astring), pos);
                 }
             }
 
             return null;
         }
     }
 
-    public List getPossibleCommands(ICommandSender sender)
-    {
+    public List getPossibleCommands(ICommandSender sender) {
         ArrayList arraylist = Lists.newArrayList();
         Iterator iterator = this.commandSet.iterator();
 
-        while (iterator.hasNext())
-        {
-            ICommand icommand = (ICommand)iterator.next();
+        while (iterator.hasNext()) {
+            ICommand icommand = (ICommand) iterator.next();
 
-            if (icommand.canCommandSenderUse(sender))
-            {
+            if (icommand.canCommandSenderUse(sender)) {
                 arraylist.add(icommand);
             }
         }
 
         return arraylist;
     }
 
-    public Map getCommands()
-    {
+    public Map getCommands() {
         return this.commandMap;
     }
 
-    private int getUsernameIndex(ICommand command, String[] args)
-    {
-        if (command == null)
-        {
+    private int getUsernameIndex(ICommand command, String[] args) {
+        if (command == null) {
             return -1;
-        }
-        else
-        {
-            for (int i = 0; i < args.length; ++i)
-            {
-                if (command.isUsernameIndex(args, i) && PlayerSelector.matchesMultiplePlayers(args[i]))
-                {
+        } else {
+            for (int i = 0; i < args.length; ++i) {
+                if (command.isUsernameIndex(args, i) && PlayerSelector.matchesMultiplePlayers(args[i])) {
                     return i;
                 }
             }
 
             return -1;
