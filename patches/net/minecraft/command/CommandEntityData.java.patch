--- decompiled\net\minecraft\command\CommandEntityData.java
+++ src\main\java\net\minecraft\command\CommandEntityData.java
@@ -1,87 +1,70 @@
 package net.minecraft.command;
 
 import java.util.List;
+
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.nbt.JsonToNBT;
 import net.minecraft.nbt.NBTException;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.BlockPos;
 
-public class CommandEntityData extends CommandBase
-{
+public class CommandEntityData extends CommandBase {
+
     private static final String __OBFID = "CL_00002345";
 
-    public String getName()
-    {
+    public String getName() {
         return "entitydata";
     }
 
-    public int getRequiredPermissionLevel()
-    {
+    public int getRequiredPermissionLevel() {
         return 2;
     }
 
-    public String getCommandUsage(ICommandSender sender)
-    {
+    public String getCommandUsage(ICommandSender sender) {
         return "commands.entitydata.usage";
     }
 
-    public void execute(ICommandSender sender, String[] args) throws CommandException
-    {
-        if (args.length < 2)
-        {
+    public void execute(ICommandSender sender, String[] args) throws CommandException {
+        if (args.length < 2) {
             throw new WrongUsageException("commands.entitydata.usage", new Object[0]);
-        }
-        else
-        {
+        } else {
             Entity entity = func_175768_b(sender, args[0]);
 
-            if (entity instanceof EntityPlayer)
-            {
-                throw new CommandException("commands.entitydata.noPlayers", new Object[] {entity.getDisplayName()});
-            }
-            else
-            {
+            if (entity instanceof EntityPlayer) {
+                throw new CommandException("commands.entitydata.noPlayers", new Object[]{entity.getDisplayName()});
+            } else {
                 NBTTagCompound nbttagcompound = new NBTTagCompound();
                 entity.writeToNBT(nbttagcompound);
-                NBTTagCompound nbttagcompound1 = (NBTTagCompound)nbttagcompound.copy();
+                NBTTagCompound nbttagcompound1 = (NBTTagCompound) nbttagcompound.copy();
                 NBTTagCompound nbttagcompound2;
 
-                try
-                {
+                try {
                     nbttagcompound2 = JsonToNBT.func_180713_a(getChatComponentFromNthArg(sender, args, 1).getUnformattedText());
+                } catch (NBTException nbtexception) {
+                    throw new CommandException("commands.entitydata.tagError", new Object[]{nbtexception.getMessage()});
                 }
-                catch (NBTException nbtexception)
-                {
-                    throw new CommandException("commands.entitydata.tagError", new Object[] {nbtexception.getMessage()});
-                }
 
                 nbttagcompound2.removeTag("UUIDMost");
                 nbttagcompound2.removeTag("UUIDLeast");
                 nbttagcompound.merge(nbttagcompound2);
 
-                if (nbttagcompound.equals(nbttagcompound1))
-                {
-                    throw new CommandException("commands.entitydata.failed", new Object[] {nbttagcompound.toString()});
-                }
-                else
-                {
+                if (nbttagcompound.equals(nbttagcompound1)) {
+                    throw new CommandException("commands.entitydata.failed", new Object[]{nbttagcompound.toString()});
+                } else {
                     entity.readFromNBT(nbttagcompound);
-                    notifyOperators(sender, this, "commands.entitydata.success", new Object[] {nbttagcompound.toString()});
+                    notifyOperators(sender, this, "commands.entitydata.success", new Object[]{nbttagcompound.toString()});
                 }
             }
         }
     }
 
-    public List addTabCompletionOptions(ICommandSender sender, String[] args, BlockPos pos)
-    {
+    public List addTabCompletionOptions(ICommandSender sender, String[] args, BlockPos pos) {
         return args.length == 1 ? getListOfStringsMatchingLastWord(args, MinecraftServer.getServer().getAllUsernames()) : null;
     }
 
-    public boolean isUsernameIndex(String[] args, int index)
-    {
+    public boolean isUsernameIndex(String[] args, int index) {
         return index == 0;
     }
 }
