--- decompiled\net\minecraft\inventory\InventoryMerchant.java
+++ src\main\java\net\minecraft\inventory\InventoryMerchant.java
@@ -1,240 +1,230 @@
 package net.minecraft.inventory;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import net.minecraft.entity.IMerchant;
+import net.minecraft.entity.passive.EntityVillager;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.ChatComponentText;
 import net.minecraft.util.ChatComponentTranslation;
 import net.minecraft.util.IChatComponent;
 import net.minecraft.village.MerchantRecipe;
 import net.minecraft.village.MerchantRecipeList;
 
-public class InventoryMerchant implements IInventory
-{
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.entity.CraftVillager;
+import org.bukkit.inventory.InventoryHolder;
+
+public class InventoryMerchant implements IInventory {
+
     private final IMerchant theMerchant;
     private ItemStack[] theInventory = new ItemStack[3];
     private final EntityPlayer thePlayer;
     private MerchantRecipe currentRecipe;
     private int currentRecipeIndex;
     private static final String __OBFID = "CL_00001756";
 
-    public InventoryMerchant(EntityPlayer p_i1820_1_, IMerchant p_i1820_2_)
-    {
+    // CraftBukkit start - add fields and methods
+    public List transaction = new ArrayList();
+    private int maxStack = MAX_STACK;
+
+    public net.minecraft.item.ItemStack[] getContents() {
+        return this.theInventory;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List getViewers() {
+        return transaction;
+    }
+
+    public void setMaxStackSize(int i) {
+        maxStack = i;
+    }
+
+    public InventoryHolder getOwner() {
+        return (CraftVillager) ((EntityVillager) this.theMerchant).getBukkitEntity();
+    }
+    // CraftBukkit end
+
+    public InventoryMerchant(EntityPlayer p_i1820_1_, IMerchant p_i1820_2_) {
         this.thePlayer = p_i1820_1_;
         this.theMerchant = p_i1820_2_;
     }
 
-    public int getSizeInventory()
-    {
+    public int getSizeInventory() {
         return this.theInventory.length;
     }
 
-    public ItemStack getStackInSlot(int index)
-    {
+    public ItemStack getStackInSlot(int index) {
         return this.theInventory[index];
     }
 
-    public ItemStack decrStackSize(int index, int count)
-    {
-        if (this.theInventory[index] != null)
-        {
+    public ItemStack decrStackSize(int index, int count) {
+        if (this.theInventory[index] != null) {
             ItemStack itemstack;
 
-            if (index == 2)
-            {
+            if (index == 2) {
                 itemstack = this.theInventory[index];
                 this.theInventory[index] = null;
                 return itemstack;
-            }
-            else if (this.theInventory[index].stackSize <= count)
-            {
+            } else if (this.theInventory[index].stackSize <= count) {
                 itemstack = this.theInventory[index];
                 this.theInventory[index] = null;
 
-                if (this.inventoryResetNeededOnSlotChange(index))
-                {
+                if (this.inventoryResetNeededOnSlotChange(index)) {
                     this.resetRecipeAndSlots();
                 }
 
                 return itemstack;
-            }
-            else
-            {
+            } else {
                 itemstack = this.theInventory[index].splitStack(count);
 
-                if (this.theInventory[index].stackSize == 0)
-                {
+                if (this.theInventory[index].stackSize == 0) {
                     this.theInventory[index] = null;
                 }
 
-                if (this.inventoryResetNeededOnSlotChange(index))
-                {
+                if (this.inventoryResetNeededOnSlotChange(index)) {
                     this.resetRecipeAndSlots();
                 }
 
                 return itemstack;
             }
-        }
-        else
-        {
+        } else {
             return null;
         }
     }
 
-    private boolean inventoryResetNeededOnSlotChange(int p_70469_1_)
-    {
+    private boolean inventoryResetNeededOnSlotChange(int p_70469_1_) {
         return p_70469_1_ == 0 || p_70469_1_ == 1;
     }
 
-    public ItemStack getStackInSlotOnClosing(int index)
-    {
-        if (this.theInventory[index] != null)
-        {
+    public ItemStack getStackInSlotOnClosing(int index) {
+        if (this.theInventory[index] != null) {
             ItemStack itemstack = this.theInventory[index];
             this.theInventory[index] = null;
             return itemstack;
-        }
-        else
-        {
+        } else {
             return null;
         }
     }
 
-    public void setInventorySlotContents(int index, ItemStack stack)
-    {
+    public void setInventorySlotContents(int index, ItemStack stack) {
         this.theInventory[index] = stack;
 
-        if (stack != null && stack.stackSize > this.getInventoryStackLimit())
-        {
+        if (stack != null && stack.stackSize > this.getInventoryStackLimit()) {
             stack.stackSize = this.getInventoryStackLimit();
         }
 
-        if (this.inventoryResetNeededOnSlotChange(index))
-        {
+        if (this.inventoryResetNeededOnSlotChange(index)) {
             this.resetRecipeAndSlots();
         }
     }
 
-    public String getName()
-    {
+    public String getName() {
         return "mob.villager";
     }
 
-    public boolean hasCustomName()
-    {
+    public boolean hasCustomName() {
         return false;
     }
 
-    public IChatComponent getDisplayName()
-    {
-        return (IChatComponent)(this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatComponentTranslation(this.getName(), new Object[0]));
+    public IChatComponent getDisplayName() {
+        return (IChatComponent) (this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatComponentTranslation(this.getName(), new Object[0]));
     }
 
-    public int getInventoryStackLimit()
-    {
-        return 64;
+    public int getInventoryStackLimit() {
+        return maxStack; // CraftBukkit
     }
 
-    public boolean isUseableByPlayer(EntityPlayer player)
-    {
+    public boolean isUseableByPlayer(EntityPlayer player) {
         return this.theMerchant.getCustomer() == player;
     }
 
-    public void openInventory(EntityPlayer player) {}
+    public void openInventory(EntityPlayer player) {
+    }
 
-    public void closeInventory(EntityPlayer player) {}
+    public void closeInventory(EntityPlayer player) {
+    }
 
-    public boolean isItemValidForSlot(int index, ItemStack stack)
-    {
+    public boolean isItemValidForSlot(int index, ItemStack stack) {
         return true;
     }
 
-    public void markDirty()
-    {
+    public void markDirty() {
         this.resetRecipeAndSlots();
     }
 
-    public void resetRecipeAndSlots()
-    {
+    public void resetRecipeAndSlots() {
         this.currentRecipe = null;
         ItemStack itemstack = this.theInventory[0];
         ItemStack itemstack1 = this.theInventory[1];
 
-        if (itemstack == null)
-        {
+        if (itemstack == null) {
             itemstack = itemstack1;
             itemstack1 = null;
         }
 
-        if (itemstack == null)
-        {
-            this.setInventorySlotContents(2, (ItemStack)null);
-        }
-        else
-        {
+        if (itemstack == null) {
+            this.setInventorySlotContents(2, (ItemStack) null);
+        } else {
             MerchantRecipeList merchantrecipelist = this.theMerchant.getRecipes(this.thePlayer);
 
-            if (merchantrecipelist != null)
-            {
+            if (merchantrecipelist != null) {
                 MerchantRecipe merchantrecipe = merchantrecipelist.canRecipeBeUsed(itemstack, itemstack1, this.currentRecipeIndex);
 
-                if (merchantrecipe != null && !merchantrecipe.isRecipeDisabled())
-                {
+                if (merchantrecipe != null && !merchantrecipe.isRecipeDisabled()) {
                     this.currentRecipe = merchantrecipe;
                     this.setInventorySlotContents(2, merchantrecipe.getItemToSell().copy());
-                }
-                else if (itemstack1 != null)
-                {
+                } else if (itemstack1 != null) {
                     merchantrecipe = merchantrecipelist.canRecipeBeUsed(itemstack1, itemstack, this.currentRecipeIndex);
 
-                    if (merchantrecipe != null && !merchantrecipe.isRecipeDisabled())
-                    {
+                    if (merchantrecipe != null && !merchantrecipe.isRecipeDisabled()) {
                         this.currentRecipe = merchantrecipe;
                         this.setInventorySlotContents(2, merchantrecipe.getItemToSell().copy());
+                    } else {
+                        this.setInventorySlotContents(2, (ItemStack) null);
                     }
-                    else
-                    {
-                        this.setInventorySlotContents(2, (ItemStack)null);
-                    }
+                } else {
+                    this.setInventorySlotContents(2, (ItemStack) null);
                 }
-                else
-                {
-                    this.setInventorySlotContents(2, (ItemStack)null);
-                }
             }
         }
 
         this.theMerchant.verifySellingItem(this.getStackInSlot(2));
     }
 
-    public MerchantRecipe getCurrentRecipe()
-    {
+    public MerchantRecipe getCurrentRecipe() {
         return this.currentRecipe;
     }
 
-    public void setCurrentRecipeIndex(int p_70471_1_)
-    {
+    public void setCurrentRecipeIndex(int p_70471_1_) {
         this.currentRecipeIndex = p_70471_1_;
         this.resetRecipeAndSlots();
     }
 
-    public int getField(int id)
-    {
+    public int getField(int id) {
         return 0;
     }
 
-    public void setField(int id, int value) {}
+    public void setField(int id, int value) {
+    }
 
-    public int getFieldCount()
-    {
+    public int getFieldCount() {
         return 0;
     }
 
-    public void clear()
-    {
-        for (int i = 0; i < this.theInventory.length; ++i)
-        {
+    public void clear() {
+        for (int i = 0; i < this.theInventory.length; ++i) {
             this.theInventory[i] = null;
         }
     }
 }
