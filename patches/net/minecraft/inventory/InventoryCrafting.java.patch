--- decompiled\net\minecraft\inventory\InventoryCrafting.java
+++ src\main\java\net\minecraft\inventory\InventoryCrafting.java
@@ -1,158 +1,183 @@
 package net.minecraft.inventory;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.ItemStack;
+import net.minecraft.item.crafting.IRecipe;
 import net.minecraft.util.ChatComponentText;
 import net.minecraft.util.ChatComponentTranslation;
 import net.minecraft.util.IChatComponent;
 
-public class InventoryCrafting implements IInventory
-{
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.event.inventory.InventoryType;
+import org.bukkit.inventory.InventoryHolder;
+
+public class InventoryCrafting implements IInventory {
+
     private final ItemStack[] stackList;
     private final int inventoryWidth;
     private final int inventoryHeight;
     private final Container eventHandler;
     private static final String __OBFID = "CL_00001743";
 
-    public InventoryCrafting(Container p_i1807_1_, int width, int height)
-    {
+    // CraftBukkit start - add fields
+    public List transaction = new ArrayList();
+    public IRecipe currentRecipe;
+    public IInventory resultInventory;
+    private EntityPlayer owner;
+    private int maxStack = MAX_STACK;
+
+    public net.minecraft.item.ItemStack[] getContents() {
+        return this.stackList;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public InventoryType getInvType() {
+        return stackList.length == 4 ? InventoryType.CRAFTING : InventoryType.WORKBENCH;
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public java.util.List getViewers() {
+        return transaction;
+    }
+
+    public InventoryHolder getOwner() {
+        return owner.getBukkitEntity();
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+        resultInventory.setMaxStackSize(size);
+    }
+
+    public InventoryCrafting(Container container, int i, int j, EntityPlayer player) {
+        this(container, i, j);
+        this.owner = player;
+    }
+    // CraftBukkit end
+
+    public InventoryCrafting(Container p_i1807_1_, int width, int height) {
         int k = width * height;
         this.stackList = new ItemStack[k];
         this.eventHandler = p_i1807_1_;
         this.inventoryWidth = width;
         this.inventoryHeight = height;
     }
 
-    public int getSizeInventory()
-    {
+    public int getSizeInventory() {
         return this.stackList.length;
     }
 
-    public ItemStack getStackInSlot(int index)
-    {
+    public ItemStack getStackInSlot(int index) {
         return index >= this.getSizeInventory() ? null : this.stackList[index];
     }
 
-    public ItemStack getStackInRowAndColumn(int row, int column)
-    {
+    public ItemStack getStackInRowAndColumn(int row, int column) {
         return row >= 0 && row < this.inventoryWidth && column >= 0 && column <= this.inventoryHeight ? this.getStackInSlot(row + column * this.inventoryWidth) : null;
     }
 
-    public String getName()
-    {
+    public String getName() {
         return "container.crafting";
     }
 
-    public boolean hasCustomName()
-    {
+    public boolean hasCustomName() {
         return false;
     }
 
-    public IChatComponent getDisplayName()
-    {
-        return (IChatComponent)(this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatComponentTranslation(this.getName(), new Object[0]));
+    public IChatComponent getDisplayName() {
+        return (IChatComponent) (this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatComponentTranslation(this.getName(), new Object[0]));
     }
 
-    public ItemStack getStackInSlotOnClosing(int index)
-    {
-        if (this.stackList[index] != null)
-        {
+    public ItemStack getStackInSlotOnClosing(int index) {
+        if (this.stackList[index] != null) {
             ItemStack itemstack = this.stackList[index];
             this.stackList[index] = null;
             return itemstack;
-        }
-        else
-        {
+        } else {
             return null;
         }
     }
 
-    public ItemStack decrStackSize(int index, int count)
-    {
-        if (this.stackList[index] != null)
-        {
+    public ItemStack decrStackSize(int index, int count) {
+        if (this.stackList[index] != null) {
             ItemStack itemstack;
 
-            if (this.stackList[index].stackSize <= count)
-            {
+            if (this.stackList[index].stackSize <= count) {
                 itemstack = this.stackList[index];
                 this.stackList[index] = null;
                 this.eventHandler.onCraftMatrixChanged(this);
                 return itemstack;
-            }
-            else
-            {
+            } else {
                 itemstack = this.stackList[index].splitStack(count);
 
-                if (this.stackList[index].stackSize == 0)
-                {
+                if (this.stackList[index].stackSize == 0) {
                     this.stackList[index] = null;
                 }
 
                 this.eventHandler.onCraftMatrixChanged(this);
                 return itemstack;
             }
-        }
-        else
-        {
+        } else {
             return null;
         }
     }
 
-    public void setInventorySlotContents(int index, ItemStack stack)
-    {
+    public void setInventorySlotContents(int index, ItemStack stack) {
         this.stackList[index] = stack;
         this.eventHandler.onCraftMatrixChanged(this);
     }
 
-    public int getInventoryStackLimit()
-    {
+    public int getInventoryStackLimit() {
         return 64;
     }
 
-    public void markDirty() {}
+    public void markDirty() {
+    }
 
-    public boolean isUseableByPlayer(EntityPlayer player)
-    {
+    public boolean isUseableByPlayer(EntityPlayer player) {
         return true;
     }
 
-    public void openInventory(EntityPlayer player) {}
+    public void openInventory(EntityPlayer player) {
+    }
 
-    public void closeInventory(EntityPlayer player) {}
+    public void closeInventory(EntityPlayer player) {
+    }
 
-    public boolean isItemValidForSlot(int index, ItemStack stack)
-    {
+    public boolean isItemValidForSlot(int index, ItemStack stack) {
         return true;
     }
 
-    public int getField(int id)
-    {
+    public int getField(int id) {
         return 0;
     }
 
-    public void setField(int id, int value) {}
+    public void setField(int id, int value) {
+    }
 
-    public int getFieldCount()
-    {
+    public int getFieldCount() {
         return 0;
     }
 
-    public void clear()
-    {
-        for (int i = 0; i < this.stackList.length; ++i)
-        {
+    public void clear() {
+        for (int i = 0; i < this.stackList.length; ++i) {
             this.stackList[i] = null;
         }
     }
 
-    public int getHeight()
-    {
+    public int getHeight() {
         return this.inventoryHeight;
     }
 
-    public int getWidth()
-    {
+    public int getWidth() {
         return this.inventoryWidth;
     }
 }
