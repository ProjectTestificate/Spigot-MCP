--- decompiled\net\minecraft\inventory\ContainerEnchantment.java
+++ src\main\java\net\minecraft\inventory\ContainerEnchantment.java
@@ -1,54 +1,117 @@
 package net.minecraft.inventory;
 
+import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
 import java.util.Random;
+
 import net.minecraft.enchantment.EnchantmentData;
 import net.minecraft.enchantment.EnchantmentHelper;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.InventoryPlayer;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.Items;
 import net.minecraft.item.EnumDyeColor;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.BlockPos;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftInventoryEnchanting;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.enchantments.Enchantment;
+import org.bukkit.entity.Player;
+import org.bukkit.event.enchantment.EnchantItemEvent;
+import org.bukkit.event.enchantment.PrepareItemEnchantEvent;
+import org.bukkit.inventory.InventoryHolder;
+
 public class ContainerEnchantment extends Container
 {
-    public IInventory tableInventory;
+
+    // CraftBukkit - make type specific (changed from IInventory)
+    public ContainerEnchantTableInventory tableInventory; // SpigotMCP -- Initialize in constructor (like MCP does)
     private World worldPointer;
     private BlockPos position;
     private Random rand;
     public int xpSeed;
     public int[] enchantLevels;
     public int[] field_178151_h;
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity = null;
+    private Player player;
+    // CraftBukkit end
     private static final String __OBFID = "CL_00001745";
 
-    @SideOnly(Side.CLIENT)
-    public ContainerEnchantment(InventoryPlayer playerInv, World worldIn)
+    // SpigotMCP Start -- Convert from Annoynomous Inner Class to Inner class
+    // CraftBukkit private -> public
+    public class ContainerEnchantTableInventory extends InventoryBasic
     {
-        this(playerInv, worldIn, BlockPos.ORIGIN);
+
+        private static final String __OBFID = "CL_00001746";
+
+        ContainerEnchantTableInventory(ContainerEnchantment containerenchanttable, String s, boolean flag, int i)
+        {
+            super(s, flag, i);
+        }
+
+        // CraftBukkit start
+        public List transaction = new ArrayList();
+        public Player player;
+        private int maxStack = 64; // SpigotMCP -- Use 64 instead of MAX_STACK
+
+        public ItemStack[] getContents()
+        {
+            return this.inventoryContents;
+        }
+
+        public void onOpen(CraftHumanEntity who)
+        {
+            transaction.add(who);
+        }
+
+        public void onClose(CraftHumanEntity who)
+        {
+            transaction.remove(who);
+        }
+
+        public List getViewers()
+        {
+            return transaction;
+        }
+
+        public InventoryHolder getOwner()
+        {
+            return this.player;
+        }
+
+        public void setMaxStackSize(int size)
+        {
+            maxStack = size;
+        }
+        // CraftBukkit end
+
+        public int getInventoryStackLimit()
+        {
+            return maxStack; // CraftBukkit
+        }
+
+        public void markDirty()
+        {
+            super.markDirty();
+            ContainerEnchantment.this.onCraftMatrixChanged(this);
+        }
+
     }
+    // SpigotMCP
 
     public ContainerEnchantment(InventoryPlayer playerInv, World worldIn, BlockPos pos)
     {
-        this.tableInventory = new InventoryBasic("Enchant", true, 2)
-        {
-            private static final String __OBFID = "CL_00001746";
-            public int getInventoryStackLimit()
-            {
-                return 64;
-            }
-            public void markDirty()
-            {
-                super.markDirty();
-                ContainerEnchantment.this.onCraftMatrixChanged(this);
-            }
-        };
+        this.tableInventory = new ContainerEnchantTableInventory(this, "Enchant", true, 2);
         this.rand = new Random();
         this.enchantLevels = new int[3];
         this.field_178151_h = new int[] { -1, -1, -1};
         this.worldPointer = worldIn;
         this.position = pos;
@@ -85,10 +148,15 @@
 
         for (i = 0; i < 9; ++i)
         {
             this.addSlotToContainer(new Slot(playerInv, i, 8 + i * 18, 142));
         }
+
+        // CraftBukkit start
+        player = (Player)playerInv.player.getBukkitEntity();
+        tableInventory.player = player;
+        // CraftBukkit end
     }
 
     public void addCraftingToCrafters(ICrafting listener)
     {
         super.addCraftingToCrafters(listener);
@@ -116,39 +184,18 @@
             icrafting.sendProgressBarUpdate(this, 5, this.field_178151_h[1]);
             icrafting.sendProgressBarUpdate(this, 6, this.field_178151_h[2]);
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public void updateProgressBar(int id, int data)
-    {
-        if (id >= 0 && id <= 2)
-        {
-            this.enchantLevels[id] = data;
-        }
-        else if (id == 3)
-        {
-            this.xpSeed = data;
-        }
-        else if (id >= 4 && id <= 6)
-        {
-            this.field_178151_h[id - 4] = data;
-        }
-        else
-        {
-            super.updateProgressBar(id, data);
-        }
-    }
-
     public void onCraftMatrixChanged(IInventory inventoryIn)
     {
         if (inventoryIn == this.tableInventory)
         {
             ItemStack itemstack = inventoryIn.getStackInSlot(0);
             int i;
 
-            if (itemstack != null && itemstack.isItemEnchantable())
+            if (itemstack != null)   // CraftBukkit - relax condition
             {
                 if (!this.worldPointer.isRemote)
                 {
                     i = 0;
                     int j;
@@ -206,10 +253,28 @@
                         {
                             this.enchantLevels[j] = 0;
                         }
                     }
 
+                    // CraftBukkit start
+                    CraftItemStack item = CraftItemStack.asCraftMirror(itemstack);
+                    PrepareItemEnchantEvent event = new PrepareItemEnchantEvent(player, this.getBukkitView(), this.worldPointer.getWorld().getBlockAt(position.getX(), position.getY(), position.getZ()), item, this.enchantLevels, i);
+                    event.setCancelled(!itemstack.isItemEnchantable());
+                    this.worldPointer.getServer().getPluginManager().callEvent(event);
+
+                    if (event.isCancelled())
+                    {
+                        for (i = 0; i < 3; ++i)
+                        {
+                            this.enchantLevels[i] = 0;
+                        }
+
+                        return;
+                    }
+
+                    // CraftBukkit end
+
                     for (j = 0; j < 3; ++j)
                     {
                         if (this.enchantLevels[j] > 0)
                         {
                             List list = this.func_178148_a(itemstack, j, this.enchantLevels[j]);
@@ -249,35 +314,77 @@
         else if (this.enchantLevels[id] > 0 && itemstack != null && (playerIn.experienceLevel >= j && playerIn.experienceLevel >= this.enchantLevels[id] || playerIn.capabilities.isCreativeMode))
         {
             if (!this.worldPointer.isRemote)
             {
                 List list = this.func_178148_a(itemstack, id, this.enchantLevels[id]);
+
+                // CraftBukkit start - Provide an empty enchantment list
+                if (list == null)
+                {
+                    list = new ArrayList();
+                }
+
+                // CraftBukkit end
                 boolean flag = itemstack.getItem() == Items.book;
 
                 if (list != null)
                 {
-                    playerIn.removeExperienceLevel(j);
+                    // CraftBukkit start
+                    Map<Enchantment, Integer> enchants = new HashMap();
 
+                    for (Object obj : list)
+                    {
+                        EnchantmentData instance = (EnchantmentData)obj;
+                        enchants.put(org.bukkit.enchantments.Enchantment.getById(instance.enchantmentobj.effectId), instance.enchantmentLevel);
+                    }
+
+                    CraftItemStack item = CraftItemStack.asCraftMirror(itemstack);
+                    EnchantItemEvent event = new EnchantItemEvent((Player)playerIn.getBukkitEntity(), this.getBukkitView(), this.worldPointer.getWorld().getBlockAt(position.getX(), position.getY(), position.getZ()), item, this.enchantLevels[id], enchants, id);
+                    this.worldPointer.getServer().getPluginManager().callEvent(event);
+                    int level = event.getExpLevelCost();
+
+                    if (event.isCancelled() || (level > playerIn.experienceLevel && !playerIn.capabilities.isCreativeMode) || event.getEnchantsToAdd().isEmpty())
+                    {
+                        return false;
+                    }
+
                     if (flag)
                     {
                         itemstack.setItem(Items.enchanted_book);
                     }
 
-                    for (int k = 0; k < list.size(); ++k)
+                    for (Entry<Enchantment, Integer> entry : event.getEnchantsToAdd().entrySet())
                     {
-                        EnchantmentData enchantmentdata = (EnchantmentData)list.get(k);
-
-                        if (flag)
+                        try
                         {
-                            Items.enchanted_book.addEnchantment(itemstack, enchantmentdata);
+                            if (flag)
+                            {
+                                int enchantId = entry.getKey().getId();
+
+                                if (Enchantment.getById(enchantId) == null)
+                                {
+                                    continue;
+                                }
+
+                                EnchantmentData enchantment = new EnchantmentData(net.minecraft.enchantment.Enchantment.getEnchantmentById(enchantId), entry.getValue());
+                                Items.enchanted_book.addEnchantment(itemstack, enchantment);
+                            }
+                            else
+                            {
+                                item.addUnsafeEnchantment(entry.getKey(), entry.getValue());
+                            }
                         }
-                        else
+                        catch (IllegalArgumentException e)
                         {
-                            itemstack.addEnchantment(enchantmentdata.enchantmentobj, enchantmentdata.enchantmentLevel);
+                            /* Just swallow invalid enchantments */
                         }
                     }
 
+                    playerIn.removeExperienceLevel(j);
+                    // CraftBukkit end
+                    // CraftBukkit - TODO: let plugins change this
+
                     if (!playerIn.capabilities.isCreativeMode)
                     {
                         itemstack1.stackSize -= j;
 
                         if (itemstack1.stackSize <= 0)
@@ -311,21 +418,21 @@
         }
 
         return list;
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getLapisAmount()
-    {
-        ItemStack itemstack = this.tableInventory.getStackInSlot(1);
-        return itemstack == null ? 0 : itemstack.stackSize;
-    }
-
     public void onContainerClosed(EntityPlayer playerIn)
     {
         super.onContainerClosed(playerIn);
 
+        // CraftBukkit Start - If an enchantable was opened from a null location, set the world to the player's world, preventing a crash
+        if (this.worldPointer == null)
+        {
+            this.worldPointer = playerIn.getEntityWorld();
+        }
+
+        // CraftBukkit end
         if (!this.worldPointer.isRemote)
         {
             for (int i = 0; i < this.tableInventory.getSizeInventory(); ++i)
             {
                 ItemStack itemstack = this.tableInventory.getStackInSlotOnClosing(i);
@@ -338,10 +445,12 @@
         }
     }
 
     public boolean canInteractWith(EntityPlayer playerIn)
     {
+        if (!this.checkReachable) return true; // CraftBukkit
+
         return this.worldPointer.getBlockState(this.position).getBlock() != Blocks.enchanting_table ? false : playerIn.getDistanceSq((double)this.position.getX() + 0.5D, (double)this.position.getY() + 0.5D, (double)this.position.getZ() + 0.5D) <= 64.0D;
     }
 
     public ItemStack transferStackInSlot(EntityPlayer playerIn, int index)
     {
@@ -386,11 +495,15 @@
                     ((Slot)this.inventorySlots.get(0)).putStack(itemstack1.copy());
                     itemstack1.stackSize = 0;
                 }
                 else if (itemstack1.stackSize >= 1)
                 {
-                    ((Slot)this.inventorySlots.get(0)).putStack(new ItemStack(itemstack1.getItem(), 1, itemstack1.getMetadata()));
+                    // Spigot start
+                    ItemStack clone = itemstack1.copy();
+                    clone.stackSize = 1;
+                    ((Slot)this.inventorySlots.get(0)).putStack(clone);
+                    // Spigot end
                     --itemstack1.stackSize;
                 }
             }
 
             if (itemstack1.stackSize == 0)
@@ -410,6 +523,21 @@
             slot.onPickupFromSlot(playerIn, itemstack1);
         }
 
         return itemstack;
     }
+
+    // CraftBukkit start
+    @Override
+    public org.bukkit.craftbukkit.inventory.CraftInventoryView getBukkitView()
+    {
+        if (bukkitEntity != null)
+        {
+            return bukkitEntity;
+        }
+
+        CraftInventoryEnchanting inventory = new CraftInventoryEnchanting(this.tableInventory);
+        bukkitEntity = new CraftInventoryView(this.player, inventory, this);
+        return bukkitEntity;
+    }
+    // CraftBukkit end
 }
