---a/net/minecraft/inventory/Container.java
+++b/net/minecraft/inventory/Container.java
@@ -1,107 +1,112 @@
 package net.minecraft.inventory;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Sets;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
 import java.util.Set;
+
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.entity.player.InventoryPlayer;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
+import net.minecraft.network.play.server.S2FPacketSetSlot;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.MathHelper;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public abstract class Container
-{
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.Event.Result;
+import org.bukkit.event.inventory.InventoryDragEvent;
+import org.bukkit.event.inventory.InventoryType;
+import org.bukkit.inventory.InventoryView;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Sets;
+
+public abstract class Container {
+
     public List inventoryItemStacks = Lists.newArrayList();
     public List inventorySlots = Lists.newArrayList();
     public int windowId;
-    @SideOnly(Side.CLIENT)
-    private short transactionID;
     private int dragMode = -1;
     private int dragEvent;
     private final Set dragSlots = Sets.newHashSet();
     protected List crafters = Lists.newArrayList();
     private Set playerList = Sets.newHashSet();
+    private int tickCount; // Spigot
     private static final String __OBFID = "CL_00001730";
 
-    protected Slot addSlotToContainer(Slot slotIn)
-    {
+    // CraftBukkit start
+    public boolean checkReachable = true;
+
+    public abstract InventoryView getBukkitView();
+
+    public void transferTo(Container other, CraftHumanEntity player) {
+        InventoryView source = this.getBukkitView(), destination = other.getBukkitView();
+        ((CraftInventory) source.getTopInventory()).getInventory().onClose(player);
+        ((CraftInventory) source.getBottomInventory()).getInventory().onClose(player);
+        ((CraftInventory) destination.getTopInventory()).getInventory().onOpen(player);
+        ((CraftInventory) destination.getBottomInventory()).getInventory().onOpen(player);
+    }
+    // CraftBukkit end
+
+    protected Slot addSlotToContainer(Slot slotIn) {
         slotIn.slotNumber = this.inventorySlots.size();
         this.inventorySlots.add(slotIn);
-        this.inventoryItemStacks.add((Object)null);
+        this.inventoryItemStacks.add((Object) null);
         return slotIn;
     }
 
-    public void addCraftingToCrafters(ICrafting listener)
-    {
-        if (this.crafters.contains(listener))
-        {
+    public void addCraftingToCrafters(ICrafting listener) {
+        if (this.crafters.contains(listener)) {
             throw new IllegalArgumentException("Listener already listening");
-        }
-        else
-        {
+        } else {
             this.crafters.add(listener);
             listener.sendContainerAndContentsToPlayer(this, this.getInventory());
             this.detectAndSendChanges();
         }
     }
 
-    public List getInventory()
-    {
+    public List getInventory() {
         ArrayList arraylist = Lists.newArrayList();
 
-        for (int i = 0; i < this.inventorySlots.size(); ++i)
-        {
-            arraylist.add(((Slot)this.inventorySlots.get(i)).getStack());
+        for (int i = 0; i < this.inventorySlots.size(); ++i) {
+            arraylist.add(((Slot) this.inventorySlots.get(i)).getStack());
         }
 
         return arraylist;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void removeCraftingFromCrafters(ICrafting listeners)
-    {
-        this.crafters.remove(listeners);
-    }
+    public void detectAndSendChanges() {
+        for (int i = 0; i < this.inventorySlots.size(); ++i) {
+            ItemStack itemstack = ((Slot) this.inventorySlots.get(i)).getStack();
+            ItemStack itemstack1 = (ItemStack) this.inventoryItemStacks.get(i);
 
-    public void detectAndSendChanges()
-    {
-        for (int i = 0; i < this.inventorySlots.size(); ++i)
-        {
-            ItemStack itemstack = ((Slot)this.inventorySlots.get(i)).getStack();
-            ItemStack itemstack1 = (ItemStack)this.inventoryItemStacks.get(i);
-
-            if (!ItemStack.areItemStacksEqual(itemstack1, itemstack))
-            {
+            if (!ItemStack.fastMatches(itemstack1, itemstack) || (tickCount % 20 == 0 && !ItemStack.areItemStacksEqual(itemstack1, itemstack))) {// Spigot
                 itemstack1 = itemstack == null ? null : itemstack.copy();
                 this.inventoryItemStacks.set(i, itemstack1);
 
-                for (int j = 0; j < this.crafters.size(); ++j)
-                {
-                    ((ICrafting)this.crafters.get(j)).sendSlotContents(this, i, itemstack1);
+                for (int j = 0; j < this.crafters.size(); ++j) {
+                    ((ICrafting) this.crafters.get(j)).sendSlotContents(this, i, itemstack1);
                 }
             }
         }
+        tickCount++; // Spigot
     }
 
-    public boolean enchantItem(EntityPlayer playerIn, int id)
-    {
+    public boolean enchantItem(EntityPlayer playerIn, int id) {
         return false;
     }
 
-    public Slot getSlotFromInventory(IInventory inv, int slotIn)
-    {
-        for (int j = 0; j < this.inventorySlots.size(); ++j)
-        {
-            Slot slot = (Slot)this.inventorySlots.get(j);
+    public Slot getSlotFromInventory(IInventory inv, int slotIn) {
+        for (int j = 0; j < this.inventorySlots.size(); ++j) {
+            Slot slot = (Slot) this.inventorySlots.get(j);
 
-            if (slot.isSlotInInventory(inv, slotIn))
-            {
+            if (slot.isSlotInInventory(inv, slotIn)) {
                 return slot;
             }
         }
@@ -109,370 +109,340 @@
         return null;
     }
 
-    public Slot getSlot(int slotId)
-    {
-        return (Slot)this.inventorySlots.get(slotId);
+    public Slot getSlot(int slotId) {
+        return (Slot) this.inventorySlots.get(slotId);
     }
 
-    public ItemStack transferStackInSlot(EntityPlayer playerIn, int index)
-    {
-        Slot slot = (Slot)this.inventorySlots.get(index);
+    public ItemStack transferStackInSlot(EntityPlayer playerIn, int index) {
+        Slot slot = (Slot) this.inventorySlots.get(index);
         return slot != null ? slot.getStack() : null;
     }
 
-    public ItemStack slotClick(int slotId, int clickedButton, int mode, EntityPlayer playerIn)
-    {
+    public ItemStack slotClick(int slotId, int clickedButton, int mode, EntityPlayer playerIn) {
         ItemStack itemstack = null;
         InventoryPlayer inventoryplayer = playerIn.inventory;
         int i1;
         ItemStack itemstack3;
 
-        if (mode == 5)
-        {
+        if (mode == 5) {
             int l = this.dragEvent;
             this.dragEvent = getDragEvent(clickedButton);
 
-            if ((l != 1 || this.dragEvent != 2) && l != this.dragEvent)
-            {
+            if ((l != 1 || this.dragEvent != 2) && l != this.dragEvent) {
                 this.resetDrag();
-            }
-            else if (inventoryplayer.getItemStack() == null)
-            {
+            } else if (inventoryplayer.getItemStack() == null) {
                 this.resetDrag();
-            }
-            else if (this.dragEvent == 0)
-            {
+            } else if (this.dragEvent == 0) {
                 this.dragMode = extractDragMode(clickedButton);
 
-                if (func_180610_a(this.dragMode, playerIn))
-                {
+                if (func_180610_a(this.dragMode, playerIn)) {
                     this.dragEvent = 1;
                     this.dragSlots.clear();
-                }
-                else
-                {
+                } else {
                     this.resetDrag();
                 }
-            }
-            else if (this.dragEvent == 1)
-            {
-                Slot slot = (Slot)this.inventorySlots.get(slotId);
+            } else if (this.dragEvent == 1) {
+                Slot slot = (Slot) this.inventorySlots.get(slotId);
 
-                if (slot != null && canAddItemToSlot(slot, inventoryplayer.getItemStack(), true) && slot.isItemValid(inventoryplayer.getItemStack()) && inventoryplayer.getItemStack().stackSize > this.dragSlots.size() && this.canDragIntoSlot(slot))
-                {
+                if (slot != null && canAddItemToSlot(slot, inventoryplayer.getItemStack(), true) && slot.isItemValid(inventoryplayer.getItemStack()) && inventoryplayer.getItemStack().stackSize > this.dragSlots.size() && this.canDragIntoSlot(slot)) {
                     this.dragSlots.add(slot);
                 }
-            }
-            else if (this.dragEvent == 2)
-            {
-                if (!this.dragSlots.isEmpty())
-                {
+            } else if (this.dragEvent == 2) {
+                if (!this.dragSlots.isEmpty()) {
                     itemstack3 = inventoryplayer.getItemStack().copy();
                     i1 = inventoryplayer.getItemStack().stackSize;
                     Iterator iterator = this.dragSlots.iterator();
+                    Map<Integer, ItemStack> draggedSlots = new HashMap(); // CraftBukkit - Store slots from drag in map (raw slot id -> new stack)
 
-                    while (iterator.hasNext())
-                    {
-                        Slot slot1 = (Slot)iterator.next();
+                    while (iterator.hasNext()) {
+                        Slot slot1 = (Slot) iterator.next();
 
-                        if (slot1 != null && canAddItemToSlot(slot1, inventoryplayer.getItemStack(), true) && slot1.isItemValid(inventoryplayer.getItemStack()) && inventoryplayer.getItemStack().stackSize >= this.dragSlots.size() && this.canDragIntoSlot(slot1))
-                        {
+                        if (slot1 != null && canAddItemToSlot(slot1, inventoryplayer.getItemStack(), true) && slot1.isItemValid(inventoryplayer.getItemStack()) && inventoryplayer.getItemStack().stackSize >= this.dragSlots.size() && this.canDragIntoSlot(slot1)) {
                             ItemStack itemstack1 = itemstack3.copy();
                             int j1 = slot1.getHasStack() ? slot1.getStack().stackSize : 0;
                             computeStackSize(this.dragSlots, this.dragMode, itemstack1, j1);
 
-                            if (itemstack1.stackSize > itemstack1.getMaxStackSize())
-                            {
+                            if (itemstack1.stackSize > itemstack1.getMaxStackSize()) {
                                 itemstack1.stackSize = itemstack1.getMaxStackSize();
                             }
 
-                            if (itemstack1.stackSize > slot1.getItemStackLimit(itemstack1))
-                            {
+                            if (itemstack1.stackSize > slot1.getItemStackLimit(itemstack1)) {
                                 itemstack1.stackSize = slot1.getItemStackLimit(itemstack1);
                             }
 
                             i1 -= itemstack1.stackSize - j1;
-                            slot1.putStack(itemstack1);
+                            // slot1.putStack(itemstack1);
+                            draggedSlots.put(slot1.slotNumber, itemstack1); // CraftBukkit - Put in map instead of setting
                         }
                     }
 
-                    itemstack3.stackSize = i1;
+                    // CraftBukkit start - InventoryDragEvent
+                    InventoryView view = getBukkitView();
+                    org.bukkit.inventory.ItemStack newcursor = CraftItemStack.asCraftMirror(itemstack3);
+                    newcursor.setAmount(l);
+                    Map<Integer, org.bukkit.inventory.ItemStack> eventmap = new HashMap();
+                    for (Entry ditem : draggedSlots.entrySet()) {
+                        eventmap.put((Integer) ditem.getKey(), CraftItemStack.asBukkitCopy((ItemStack) ditem.getValue())); // SpigotMCP -- cast
+                    }
 
-                    if (itemstack3.stackSize <= 0)
-                    {
-                        itemstack3 = null;
+                    // It's essential that we set the cursor to the new value here to prevent item duplication if a plugin closes the inventory.
+                    ItemStack oldCursor = inventoryplayer.getItemStack();
+                    inventoryplayer.setItemStack(CraftItemStack.asNMSCopy(newcursor));
+
+                    InventoryDragEvent event = new InventoryDragEvent(view, (newcursor.getType() != org.bukkit.Material.AIR ? newcursor : null), CraftItemStack.asBukkitCopy(oldCursor), this.dragMode == 1, eventmap);
+                    playerIn.worldObj.getServer().getPluginManager().callEvent(event);
+
+                    // Whether or not a change was made to the inventory that requires an update.
+                    boolean needsUpdate = event.getResult() != Result.DEFAULT;
+
+                    if (event.getResult() != Result.DENY) {
+                        for (Entry dslot : draggedSlots.entrySet()) {
+                            view.setItem((Integer) dslot.getKey(), CraftItemStack.asBukkitCopy((ItemStack) dslot.getValue())); // SpigotMCP -- cast
+                        }
+                        // The only time the carried item will be set to null is if the inventory is closed by the server.
+                        // If the inventory is closed by the server, then the cursor items are dropped.  This is why we change the cursor early.
+                        if (inventoryplayer.getItemStack() != null) {
+                            inventoryplayer.setItemStack(CraftItemStack.asNMSCopy(event.getCursor()));
+                            needsUpdate = true;
+
+                        }
+                    } else {
+                        inventoryplayer.setItemStack(oldCursor);
                     }
 
-                    inventoryplayer.setItemStack(itemstack3);
+                    if (needsUpdate && playerIn instanceof EntityPlayerMP) {
+                        ((EntityPlayerMP) playerIn).sendContainerToPlayer(this);
+                    }
+                    // CraftBukkit end
                 }
 
                 this.resetDrag();
-            }
-            else
-            {
+            } else {
                 this.resetDrag();
             }
-        }
-        else if (this.dragEvent != 0)
-        {
+        } else if (this.dragEvent != 0) {
             this.resetDrag();
-        }
-        else
-        {
+        } else {
             Slot slot2;
             int l1;
             ItemStack itemstack5;
 
-            if ((mode == 0 || mode == 1) && (clickedButton == 0 || clickedButton == 1))
-            {
-                if (slotId == -999)
-                {
-                    if (inventoryplayer.getItemStack() != null)
-                    {
-                        if (clickedButton == 0)
-                        {
+            if ((mode == 0 || mode == 1) && (clickedButton == 0 || clickedButton == 1)) {
+                if (slotId == -999) {
+                    if (inventoryplayer.getItemStack() != null) {
+                        if (clickedButton == 0) {
                             playerIn.dropPlayerItemWithRandomChoice(inventoryplayer.getItemStack(), true);
-                            inventoryplayer.setItemStack((ItemStack)null);
+                            inventoryplayer.setItemStack((ItemStack) null);
                         }
 
-                        if (clickedButton == 1)
-                        {
-                            playerIn.dropPlayerItemWithRandomChoice(inventoryplayer.getItemStack().splitStack(1), true);
+                        if (clickedButton == 1) {
+                            // CraftBukkit start - Store a reference
+                            ItemStack itemstack4 = inventoryplayer.getItemStack();
+                            if (itemstack4.stackSize > 0) {
+                                playerIn.dropPlayerItemWithRandomChoice(itemstack4.splitStack(1), true);
+                            }
 
-                            if (inventoryplayer.getItemStack().stackSize == 0)
-                            {
-                                inventoryplayer.setItemStack((ItemStack)null);
+                            if (itemstack4.stackSize == 0) {
+                                // CraftBukkit end
+                                inventoryplayer.setItemStack((ItemStack) null);
                             }
                         }
                     }
-                }
-                else if (mode == 1)
-                {
-                    if (slotId < 0)
-                    {
+                } else if (mode == 1) {
+                    if (slotId < 0) {
                         return null;
                     }
 
-                    slot2 = (Slot)this.inventorySlots.get(slotId);
+                    slot2 = (Slot) this.inventorySlots.get(slotId);
 
-                    if (slot2 != null && slot2.canTakeStack(playerIn))
-                    {
+                    if (slot2 != null && slot2.canTakeStack(playerIn)) {
                         itemstack3 = this.transferStackInSlot(playerIn, slotId);
 
-                        if (itemstack3 != null)
-                        {
+                        if (itemstack3 != null) {
                             Item item = itemstack3.getItem();
                             itemstack = itemstack3.copy();
 
-                            if (slot2.getStack() != null && slot2.getStack().getItem() == item)
-                            {
+                            if (slot2.getStack() != null && slot2.getStack().getItem() == item) {
                                 this.retrySlotClick(slotId, clickedButton, true, playerIn);
                             }
                         }
                     }
-                }
-                else
-                {
-                    if (slotId < 0)
-                    {
+                } else {
+                    if (slotId < 0) {
                         return null;
                     }
 
-                    slot2 = (Slot)this.inventorySlots.get(slotId);
+                    slot2 = (Slot) this.inventorySlots.get(slotId);
 
-                    if (slot2 != null)
-                    {
+                    if (slot2 != null) {
                         itemstack3 = slot2.getStack();
                         ItemStack itemstack4 = inventoryplayer.getItemStack();
 
-                        if (itemstack3 != null)
-                        {
+                        if (itemstack3 != null) {
                             itemstack = itemstack3.copy();
                         }
 
-                        if (itemstack3 == null)
-                        {
-                            if (itemstack4 != null && slot2.isItemValid(itemstack4))
-                            {
+                        if (itemstack3 == null) {
+                            if (itemstack4 != null && slot2.isItemValid(itemstack4)) {
                                 l1 = clickedButton == 0 ? itemstack4.stackSize : 1;
 
-                                if (l1 > slot2.getItemStackLimit(itemstack4))
-                                {
+                                if (l1 > slot2.getItemStackLimit(itemstack4)) {
                                     l1 = slot2.getItemStackLimit(itemstack4);
                                 }
 
-                                if (itemstack4.stackSize >= l1)
-                                {
+                                if (itemstack4.stackSize >= l1) {
                                     slot2.putStack(itemstack4.splitStack(l1));
                                 }
 
-                                if (itemstack4.stackSize == 0)
-                                {
-                                    inventoryplayer.setItemStack((ItemStack)null);
+                                if (itemstack4.stackSize == 0) {
+                                    inventoryplayer.setItemStack((ItemStack) null);
+                                    // CraftBukkit start - Update client cursor if we didn't empty it
+                                } else if (playerIn instanceof EntityPlayerMP) {
+                                    ((EntityPlayerMP) playerIn).playerNetServerHandler.sendPacket(new S2FPacketSetSlot(-1, -1, playerIn.inventory.getItemStack()));
                                 }
+                                // CraftBukkit end
                             }
-                        }
-                        else if (slot2.canTakeStack(playerIn))
-                        {
-                            if (itemstack4 == null)
-                            {
+                        } else if (slot2.canTakeStack(playerIn)) {
+                            if (itemstack4 == null) {
                                 l1 = clickedButton == 0 ? itemstack3.stackSize : (itemstack3.stackSize + 1) / 2;
                                 itemstack5 = slot2.decrStackSize(l1);
                                 inventoryplayer.setItemStack(itemstack5);
 
-                                if (itemstack3.stackSize == 0)
-                                {
-                                    slot2.putStack((ItemStack)null);
+                                if (itemstack3.stackSize == 0) {
+                                    slot2.putStack((ItemStack) null);
                                 }
 
                                 slot2.onPickupFromSlot(playerIn, inventoryplayer.getItemStack());
-                            }
-                            else if (slot2.isItemValid(itemstack4))
-                            {
-                                if (itemstack3.getItem() == itemstack4.getItem() && itemstack3.getMetadata() == itemstack4.getMetadata() && ItemStack.areItemStackTagsEqual(itemstack3, itemstack4))
-                                {
+                            } else if (slot2.isItemValid(itemstack4)) {
+                                if (itemstack3.getItem() == itemstack4.getItem() && itemstack3.getMetadata() == itemstack4.getMetadata() && ItemStack.areItemStackTagsEqual(itemstack3, itemstack4)) {
                                     l1 = clickedButton == 0 ? itemstack4.stackSize : 1;
 
-                                    if (l1 > slot2.getItemStackLimit(itemstack4) - itemstack3.stackSize)
-                                    {
+                                    if (l1 > slot2.getItemStackLimit(itemstack4) - itemstack3.stackSize) {
                                         l1 = slot2.getItemStackLimit(itemstack4) - itemstack3.stackSize;
                                     }
 
-                                    if (l1 > itemstack4.getMaxStackSize() - itemstack3.stackSize)
-                                    {
+                                    if (l1 > itemstack4.getMaxStackSize() - itemstack3.stackSize) {
                                         l1 = itemstack4.getMaxStackSize() - itemstack3.stackSize;
                                     }
 
                                     itemstack4.splitStack(l1);
 
-                                    if (itemstack4.stackSize == 0)
-                                    {
-                                        inventoryplayer.setItemStack((ItemStack)null);
+                                    if (itemstack4.stackSize == 0) {
+                                        inventoryplayer.setItemStack((ItemStack) null);
+                                        // CraftBukkit start - Update client cursor if we didn't empty it
+                                    } else if (playerIn instanceof EntityPlayerMP) {
+                                        ((EntityPlayerMP) playerIn).playerNetServerHandler.sendPacket(new S2FPacketSetSlot(-1, -1, playerIn.inventory.getItemStack()));
                                     }
+                                    // CraftBukkit end
 
                                     itemstack3.stackSize += l1;
-                                }
-                                else if (itemstack4.stackSize <= slot2.getItemStackLimit(itemstack4))
-                                {
+                                } else if (itemstack4.stackSize <= slot2.getItemStackLimit(itemstack4)) {
                                     slot2.putStack(itemstack4);
                                     inventoryplayer.setItemStack(itemstack3);
                                 }
-                            }
-                            else if (itemstack3.getItem() == itemstack4.getItem() && itemstack4.getMaxStackSize() > 1 && (!itemstack3.getHasSubtypes() || itemstack3.getMetadata() == itemstack4.getMetadata()) && ItemStack.areItemStackTagsEqual(itemstack3, itemstack4))
-                            {
+                            } else if (itemstack3.getItem() == itemstack4.getItem() && itemstack4.getMaxStackSize() > 1 && (!itemstack3.getHasSubtypes() || itemstack3.getMetadata() == itemstack4.getMetadata()) && ItemStack.areItemStackTagsEqual(itemstack3, itemstack4)) {
                                 l1 = itemstack3.stackSize;
-
-                                if (l1 > 0 && l1 + itemstack4.stackSize <= itemstack4.getMaxStackSize())
-                                {
+                                // CraftBukkit start - itemstack4.getMaxStackSize() -> maxStack
+                                int maxStack = Math.min(itemstack4.getMaxStackSize(), slot2.getSlotStackLimit());
+                                if (l1 > 0 && l1 + itemstack4.stackSize <= maxStack) {
+                                    // CraftBukkit end
                                     itemstack4.stackSize += l1;
                                     itemstack3 = slot2.decrStackSize(l1);
 
-                                    if (itemstack3.stackSize == 0)
-                                    {
-                                        slot2.putStack((ItemStack)null);
+                                    if (itemstack3.stackSize == 0) {
+                                        slot2.putStack((ItemStack) null);
                                     }
 
                                     slot2.onPickupFromSlot(playerIn, inventoryplayer.getItemStack());
+                                    // CraftBukkit start - Update client cursor if we didn't empty it
+                                } else if (playerIn instanceof EntityPlayerMP) {
+                                    ((EntityPlayerMP) playerIn).playerNetServerHandler.sendPacket(new S2FPacketSetSlot(-1, -1, playerIn.inventory.getItemStack()));
                                 }
+                                // CraftBukkit end
                             }
                         }
 
                         slot2.onSlotChanged();
+                        // CraftBukkit start - Make sure the client has the right slot contents
+                        if (playerIn instanceof EntityPlayerMP && slot2.getSlotStackLimit() != 64) {
+                            ((EntityPlayerMP) playerIn).playerNetServerHandler.sendPacket(new S2FPacketSetSlot(this.windowId, slot2.slotNumber, slot2.getStack()));
+                            // Updating a crafting inventory makes the client reset the result slot, have to send it again
+                            if (this.getBukkitView().getType() == InventoryType.WORKBENCH || this.getBukkitView().getType() == InventoryType.CRAFTING) {
+                                ((EntityPlayerMP) playerIn).playerNetServerHandler.sendPacket(new S2FPacketSetSlot(this.windowId, 0, this.getSlot(0).getStack()));
+                            }
+                        }
+                        // CraftBukkit end
                     }
                 }
-            }
-            else if (mode == 2 && clickedButton >= 0 && clickedButton < 9)
-            {
-                slot2 = (Slot)this.inventorySlots.get(slotId);
+            } else if (mode == 2 && clickedButton >= 0 && clickedButton < 9) {
+                slot2 = (Slot) this.inventorySlots.get(slotId);
 
-                if (slot2.canTakeStack(playerIn))
-                {
+                if (slot2.canTakeStack(playerIn)) {
                     itemstack3 = inventoryplayer.getStackInSlot(clickedButton);
                     boolean flag = itemstack3 == null || slot2.inventory == inventoryplayer && slot2.isItemValid(itemstack3);
                     l1 = -1;
 
-                    if (!flag)
-                    {
+                    if (!flag) {
                         l1 = inventoryplayer.getFirstEmptyStack();
                         flag |= l1 > -1;
                     }
 
-                    if (slot2.getHasStack() && flag)
-                    {
+                    if (slot2.getHasStack() && flag) {
                         itemstack5 = slot2.getStack();
                         inventoryplayer.setInventorySlotContents(clickedButton, itemstack5.copy());
 
-                        if ((slot2.inventory != inventoryplayer || !slot2.isItemValid(itemstack3)) && itemstack3 != null)
-                        {
-                            if (l1 > -1)
-                            {
+                        if ((slot2.inventory != inventoryplayer || !slot2.isItemValid(itemstack3)) && itemstack3 != null) {
+                            if (l1 > -1) {
                                 inventoryplayer.addItemStackToInventory(itemstack3);
                                 slot2.decrStackSize(itemstack5.stackSize);
-                                slot2.putStack((ItemStack)null);
+                                slot2.putStack((ItemStack) null);
                                 slot2.onPickupFromSlot(playerIn, itemstack5);
                             }
-                        }
-                        else
-                        {
+                        } else {
                             slot2.decrStackSize(itemstack5.stackSize);
                             slot2.putStack(itemstack3);
                             slot2.onPickupFromSlot(playerIn, itemstack5);
                         }
-                    }
-                    else if (!slot2.getHasStack() && itemstack3 != null && slot2.isItemValid(itemstack3))
-                    {
-                        inventoryplayer.setInventorySlotContents(clickedButton, (ItemStack)null);
+                    } else if (!slot2.getHasStack() && itemstack3 != null && slot2.isItemValid(itemstack3)) {
+                        inventoryplayer.setInventorySlotContents(clickedButton, (ItemStack) null);
                         slot2.putStack(itemstack3);
                     }
                 }
-            }
-            else if (mode == 3 && playerIn.capabilities.isCreativeMode && inventoryplayer.getItemStack() == null && slotId >= 0)
-            {
-                slot2 = (Slot)this.inventorySlots.get(slotId);
+            } else if (mode == 3 && playerIn.capabilities.isCreativeMode && inventoryplayer.getItemStack() == null && slotId >= 0) {
+                slot2 = (Slot) this.inventorySlots.get(slotId);
 
-                if (slot2 != null && slot2.getHasStack())
-                {
+                if (slot2 != null && slot2.getHasStack()) {
                     itemstack3 = slot2.getStack().copy();
                     itemstack3.stackSize = itemstack3.getMaxStackSize();
                     inventoryplayer.setItemStack(itemstack3);
                 }
-            }
-            else if (mode == 4 && inventoryplayer.getItemStack() == null && slotId >= 0)
-            {
-                slot2 = (Slot)this.inventorySlots.get(slotId);
+            } else if (mode == 4 && inventoryplayer.getItemStack() == null && slotId >= 0) {
+                slot2 = (Slot) this.inventorySlots.get(slotId);
 
-                if (slot2 != null && slot2.getHasStack() && slot2.canTakeStack(playerIn))
-                {
+                if (slot2 != null && slot2.getHasStack() && slot2.canTakeStack(playerIn)) {
                     itemstack3 = slot2.decrStackSize(clickedButton == 0 ? 1 : slot2.getStack().stackSize);
                     slot2.onPickupFromSlot(playerIn, itemstack3);
                     playerIn.dropPlayerItemWithRandomChoice(itemstack3, true);
                 }
-            }
-            else if (mode == 6 && slotId >= 0)
-            {
-                slot2 = (Slot)this.inventorySlots.get(slotId);
+            } else if (mode == 6 && slotId >= 0) {
+                slot2 = (Slot) this.inventorySlots.get(slotId);
                 itemstack3 = inventoryplayer.getItemStack();
 
-                if (itemstack3 != null && (slot2 == null || !slot2.getHasStack() || !slot2.canTakeStack(playerIn)))
-                {
+                if (itemstack3 != null && (slot2 == null || !slot2.getHasStack() || !slot2.canTakeStack(playerIn))) {
                     i1 = clickedButton == 0 ? 0 : this.inventorySlots.size() - 1;
                     l1 = clickedButton == 0 ? 1 : -1;
 
-                    for (int i2 = 0; i2 < 2; ++i2)
-                    {
-                        for (int j2 = i1; j2 >= 0 && j2 < this.inventorySlots.size() && itemstack3.stackSize < itemstack3.getMaxStackSize(); j2 += l1)
-                        {
-                            Slot slot3 = (Slot)this.inventorySlots.get(j2);
+                    for (int i2 = 0; i2 < 2; ++i2) {
+                        for (int j2 = i1; j2 >= 0 && j2 < this.inventorySlots.size() && itemstack3.stackSize < itemstack3.getMaxStackSize(); j2 += l1) {
+                            Slot slot3 = (Slot) this.inventorySlots.get(j2);
 
-                            if (slot3.getHasStack() && canAddItemToSlot(slot3, itemstack3, true) && slot3.canTakeStack(playerIn) && this.canMergeSlot(itemstack3, slot3) && (i2 != 0 || slot3.getStack().stackSize != slot3.getStack().getMaxStackSize()))
-                            {
+                            if (slot3.getHasStack() && canAddItemToSlot(slot3, itemstack3, true) && slot3.canTakeStack(playerIn) && this.canMergeSlot(itemstack3, slot3) && (i2 != 0 || slot3.getStack().stackSize != slot3.getStack().getMaxStackSize())) {
                                 int k1 = Math.min(itemstack3.getMaxStackSize() - itemstack3.stackSize, slot3.getStack().stackSize);
                                 ItemStack itemstack2 = slot3.decrStackSize(k1);
                                 itemstack3.stackSize += k1;
 
-                                if (itemstack2.stackSize <= 0)
-                                {
-                                    slot3.putStack((ItemStack)null);
+                                if (itemstack2.stackSize <= 0) {
+                                    slot3.putStack((ItemStack) null);
                                 }
 
                                 slot3.onPickupFromSlot(playerIn, itemstack2);
@@ -488,144 +488,104 @@
         return itemstack;
     }
 
-    public boolean canMergeSlot(ItemStack p_94530_1_, Slot p_94530_2_)
-    {
+    public boolean canMergeSlot(ItemStack p_94530_1_, Slot p_94530_2_) {
         return true;
     }
 
-    protected void retrySlotClick(int p_75133_1_, int p_75133_2_, boolean p_75133_3_, EntityPlayer p_75133_4_)
-    {
+    protected void retrySlotClick(int p_75133_1_, int p_75133_2_, boolean p_75133_3_, EntityPlayer p_75133_4_) {
         this.slotClick(p_75133_1_, p_75133_2_, 1, p_75133_4_);
     }
 
-    public void onContainerClosed(EntityPlayer playerIn)
-    {
+    public void onContainerClosed(EntityPlayer playerIn) {
         InventoryPlayer inventoryplayer = playerIn.inventory;
 
-        if (inventoryplayer.getItemStack() != null)
-        {
+        if (inventoryplayer.getItemStack() != null) {
             playerIn.dropPlayerItemWithRandomChoice(inventoryplayer.getItemStack(), false);
-            inventoryplayer.setItemStack((ItemStack)null);
+            inventoryplayer.setItemStack((ItemStack) null);
         }
     }
 
-    public void onCraftMatrixChanged(IInventory inventoryIn)
-    {
+    public void onCraftMatrixChanged(IInventory inventoryIn) {
         this.detectAndSendChanges();
     }
 
-    public void putStackInSlot(int p_75141_1_, ItemStack p_75141_2_)
-    {
+    public void putStackInSlot(int p_75141_1_, ItemStack p_75141_2_) {
         this.getSlot(p_75141_1_).putStack(p_75141_2_);
     }
 
-    @SideOnly(Side.CLIENT)
-    public void putStacksInSlots(ItemStack[] p_75131_1_)
-    {
-        for (int i = 0; i < p_75131_1_.length; ++i)
-        {
-            this.getSlot(i).putStack(p_75131_1_[i]);
-        }
+    public void updateProgressBar(int id, int data) {
     }
 
-    @SideOnly(Side.CLIENT)
-    public void updateProgressBar(int id, int data) {}
-
-    @SideOnly(Side.CLIENT)
-    public short getNextTransactionID(InventoryPlayer p_75136_1_)
-    {
-        ++this.transactionID;
-        return this.transactionID;
-    }
-
-    public boolean isPlayerNotUsingContainer(EntityPlayer p_75129_1_)
-    {
+    public boolean isPlayerNotUsingContainer(EntityPlayer p_75129_1_) {
         return !this.playerList.contains(p_75129_1_);
     }
 
-    public void setPlayerIsPresent(EntityPlayer p_75128_1_, boolean p_75128_2_)
-    {
-        if (p_75128_2_)
-        {
+    public void setPlayerIsPresent(EntityPlayer p_75128_1_, boolean p_75128_2_) {
+        if (p_75128_2_) {
             this.playerList.remove(p_75128_1_);
-        }
-        else
-        {
+        } else {
             this.playerList.add(p_75128_1_);
         }
     }
 
     public abstract boolean canInteractWith(EntityPlayer playerIn);
 
-    protected boolean mergeItemStack(ItemStack stack, int startIndex, int endIndex, boolean useEndIndex)
-    {
+    protected boolean mergeItemStack(ItemStack stack, int startIndex, int endIndex, boolean useEndIndex) {
         boolean flag1 = false;
         int k = startIndex;
 
-        if (useEndIndex)
-        {
+        if (useEndIndex) {
             k = endIndex - 1;
         }
 
         Slot slot;
         ItemStack itemstack1;
 
-        if (stack.isStackable())
-        {
-            while (stack.stackSize > 0 && (!useEndIndex && k < endIndex || useEndIndex && k >= startIndex))
-            {
-                slot = (Slot)this.inventorySlots.get(k);
+        if (stack.isStackable()) {
+            while (stack.stackSize > 0 && (!useEndIndex && k < endIndex || useEndIndex && k >= startIndex)) {
+                slot = (Slot) this.inventorySlots.get(k);
                 itemstack1 = slot.getStack();
 
-                if (itemstack1 != null && itemstack1.getItem() == stack.getItem() && (!stack.getHasSubtypes() || stack.getMetadata() == itemstack1.getMetadata()) && ItemStack.areItemStackTagsEqual(stack, itemstack1))
-                {
+                if (itemstack1 != null && itemstack1.getItem() == stack.getItem() && (!stack.getHasSubtypes() || stack.getMetadata() == itemstack1.getMetadata()) && ItemStack.areItemStackTagsEqual(stack, itemstack1)) {
                     int l = itemstack1.stackSize + stack.stackSize;
 
-                    if (l <= stack.getMaxStackSize())
-                    {
+                    // CraftBukkit start - itemstack.getMaxStackSize() -> maxStack
+                    int maxStack = Math.min(stack.getMaxStackSize(), slot.getSlotStackLimit());
+                    if (l <= maxStack) {
+                        // CraftBukkit end
                         stack.stackSize = 0;
                         itemstack1.stackSize = l;
                         slot.onSlotChanged();
                         flag1 = true;
-                    }
-                    else if (itemstack1.stackSize < stack.getMaxStackSize())
+                    } else if (itemstack1.stackSize < maxStack) // CraftBukkit - itemstack.getMaxStackSize() -> maxStack
                     {
-                        stack.stackSize -= stack.getMaxStackSize() - itemstack1.stackSize;
-                        itemstack1.stackSize = stack.getMaxStackSize();
+                        stack.stackSize -= maxStack - itemstack1.stackSize; // CraftBukkit - itemstack.getMaxStackSize() -> maxStack
+                        itemstack1.stackSize = maxStack; // CraftBukkit - itemstack.getMaxStackSize() -> maxStack
                         slot.onSlotChanged();
                         flag1 = true;
                     }
                 }
 
-                if (useEndIndex)
-                {
+                if (useEndIndex) {
                     --k;
-                }
-                else
-                {
+                } else {
                     ++k;
                 }
             }
         }
 
-        if (stack.stackSize > 0)
-        {
-            if (useEndIndex)
-            {
+        if (stack.stackSize > 0) {
+            if (useEndIndex) {
                 k = endIndex - 1;
-            }
-            else
-            {
+            } else {
                 k = startIndex;
             }
 
-            while (!useEndIndex && k < endIndex || useEndIndex && k >= startIndex)
-            {
-                slot = (Slot)this.inventorySlots.get(k);
+            while (!useEndIndex && k < endIndex || useEndIndex && k >= startIndex) {
+                slot = (Slot) this.inventorySlots.get(k);
                 itemstack1 = slot.getStack();
 
-                if (itemstack1 == null)
-                {
+                if (itemstack1 == null) {
                     slot.putStack(stack.copy());
                     slot.onSlotChanged();
                     stack.stackSize = 0;
@@ -633,11 +633,9 @@
                     break;
                 }
 
-                if (useEndIndex)
-                {
+                if (useEndIndex) {
                     --k;
-                }
-                else
-                {
+                } else {
                     ++k;
                 }
             }
@@ -647,39 +647,27 @@
         return flag1;
     }
 
-    public static int extractDragMode(int p_94529_0_)
-    {
+    public static int extractDragMode(int p_94529_0_) {
         return p_94529_0_ >> 2 & 3;
     }
 
-    public static int getDragEvent(int p_94532_0_)
-    {
+    public static int getDragEvent(int p_94532_0_) {
         return p_94532_0_ & 3;
     }
 
-    @SideOnly(Side.CLIENT)
-    public static int func_94534_d(int p_94534_0_, int p_94534_1_)
-    {
-        return p_94534_0_ & 3 | (p_94534_1_ & 3) << 2;
-    }
-
-    public static boolean func_180610_a(int p_180610_0_, EntityPlayer p_180610_1_)
-    {
+    public static boolean func_180610_a(int p_180610_0_, EntityPlayer p_180610_1_) {
         return p_180610_0_ == 0 ? true : (p_180610_0_ == 1 ? true : p_180610_0_ == 2 && p_180610_1_.capabilities.isCreativeMode);
     }
 
-    protected void resetDrag()
-    {
+    protected void resetDrag() {
         this.dragEvent = 0;
         this.dragSlots.clear();
     }
 
-    public static boolean canAddItemToSlot(Slot slotIn, ItemStack stack, boolean stackSizeMatters)
-    {
+    public static boolean canAddItemToSlot(Slot slotIn, ItemStack stack, boolean stackSizeMatters) {
         boolean flag1 = slotIn == null || !slotIn.getHasStack();
 
-        if (slotIn != null && slotIn.getHasStack() && stack != null && stack.isItemEqual(slotIn.getStack()) && ItemStack.areItemStackTagsEqual(slotIn.getStack(), stack))
-        {
+        if (slotIn != null && slotIn.getHasStack() && stack != null && stack.isItemEqual(slotIn.getStack()) && ItemStack.areItemStackTagsEqual(slotIn.getStack(), stack)) {
             int i = stackSizeMatters ? 0 : stack.stackSize;
             flag1 |= slotIn.getStack().stackSize + i <= stack.getMaxStackSize();
         }
@@ -687,15 +687,11 @@
         return flag1;
     }
 
-    public static void computeStackSize(Set p_94525_0_, int p_94525_1_, ItemStack p_94525_2_, int p_94525_3_)
-    {
-        switch (p_94525_1_)
-        {
+    public static void computeStackSize(Set p_94525_0_, int p_94525_1_, ItemStack p_94525_2_, int p_94525_3_) {
+        switch (p_94525_1_) {
             case 0:
-                p_94525_2_.stackSize = MathHelper.floor_float((float)p_94525_2_.stackSize / (float)p_94525_0_.size());
+                p_94525_2_.stackSize = MathHelper.floor_float((float) p_94525_2_.stackSize / (float) p_94525_0_.size());
                 break;
             case 1:
                 p_94525_2_.stackSize = 1;
@@ -704,41 +704,32 @@
         p_94525_2_.stackSize += p_94525_3_;
     }
 
-    public boolean canDragIntoSlot(Slot p_94531_1_)
-    {
+    public boolean canDragIntoSlot(Slot p_94531_1_) {
         return true;
     }
 
-    public static int calcRedstone(TileEntity te)
-    {
-        return te instanceof IInventory ? calcRedstoneFromInventory((IInventory)te) : 0;
+    public static int calcRedstone(TileEntity te) {
+        return te instanceof IInventory ? calcRedstoneFromInventory((IInventory) te) : 0;
     }
 
-    public static int calcRedstoneFromInventory(IInventory inv)
-    {
-        if (inv == null)
-        {
+    public static int calcRedstoneFromInventory(IInventory inv) {
+        if (inv == null) {
             return 0;
-        }
-        else
-        {
+        } else {
             int i = 0;
             float f = 0.0F;
 
-            for (int j = 0; j < inv.getSizeInventory(); ++j)
-            {
+            for (int j = 0; j < inv.getSizeInventory(); ++j) {
                 ItemStack itemstack = inv.getStackInSlot(j);
 
-                if (itemstack != null)
-                {
-                    f += (float)itemstack.stackSize / (float)Math.min(inv.getInventoryStackLimit(), itemstack.getMaxStackSize());
+                if (itemstack != null) {
+                    f += (float) itemstack.stackSize / (float) Math.min(inv.getInventoryStackLimit(), itemstack.getMaxStackSize());
                     ++i;
                 }
             }
 
-            f /= (float)inv.getSizeInventory();
+            f /= (float) inv.getSizeInventory();
             return MathHelper.floor_float(f * 14.0F) + (i > 0 ? 1 : 0);
         }
     }
-}
+}
