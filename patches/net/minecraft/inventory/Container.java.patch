--- decompiled\net\minecraft\inventory\Container.java
+++ src\main\java\net\minecraft\inventory\Container.java
@@ -1,36 +1,64 @@
 package net.minecraft.inventory;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Sets;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
 import java.util.Set;
+
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.entity.player.InventoryPlayer;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
+import net.minecraft.network.play.server.S2FPacketSetSlot;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.MathHelper;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.Event.Result;
+import org.bukkit.event.inventory.InventoryDragEvent;
+import org.bukkit.event.inventory.InventoryType;
+import org.bukkit.inventory.InventoryView;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Sets;
+
 public abstract class Container
 {
+
     public List inventoryItemStacks = Lists.newArrayList();
     public List inventorySlots = Lists.newArrayList();
     public int windowId;
-    @SideOnly(Side.CLIENT)
-    private short transactionID;
     private int dragMode = -1;
     private int dragEvent;
     private final Set dragSlots = Sets.newHashSet();
     protected List crafters = Lists.newArrayList();
     private Set playerList = Sets.newHashSet();
+    private int tickCount; // Spigot
     private static final String __OBFID = "CL_00001730";
 
+    // CraftBukkit start
+    public boolean checkReachable = true;
+
+    public abstract InventoryView getBukkitView();
+
+    public void transferTo(Container other, CraftHumanEntity player)
+    {
+        InventoryView source = this.getBukkitView(), destination = other.getBukkitView();
+        ((CraftInventory)source.getTopInventory()).getInventory().onClose(player);
+        ((CraftInventory)source.getBottomInventory()).getInventory().onClose(player);
+        ((CraftInventory)destination.getTopInventory()).getInventory().onOpen(player);
+        ((CraftInventory)destination.getBottomInventory()).getInventory().onOpen(player);
+    }
+    // CraftBukkit end
+
     protected Slot addSlotToContainer(Slot slotIn)
     {
         slotIn.slotNumber = this.inventorySlots.size();
         this.inventorySlots.add(slotIn);
         this.inventoryItemStacks.add((Object)null);
@@ -61,34 +89,30 @@
         }
 
         return arraylist;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void removeCraftingFromCrafters(ICrafting listeners)
-    {
-        this.crafters.remove(listeners);
-    }
-
     public void detectAndSendChanges()
     {
         for (int i = 0; i < this.inventorySlots.size(); ++i)
         {
             ItemStack itemstack = ((Slot)this.inventorySlots.get(i)).getStack();
             ItemStack itemstack1 = (ItemStack)this.inventoryItemStacks.get(i);
 
-            if (!ItemStack.areItemStacksEqual(itemstack1, itemstack))
+            if (!ItemStack.fastMatches(itemstack1, itemstack) || (tickCount % 20 == 0 && !ItemStack.areItemStacksEqual(itemstack1, itemstack)))  // Spigot
             {
                 itemstack1 = itemstack == null ? null : itemstack.copy();
                 this.inventoryItemStacks.set(i, itemstack1);
 
                 for (int j = 0; j < this.crafters.size(); ++j)
                 {
                     ((ICrafting)this.crafters.get(j)).sendSlotContents(this, i, itemstack1);
                 }
             }
         }
+
+        tickCount++; // Spigot
     }
 
     public boolean enchantItem(EntityPlayer playerIn, int id)
     {
         return false;
@@ -168,10 +192,11 @@
                 if (!this.dragSlots.isEmpty())
                 {
                     itemstack3 = inventoryplayer.getItemStack().copy();
                     i1 = inventoryplayer.getItemStack().stackSize;
                     Iterator iterator = this.dragSlots.iterator();
+                    Map<Integer, ItemStack> draggedSlots = new HashMap(); // CraftBukkit - Store slots from drag in map (raw slot id -> new stack)
 
                     while (iterator.hasNext())
                     {
                         Slot slot1 = (Slot)iterator.next();
 
@@ -190,22 +215,60 @@
                             {
                                 itemstack1.stackSize = slot1.getItemStackLimit(itemstack1);
                             }
 
                             i1 -= itemstack1.stackSize - j1;
-                            slot1.putStack(itemstack1);
+                            // slot1.putStack(itemstack1);
+                            draggedSlots.put(slot1.slotNumber, itemstack1); // CraftBukkit - Put in map instead of setting
                         }
                     }
 
-                    itemstack3.stackSize = i1;
+                    // CraftBukkit start - InventoryDragEvent
+                    InventoryView view = getBukkitView();
+                    org.bukkit.inventory.ItemStack newcursor = CraftItemStack.asCraftMirror(itemstack3);
+                    newcursor.setAmount(l);
+                    Map<Integer, org.bukkit.inventory.ItemStack> eventmap = new HashMap();
 
-                    if (itemstack3.stackSize <= 0)
+                    for (Entry ditem : draggedSlots.entrySet())
                     {
-                        itemstack3 = null;
+                        eventmap.put((Integer)ditem.getKey(), CraftItemStack.asBukkitCopy((ItemStack)ditem.getValue())); // SpigotMCP -- cast
                     }
 
-                    inventoryplayer.setItemStack(itemstack3);
+                    // It's essential that we set the cursor to the new value here to prevent item duplication if a plugin closes the inventory.
+                    ItemStack oldCursor = inventoryplayer.getItemStack();
+                    inventoryplayer.setItemStack(CraftItemStack.asNMSCopy(newcursor));
+                    InventoryDragEvent event = new InventoryDragEvent(view, (newcursor.getType() != org.bukkit.Material.AIR ? newcursor : null), CraftItemStack.asBukkitCopy(oldCursor), this.dragMode == 1, eventmap);
+                    playerIn.worldObj.getServer().getPluginManager().callEvent(event);
+                    // Whether or not a change was made to the inventory that requires an update.
+                    boolean needsUpdate = event.getResult() != Result.DEFAULT;
+
+                    if (event.getResult() != Result.DENY)
+                    {
+                        for (Entry dslot : draggedSlots.entrySet())
+                        {
+                            view.setItem((Integer)dslot.getKey(), CraftItemStack.asBukkitCopy((ItemStack)dslot.getValue())); // SpigotMCP -- cast
+                        }
+
+                        // The only time the carried item will be set to null is if the inventory is closed by the server.
+                        // If the inventory is closed by the server, then the cursor items are dropped.  This is why we change the cursor early.
+                        if (inventoryplayer.getItemStack() != null)
+                        {
+                            inventoryplayer.setItemStack(CraftItemStack.asNMSCopy(event.getCursor()));
+                            needsUpdate = true;
+                        }
+                    }
+                    else
+                    {
+                        inventoryplayer.setItemStack(oldCursor);
+                    }
+
+                    if (needsUpdate && playerIn instanceof EntityPlayerMP)
+                    {
+                        ((EntityPlayerMP)playerIn).sendContainerToPlayer(this);
+                    }
+
+                    // CraftBukkit end
                 }
 
                 this.resetDrag();
             }
             else
@@ -235,14 +298,21 @@
                             inventoryplayer.setItemStack((ItemStack)null);
                         }
 
                         if (clickedButton == 1)
                         {
-                            playerIn.dropPlayerItemWithRandomChoice(inventoryplayer.getItemStack().splitStack(1), true);
+                            // CraftBukkit start - Store a reference
+                            ItemStack itemstack4 = inventoryplayer.getItemStack();
 
-                            if (inventoryplayer.getItemStack().stackSize == 0)
+                            if (itemstack4.stackSize > 0)
                             {
+                                playerIn.dropPlayerItemWithRandomChoice(itemstack4.splitStack(1), true);
+                            }
+
+                            if (itemstack4.stackSize == 0)
+                            {
+                                // CraftBukkit end
                                 inventoryplayer.setItemStack((ItemStack)null);
                             }
                         }
                     }
                 }
@@ -307,11 +377,18 @@
                                 }
 
                                 if (itemstack4.stackSize == 0)
                                 {
                                     inventoryplayer.setItemStack((ItemStack)null);
+                                    // CraftBukkit start - Update client cursor if we didn't empty it
                                 }
+                                else if (playerIn instanceof EntityPlayerMP)
+                                {
+                                    ((EntityPlayerMP)playerIn).playerNetServerHandler.sendPacket(new S2FPacketSetSlot(-1, -1, playerIn.inventory.getItemStack()));
+                                }
+
+                                // CraftBukkit end
                             }
                         }
                         else if (slot2.canTakeStack(playerIn))
                         {
                             if (itemstack4 == null)
@@ -346,12 +423,18 @@
                                     itemstack4.splitStack(l1);
 
                                     if (itemstack4.stackSize == 0)
                                     {
                                         inventoryplayer.setItemStack((ItemStack)null);
+                                        // CraftBukkit start - Update client cursor if we didn't empty it
                                     }
+                                    else if (playerIn instanceof EntityPlayerMP)
+                                    {
+                                        ((EntityPlayerMP)playerIn).playerNetServerHandler.sendPacket(new S2FPacketSetSlot(-1, -1, playerIn.inventory.getItemStack()));
+                                    }
 
+                                    // CraftBukkit end
                                     itemstack3.stackSize += l1;
                                 }
                                 else if (itemstack4.stackSize <= slot2.getItemStackLimit(itemstack4))
                                 {
                                     slot2.putStack(itemstack4);
@@ -359,27 +442,51 @@
                                 }
                             }
                             else if (itemstack3.getItem() == itemstack4.getItem() && itemstack4.getMaxStackSize() > 1 && (!itemstack3.getHasSubtypes() || itemstack3.getMetadata() == itemstack4.getMetadata()) && ItemStack.areItemStackTagsEqual(itemstack3, itemstack4))
                             {
                                 l1 = itemstack3.stackSize;
+                                // CraftBukkit start - itemstack4.getMaxStackSize() -> maxStack
+                                int maxStack = Math.min(itemstack4.getMaxStackSize(), slot2.getSlotStackLimit());
 
-                                if (l1 > 0 && l1 + itemstack4.stackSize <= itemstack4.getMaxStackSize())
+                                if (l1 > 0 && l1 + itemstack4.stackSize <= maxStack)
                                 {
+                                    // CraftBukkit end
                                     itemstack4.stackSize += l1;
                                     itemstack3 = slot2.decrStackSize(l1);
 
                                     if (itemstack3.stackSize == 0)
                                     {
                                         slot2.putStack((ItemStack)null);
                                     }
 
                                     slot2.onPickupFromSlot(playerIn, inventoryplayer.getItemStack());
+                                    // CraftBukkit start - Update client cursor if we didn't empty it
                                 }
+                                else if (playerIn instanceof EntityPlayerMP)
+                                {
+                                    ((EntityPlayerMP)playerIn).playerNetServerHandler.sendPacket(new S2FPacketSetSlot(-1, -1, playerIn.inventory.getItemStack()));
+                                }
+
+                                // CraftBukkit end
                             }
                         }
 
                         slot2.onSlotChanged();
+
+                        // CraftBukkit start - Make sure the client has the right slot contents
+                        if (playerIn instanceof EntityPlayerMP && slot2.getSlotStackLimit() != 64)
+                        {
+                            ((EntityPlayerMP)playerIn).playerNetServerHandler.sendPacket(new S2FPacketSetSlot(this.windowId, slot2.slotNumber, slot2.getStack()));
+
+                            // Updating a crafting inventory makes the client reset the result slot, have to send it again
+                            if (this.getBukkitView().getType() == InventoryType.WORKBENCH || this.getBukkitView().getType() == InventoryType.CRAFTING)
+                            {
+                                ((EntityPlayerMP)playerIn).playerNetServerHandler.sendPacket(new S2FPacketSetSlot(this.windowId, 0, this.getSlot(0).getStack()));
+                            }
+                        }
+
+                        // CraftBukkit end
                     }
                 }
             }
             else if (mode == 2 && clickedButton >= 0 && clickedButton < 9)
             {
@@ -517,29 +624,14 @@
     public void putStackInSlot(int p_75141_1_, ItemStack p_75141_2_)
     {
         this.getSlot(p_75141_1_).putStack(p_75141_2_);
     }
 
-    @SideOnly(Side.CLIENT)
-    public void putStacksInSlots(ItemStack[] p_75131_1_)
+    public void updateProgressBar(int id, int data)
     {
-        for (int i = 0; i < p_75131_1_.length; ++i)
-        {
-            this.getSlot(i).putStack(p_75131_1_[i]);
-        }
     }
 
-    @SideOnly(Side.CLIENT)
-    public void updateProgressBar(int id, int data) {}
-
-    @SideOnly(Side.CLIENT)
-    public short getNextTransactionID(InventoryPlayer p_75136_1_)
-    {
-        ++this.transactionID;
-        return this.transactionID;
-    }
-
     public boolean isPlayerNotUsingContainer(EntityPlayer p_75129_1_)
     {
         return !this.playerList.contains(p_75129_1_);
     }
 
@@ -578,22 +670,25 @@
                 itemstack1 = slot.getStack();
 
                 if (itemstack1 != null && itemstack1.getItem() == stack.getItem() && (!stack.getHasSubtypes() || stack.getMetadata() == itemstack1.getMetadata()) && ItemStack.areItemStackTagsEqual(stack, itemstack1))
                 {
                     int l = itemstack1.stackSize + stack.stackSize;
+                    // CraftBukkit start - itemstack.getMaxStackSize() -> maxStack
+                    int maxStack = Math.min(stack.getMaxStackSize(), slot.getSlotStackLimit());
 
-                    if (l <= stack.getMaxStackSize())
+                    if (l <= maxStack)
                     {
+                        // CraftBukkit end
                         stack.stackSize = 0;
                         itemstack1.stackSize = l;
                         slot.onSlotChanged();
                         flag1 = true;
                     }
-                    else if (itemstack1.stackSize < stack.getMaxStackSize())
+                    else if (itemstack1.stackSize < maxStack) // CraftBukkit - itemstack.getMaxStackSize() -> maxStack
                     {
-                        stack.stackSize -= stack.getMaxStackSize() - itemstack1.stackSize;
-                        itemstack1.stackSize = stack.getMaxStackSize();
+                        stack.stackSize -= maxStack - itemstack1.stackSize; // CraftBukkit - itemstack.getMaxStackSize() -> maxStack
+                        itemstack1.stackSize = maxStack; // CraftBukkit - itemstack.getMaxStackSize() -> maxStack
                         slot.onSlotChanged();
                         flag1 = true;
                     }
                 }
 
@@ -655,16 +750,10 @@
     public static int getDragEvent(int p_94532_0_)
     {
         return p_94532_0_ & 3;
     }
 
-    @SideOnly(Side.CLIENT)
-    public static int func_94534_d(int p_94534_0_, int p_94534_1_)
-    {
-        return p_94534_0_ & 3 | (p_94534_1_ & 3) << 2;
-    }
-
     public static boolean func_180610_a(int p_180610_0_, EntityPlayer p_180610_1_)
     {
         return p_180610_0_ == 0 ? true : (p_180610_0_ == 1 ? true : p_180610_0_ == 2 && p_180610_1_.capabilities.isCreativeMode);
     }
 
