--- decompiled\net\minecraft\inventory\ContainerHorseInventory.java
+++ src\main\java\net\minecraft\inventory\ContainerHorseInventory.java
@@ -1,131 +1,122 @@
 package net.minecraft.inventory;
 
 import net.minecraft.entity.passive.EntityHorse;
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.entity.player.InventoryPlayer;
 import net.minecraft.init.Items;
 import net.minecraft.item.ItemStack;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class ContainerHorseInventory extends Container
-{
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftInventoryHorse;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+import org.bukkit.inventory.InventoryView;
+
+public class ContainerHorseInventory extends Container {
+
     private IInventory horseInventory;
     private EntityHorse theHorse;
     private static final String __OBFID = "CL_00001751";
 
-    public ContainerHorseInventory(IInventory playerInventory, final IInventory horseInventoryIn, final EntityHorse horse, EntityPlayer player)
-    {
+    // CraftBukkit start
+    CraftInventoryView bukkitEntity;
+    InventoryPlayer player;
+
+    @Override
+    public InventoryView getBukkitView() {
+        if (bukkitEntity != null) {
+            return bukkitEntity;
+        }
+
+        CraftInventory inventory = new CraftInventoryHorse(this.horseInventory);
+        return bukkitEntity = new CraftInventoryView(player.player.getBukkitEntity(), inventory, this);
+    }
+
+    public ContainerHorseInventory(IInventory playerInventory, final IInventory horseInventoryIn, final EntityHorse horse, EntityPlayer player) {
+        this.player = (InventoryPlayer) playerInventory;
+        // CraftBukkit end
         this.horseInventory = horseInventoryIn;
         this.theHorse = horse;
         byte b0 = 3;
         horseInventoryIn.openInventory(player);
         int i = (b0 - 4) * 18;
-        this.addSlotToContainer(new Slot(horseInventoryIn, 0, 8, 18)
-        {
+        this.addSlotToContainer(new Slot(horseInventoryIn, 0, 8, 18) {
+
             private static final String __OBFID = "CL_00001752";
-            public boolean isItemValid(ItemStack stack)
-            {
+
+            public boolean isItemValid(ItemStack stack) {
                 return super.isItemValid(stack) && stack.getItem() == Items.saddle && !this.getHasStack();
             }
         });
-        this.addSlotToContainer(new Slot(horseInventoryIn, 1, 8, 36)
-        {
+        this.addSlotToContainer(new Slot(horseInventoryIn, 1, 8, 36) {
+
             private static final String __OBFID = "CL_00001753";
-            public boolean isItemValid(ItemStack stack)
-            {
+
+            public boolean isItemValid(ItemStack stack) {
                 return super.isItemValid(stack) && horse.canWearArmor() && EntityHorse.func_146085_a(stack.getItem());
             }
-            @SideOnly(Side.CLIENT)
-            public boolean canBeHovered()
-            {
-                return horse.canWearArmor();
-            }
         });
         int j;
         int k;
 
-        if (horse.isChested())
-        {
-            for (j = 0; j < b0; ++j)
-            {
-                for (k = 0; k < 5; ++k)
-                {
+        if (horse.isChested()) {
+            for (j = 0; j < b0; ++j) {
+                for (k = 0; k < 5; ++k) {
                     this.addSlotToContainer(new Slot(horseInventoryIn, 2 + k + j * 5, 80 + k * 18, 18 + j * 18));
                 }
             }
         }
 
-        for (j = 0; j < 3; ++j)
-        {
-            for (k = 0; k < 9; ++k)
-            {
+        for (j = 0; j < 3; ++j) {
+            for (k = 0; k < 9; ++k) {
                 this.addSlotToContainer(new Slot(playerInventory, k + j * 9 + 9, 8 + k * 18, 102 + j * 18 + i));
             }
         }
 
-        for (j = 0; j < 9; ++j)
-        {
+        for (j = 0; j < 9; ++j) {
             this.addSlotToContainer(new Slot(playerInventory, j, 8 + j * 18, 160 + i));
         }
     }
 
-    public boolean canInteractWith(EntityPlayer playerIn)
-    {
+    public boolean canInteractWith(EntityPlayer playerIn) {
         return this.horseInventory.isUseableByPlayer(playerIn) && this.theHorse.isEntityAlive() && this.theHorse.getDistanceToEntity(playerIn) < 8.0F;
     }
 
-    public ItemStack transferStackInSlot(EntityPlayer playerIn, int index)
-    {
+    public ItemStack transferStackInSlot(EntityPlayer playerIn, int index) {
         ItemStack itemstack = null;
-        Slot slot = (Slot)this.inventorySlots.get(index);
+        Slot slot = (Slot) this.inventorySlots.get(index);
 
-        if (slot != null && slot.getHasStack())
-        {
+        if (slot != null && slot.getHasStack()) {
             ItemStack itemstack1 = slot.getStack();
             itemstack = itemstack1.copy();
 
-            if (index < this.horseInventory.getSizeInventory())
-            {
-                if (!this.mergeItemStack(itemstack1, this.horseInventory.getSizeInventory(), this.inventorySlots.size(), true))
-                {
+            if (index < this.horseInventory.getSizeInventory()) {
+                if (!this.mergeItemStack(itemstack1, this.horseInventory.getSizeInventory(), this.inventorySlots.size(), true)) {
                     return null;
                 }
-            }
-            else if (this.getSlot(1).isItemValid(itemstack1) && !this.getSlot(1).getHasStack())
-            {
-                if (!this.mergeItemStack(itemstack1, 1, 2, false))
-                {
+            } else if (this.getSlot(1).isItemValid(itemstack1) && !this.getSlot(1).getHasStack()) {
+                if (!this.mergeItemStack(itemstack1, 1, 2, false)) {
                     return null;
                 }
-            }
-            else if (this.getSlot(0).isItemValid(itemstack1))
-            {
-                if (!this.mergeItemStack(itemstack1, 0, 1, false))
-                {
+            } else if (this.getSlot(0).isItemValid(itemstack1)) {
+                if (!this.mergeItemStack(itemstack1, 0, 1, false)) {
                     return null;
                 }
-            }
-            else if (this.horseInventory.getSizeInventory() <= 2 || !this.mergeItemStack(itemstack1, 2, this.horseInventory.getSizeInventory(), false))
-            {
+            } else if (this.horseInventory.getSizeInventory() <= 2 || !this.mergeItemStack(itemstack1, 2, this.horseInventory.getSizeInventory(), false)) {
                 return null;
             }
 
-            if (itemstack1.stackSize == 0)
-            {
-                slot.putStack((ItemStack)null);
-            }
-            else
-            {
+            if (itemstack1.stackSize == 0) {
+                slot.putStack((ItemStack) null);
+            } else {
                 slot.onSlotChanged();
             }
         }
 
         return itemstack;
     }
 
-    public void onContainerClosed(EntityPlayer playerIn)
-    {
+    public void onContainerClosed(EntityPlayer playerIn) {
         super.onContainerClosed(playerIn);
         this.horseInventory.closeInventory(playerIn);
     }
 }
