---a/net/minecraft/inventory/InventoryEnderChest.java
+++b/net/minecraft/inventory/InventoryEnderChest.java
@@ -1,58 +1,93 @@
 package net.minecraft.inventory;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.tileentity.TileEntityEnderChest;
 
-public class InventoryEnderChest extends InventoryBasic
-{
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.InventoryHolder;
+
+public class InventoryEnderChest extends InventoryBasic {
+
     private TileEntityEnderChest associatedChest;
     private static final String __OBFID = "CL_00001759";
 
-    public InventoryEnderChest()
-    {
+    // CraftBukkit start - add fields and methods
+    public List transaction = new ArrayList();
+    public Player player;
+    private int maxStack = MAX_STACK;
+
+    public net.minecraft.item.ItemStack[] getContents() {
+        return this.inventoryContents;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public java.util.List getViewers() {
+        return transaction;
+    }
+
+    public InventoryHolder getOwner() {
+        return this.player;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+
+    public int getInventoryStackLimit() {
+        return maxStack;
+    }
+    // CraftBukkit end
+
+    public InventoryEnderChest() {
         super("container.enderchest", false, 27);
     }
 
-    public void setChestTileEntity(TileEntityEnderChest chestTileEntity)
-    {
+    public void setChestTileEntity(TileEntityEnderChest chestTileEntity) {
         this.associatedChest = chestTileEntity;
     }
 
-    public void loadInventoryFromNBT(NBTTagList p_70486_1_)
-    {
+    public void loadInventoryFromNBT(NBTTagList p_70486_1_) {
         int i;
 
-        for (i = 0; i < this.getSizeInventory(); ++i)
-        {
-            this.setInventorySlotContents(i, (ItemStack)null);
+        for (i = 0; i < this.getSizeInventory(); ++i) {
+            this.setInventorySlotContents(i, (ItemStack) null);
         }
 
-        for (i = 0; i < p_70486_1_.tagCount(); ++i)
-        {
+        for (i = 0; i < p_70486_1_.tagCount(); ++i) {
             NBTTagCompound nbttagcompound = p_70486_1_.getCompoundTagAt(i);
             int j = nbttagcompound.getByte("Slot") & 255;
 
-            if (j >= 0 && j < this.getSizeInventory())
-            {
+            if (j >= 0 && j < this.getSizeInventory()) {
                 this.setInventorySlotContents(j, ItemStack.loadItemStackFromNBT(nbttagcompound));
             }
         }
     }
 
-    public NBTTagList saveInventoryToNBT()
-    {
+    public NBTTagList saveInventoryToNBT() {
         NBTTagList nbttaglist = new NBTTagList();
 
-        for (int i = 0; i < this.getSizeInventory(); ++i)
-        {
+        for (int i = 0; i < this.getSizeInventory(); ++i) {
             ItemStack itemstack = this.getStackInSlot(i);
 
-            if (itemstack != null)
-            {
+            if (itemstack != null) {
                 NBTTagCompound nbttagcompound = new NBTTagCompound();
-                nbttagcompound.setByte("Slot", (byte)i);
+                nbttagcompound.setByte("Slot", (byte) i);
                 itemstack.writeToNBT(nbttagcompound);
                 nbttaglist.appendTag(nbttagcompound);
             }
@@ -62,30 +62,24 @@
         return nbttaglist;
     }
 
-    public boolean isUseableByPlayer(EntityPlayer player)
-    {
+    public boolean isUseableByPlayer(EntityPlayer player) {
         return this.associatedChest != null && !this.associatedChest.func_145971_a(player) ? false : super.isUseableByPlayer(player);
     }
 
-    public void openInventory(EntityPlayer player)
-    {
-        if (this.associatedChest != null)
-        {
+    public void openInventory(EntityPlayer player) {
+        if (this.associatedChest != null) {
             this.associatedChest.func_145969_a();
         }
 
         super.openInventory(player);
     }
 
-    public void closeInventory(EntityPlayer player)
-    {
-        if (this.associatedChest != null)
-        {
+    public void closeInventory(EntityPlayer player) {
+        if (this.associatedChest != null) {
             this.associatedChest.func_145970_b();
         }
 
         super.closeInventory(player);
         this.associatedChest = null;
     }
-}
+}
