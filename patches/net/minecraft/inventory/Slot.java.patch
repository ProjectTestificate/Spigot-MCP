---a/net/minecraft/inventory/Slot.java
+++b/net/minecraft/inventory/Slot.java
@@ -2,106 +2,82 @@
 
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.ItemStack;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class Slot
-{
-    private final int slotIndex;
+public class Slot {
+
+    public final int slotIndex; // SpigotMCP -- Apply access transform
     public final IInventory inventory;
     public int slotNumber;
     public int xDisplayPosition;
     public int yDisplayPosition;
     private static final String __OBFID = "CL_00001762";
 
-    public Slot(IInventory inventoryIn, int index, int xPosition, int yPosition)
-    {
+    public Slot(IInventory inventoryIn, int index, int xPosition, int yPosition) {
         this.inventory = inventoryIn;
         this.slotIndex = index;
         this.xDisplayPosition = xPosition;
         this.yDisplayPosition = yPosition;
     }
 
-    public void onSlotChange(ItemStack p_75220_1_, ItemStack p_75220_2_)
-    {
-        if (p_75220_1_ != null && p_75220_2_ != null)
-        {
-            if (p_75220_1_.getItem() == p_75220_2_.getItem())
-            {
+    public void onSlotChange(ItemStack p_75220_1_, ItemStack p_75220_2_) {
+        if (p_75220_1_ != null && p_75220_2_ != null) {
+            if (p_75220_1_.getItem() == p_75220_2_.getItem()) {
                 int i = p_75220_2_.stackSize - p_75220_1_.stackSize;
 
-                if (i > 0)
-                {
+                if (i > 0) {
                     this.onCrafting(p_75220_1_, i);
                 }
             }
         }
     }
 
-    protected void onCrafting(ItemStack stack, int amount) {}
+    protected void onCrafting(ItemStack stack, int amount) {
+    }
 
-    protected void onCrafting(ItemStack stack) {}
+    protected void onCrafting(ItemStack stack) {
+    }
 
-    public void onPickupFromSlot(EntityPlayer playerIn, ItemStack stack)
-    {
+    public void onPickupFromSlot(EntityPlayer playerIn, ItemStack stack) {
         this.onSlotChanged();
     }
 
-    public boolean isItemValid(ItemStack stack)
-    {
+    public boolean isItemValid(ItemStack stack) {
         return true;
     }
 
-    public ItemStack getStack()
-    {
+    public ItemStack getStack() {
         return this.inventory.getStackInSlot(this.slotIndex);
     }
 
-    public boolean getHasStack()
-    {
+    public boolean getHasStack() {
         return this.getStack() != null;
     }
 
-    public void putStack(ItemStack stack)
-    {
+    public void putStack(ItemStack stack) {
         this.inventory.setInventorySlotContents(this.slotIndex, stack);
         this.onSlotChanged();
     }
 
-    public void onSlotChanged()
-    {
+    public void onSlotChanged() {
         this.inventory.markDirty();
     }
 
-    public int getSlotStackLimit()
-    {
+    public int getSlotStackLimit() {
         return this.inventory.getInventoryStackLimit();
     }
 
-    public int getItemStackLimit(ItemStack stack)
-    {
+    public int getItemStackLimit(ItemStack stack) {
         return this.getSlotStackLimit();
     }
 
-    @SideOnly(Side.CLIENT)
-    public String getSlotTexture()
-    {
-        return null;
-    }
-
-    public ItemStack decrStackSize(int amount)
-    {
+    public ItemStack decrStackSize(int amount) {
         return this.inventory.decrStackSize(this.slotIndex, amount);
     }
 
-    public boolean isSlotInInventory(IInventory inv, int slotIn)
-    {
+    public boolean isSlotInInventory(IInventory inv, int slotIn) {
         return inv == this.inventory && slotIn == this.slotIndex;
     }
 
-    public boolean canTakeStack(EntityPlayer playerIn)
-    {
+    public boolean canTakeStack(EntityPlayer playerIn) {
         return true;
     }
-
-    @SideOnly(Side.CLIENT)
-    public boolean canBeHovered()
-    {
-        return true;
-    }
-}
+}
