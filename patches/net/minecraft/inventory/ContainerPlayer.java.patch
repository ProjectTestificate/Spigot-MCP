--- decompiled\net\minecraft\inventory\ContainerPlayer.java
+++ src\main\java\net\minecraft\inventory\ContainerPlayer.java
@@ -1,30 +1,43 @@
 package net.minecraft.inventory;
 
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.entity.player.InventoryPlayer;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.Items;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemArmor;
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.crafting.CraftingManager;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+import net.minecraft.network.play.server.S2FPacketSetSlot;
 
+import org.bukkit.craftbukkit.inventory.CraftInventoryCrafting;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+
 public class ContainerPlayer extends Container
 {
+
     public InventoryCrafting craftMatrix = new InventoryCrafting(this, 2, 2);
     public IInventory craftResult = new InventoryCraftResult();
     public boolean isLocalWorld;
     private final EntityPlayer thePlayer;
     private static final String __OBFID = "CL_00001754";
 
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity = null;
+    private InventoryPlayer player;
+    // CraftBukkit end
+
     public ContainerPlayer(final InventoryPlayer playerInventory, boolean localWorld, EntityPlayer player)
     {
         this.isLocalWorld = localWorld;
         this.thePlayer = player;
+        this.craftResult = new InventoryCraftResult(); // CraftBukkit - moved to before InventoryCrafting construction
+        this.craftMatrix = new InventoryCrafting(this, 2, 2, playerInventory.player); // CraftBukkit - pass player
+        this.craftMatrix.resultInventory = this.craftResult; // CraftBukkit - let InventoryCrafting know about its result slot
+        this.player = playerInventory; // CraftBukkit - save player
         this.addSlotToContainer(new SlotCrafting(playerInventory.player, this.craftMatrix, this.craftResult, 0, 144, 36));
         int i;
         int j;
 
         for (i = 0; i < 2; ++i)
@@ -47,15 +60,10 @@
                 }
                 public boolean isItemValid(ItemStack stack)
                 {
                     return stack == null ? false : (stack.getItem() instanceof ItemArmor ? ((ItemArmor)stack.getItem()).armorType == k : (stack.getItem() != Item.getItemFromBlock(Blocks.pumpkin) && stack.getItem() != Items.skull ? false : k == 0));
                 }
-                @SideOnly(Side.CLIENT)
-                public String getSlotTexture()
-                {
-                    return ItemArmor.EMPTY_SLOT_NAMES[k];
-                }
             });
         }
 
         for (i = 0; i < 3; ++i)
         {
@@ -68,16 +76,29 @@
         for (i = 0; i < 9; ++i)
         {
             this.addSlotToContainer(new Slot(playerInventory, i, 8 + i * 18, 142));
         }
 
-        this.onCraftMatrixChanged(this.craftMatrix);
+        // this.onCraftMatrixChanged(this.craftMatrix); // CraftBukkit - unneeded since it just sets result slot to empty
     }
 
     public void onCraftMatrixChanged(IInventory inventoryIn)
     {
-        this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(this.craftMatrix, this.thePlayer.worldObj));
+        // this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(this.craftMatrix, this.thePlayer.worldObj));
+        // CraftBukkit start (Note: the following line would cause an error if called during construction)
+        CraftingManager.getInstance().lastCraftView = getBukkitView();
+        ItemStack craftResult = CraftingManager.getInstance().findMatchingRecipe(this.craftMatrix, this.thePlayer.worldObj);
+        this.craftResult.setInventorySlotContents(0, craftResult);
+
+        if (super.crafters.size() < 1)
+        {
+            return;
+        }
+
+        EntityPlayerMP player = (EntityPlayerMP)super.crafters.get(0); // TODO: Is this _always_ correct? Seems like it.
+        player.playerNetServerHandler.sendPacket(new S2FPacketSetSlot(player.openContainer.windowId, 0, craftResult));
+        // CraftBukkit end
     }
 
     public void onContainerClosed(EntityPlayer playerIn)
     {
         super.onContainerClosed(playerIn);
@@ -183,6 +204,21 @@
 
     public boolean canMergeSlot(ItemStack p_94530_1_, Slot p_94530_2_)
     {
         return p_94530_2_.inventory != this.craftResult && super.canMergeSlot(p_94530_1_, p_94530_2_);
     }
+
+    // CraftBukkit start
+    @Override
+    public CraftInventoryView getBukkitView()
+    {
+        if (bukkitEntity != null)
+        {
+            return bukkitEntity;
+        }
+
+        CraftInventoryCrafting inventory = new CraftInventoryCrafting(this.craftMatrix, this.craftResult);
+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
+        return bukkitEntity;
+    }
+    // CraftBukkit end
 }
