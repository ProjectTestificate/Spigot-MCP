--- decompiled\net\minecraft\enchantment\EnchantmentHelper.java
+++ src\main\java\net\minecraft\enchantment\EnchantmentHelper.java
@@ -1,16 +1,15 @@
 package net.minecraft.enchantment;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
+
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.EnumCreatureAttribute;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Items;
@@ -19,447 +18,370 @@
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.WeightedRandom;
 
-public class EnchantmentHelper
-{
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
+public class EnchantmentHelper {
+
     private static final Random enchantmentRand = new Random();
     private static final EnchantmentHelper.ModifierDamage enchantmentModifierDamage = new EnchantmentHelper.ModifierDamage(null);
     private static final EnchantmentHelper.ModifierLiving enchantmentModifierLiving = new EnchantmentHelper.ModifierLiving(null);
     private static final EnchantmentHelper.HurtIterator field_151388_d = new EnchantmentHelper.HurtIterator(null);
     private static final EnchantmentHelper.DamageIterator field_151389_e = new EnchantmentHelper.DamageIterator(null);
     private static final String __OBFID = "CL_00000107";
 
-    public static int getEnchantmentLevel(int enchID, ItemStack stack)
-    {
-        if (stack == null)
-        {
+    public static int getEnchantmentLevel(int enchID, ItemStack stack) {
+        if (stack == null) {
             return 0;
-        }
-        else
-        {
+        } else {
             NBTTagList nbttaglist = stack.getEnchantmentTagList();
 
-            if (nbttaglist == null)
-            {
+            if (nbttaglist == null) {
                 return 0;
-            }
-            else
-            {
-                for (int j = 0; j < nbttaglist.tagCount(); ++j)
-                {
+            } else {
+                for (int j = 0; j < nbttaglist.tagCount(); ++j) {
                     short short1 = nbttaglist.getCompoundTagAt(j).getShort("id");
                     short short2 = nbttaglist.getCompoundTagAt(j).getShort("lvl");
 
-                    if (short1 == enchID)
-                    {
+                    if (short1 == enchID) {
                         return short2;
                     }
                 }
 
                 return 0;
             }
         }
     }
 
-    public static Map getEnchantments(ItemStack stack)
-    {
+    public static Map getEnchantments(ItemStack stack) {
         LinkedHashMap linkedhashmap = Maps.newLinkedHashMap();
         NBTTagList nbttaglist = stack.getItem() == Items.enchanted_book ? Items.enchanted_book.getEnchantments(stack) : stack.getEnchantmentTagList();
 
-        if (nbttaglist != null)
-        {
-            for (int i = 0; i < nbttaglist.tagCount(); ++i)
-            {
+        if (nbttaglist != null) {
+            for (int i = 0; i < nbttaglist.tagCount(); ++i) {
                 short short1 = nbttaglist.getCompoundTagAt(i).getShort("id");
                 short short2 = nbttaglist.getCompoundTagAt(i).getShort("lvl");
                 linkedhashmap.put(Integer.valueOf(short1), Integer.valueOf(short2));
             }
         }
 
         return linkedhashmap;
     }
 
-    public static void setEnchantments(Map enchMap, ItemStack stack)
-    {
+    public static void setEnchantments(Map enchMap, ItemStack stack) {
         NBTTagList nbttaglist = new NBTTagList();
         Iterator iterator = enchMap.keySet().iterator();
 
-        while (iterator.hasNext())
-        {
-            int i = ((Integer)iterator.next()).intValue();
+        while (iterator.hasNext()) {
+            int i = ((Integer) iterator.next()).intValue();
             Enchantment enchantment = Enchantment.getEnchantmentById(i);
 
-            if (enchantment != null)
-            {
+            if (enchantment != null) {
                 NBTTagCompound nbttagcompound = new NBTTagCompound();
-                nbttagcompound.setShort("id", (short)i);
-                nbttagcompound.setShort("lvl", (short)((Integer)enchMap.get(Integer.valueOf(i))).intValue());
+                nbttagcompound.setShort("id", (short) i);
+                nbttagcompound.setShort("lvl", (short) ((Integer) enchMap.get(Integer.valueOf(i))).intValue());
                 nbttaglist.appendTag(nbttagcompound);
 
-                if (stack.getItem() == Items.enchanted_book)
-                {
-                    Items.enchanted_book.addEnchantment(stack, new EnchantmentData(enchantment, ((Integer)enchMap.get(Integer.valueOf(i))).intValue()));
+                if (stack.getItem() == Items.enchanted_book) {
+                    Items.enchanted_book.addEnchantment(stack, new EnchantmentData(enchantment, ((Integer) enchMap.get(Integer.valueOf(i))).intValue()));
                 }
             }
         }
 
-        if (nbttaglist.tagCount() > 0)
-        {
-            if (stack.getItem() != Items.enchanted_book)
-            {
+        if (nbttaglist.tagCount() > 0) {
+            if (stack.getItem() != Items.enchanted_book) {
                 stack.setTagInfo("ench", nbttaglist);
             }
-        }
-        else if (stack.hasTagCompound())
-        {
+        } else if (stack.hasTagCompound()) {
             stack.getTagCompound().removeTag("ench");
         }
     }
 
-    public static int getMaxEnchantmentLevel(int enchID, ItemStack[] stacks)
-    {
-        if (stacks == null)
-        {
+    public static int getMaxEnchantmentLevel(int enchID, ItemStack[] stacks) {
+        if (stacks == null) {
             return 0;
-        }
-        else
-        {
+        } else {
             int j = 0;
             ItemStack[] aitemstack1 = stacks;
             int k = stacks.length;
 
-            for (int l = 0; l < k; ++l)
-            {
+            for (int l = 0; l < k; ++l) {
                 ItemStack itemstack = aitemstack1[l];
                 int i1 = getEnchantmentLevel(enchID, itemstack);
 
-                if (i1 > j)
-                {
+                if (i1 > j) {
                     j = i1;
                 }
             }
 
             return j;
         }
     }
 
-    private static void applyEnchantmentModifier(EnchantmentHelper.IModifier modifier, ItemStack stack)
-    {
-        if (stack != null)
-        {
+    private static void applyEnchantmentModifier(EnchantmentHelper.IModifier modifier, ItemStack stack) {
+        if (stack != null) {
             NBTTagList nbttaglist = stack.getEnchantmentTagList();
 
-            if (nbttaglist != null)
-            {
-                for (int i = 0; i < nbttaglist.tagCount(); ++i)
-                {
+            if (nbttaglist != null) {
+                for (int i = 0; i < nbttaglist.tagCount(); ++i) {
                     short short1 = nbttaglist.getCompoundTagAt(i).getShort("id");
                     short short2 = nbttaglist.getCompoundTagAt(i).getShort("lvl");
 
-                    if (Enchantment.getEnchantmentById(short1) != null)
-                    {
+                    if (Enchantment.getEnchantmentById(short1) != null) {
                         modifier.calculateModifier(Enchantment.getEnchantmentById(short1), short2);
                     }
                 }
             }
         }
     }
 
-    private static void applyEnchantmentModifierArray(EnchantmentHelper.IModifier modifier, ItemStack[] stacks)
-    {
+    private static void applyEnchantmentModifierArray(EnchantmentHelper.IModifier modifier, ItemStack[] stacks) {
         ItemStack[] aitemstack1 = stacks;
         int i = stacks.length;
 
-        for (int j = 0; j < i; ++j)
-        {
+        for (int j = 0; j < i; ++j) {
             ItemStack itemstack = aitemstack1[j];
             applyEnchantmentModifier(modifier, itemstack);
         }
     }
 
-    public static int getEnchantmentModifierDamage(ItemStack[] stacks, DamageSource source)
-    {
+    public static int getEnchantmentModifierDamage(ItemStack[] stacks, DamageSource source) {
         enchantmentModifierDamage.damageModifier = 0;
         enchantmentModifierDamage.source = source;
         applyEnchantmentModifierArray(enchantmentModifierDamage, stacks);
 
-        if (enchantmentModifierDamage.damageModifier > 25)
-        {
+        if (enchantmentModifierDamage.damageModifier > 25) {
             enchantmentModifierDamage.damageModifier = 25;
         }
 
         return (enchantmentModifierDamage.damageModifier + 1 >> 1) + enchantmentRand.nextInt((enchantmentModifierDamage.damageModifier >> 1) + 1);
     }
 
-    public static float func_152377_a(ItemStack p_152377_0_, EnumCreatureAttribute p_152377_1_)
-    {
+    public static float func_152377_a(ItemStack p_152377_0_, EnumCreatureAttribute p_152377_1_) {
         enchantmentModifierLiving.livingModifier = 0.0F;
         enchantmentModifierLiving.entityLiving = p_152377_1_;
         applyEnchantmentModifier(enchantmentModifierLiving, p_152377_0_);
         return enchantmentModifierLiving.livingModifier;
     }
 
-    public static void func_151384_a(EntityLivingBase p_151384_0_, Entity p_151384_1_)
-    {
+    public static void func_151384_a(EntityLivingBase p_151384_0_, Entity p_151384_1_) {
         field_151388_d.field_151363_b = p_151384_1_;
         field_151388_d.field_151364_a = p_151384_0_;
 
-        if (p_151384_0_ != null)
-        {
+        if (p_151384_0_ != null) {
             applyEnchantmentModifierArray(field_151388_d, p_151384_0_.getInventory());
         }
 
-        if (p_151384_1_ instanceof EntityPlayer)
-        {
+        if (p_151384_1_ instanceof EntityPlayer) {
             applyEnchantmentModifier(field_151388_d, p_151384_0_.getHeldItem());
         }
+        // Spigot start
+        field_151388_d.field_151363_b = null;
+        field_151388_d.field_151364_a = null;
+        // Spigot end
     }
 
-    public static void func_151385_b(EntityLivingBase p_151385_0_, Entity p_151385_1_)
-    {
+    public static void func_151385_b(EntityLivingBase p_151385_0_, Entity p_151385_1_) {
         field_151389_e.field_151366_a = p_151385_0_;
         field_151389_e.field_151365_b = p_151385_1_;
 
-        if (p_151385_0_ != null)
-        {
+        if (p_151385_0_ != null) {
             applyEnchantmentModifierArray(field_151389_e, p_151385_0_.getInventory());
         }
 
-        if (p_151385_0_ instanceof EntityPlayer)
-        {
+        if (p_151385_0_ instanceof EntityPlayer) {
             applyEnchantmentModifier(field_151389_e, p_151385_0_.getHeldItem());
         }
+        // Spigot start
+        field_151389_e.field_151366_a = null;
+        field_151389_e.field_151365_b = null;
+        // Spigot end
     }
 
-    public static int getKnockbackModifier(EntityLivingBase player)
-    {
+    public static int getKnockbackModifier(EntityLivingBase player) {
         return getEnchantmentLevel(Enchantment.knockback.effectId, player.getHeldItem());
     }
 
-    public static int getFireAspectModifier(EntityLivingBase player)
-    {
+    public static int getFireAspectModifier(EntityLivingBase player) {
         return getEnchantmentLevel(Enchantment.fireAspect.effectId, player.getHeldItem());
     }
 
-    public static int getRespiration(Entity player)
-    {
+    public static int getRespiration(Entity player) {
         return getMaxEnchantmentLevel(Enchantment.respiration.effectId, player.getInventory());
     }
 
-    public static int getDepthStriderModifier(Entity player)
-    {
+    public static int getDepthStriderModifier(Entity player) {
         return getMaxEnchantmentLevel(Enchantment.depthStrider.effectId, player.getInventory());
     }
 
-    public static int getEfficiencyModifier(EntityLivingBase player)
-    {
+    public static int getEfficiencyModifier(EntityLivingBase player) {
         return getEnchantmentLevel(Enchantment.efficiency.effectId, player.getHeldItem());
     }
 
-    public static boolean getSilkTouchModifier(EntityLivingBase player)
-    {
+    public static boolean getSilkTouchModifier(EntityLivingBase player) {
         return getEnchantmentLevel(Enchantment.silkTouch.effectId, player.getHeldItem()) > 0;
     }
 
-    public static int getFortuneModifier(EntityLivingBase player)
-    {
+    public static int getFortuneModifier(EntityLivingBase player) {
         return getEnchantmentLevel(Enchantment.fortune.effectId, player.getHeldItem());
     }
 
-    public static int getLuckOfSeaModifier(EntityLivingBase player)
-    {
+    public static int getLuckOfSeaModifier(EntityLivingBase player) {
         return getEnchantmentLevel(Enchantment.luckOfTheSea.effectId, player.getHeldItem());
     }
 
-    public static int getLureModifier(EntityLivingBase player)
-    {
+    public static int getLureModifier(EntityLivingBase player) {
         return getEnchantmentLevel(Enchantment.lure.effectId, player.getHeldItem());
     }
 
-    public static int getLootingModifier(EntityLivingBase player)
-    {
+    public static int getLootingModifier(EntityLivingBase player) {
         return getEnchantmentLevel(Enchantment.looting.effectId, player.getHeldItem());
     }
 
-    public static boolean getAquaAffinityModifier(EntityLivingBase player)
-    {
+    public static boolean getAquaAffinityModifier(EntityLivingBase player) {
         return getMaxEnchantmentLevel(Enchantment.aquaAffinity.effectId, player.getInventory()) > 0;
     }
 
-    public static ItemStack getEnchantedItem(Enchantment p_92099_0_, EntityLivingBase p_92099_1_)
-    {
+    public static ItemStack getEnchantedItem(Enchantment p_92099_0_, EntityLivingBase p_92099_1_) {
         ItemStack[] aitemstack = p_92099_1_.getInventory();
         int i = aitemstack.length;
 
-        for (int j = 0; j < i; ++j)
-        {
+        for (int j = 0; j < i; ++j) {
             ItemStack itemstack = aitemstack[j];
 
-            if (itemstack != null && getEnchantmentLevel(p_92099_0_.effectId, itemstack) > 0)
-            {
+            if (itemstack != null && getEnchantmentLevel(p_92099_0_.effectId, itemstack) > 0) {
                 return itemstack;
             }
         }
 
         return null;
     }
 
-    public static int calcItemStackEnchantability(Random p_77514_0_, int p_77514_1_, int p_77514_2_, ItemStack p_77514_3_)
-    {
+    public static int calcItemStackEnchantability(Random p_77514_0_, int p_77514_1_, int p_77514_2_, ItemStack p_77514_3_) {
         Item item = p_77514_3_.getItem();
         int k = item.getItemEnchantability();
 
-        if (k <= 0)
-        {
+        if (k <= 0) {
             return 0;
-        }
-        else
-        {
-            if (p_77514_2_ > 15)
-            {
+        } else {
+            if (p_77514_2_ > 15) {
                 p_77514_2_ = 15;
             }
 
             int l = p_77514_0_.nextInt(8) + 1 + (p_77514_2_ >> 1) + p_77514_0_.nextInt(p_77514_2_ + 1);
             return p_77514_1_ == 0 ? Math.max(l / 3, 1) : (p_77514_1_ == 1 ? l * 2 / 3 + 1 : Math.max(l, p_77514_2_ * 2));
         }
     }
 
-    public static ItemStack addRandomEnchantment(Random p_77504_0_, ItemStack p_77504_1_, int p_77504_2_)
-    {
+    public static ItemStack addRandomEnchantment(Random p_77504_0_, ItemStack p_77504_1_, int p_77504_2_) {
         List list = buildEnchantmentList(p_77504_0_, p_77504_1_, p_77504_2_);
         boolean flag = p_77504_1_.getItem() == Items.book;
 
-        if (flag)
-        {
+        if (flag) {
             p_77504_1_.setItem(Items.enchanted_book);
         }
 
-        if (list != null)
-        {
+        if (list != null) {
             Iterator iterator = list.iterator();
 
-            while (iterator.hasNext())
-            {
-                EnchantmentData enchantmentdata = (EnchantmentData)iterator.next();
+            while (iterator.hasNext()) {
+                EnchantmentData enchantmentdata = (EnchantmentData) iterator.next();
 
-                if (flag)
-                {
+                if (flag) {
                     Items.enchanted_book.addEnchantment(p_77504_1_, enchantmentdata);
-                }
-                else
-                {
+                } else {
                     p_77504_1_.addEnchantment(enchantmentdata.enchantmentobj, enchantmentdata.enchantmentLevel);
                 }
             }
         }
 
         return p_77504_1_;
     }
 
-    public static List buildEnchantmentList(Random p_77513_0_, ItemStack p_77513_1_, int p_77513_2_)
-    {
+    public static List buildEnchantmentList(Random p_77513_0_, ItemStack p_77513_1_, int p_77513_2_) {
         Item item = p_77513_1_.getItem();
         int j = item.getItemEnchantability();
 
-        if (j <= 0)
-        {
+        if (j <= 0) {
             return null;
-        }
-        else
-        {
+        } else {
             j /= 2;
             j = 1 + p_77513_0_.nextInt((j >> 1) + 1) + p_77513_0_.nextInt((j >> 1) + 1);
             int k = j + p_77513_2_;
             float f = (p_77513_0_.nextFloat() + p_77513_0_.nextFloat() - 1.0F) * 0.15F;
-            int l = (int)((float)k * (1.0F + f) + 0.5F);
+            int l = (int) ((float) k * (1.0F + f) + 0.5F);
 
-            if (l < 1)
-            {
+            if (l < 1) {
                 l = 1;
             }
 
             ArrayList arraylist = null;
             Map map = mapEnchantmentData(l, p_77513_1_);
 
-            if (map != null && !map.isEmpty())
-            {
-                EnchantmentData enchantmentdata = (EnchantmentData)WeightedRandom.getRandomItem(p_77513_0_, map.values());
+            if (map != null && !map.isEmpty()) {
+                EnchantmentData enchantmentdata = (EnchantmentData) WeightedRandom.getRandomItem(p_77513_0_, map.values());
 
-                if (enchantmentdata != null)
-                {
+                if (enchantmentdata != null) {
                     arraylist = Lists.newArrayList();
                     arraylist.add(enchantmentdata);
 
-                    for (int i1 = l; p_77513_0_.nextInt(50) <= i1; i1 >>= 1)
-                    {
+                    for (int i1 = l; p_77513_0_.nextInt(50) <= i1; i1 >>= 1) {
                         Iterator iterator = map.keySet().iterator();
 
-                        while (iterator.hasNext())
-                        {
-                            Integer integer = (Integer)iterator.next();
+                        while (iterator.hasNext()) {
+                            Integer integer = (Integer) iterator.next();
                             boolean flag = true;
                             Iterator iterator1 = arraylist.iterator();
 
-                            while (true)
-                            {
-                                if (iterator1.hasNext())
-                                {
-                                    EnchantmentData enchantmentdata1 = (EnchantmentData)iterator1.next();
+                            while (true) {
+                                if (iterator1.hasNext()) {
+                                    EnchantmentData enchantmentdata1 = (EnchantmentData) iterator1.next();
 
-                                    if (enchantmentdata1.enchantmentobj.canApplyTogether(Enchantment.getEnchantmentById(integer.intValue())))
-                                    {
+                                    if (enchantmentdata1.enchantmentobj.canApplyTogether(Enchantment.getEnchantmentById(integer.intValue()))) {
                                         continue;
                                     }
 
                                     flag = false;
                                 }
 
-                                if (!flag)
-                                {
+                                if (!flag) {
                                     iterator.remove();
                                 }
 
                                 break;
                             }
                         }
 
-                        if (!map.isEmpty())
-                        {
-                            EnchantmentData enchantmentdata2 = (EnchantmentData)WeightedRandom.getRandomItem(p_77513_0_, map.values());
+                        if (!map.isEmpty()) {
+                            EnchantmentData enchantmentdata2 = (EnchantmentData) WeightedRandom.getRandomItem(p_77513_0_, map.values());
                             arraylist.add(enchantmentdata2);
                         }
                     }
                 }
             }
 
             return arraylist;
         }
     }
 
-    public static Map mapEnchantmentData(int p_77505_0_, ItemStack p_77505_1_)
-    {
+    public static Map mapEnchantmentData(int p_77505_0_, ItemStack p_77505_1_) {
         Item item = p_77505_1_.getItem();
         HashMap hashmap = null;
         boolean flag = p_77505_1_.getItem() == Items.book;
         Enchantment[] aenchantment = Enchantment.enchantmentsBookList;
         int j = aenchantment.length;
 
-        for (int k = 0; k < j; ++k)
-        {
+        for (int k = 0; k < j; ++k) {
             Enchantment enchantment = aenchantment[k];
 
-            if (enchantment != null && (enchantment.type.canEnchantItem(item) || flag))
-            {
-                for (int l = enchantment.getMinLevel(); l <= enchantment.getMaxLevel(); ++l)
-                {
-                    if (p_77505_0_ >= enchantment.getMinEnchantability(l) && p_77505_0_ <= enchantment.getMaxEnchantability(l))
-                    {
-                        if (hashmap == null)
-                        {
+            if (enchantment != null && (enchantment.type.canEnchantItem(item) || flag)) {
+                for (int l = enchantment.getMinLevel(); l <= enchantment.getMaxLevel(); ++l) {
+                    if (p_77505_0_ >= enchantment.getMinEnchantability(l) && p_77505_0_ <= enchantment.getMaxEnchantability(l)) {
+                        if (hashmap == null) {
                             hashmap = Maps.newHashMap();
                         }
 
                         hashmap.put(Integer.valueOf(enchantment.effectId), new EnchantmentData(enchantment, l));
                     }
@@ -468,86 +390,82 @@
         }
 
         return hashmap;
     }
 
-    static final class DamageIterator implements EnchantmentHelper.IModifier
-        {
-            public EntityLivingBase field_151366_a;
-            public Entity field_151365_b;
-            private static final String __OBFID = "CL_00000109";
+    static final class DamageIterator implements EnchantmentHelper.IModifier {
 
-            private DamageIterator() {}
+        public EntityLivingBase field_151366_a;
+        public Entity field_151365_b;
+        private static final String __OBFID = "CL_00000109";
 
-            public void calculateModifier(Enchantment p_77493_1_, int p_77493_2_)
-            {
-                p_77493_1_.onEntityDamaged(this.field_151366_a, this.field_151365_b, p_77493_2_);
-            }
+        private DamageIterator() {
+        }
 
-            DamageIterator(Object p_i45359_1_)
-            {
-                this();
-            }
+        public void calculateModifier(Enchantment p_77493_1_, int p_77493_2_) {
+            p_77493_1_.onEntityDamaged(this.field_151366_a, this.field_151365_b, p_77493_2_);
         }
 
-    static final class HurtIterator implements EnchantmentHelper.IModifier
-        {
-            public EntityLivingBase field_151364_a;
-            public Entity field_151363_b;
-            private static final String __OBFID = "CL_00000110";
+        DamageIterator(Object p_i45359_1_) {
+            this();
+        }
+    }
 
-            private HurtIterator() {}
+    static final class HurtIterator implements EnchantmentHelper.IModifier {
 
-            public void calculateModifier(Enchantment p_77493_1_, int p_77493_2_)
-            {
-                p_77493_1_.onUserHurt(this.field_151364_a, this.field_151363_b, p_77493_2_);
-            }
+        public EntityLivingBase field_151364_a;
+        public Entity field_151363_b;
+        private static final String __OBFID = "CL_00000110";
 
-            HurtIterator(Object p_i45360_1_)
-            {
-                this();
-            }
+        private HurtIterator() {
         }
 
-    interface IModifier
-    {
+        public void calculateModifier(Enchantment p_77493_1_, int p_77493_2_) {
+            p_77493_1_.onUserHurt(this.field_151364_a, this.field_151363_b, p_77493_2_);
+        }
+
+        HurtIterator(Object p_i45360_1_) {
+            this();
+        }
+    }
+
+    interface IModifier {
+
         void calculateModifier(Enchantment p_77493_1_, int p_77493_2_);
     }
 
-    static final class ModifierDamage implements EnchantmentHelper.IModifier
-        {
-            public int damageModifier;
-            public DamageSource source;
-            private static final String __OBFID = "CL_00000114";
+    static final class ModifierDamage implements EnchantmentHelper.IModifier {
 
-            private ModifierDamage() {}
+        public int damageModifier;
+        public DamageSource source;
+        private static final String __OBFID = "CL_00000114";
 
-            public void calculateModifier(Enchantment p_77493_1_, int p_77493_2_)
-            {
-                this.damageModifier += p_77493_1_.calcModifierDamage(p_77493_2_, this.source);
-            }
+        private ModifierDamage() {
+        }
 
-            ModifierDamage(Object p_i1929_1_)
-            {
-                this();
-            }
+        public void calculateModifier(Enchantment p_77493_1_, int p_77493_2_) {
+            this.damageModifier += p_77493_1_.calcModifierDamage(p_77493_2_, this.source);
         }
 
-    static final class ModifierLiving implements EnchantmentHelper.IModifier
-        {
-            public float livingModifier;
-            public EnumCreatureAttribute entityLiving;
-            private static final String __OBFID = "CL_00000112";
+        ModifierDamage(Object p_i1929_1_) {
+            this();
+        }
+    }
 
-            private ModifierLiving() {}
+    static final class ModifierLiving implements EnchantmentHelper.IModifier {
 
-            public void calculateModifier(Enchantment p_77493_1_, int p_77493_2_)
-            {
-                this.livingModifier += p_77493_1_.calcDamageByCreature(p_77493_2_, this.entityLiving);
-            }
+        public float livingModifier;
+        public EnumCreatureAttribute entityLiving;
+        private static final String __OBFID = "CL_00000112";
 
-            ModifierLiving(Object p_i1928_1_)
-            {
-                this();
-            }
+        private ModifierLiving() {
         }
+
+        public void calculateModifier(Enchantment p_77493_1_, int p_77493_2_) {
+            this.livingModifier += p_77493_1_.calcDamageByCreature(p_77493_2_, this.entityLiving);
+        }
+
+        ModifierLiving(Object p_i1928_1_) {
+            this();
+        }
+    }
 }
