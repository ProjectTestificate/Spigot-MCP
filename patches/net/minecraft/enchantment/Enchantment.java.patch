--- decompiled\net\minecraft\enchantment\Enchantment.java
+++ src\main\java\net\minecraft\enchantment\Enchantment.java
@@ -1,22 +1,27 @@
 package net.minecraft.enchantment;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.Map;
+
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.EnumCreatureAttribute;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.StatCollector;
 
-public abstract class Enchantment
-{
+import org.bukkit.craftbukkit.enchantments.CraftEnchantment;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
+public abstract class Enchantment {
+
+    // CraftBukkit - update CraftEnchant.getName(i) if this changes
     private static final Enchantment[] enchantmentsList = new Enchantment[256];
     public static final Enchantment[] enchantmentsBookList;
     private static final Map locationEnchantments = Maps.newHashMap();
     public static final Enchantment protection = new EnchantmentProtection(0, new ResourceLocation("protection"), 10, 0);
     public static final Enchantment fireProtection = new EnchantmentProtection(1, new ResourceLocation("fire_protection"), 5, 1);
@@ -47,131 +52,112 @@
     private final int weight;
     public EnumEnchantmentType type;
     protected String name;
     private static final String __OBFID = "CL_00000105";
 
-    public static Enchantment getEnchantmentById(int enchID)
-    {
+    public static Enchantment getEnchantmentById(int enchID) {
         return enchID >= 0 && enchID < enchantmentsList.length ? enchantmentsList[enchID] : null;
     }
 
-    protected Enchantment(int enchID, ResourceLocation enchName, int enchWeight, EnumEnchantmentType enchType)
-    {
+    protected Enchantment(int enchID, ResourceLocation enchName, int enchWeight, EnumEnchantmentType enchType) {
         this.effectId = enchID;
         this.weight = enchWeight;
         this.type = enchType;
 
-        if (enchantmentsList[enchID] != null)
-        {
+        if (enchantmentsList[enchID] != null) {
             throw new IllegalArgumentException("Duplicate enchantment id!");
-        }
-        else
-        {
+        } else {
             enchantmentsList[enchID] = this;
             locationEnchantments.put(enchName, this);
         }
+
+        org.bukkit.enchantments.Enchantment.registerEnchantment(new CraftEnchantment(this)); // CraftBukkit
     }
 
-    public static Enchantment getEnchantmentByLocation(String location)
-    {
-        return (Enchantment)locationEnchantments.get(new ResourceLocation(location));
+    public static Enchantment getEnchantmentByLocation(String location) {
+        return (Enchantment) locationEnchantments.get(new ResourceLocation(location));
     }
 
-    public static String[] getLocationNames()
-    {
+    public static String[] getLocationNames() {
         String[] astring = new String[locationEnchantments.size()];
         int i = 0;
         ResourceLocation resourcelocation;
 
-        for (Iterator iterator = locationEnchantments.keySet().iterator(); iterator.hasNext(); astring[i++] = resourcelocation.toString())
-        {
-            resourcelocation = (ResourceLocation)iterator.next();
+        for (Iterator iterator = locationEnchantments.keySet().iterator(); iterator.hasNext(); astring[i++] = resourcelocation.toString()) {
+            resourcelocation = (ResourceLocation) iterator.next();
         }
 
         return astring;
     }
 
-    public int getWeight()
-    {
+    public int getWeight() {
         return this.weight;
     }
 
-    public int getMinLevel()
-    {
+    public int getMinLevel() {
         return 1;
     }
 
-    public int getMaxLevel()
-    {
+    public int getMaxLevel() {
         return 1;
     }
 
-    public int getMinEnchantability(int enchantmentLevel)
-    {
+    public int getMinEnchantability(int enchantmentLevel) {
         return 1 + enchantmentLevel * 10;
     }
 
-    public int getMaxEnchantability(int enchantmentLevel)
-    {
+    public int getMaxEnchantability(int enchantmentLevel) {
         return this.getMinEnchantability(enchantmentLevel) + 5;
     }
 
-    public int calcModifierDamage(int level, DamageSource source)
-    {
+    public int calcModifierDamage(int level, DamageSource source) {
         return 0;
     }
 
-    public float calcDamageByCreature(int level, EnumCreatureAttribute creatureType)
-    {
+    public float calcDamageByCreature(int level, EnumCreatureAttribute creatureType) {
         return 0.0F;
     }
 
-    public boolean canApplyTogether(Enchantment ench)
-    {
+    public boolean canApplyTogether(Enchantment ench) {
         return this != ench;
     }
 
-    public Enchantment setName(String enchName)
-    {
+    public Enchantment setName(String enchName) {
         this.name = enchName;
         return this;
     }
 
-    public String getName()
-    {
+    public String getName() {
         return "enchantment." + this.name;
     }
 
-    public String getTranslatedName(int level)
-    {
+    public String getTranslatedName(int level) {
         String s = StatCollector.translateToLocal(this.getName());
         return s + " " + StatCollector.translateToLocal("enchantment.level." + level);
     }
 
-    public boolean canApply(ItemStack stack)
-    {
+    public boolean canApply(ItemStack stack) {
         return this.type.canEnchantItem(stack.getItem());
     }
 
-    public void onEntityDamaged(EntityLivingBase user, Entity target, int level) {}
+    public void onEntityDamaged(EntityLivingBase user, Entity target, int level) {
+    }
 
-    public void onUserHurt(EntityLivingBase user, Entity attacker, int level) {}
+    public void onUserHurt(EntityLivingBase user, Entity attacker, int level) {
+    }
 
-    static
-    {
+    static {
         ArrayList var0 = Lists.newArrayList();
         Enchantment[] var1 = enchantmentsList;
         int var2 = var1.length;
 
-        for (int var3 = 0; var3 < var2; ++var3)
-        {
+        for (int var3 = 0; var3 < var2; ++var3) {
             Enchantment var4 = var1[var3];
 
-            if (var4 != null)
-            {
+            if (var4 != null) {
                 var0.add(var4);
             }
         }
 
-        enchantmentsBookList = (Enchantment[])var0.toArray(new Enchantment[var0.size()]);
+        enchantmentsBookList = (Enchantment[]) var0.toArray(new Enchantment[var0.size()]);
     }
 }
