--- decompiled\net\minecraft\pathfinding\Path.java
+++ src\main\java\net\minecraft\pathfinding\Path.java
@@ -1,23 +1,18 @@
 package net.minecraft.pathfinding;
 
-public class Path
-{
-    private PathPoint[] pathPoints = new PathPoint[1024];
+public class Path {
+
+    private PathPoint[] pathPoints = new PathPoint[128]; // CraftBukkit - reduce default size
     private int count;
     private static final String __OBFID = "CL_00000573";
 
-    public PathPoint addPoint(PathPoint point)
-    {
-        if (point.index >= 0)
-        {
+    public PathPoint addPoint(PathPoint point) {
+        if (point.index >= 0) {
             throw new IllegalStateException("OW KNOWS!");
-        }
-        else
-        {
-            if (this.count == this.pathPoints.length)
-            {
+        } else {
+            if (this.count == this.pathPoints.length) {
                 PathPoint[] apathpoint = new PathPoint[this.count << 1];
                 System.arraycopy(this.pathPoints, 0, apathpoint, 0, this.count);
                 this.pathPoints = apathpoint;
             }
 
@@ -26,57 +21,47 @@
             this.sortBack(this.count++);
             return point;
         }
     }
 
-    public void clearPath()
-    {
+    public void clearPath() {
         this.count = 0;
     }
 
-    public PathPoint dequeue()
-    {
+    public PathPoint dequeue() {
         PathPoint pathpoint = this.pathPoints[0];
         this.pathPoints[0] = this.pathPoints[--this.count];
         this.pathPoints[this.count] = null;
 
-        if (this.count > 0)
-        {
+        if (this.count > 0) {
             this.sortForward(0);
         }
 
         pathpoint.index = -1;
         return pathpoint;
     }
 
-    public void changeDistance(PathPoint p_75850_1_, float p_75850_2_)
-    {
+    public void changeDistance(PathPoint p_75850_1_, float p_75850_2_) {
         float f1 = p_75850_1_.distanceToTarget;
         p_75850_1_.distanceToTarget = p_75850_2_;
 
-        if (p_75850_2_ < f1)
-        {
+        if (p_75850_2_ < f1) {
             this.sortBack(p_75850_1_.index);
-        }
-        else
-        {
+        } else {
             this.sortForward(p_75850_1_.index);
         }
     }
 
-    private void sortBack(int p_75847_1_)
-    {
+    private void sortBack(int p_75847_1_) {
         PathPoint pathpoint = this.pathPoints[p_75847_1_];
         int j;
 
-        for (float f = pathpoint.distanceToTarget; p_75847_1_ > 0; p_75847_1_ = j)
-        {
+        for (float f = pathpoint.distanceToTarget; p_75847_1_ > 0; p_75847_1_ = j) {
             j = p_75847_1_ - 1 >> 1;
             PathPoint pathpoint1 = this.pathPoints[j];
 
-            if (f >= pathpoint1.distanceToTarget)
-            {
+            if (f >= pathpoint1.distanceToTarget) {
                 break;
             }
 
             this.pathPoints[p_75847_1_] = pathpoint1;
             pathpoint1.index = p_75847_1_;
@@ -84,56 +69,45 @@
 
         this.pathPoints[p_75847_1_] = pathpoint;
         pathpoint.index = p_75847_1_;
     }
 
-    private void sortForward(int p_75846_1_)
-    {
+    private void sortForward(int p_75846_1_) {
         PathPoint pathpoint = this.pathPoints[p_75846_1_];
         float f = pathpoint.distanceToTarget;
 
-        while (true)
-        {
+        while (true) {
             int j = 1 + (p_75846_1_ << 1);
             int k = j + 1;
 
-            if (j >= this.count)
-            {
+            if (j >= this.count) {
                 break;
             }
 
             PathPoint pathpoint1 = this.pathPoints[j];
             float f1 = pathpoint1.distanceToTarget;
             PathPoint pathpoint2;
             float f2;
 
-            if (k >= this.count)
-            {
+            if (k >= this.count) {
                 pathpoint2 = null;
                 f2 = Float.POSITIVE_INFINITY;
-            }
-            else
-            {
+            } else {
                 pathpoint2 = this.pathPoints[k];
                 f2 = pathpoint2.distanceToTarget;
             }
 
-            if (f1 < f2)
-            {
-                if (f1 >= f)
-                {
+            if (f1 < f2) {
+                if (f1 >= f) {
                     break;
                 }
 
                 this.pathPoints[p_75846_1_] = pathpoint1;
                 pathpoint1.index = p_75846_1_;
                 p_75846_1_ = j;
-            }
-            else
-            {
-                if (f2 >= f)
-                {
+            } else {
+                if (f2 >= f) {
                     break;
                 }
 
                 this.pathPoints[p_75846_1_] = pathpoint2;
                 pathpoint2.index = p_75846_1_;
@@ -143,10 +117,9 @@
 
         this.pathPoints[p_75846_1_] = pathpoint;
         pathpoint.index = p_75846_1_;
     }
 
-    public boolean isPathEmpty()
-    {
+    public boolean isPathEmpty() {
         return this.count == 0;
     }
 }
