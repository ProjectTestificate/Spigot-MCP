--- decompiled\net\minecraft\pathfinding\PathNavigateSwimmer.java
+++ src\main\java\net\minecraft\pathfinding\PathNavigateSwimmer.java
@@ -4,65 +4,55 @@
 import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.World;
 import net.minecraft.world.pathfinder.SwimNodeProcessor;
 
-public class PathNavigateSwimmer extends PathNavigate
-{
+public class PathNavigateSwimmer extends PathNavigate {
+
     private static final String __OBFID = "CL_00002244";
 
-    public PathNavigateSwimmer(EntityLiving p_i45873_1_, World worldIn)
-    {
+    public PathNavigateSwimmer(EntityLiving p_i45873_1_, World worldIn) {
         super(p_i45873_1_, worldIn);
     }
 
-    protected PathFinder func_179679_a()
-    {
+    protected PathFinder func_179679_a() {
         return new PathFinder(new SwimNodeProcessor());
     }
 
-    protected boolean canNavigate()
-    {
+    protected boolean canNavigate() {
         return this.isInLiquid();
     }
 
-    protected Vec3 getEntityPosition()
-    {
-        return new Vec3(this.theEntity.posX, this.theEntity.posY + (double)this.theEntity.height * 0.5D, this.theEntity.posZ);
+    protected Vec3 getEntityPosition() {
+        return new Vec3(this.theEntity.posX, this.theEntity.posY + (double) this.theEntity.height * 0.5D, this.theEntity.posZ);
     }
 
-    protected void pathFollow()
-    {
+    protected void pathFollow() {
         Vec3 vec3 = this.getEntityPosition();
         float f = this.theEntity.width * this.theEntity.width;
         byte b0 = 6;
 
-        if (vec3.squareDistanceTo(this.currentPath.getVectorFromIndex(this.theEntity, this.currentPath.getCurrentPathIndex())) < (double)f)
-        {
+        if (vec3.squareDistanceTo(this.currentPath.getVectorFromIndex(this.theEntity, this.currentPath.getCurrentPathIndex())) < (double) f) {
             this.currentPath.incrementPathIndex();
         }
 
-        for (int i = Math.min(this.currentPath.getCurrentPathIndex() + b0, this.currentPath.getCurrentPathLength() - 1); i > this.currentPath.getCurrentPathIndex(); --i)
-        {
+        for (int i = Math.min(this.currentPath.getCurrentPathIndex() + b0, this.currentPath.getCurrentPathLength() - 1); i > this.currentPath.getCurrentPathIndex(); --i) {
             Vec3 vec31 = this.currentPath.getVectorFromIndex(this.theEntity, i);
 
-            if (vec31.squareDistanceTo(vec3) <= 36.0D && this.isDirectPathBetweenPoints(vec3, vec31, 0, 0, 0))
-            {
+            if (vec31.squareDistanceTo(vec3) <= 36.0D && this.isDirectPathBetweenPoints(vec3, vec31, 0, 0, 0)) {
                 this.currentPath.setCurrentPathIndex(i);
                 break;
             }
         }
 
         this.func_179677_a(vec3);
     }
 
-    protected void removeSunnyPath()
-    {
+    protected void removeSunnyPath() {
         super.removeSunnyPath();
     }
 
-    protected boolean isDirectPathBetweenPoints(Vec3 p_75493_1_, Vec3 p_75493_2_, int p_75493_3_, int p_75493_4_, int p_75493_5_)
-    {
-        MovingObjectPosition movingobjectposition = this.worldObj.rayTraceBlocks(p_75493_1_, new Vec3(p_75493_2_.xCoord, p_75493_2_.yCoord + (double)this.theEntity.height * 0.5D, p_75493_2_.zCoord), false, true, false);
+    protected boolean isDirectPathBetweenPoints(Vec3 p_75493_1_, Vec3 p_75493_2_, int p_75493_3_, int p_75493_4_, int p_75493_5_) {
+        MovingObjectPosition movingobjectposition = this.worldObj.rayTraceBlocks(p_75493_1_, new Vec3(p_75493_2_.xCoord, p_75493_2_.yCoord + (double) this.theEntity.height * 0.5D, p_75493_2_.zCoord), false, true, false);
         return movingobjectposition == null || movingobjectposition.typeOfHit == MovingObjectPosition.MovingObjectType.MISS;
     }
 }
