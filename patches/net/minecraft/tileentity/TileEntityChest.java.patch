--- decompiled\net\minecraft\tileentity\TileEntityChest.java
+++ src\main\java\net\minecraft\tileentity\TileEntityChest.java
@@ -1,13 +1,16 @@
 package net.minecraft.tileentity;
 
+import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockChest;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.InventoryPlayer;
+import net.minecraft.init.Blocks;
 import net.minecraft.inventory.Container;
 import net.minecraft.inventory.ContainerChest;
 import net.minecraft.inventory.IInventory;
 import net.minecraft.inventory.InventoryLargeChest;
 import net.minecraft.item.ItemStack;
@@ -15,15 +18,18 @@
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.server.gui.IUpdatePlayerListBox;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.HumanEntity;
+
 public class TileEntityChest extends TileEntityLockable implements IUpdatePlayerListBox, IInventory
 {
+
     private ItemStack[] chestContents = new ItemStack[27];
     public boolean adjacentChestChecked;
     public TileEntityChest adjacentChestZNeg;
     public TileEntityChest adjacentChestXPos;
     public TileEntityChest adjacentChestXNeg;
@@ -39,16 +45,40 @@
     public TileEntityChest()
     {
         this.cachedChestType = -1;
     }
 
-    @SideOnly(Side.CLIENT)
-    public TileEntityChest(int chestType)
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    public net.minecraft.item.ItemStack[] getContents()
     {
-        this.cachedChestType = chestType;
+        return this.chestContents;
     }
 
+    public void onOpen(CraftHumanEntity who)
+    {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who)
+    {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers()
+    {
+        return transaction;
+    }
+
+    public void setMaxStackSize(int size)
+    {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
     public int getSizeInventory()
     {
         return 27;
     }
 
@@ -177,15 +207,17 @@
         }
     }
 
     public int getInventoryStackLimit()
     {
-        return 64;
+        return maxStack; // CraftBukkit
     }
 
     public boolean isUseableByPlayer(EntityPlayer player)
     {
+        if (this.worldObj == null) return true; // CraftBukkit
+
         return this.worldObj.getTileEntity(this.pos) != this ? false : player.getDistanceSq((double)this.pos.getX() + 0.5D, (double)this.pos.getY() + 0.5D, (double)this.pos.getZ() + 0.5D) <= 64.0D;
     }
 
     public void updateContainingBlockInfo()
     {
@@ -202,31 +234,35 @@
         else if (this.adjacentChestChecked)
         {
             switch (TileEntityChest.SwitchEnumFacing.field_177366_a[p_174910_2_.ordinal()])
             {
                 case 1:
+
                     if (this.adjacentChestZNeg != p_174910_1_)
                     {
                         this.adjacentChestChecked = false;
                     }
 
                     break;
                 case 2:
+
                     if (this.adjacentChestZPos != p_174910_1_)
                     {
                         this.adjacentChestChecked = false;
                     }
 
                     break;
                 case 3:
+
                     if (this.adjacentChestXPos != p_174910_1_)
                     {
                         this.adjacentChestChecked = false;
                     }
 
                     break;
                 case 4:
+
                     if (this.adjacentChestXNeg != p_174910_1_)
                     {
                         this.adjacentChestChecked = false;
                     }
             }
@@ -396,23 +432,54 @@
             if (this.numPlayersUsing < 0)
             {
                 this.numPlayersUsing = 0;
             }
 
+            int oldPower = Math.max(0, Math.min(15, this.numPlayersUsing)); // CraftBukkit - Get power before new viewer is added
             ++this.numPlayersUsing;
             this.worldObj.addBlockEvent(this.pos, this.getBlockType(), 1, this.numPlayersUsing);
+
+            // CraftBukkit start - Call redstone event
+            if (this.getBlockType() == Blocks.trapped_chest)
+            {
+                int newPower = Math.max(0, Math.min(15, this.numPlayersUsing));
+
+                if (oldPower != newPower)
+                {
+                    CraftEventFactory.callRedstoneChange(worldObj, pos.getX(), pos.getY(), pos.getZ(), oldPower, newPower);
+                }
+            }
+
+            // CraftBukkit end
             this.worldObj.notifyNeighborsOfStateChange(this.pos, this.getBlockType());
             this.worldObj.notifyNeighborsOfStateChange(this.pos.down(), this.getBlockType());
         }
     }
 
     public void closeInventory(EntityPlayer player)
     {
         if (!player.isSpectator() && this.getBlockType() instanceof BlockChest)
         {
+            int oldPower = Math.max(0, Math.min(15, this.numPlayersUsing)); // CraftBukkit - Get power before new viewer is added
             --this.numPlayersUsing;
+
+            if (this.worldObj == null) return; // CraftBukkit
+
             this.worldObj.addBlockEvent(this.pos, this.getBlockType(), 1, this.numPlayersUsing);
+
+            // CraftBukkit start - Call redstone event
+            if (this.getBlockType() == Blocks.trapped_chest)
+            {
+                int newPower = Math.max(0, Math.min(15, this.numPlayersUsing));
+
+                if (oldPower != newPower)
+                {
+                    CraftEventFactory.callRedstoneChange(worldObj, pos.getX(), pos.getY(), pos.getZ(), oldPower, newPower);
+                }
+            }
+
+            // CraftBukkit end
             this.worldObj.notifyNeighborsOfStateChange(this.pos, this.getBlockType());
             this.worldObj.notifyNeighborsOfStateChange(this.pos.down(), this.getBlockType());
         }
     }
 
@@ -456,11 +523,13 @@
     public int getField(int id)
     {
         return 0;
     }
 
-    public void setField(int id, int value) {}
+    public void setField(int id, int value)
+    {
+    }
 
     public int getFieldCount()
     {
         return 0;
     }
@@ -473,10 +542,11 @@
         }
     }
 
     static final class SwitchEnumFacing
         {
+
             static final int[] field_177366_a = new int[EnumFacing.values().length];
             private static final String __OBFID = "CL_00002041";
 
             static
             {
