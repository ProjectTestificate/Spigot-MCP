--- decompiled\net\minecraft\tileentity\TileEntitySign.java
+++ src\main\java\net\minecraft\tileentity\TileEntitySign.java
@@ -1,33 +1,33 @@
 package net.minecraft.tileentity;
 
-import com.google.gson.JsonParseException;
 import net.minecraft.command.CommandException;
 import net.minecraft.command.CommandResultStats;
 import net.minecraft.command.ICommandSender;
+import net.minecraft.command.server.CommandBlockLogic;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.event.ClickEvent;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.network.Packet;
 import net.minecraft.network.play.server.S33PacketUpdateSign;
-import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.ChatComponentProcessor;
 import net.minecraft.util.ChatComponentText;
 import net.minecraft.util.ChatStyle;
 import net.minecraft.util.IChatComponent;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import com.google.gson.JsonParseException;
+
 public class TileEntitySign extends TileEntity
 {
+
     public final IChatComponent[] signText = new IChatComponent[] {new ChatComponentText(""), new ChatComponentText(""), new ChatComponentText(""), new ChatComponentText("")};
     public int lineBeingEdited = -1;
-    private boolean isEditable = true;
+    public boolean isEditable = true; // SpigotMCP -- Apply access transformation
     private EntityPlayer player;
     private final CommandResultStats field_174883_i = new CommandResultStats();
     private static final String __OBFID = "CL_00000363";
 
     public void writeToNBT(NBTTagCompound compound)
@@ -38,10 +38,17 @@
         {
             String s = IChatComponent.Serializer.componentToJson(this.signText[i]);
             compound.setString("Text" + (i + 1), s);
         }
 
+        // CraftBukkit start
+        if (Boolean.getBoolean("convertLegacySigns"))
+        {
+            compound.setBoolean("Bukkit.isConverted", true);
+        }
+
+        // CraftBukkit end
         this.field_174883_i.func_179670_b(compound);
     }
 
     public void readFromNBT(NBTTagCompound compound)
     {
@@ -56,11 +63,13 @@
             }
             public IChatComponent getDisplayName()
             {
                 return new ChatComponentText(this.getName());
             }
-            public void addChatMessage(IChatComponent message) {}
+            public void addChatMessage(IChatComponent message)
+            {
+            }
             public boolean canUseCommand(int permLevel, String commandName)
             {
                 return true;
             }
             public BlockPos getPosition()
@@ -81,24 +90,39 @@
             }
             public boolean sendCommandFeedback()
             {
                 return false;
             }
-            public void setCommandStat(CommandResultStats.Type type, int amount) {}
+            public void setCommandStat(CommandResultStats.Type type, int amount)
+            {
+            }
         };
+        // CraftBukkit start - Add an option to convert signs correctly
+        // This is done with a flag instead of all the time because
+        // we have no way to tell whether a sign is from 1.7.10 or 1.8
+        boolean oldSign = Boolean.getBoolean("convertLegacySigns") && !compound.getBoolean("Bukkit.isConverted");
 
         for (int i = 0; i < 4; ++i)
         {
             String s = compound.getString("Text" + (i + 1));
 
+            if (oldSign)
+            {
+                signText[i] = org.bukkit.craftbukkit.util.CraftChatMessage.fromString(s)[0];
+                continue;
+            }
+
+            // CraftBukkit end
+
             try
             {
                 IChatComponent ichatcomponent = IChatComponent.Serializer.jsonToComponent(s);
 
                 try
                 {
                     this.signText[i] = ChatComponentProcessor.func_179985_a(icommandsender, ichatcomponent, (Entity)null);
+                    // CraftBukkit - fix decompile error // SpigotMCP NOTE -- MCP already fixed
                 }
                 catch (CommandException commandexception)
                 {
                     this.signText[i] = ichatcomponent;
                 }
@@ -122,21 +146,10 @@
     public boolean getIsEditable()
     {
         return this.isEditable;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void setEditable(boolean isEditableIn)
-    {
-        this.isEditable = isEditableIn;
-
-        if (!isEditableIn)
-        {
-            this.player = null;
-        }
-    }
-
     public void setPlayer(EntityPlayer playerIn)
     {
         this.player = playerIn;
     }
 
@@ -156,11 +169,13 @@
             }
             public IChatComponent getDisplayName()
             {
                 return playerIn.getDisplayName();
             }
-            public void addChatMessage(IChatComponent message) {}
+            public void addChatMessage(IChatComponent message)
+            {
+            }
             public boolean canUseCommand(int permLevel, String commandName)
             {
                 return true;
             }
             public BlockPos getPosition()
@@ -197,11 +212,14 @@
             {
                 ClickEvent clickevent = chatstyle.getChatClickEvent();
 
                 if (clickevent.getAction() == ClickEvent.Action.RUN_COMMAND)
                 {
-                    MinecraftServer.getServer().getCommandManager().executeCommand(icommandsender, clickevent.getValue());
+                    // CraftBukkit start
+                    // MinecraftServer.getServer().getCommandManager().executeCommand(icommandsender, clickevent.getValue());
+                    CommandBlockLogic.executeCommand(playerIn, (org.bukkit.entity.Player)playerIn.getBukkitEntity(), clickevent.getValue());
+                    // CraftBukkit end
                 }
             }
         }
 
         return true;
