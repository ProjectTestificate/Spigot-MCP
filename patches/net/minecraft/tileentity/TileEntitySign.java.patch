---a/net/minecraft/tileentity/TileEntitySign.java
+++b/net/minecraft/tileentity/TileEntitySign.java
@@ -1,16 +1,15 @@
 package net.minecraft.tileentity;
 
-import com.google.gson.JsonParseException;
 import net.minecraft.command.CommandException;
 import net.minecraft.command.CommandResultStats;
 import net.minecraft.command.ICommandSender;
+import net.minecraft.command.server.CommandBlockLogic;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.event.ClickEvent;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.network.Packet;
 import net.minecraft.network.play.server.S33PacketUpdateSign;
-import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.ChatComponentProcessor;
 import net.minecraft.util.ChatComponentText;
@@ -18,92 +18,105 @@
 import net.minecraft.util.IChatComponent;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class TileEntitySign extends TileEntity
-{
-    public final IChatComponent[] signText = new IChatComponent[] {new ChatComponentText(""), new ChatComponentText(""), new ChatComponentText(""), new ChatComponentText("")};
+import com.google.gson.JsonParseException;
+
+public class TileEntitySign extends TileEntity {
+
+    public final IChatComponent[] signText = new IChatComponent[]{new ChatComponentText(""), new ChatComponentText(""), new ChatComponentText(""), new ChatComponentText("")};
     public int lineBeingEdited = -1;
-    private boolean isEditable = true;
+    public boolean isEditable = true; // SpigotMCP -- Apply access transformation
     private EntityPlayer player;
     private final CommandResultStats field_174883_i = new CommandResultStats();
     private static final String __OBFID = "CL_00000363";
 
-    public void writeToNBT(NBTTagCompound compound)
-    {
+    public void writeToNBT(NBTTagCompound compound) {
         super.writeToNBT(compound);
 
-        for (int i = 0; i < 4; ++i)
-        {
+        for (int i = 0; i < 4; ++i) {
             String s = IChatComponent.Serializer.componentToJson(this.signText[i]);
             compound.setString("Text" + (i + 1), s);
         }
 
+        // CraftBukkit start
+        if (Boolean.getBoolean("convertLegacySigns")) {
+            compound.setBoolean("Bukkit.isConverted", true);
+        }
+        // CraftBukkit end
+
         this.field_174883_i.func_179670_b(compound);
     }
 
-    public void readFromNBT(NBTTagCompound compound)
-    {
+    public void readFromNBT(NBTTagCompound compound) {
         this.isEditable = false;
         super.readFromNBT(compound);
-        ICommandSender icommandsender = new ICommandSender()
-        {
+        ICommandSender icommandsender = new ICommandSender() {
+
             private static final String __OBFID = "CL_00002039";
-            public String getName()
-            {
+
+            public String getName() {
                 return "Sign";
             }
-            public IChatComponent getDisplayName()
-            {
+
+            public IChatComponent getDisplayName() {
                 return new ChatComponentText(this.getName());
             }
-            public void addChatMessage(IChatComponent message) {}
-            public boolean canUseCommand(int permLevel, String commandName)
-            {
+
+            public void addChatMessage(IChatComponent message) {
+            }
+
+            public boolean canUseCommand(int permLevel, String commandName) {
                 return true;
             }
-            public BlockPos getPosition()
-            {
+
+            public BlockPos getPosition() {
                 return TileEntitySign.this.pos;
             }
-            public Vec3 getPositionVector()
-            {
-                return new Vec3((double)TileEntitySign.this.pos.getX() + 0.5D, (double)TileEntitySign.this.pos.getY() + 0.5D, (double)TileEntitySign.this.pos.getZ() + 0.5D);
+
+            public Vec3 getPositionVector() {
+                return new Vec3((double) TileEntitySign.this.pos.getX() + 0.5D, (double) TileEntitySign.this.pos.getY() + 0.5D, (double) TileEntitySign.this.pos.getZ() + 0.5D);
             }
-            public World getEntityWorld()
-            {
+
+            public World getEntityWorld() {
                 return TileEntitySign.this.worldObj;
             }
-            public Entity getCommandSenderEntity()
-            {
+
+            public Entity getCommandSenderEntity() {
                 return null;
             }
-            public boolean sendCommandFeedback()
-            {
+
+            public boolean sendCommandFeedback() {
                 return false;
             }
-            public void setCommandStat(CommandResultStats.Type type, int amount) {}
+
+            public void setCommandStat(CommandResultStats.Type type, int amount) {
+            }
         };
 
-        for (int i = 0; i < 4; ++i)
-        {
+        // CraftBukkit start - Add an option to convert signs correctly
+        // This is done with a flag instead of all the time because
+        // we have no way to tell whether a sign is from 1.7.10 or 1.8
+
+        boolean oldSign = Boolean.getBoolean("convertLegacySigns") && !compound.getBoolean("Bukkit.isConverted");
+
+        for (int i = 0; i < 4; ++i) {
             String s = compound.getString("Text" + (i + 1));
 
-            try
-            {
+            if (oldSign) {
+                signText[i] = org.bukkit.craftbukkit.util.CraftChatMessage.fromString(s)[0];
+                continue;
+            }
+            // CraftBukkit end
+
+            try {
                 IChatComponent ichatcomponent = IChatComponent.Serializer.jsonToComponent(s);
 
-                try
-                {
-                    this.signText[i] = ChatComponentProcessor.func_179985_a(icommandsender, ichatcomponent, (Entity)null);
-                }
-                catch (CommandException commandexception)
-                {
+                try {
+                    this.signText[i] = ChatComponentProcessor.func_179985_a(icommandsender, ichatcomponent, (Entity) null);
+                    // CraftBukkit - fix decompile error // SpigotMCP NOTE -- MCP already fixed
+                } catch (CommandException commandexception) {
                     this.signText[i] = ichatcomponent;
                 }
-            }
-            catch (JsonParseException jsonparseexception)
-            {
+            } catch (JsonParseException jsonparseexception) {
                 this.signText[i] = new ChatComponentText(s);
             }
         }
@@ -112,93 +112,76 @@
         this.field_174883_i.func_179668_a(compound);
     }
 
-    public Packet getDescriptionPacket()
-    {
+    public Packet getDescriptionPacket() {
         IChatComponent[] aichatcomponent = new IChatComponent[4];
         System.arraycopy(this.signText, 0, aichatcomponent, 0, 4);
         return new S33PacketUpdateSign(this.worldObj, this.pos, aichatcomponent);
     }
 
-    public boolean getIsEditable()
-    {
+    public boolean getIsEditable() {
         return this.isEditable;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void setEditable(boolean isEditableIn)
-    {
-        this.isEditable = isEditableIn;
-
-        if (!isEditableIn)
-        {
-            this.player = null;
-        }
-    }
-
-    public void setPlayer(EntityPlayer playerIn)
-    {
+    public void setPlayer(EntityPlayer playerIn) {
         this.player = playerIn;
     }
 
-    public EntityPlayer getPlayer()
-    {
+    public EntityPlayer getPlayer() {
         return this.player;
     }
 
-    public boolean func_174882_b(final EntityPlayer playerIn)
-    {
-        ICommandSender icommandsender = new ICommandSender()
-        {
+    public boolean func_174882_b(final EntityPlayer playerIn) {
+        ICommandSender icommandsender = new ICommandSender() {
+
             private static final String __OBFID = "CL_00002038";
-            public String getName()
-            {
+
+            public String getName() {
                 return playerIn.getName();
             }
-            public IChatComponent getDisplayName()
-            {
+
+            public IChatComponent getDisplayName() {
                 return playerIn.getDisplayName();
             }
-            public void addChatMessage(IChatComponent message) {}
-            public boolean canUseCommand(int permLevel, String commandName)
-            {
+
+            public void addChatMessage(IChatComponent message) {
+            }
+
+            public boolean canUseCommand(int permLevel, String commandName) {
                 return true;
             }
-            public BlockPos getPosition()
-            {
+
+            public BlockPos getPosition() {
                 return TileEntitySign.this.pos;
             }
-            public Vec3 getPositionVector()
-            {
-                return new Vec3((double)TileEntitySign.this.pos.getX() + 0.5D, (double)TileEntitySign.this.pos.getY() + 0.5D, (double)TileEntitySign.this.pos.getZ() + 0.5D);
+
+            public Vec3 getPositionVector() {
+                return new Vec3((double) TileEntitySign.this.pos.getX() + 0.5D, (double) TileEntitySign.this.pos.getY() + 0.5D, (double) TileEntitySign.this.pos.getZ() + 0.5D);
             }
-            public World getEntityWorld()
-            {
+
+            public World getEntityWorld() {
                 return playerIn.getEntityWorld();
             }
-            public Entity getCommandSenderEntity()
-            {
+
+            public Entity getCommandSenderEntity() {
                 return playerIn;
             }
-            public boolean sendCommandFeedback()
-            {
+
+            public boolean sendCommandFeedback() {
                 return false;
             }
-            public void setCommandStat(CommandResultStats.Type type, int amount)
-            {
+
+            public void setCommandStat(CommandResultStats.Type type, int amount) {
                 TileEntitySign.this.field_174883_i.func_179672_a(this, type, amount);
             }
         };
 
-        for (int i = 0; i < this.signText.length; ++i)
-        {
+        for (int i = 0; i < this.signText.length; ++i) {
             ChatStyle chatstyle = this.signText[i] == null ? null : this.signText[i].getChatStyle();
 
-            if (chatstyle != null && chatstyle.getChatClickEvent() != null)
-            {
+            if (chatstyle != null && chatstyle.getChatClickEvent() != null) {
                 ClickEvent clickevent = chatstyle.getChatClickEvent();
 
-                if (clickevent.getAction() == ClickEvent.Action.RUN_COMMAND)
-                {
-                    MinecraftServer.getServer().getCommandManager().executeCommand(icommandsender, clickevent.getValue());
+                if (clickevent.getAction() == ClickEvent.Action.RUN_COMMAND) {
+                    // CraftBukkit start
+                    // MinecraftServer.getServer().getCommandManager().executeCommand(icommandsender, clickevent.getValue());
+                    CommandBlockLogic.executeCommand(playerIn, (org.bukkit.entity.Player) playerIn.getBukkitEntity(), clickevent.getValue());
+                    // CraftBukkit end
                 }
             }
         }
@@ -207,9 +207,7 @@
         return true;
     }
 
-    public CommandResultStats func_174880_d()
-    {
+    public CommandResultStats func_174880_d() {
         return this.field_174883_i;
     }
-}
+}
