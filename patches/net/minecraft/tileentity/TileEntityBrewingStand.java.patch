--- decompiled\net\minecraft\tileentity\TileEntityBrewingStand.java
+++ src\main\java\net\minecraft\tileentity\TileEntityBrewingStand.java
@@ -1,9 +1,11 @@
 package net.minecraft.tileentity;
 
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
+
 import net.minecraft.block.BlockBrewingStand;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.InventoryPlayer;
 import net.minecraft.init.Items;
@@ -14,24 +16,61 @@
 import net.minecraft.item.ItemPotion;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.potion.PotionHelper;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.gui.IUpdatePlayerListBox;
 import net.minecraft.util.EnumFacing;
 
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.event.inventory.BrewEvent;
+
 public class TileEntityBrewingStand extends TileEntityLockable implements IUpdatePlayerListBox, ISidedInventory
 {
+
     private static final int[] inputSlots = new int[] {3};
     private static final int[] outputSlots = new int[] {0, 1, 2};
     private ItemStack[] brewingItemStacks = new ItemStack[4];
-    private int brewTime;
+    public int brewTime; // SpigotMCP -- Apply access transformation
     private boolean[] filledSlots;
     private Item ingredientID;
     private String customName;
     private static final String __OBFID = "CL_00000345";
+    private int lastTick = MinecraftServer.currentTick; // CraftBukkit - add field
 
+    // CraftBukkit start - add fields and methods
+    public List<CraftHumanEntity> transaction = new ArrayList<CraftHumanEntity>();
+    private int maxStack = 64;
+
+    public void onOpen(CraftHumanEntity who)
+    {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who)
+    {
+        transaction.remove(who);
+    }
+
+    public java.util.List getViewers()
+    {
+        return transaction;
+    }
+
+    public ItemStack[] getContents()
+    {
+        return this.brewingItemStacks;
+    }
+
+    public void setMaxStackSize(int size)
+    {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
     public String getName()
     {
         return this.hasCustomName() ? this.customName : "container.brewing";
     }
 
@@ -50,16 +89,21 @@
         return this.brewingItemStacks.length;
     }
 
     public void update()
     {
+        // CraftBukkit start - Use wall time instead of ticks for brewing
+        int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+        this.lastTick = MinecraftServer.currentTick;
+
         if (this.brewTime > 0)
         {
-            --this.brewTime;
+            this.brewTime -= elapsedTicks;
 
-            if (this.brewTime == 0)
+            if (this.brewTime <= 0)   // == -> <=
             {
+                // CraftBukkit end
                 this.brewPotions();
                 this.markDirty();
             }
             else if (!this.canBrew())
             {
@@ -153,10 +197,24 @@
     {
         if (this.canBrew())
         {
             ItemStack itemstack = this.brewingItemStacks[3];
 
+            // CraftBukkit start
+            if (getOwner() != null)
+            {
+                BrewEvent event = new BrewEvent(worldObj.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), (org.bukkit.inventory.BrewerInventory)this.getOwner().getInventory());
+                Bukkit.getPluginManager().callEvent(event);
+
+                if (event.isCancelled())
+                {
+                    return;
+                }
+            }
+
+            // CraftBukkit end
+
             for (int i = 0; i < 3; ++i)
             {
                 if (this.brewingItemStacks[i] != null && this.brewingItemStacks[i].getItem() == Items.potionitem)
                 {
                     int j = this.brewingItemStacks[i].getMetadata();
@@ -290,21 +348,25 @@
         }
     }
 
     public int getInventoryStackLimit()
     {
-        return 64;
+        return this.maxStack; // CraftBukkit
     }
 
     public boolean isUseableByPlayer(EntityPlayer player)
     {
         return this.worldObj.getTileEntity(this.pos) != this ? false : player.getDistanceSq((double)this.pos.getX() + 0.5D, (double)this.pos.getY() + 0.5D, (double)this.pos.getZ() + 0.5D) <= 64.0D;
     }
 
-    public void openInventory(EntityPlayer player) {}
+    public void openInventory(EntityPlayer player)
+    {
+    }
 
-    public void closeInventory(EntityPlayer player) {}
+    public void closeInventory(EntityPlayer player)
+    {
+    }
 
     public boolean isItemValidForSlot(int index, ItemStack stack)
     {
         return index == 3 ? stack.getItem().isPotionIngredient(stack) : stack.getItem() == Items.potionitem || stack.getItem() == Items.glass_bottle;
     }
