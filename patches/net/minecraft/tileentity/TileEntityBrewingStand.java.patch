---a/net/minecraft/tileentity/TileEntityBrewingStand.java
+++b/net/minecraft/tileentity/TileEntityBrewingStand.java
@@ -1,7 +1,9 @@
 package net.minecraft.tileentity;
 
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
+
 import net.minecraft.block.BlockBrewingStand;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.player.EntityPlayer;
@@ -16,82 +16,103 @@
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.potion.PotionHelper;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.gui.IUpdatePlayerListBox;
 import net.minecraft.util.EnumFacing;
 
-public class TileEntityBrewingStand extends TileEntityLockable implements IUpdatePlayerListBox, ISidedInventory
-{
-    private static final int[] inputSlots = new int[] {3};
-    private static final int[] outputSlots = new int[] {0, 1, 2};
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.event.inventory.BrewEvent;
+
+public class TileEntityBrewingStand extends TileEntityLockable implements IUpdatePlayerListBox, ISidedInventory {
+
+    private static final int[] inputSlots = new int[]{3};
+    private static final int[] outputSlots = new int[]{0, 1, 2};
     private ItemStack[] brewingItemStacks = new ItemStack[4];
-    private int brewTime;
+    public int brewTime; // SpigotMCP -- Apply access transformation
     private boolean[] filledSlots;
     private Item ingredientID;
     private String customName;
     private static final String __OBFID = "CL_00000345";
+    private int lastTick = MinecraftServer.currentTick; // CraftBukkit - add field
 
-    public String getName()
-    {
+    // CraftBukkit start - add fields and methods
+    public List<CraftHumanEntity> transaction = new ArrayList<CraftHumanEntity>();
+    private int maxStack = 64;
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public java.util.List getViewers() {
+        return transaction;
+    }
+
+    public ItemStack[] getContents() {
+        return this.brewingItemStacks;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
+    public String getName() {
         return this.hasCustomName() ? this.customName : "container.brewing";
     }
 
-    public boolean hasCustomName()
-    {
+    public boolean hasCustomName() {
         return this.customName != null && this.customName.length() > 0;
     }
 
-    public void func_145937_a(String p_145937_1_)
-    {
+    public void func_145937_a(String p_145937_1_) {
         this.customName = p_145937_1_;
     }
 
-    public int getSizeInventory()
-    {
+    public int getSizeInventory() {
         return this.brewingItemStacks.length;
     }
 
-    public void update()
-    {
-        if (this.brewTime > 0)
-        {
-            --this.brewTime;
+    public void update() {
+        // CraftBukkit start - Use wall time instead of ticks for brewing
+        int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+        this.lastTick = MinecraftServer.currentTick;
 
-            if (this.brewTime == 0)
-            {
+        if (this.brewTime > 0) {
+            this.brewTime -= elapsedTicks;
+
+            if (this.brewTime <= 0) { // == -> <=
+                // CraftBukkit end
                 this.brewPotions();
                 this.markDirty();
-            }
-            else if (!this.canBrew())
-            {
+            } else if (!this.canBrew()) {
                 this.brewTime = 0;
                 this.markDirty();
-            }
-            else if (this.ingredientID != this.brewingItemStacks[3].getItem())
-            {
+            } else if (this.ingredientID != this.brewingItemStacks[3].getItem()) {
                 this.brewTime = 0;
                 this.markDirty();
             }
-        }
-        else if (this.canBrew())
-        {
+        } else if (this.canBrew()) {
             this.brewTime = 400;
             this.ingredientID = this.brewingItemStacks[3].getItem();
         }
 
-        if (!this.worldObj.isRemote)
-        {
+        if (!this.worldObj.isRemote) {
             boolean[] aboolean = this.func_174902_m();
 
-            if (!Arrays.equals(aboolean, this.filledSlots))
-            {
+            if (!Arrays.equals(aboolean, this.filledSlots)) {
                 this.filledSlots = aboolean;
                 IBlockState iblockstate = this.worldObj.getBlockState(this.getPos());
 
-                if (!(iblockstate.getBlock() instanceof BlockBrewingStand))
-                {
+                if (!(iblockstate.getBlock() instanceof BlockBrewingStand)) {
                     return;
                 }
 
-                for (int i = 0; i < BlockBrewingStand.HAS_BOTTLE.length; ++i)
-                {
+                for (int i = 0; i < BlockBrewingStand.HAS_BOTTLE.length; ++i) {
                     iblockstate = iblockstate.withProperty(BlockBrewingStand.HAS_BOTTLE[i], Boolean.valueOf(aboolean[i]));
                 }
 
@@ -102,31 +102,22 @@
         }
     }
 
-    private boolean canBrew()
-    {
-        if (this.brewingItemStacks[3] != null && this.brewingItemStacks[3].stackSize > 0)
-        {
+    private boolean canBrew() {
+        if (this.brewingItemStacks[3] != null && this.brewingItemStacks[3].stackSize > 0) {
             ItemStack itemstack = this.brewingItemStacks[3];
 
-            if (!itemstack.getItem().isPotionIngredient(itemstack))
-            {
+            if (!itemstack.getItem().isPotionIngredient(itemstack)) {
                 return false;
-            }
-            else
-            {
+            } else {
                 boolean flag = false;
 
-                for (int i = 0; i < 3; ++i)
-                {
-                    if (this.brewingItemStacks[i] != null && this.brewingItemStacks[i].getItem() == Items.potionitem)
-                    {
+                for (int i = 0; i < 3; ++i) {
+                    if (this.brewingItemStacks[i] != null && this.brewingItemStacks[i].getItem() == Items.potionitem) {
                         int j = this.brewingItemStacks[i].getMetadata();
                         int k = this.func_145936_c(j, itemstack);
 
-                        if (!ItemPotion.isSplash(j) && ItemPotion.isSplash(k))
-                        {
+                        if (!ItemPotion.isSplash(j) && ItemPotion.isSplash(k)) {
                             flag = true;
                             break;
                         }
@@ -132,8 +132,7 @@
                         List list = Items.potionitem.getEffects(j);
                         List list1 = Items.potionitem.getEffects(k);
 
-                        if ((j <= 0 || list != list1) && (list == null || !list.equals(list1) && list1 != null) && j != k)
-                        {
+                        if ((j <= 0 || list != list1) && (list == null || !list.equals(list1) && list1 != null) && j != k) {
                             flag = true;
                             break;
                         }
@@ -142,102 +142,88 @@
 
                 return flag;
             }
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
 
-    private void brewPotions()
-    {
-        if (this.canBrew())
-        {
+    private void brewPotions() {
+        if (this.canBrew()) {
             ItemStack itemstack = this.brewingItemStacks[3];
 
-            for (int i = 0; i < 3; ++i)
-            {
-                if (this.brewingItemStacks[i] != null && this.brewingItemStacks[i].getItem() == Items.potionitem)
-                {
+            // CraftBukkit start
+            if (getOwner() != null) {
+                BrewEvent event = new BrewEvent(worldObj.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), (org.bukkit.inventory.BrewerInventory) this.getOwner().getInventory());
+                Bukkit.getPluginManager().callEvent(event);
+                if (event.isCancelled()) {
+                    return;
+                }
+            }
+            // CraftBukkit end
+
+            for (int i = 0; i < 3; ++i) {
+                if (this.brewingItemStacks[i] != null && this.brewingItemStacks[i].getItem() == Items.potionitem) {
                     int j = this.brewingItemStacks[i].getMetadata();
                     int k = this.func_145936_c(j, itemstack);
                     List list = Items.potionitem.getEffects(j);
                     List list1 = Items.potionitem.getEffects(k);
 
-                    if ((j <= 0 || list != list1) && (list == null || !list.equals(list1) && list1 != null))
-                    {
-                        if (j != k)
-                        {
+                    if ((j <= 0 || list != list1) && (list == null || !list.equals(list1) && list1 != null)) {
+                        if (j != k) {
                             this.brewingItemStacks[i].setItemDamage(k);
                         }
-                    }
-                    else if (!ItemPotion.isSplash(j) && ItemPotion.isSplash(k))
-                    {
+                    } else if (!ItemPotion.isSplash(j) && ItemPotion.isSplash(k)) {
                         this.brewingItemStacks[i].setItemDamage(k);
                     }
                 }
             }
 
-            if (itemstack.getItem().hasContainerItem())
-            {
+            if (itemstack.getItem().hasContainerItem()) {
                 this.brewingItemStacks[3] = new ItemStack(itemstack.getItem().getContainerItem());
-            }
-            else
-            {
+            } else {
                 --this.brewingItemStacks[3].stackSize;
 
-                if (this.brewingItemStacks[3].stackSize <= 0)
-                {
+                if (this.brewingItemStacks[3].stackSize <= 0) {
                     this.brewingItemStacks[3] = null;
                 }
             }
         }
     }
 
-    private int func_145936_c(int p_145936_1_, ItemStack p_145936_2_)
-    {
+    private int func_145936_c(int p_145936_1_, ItemStack p_145936_2_) {
         return p_145936_2_ == null ? p_145936_1_ : (p_145936_2_.getItem().isPotionIngredient(p_145936_2_) ? PotionHelper.applyIngredient(p_145936_1_, p_145936_2_.getItem().getPotionEffect(p_145936_2_)) : p_145936_1_);
     }
 
-    public void readFromNBT(NBTTagCompound compound)
-    {
+    public void readFromNBT(NBTTagCompound compound) {
         super.readFromNBT(compound);
         NBTTagList nbttaglist = compound.getTagList("Items", 10);
         this.brewingItemStacks = new ItemStack[this.getSizeInventory()];
 
-        for (int i = 0; i < nbttaglist.tagCount(); ++i)
-        {
+        for (int i = 0; i < nbttaglist.tagCount(); ++i) {
             NBTTagCompound nbttagcompound1 = nbttaglist.getCompoundTagAt(i);
             byte b0 = nbttagcompound1.getByte("Slot");
 
-            if (b0 >= 0 && b0 < this.brewingItemStacks.length)
-            {
+            if (b0 >= 0 && b0 < this.brewingItemStacks.length) {
                 this.brewingItemStacks[b0] = ItemStack.loadItemStackFromNBT(nbttagcompound1);
             }
         }
 
         this.brewTime = compound.getShort("BrewTime");
 
-        if (compound.hasKey("CustomName", 8))
-        {
+        if (compound.hasKey("CustomName", 8)) {
             this.customName = compound.getString("CustomName");
         }
     }
 
-    public void writeToNBT(NBTTagCompound compound)
-    {
+    public void writeToNBT(NBTTagCompound compound) {
         super.writeToNBT(compound);
-        compound.setShort("BrewTime", (short)this.brewTime);
+        compound.setShort("BrewTime", (short) this.brewTime);
         NBTTagList nbttaglist = new NBTTagList();
 
-        for (int i = 0; i < this.brewingItemStacks.length; ++i)
-        {
-            if (this.brewingItemStacks[i] != null)
-            {
+        for (int i = 0; i < this.brewingItemStacks.length; ++i) {
+            if (this.brewingItemStacks[i] != null) {
                 NBTTagCompound nbttagcompound1 = new NBTTagCompound();
-                nbttagcompound1.setByte("Slot", (byte)i);
+                nbttagcompound1.setByte("Slot", (byte) i);
                 this.brewingItemStacks[i].writeToNBT(nbttagcompound1);
                 nbttaglist.appendTag(nbttagcompound1);
             }
@@ -243,78 +243,63 @@
 
         compound.setTag("Items", nbttaglist);
 
-        if (this.hasCustomName())
-        {
+        if (this.hasCustomName()) {
             compound.setString("CustomName", this.customName);
         }
     }
 
-    public ItemStack getStackInSlot(int index)
-    {
+    public ItemStack getStackInSlot(int index) {
         return index >= 0 && index < this.brewingItemStacks.length ? this.brewingItemStacks[index] : null;
     }
 
-    public ItemStack decrStackSize(int index, int count)
-    {
-        if (index >= 0 && index < this.brewingItemStacks.length)
-        {
+    public ItemStack decrStackSize(int index, int count) {
+        if (index >= 0 && index < this.brewingItemStacks.length) {
             ItemStack itemstack = this.brewingItemStacks[index];
             this.brewingItemStacks[index] = null;
             return itemstack;
-        }
-        else
-        {
+        } else {
             return null;
         }
     }
 
-    public ItemStack getStackInSlotOnClosing(int index)
-    {
-        if (index >= 0 && index < this.brewingItemStacks.length)
-        {
+    public ItemStack getStackInSlotOnClosing(int index) {
+        if (index >= 0 && index < this.brewingItemStacks.length) {
             ItemStack itemstack = this.brewingItemStacks[index];
             this.brewingItemStacks[index] = null;
             return itemstack;
-        }
-        else
-        {
+        } else {
             return null;
         }
     }
 
-    public void setInventorySlotContents(int index, ItemStack stack)
-    {
-        if (index >= 0 && index < this.brewingItemStacks.length)
-        {
+    public void setInventorySlotContents(int index, ItemStack stack) {
+        if (index >= 0 && index < this.brewingItemStacks.length) {
             this.brewingItemStacks[index] = stack;
         }
     }
 
-    public int getInventoryStackLimit()
-    {
-        return 64;
+    public int getInventoryStackLimit() {
+        return this.maxStack; // CraftBukkit
     }
 
-    public boolean isUseableByPlayer(EntityPlayer player)
-    {
-        return this.worldObj.getTileEntity(this.pos) != this ? false : player.getDistanceSq((double)this.pos.getX() + 0.5D, (double)this.pos.getY() + 0.5D, (double)this.pos.getZ() + 0.5D) <= 64.0D;
+    public boolean isUseableByPlayer(EntityPlayer player) {
+        return this.worldObj.getTileEntity(this.pos) != this ? false : player.getDistanceSq((double) this.pos.getX() + 0.5D, (double) this.pos.getY() + 0.5D, (double) this.pos.getZ() + 0.5D) <= 64.0D;
     }
 
-    public void openInventory(EntityPlayer player) {}
+    public void openInventory(EntityPlayer player) {
+    }
 
-    public void closeInventory(EntityPlayer player) {}
+    public void closeInventory(EntityPlayer player) {
+    }
 
-    public boolean isItemValidForSlot(int index, ItemStack stack)
-    {
+    public boolean isItemValidForSlot(int index, ItemStack stack) {
         return index == 3 ? stack.getItem().isPotionIngredient(stack) : stack.getItem() == Items.potionitem || stack.getItem() == Items.glass_bottle;
     }
 
-    public boolean[] func_174902_m()
-    {
+    public boolean[] func_174902_m() {
         boolean[] aboolean = new boolean[3];
 
-        for (int i = 0; i < 3; ++i)
-        {
-            if (this.brewingItemStacks[i] != null)
-            {
+        for (int i = 0; i < 3; ++i) {
+            if (this.brewingItemStacks[i] != null) {
                 aboolean[i] = true;
             }
         }
@@ -324,33 +324,27 @@
         return aboolean;
     }
 
-    public int[] getSlotsForFace(EnumFacing side)
-    {
+    public int[] getSlotsForFace(EnumFacing side) {
         return side == EnumFacing.UP ? inputSlots : outputSlots;
     }
 
-    public boolean canInsertItem(int index, ItemStack itemStackIn, EnumFacing direction)
-    {
+    public boolean canInsertItem(int index, ItemStack itemStackIn, EnumFacing direction) {
         return this.isItemValidForSlot(index, itemStackIn);
     }
 
-    public boolean canExtractItem(int index, ItemStack stack, EnumFacing direction)
-    {
+    public boolean canExtractItem(int index, ItemStack stack, EnumFacing direction) {
         return true;
     }
 
-    public String getGuiID()
-    {
+    public String getGuiID() {
         return "minecraft:brewing_stand";
     }
 
-    public Container createContainer(InventoryPlayer playerInventory, EntityPlayer playerIn)
-    {
+    public Container createContainer(InventoryPlayer playerInventory, EntityPlayer playerIn) {
         return new ContainerBrewingStand(playerInventory, this);
     }
 
-    public int getField(int id)
-    {
-        switch (id)
-        {
+    public int getField(int id) {
+        switch (id) {
             case 0:
                 return this.brewTime;
             default:
@@ -360,29 +360,22 @@
         }
     }
 
-    public void setField(int id, int value)
-    {
-        switch (id)
-        {
+    public void setField(int id, int value) {
+        switch (id) {
             case 0:
                 this.brewTime = value;
             default:
         }
     }
 
-    public int getFieldCount()
-    {
+    public int getFieldCount() {
         return 1;
     }
 
-    public void clear()
-    {
-        for (int i = 0; i < this.brewingItemStacks.length; ++i)
-        {
+    public void clear() {
+        for (int i = 0; i < this.brewingItemStacks.length; ++i) {
             this.brewingItemStacks[i] = null;
         }
     }
-}
+}
