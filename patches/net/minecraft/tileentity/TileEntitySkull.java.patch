--- decompiled\net\minecraft\tileentity\TileEntitySkull.java
+++ src\main\java\net\minecraft\tileentity\TileEntitySkull.java
@@ -1,27 +1,72 @@
 package net.minecraft.tileentity;
 
-import com.google.common.collect.Iterables;
-import com.mojang.authlib.GameProfile;
-import com.mojang.authlib.properties.Property;
 import java.util.UUID;
+import java.util.concurrent.Executor;
+import java.util.concurrent.Executors;
+import java.util.concurrent.TimeUnit;
+
+import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTUtil;
 import net.minecraft.network.Packet;
 import net.minecraft.network.play.server.S35PacketUpdateTileEntity;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.management.PlayerProfileCache.GameProfileLookup;
 import net.minecraft.util.StringUtils;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import com.google.common.base.Predicate;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
+import com.google.common.collect.Iterables;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import com.mojang.authlib.Agent;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.properties.Property;
+
 public class TileEntitySkull extends TileEntity
 {
+
     private int skullType;
-    private int skullRotation;
+    public int skullRotation; // SpigotMCP -- Apply access transformation
     private GameProfile playerProfile = null;
     private static final String __OBFID = "CL_00000364";
+    // Spigot start
+    public static final Executor executor = Executors.newFixedThreadPool(3, new ThreadFactoryBuilder().setNameFormat("Head Conversion Thread - %1$d").build());
+    public static final LoadingCache<String, GameProfile> skinCache = CacheBuilder.newBuilder().maximumSize(5000).expireAfterAccess(60, TimeUnit.MINUTES).build(new CacheLoader<String, GameProfile>()
+    {
+        @Override
+        public GameProfile load(String key) throws Exception
+        {
+            GameProfile[] profiles = new GameProfile[1];
+            GameProfileLookup gameProfileLookup = new GameProfileLookup(profiles);
+            MinecraftServer.getServer().getGameProfileRepository().findProfilesByNames(new String[] {key}, Agent.MINECRAFT, gameProfileLookup);
+            GameProfile profile = profiles[0];
 
+            if (profile == null)
+            {
+                UUID uuid = EntityPlayer.getUUID(new GameProfile(null, key));
+                profile = new GameProfile(uuid, key);
+                gameProfileLookup.onProfileLookupSucceeded(profile);
+            }
+            else
+            {
+                Property property = Iterables.getFirst(profile.getProperties().get("textures"), null);
+
+                if (property == null)
+                {
+                    profile = MinecraftServer.getServer().getMinecraftSessionService().fillProfileProperties(profile, true);
+                }
+            }
+
+            return profile;
+        }
+    });
+
+    // Spigot end
+
     public void writeToNBT(NBTTagCompound compound)
     {
         super.writeToNBT(compound);
         compound.setByte("SkullType", (byte)(this.skullType & 255));
         compound.setByte("Rot", (byte)(this.skullRotation & 255));
@@ -84,64 +129,100 @@
         this.updatePlayerProfile();
     }
 
     private void updatePlayerProfile()
     {
-        this.playerProfile = updateGameprofile(this.playerProfile);
-        this.markDirty();
+        // Spigot start
+        GameProfile profile = this.playerProfile;
+        setType(0); // Work around client bug
+        updateGameprofile(profile, new Predicate<GameProfile>()
+        {
+            @Override
+            public boolean apply(GameProfile input)
+            {
+                setType(3); // Work around client bug
+                playerProfile = input;
+                markDirty();
+
+                if (worldObj != null)
+                {
+                    worldObj.markBlockForUpdate(pos);
+                }
+
+                return false;
+            }
+        });
+        // Spigot end
     }
 
-    public static GameProfile updateGameprofile(GameProfile input)
+    // Spigot start - Support async lookups
+    public static void updateGameprofile(final GameProfile input, final Predicate<GameProfile> callback)
     {
         if (input != null && !StringUtils.isNullOrEmpty(input.getName()))
         {
             if (input.isComplete() && input.getProperties().containsKey("textures"))
             {
-                return input;
+                callback.apply(input);
             }
             else if (MinecraftServer.getServer() == null)
             {
-                return input;
+                callback.apply(input);
             }
             else
             {
-                GameProfile gameprofile1 = MinecraftServer.getServer().getPlayerProfileCache().getGameProfileForUsername(input.getName());
+                final GameProfile gameprofile = skinCache.getIfPresent(input.getName());
 
-                if (gameprofile1 == null)
+                if (gameprofile != null)
                 {
-                    return input;
+                    callback.apply(gameprofile);
                 }
                 else
                 {
-                    Property property = (Property)Iterables.getFirst(gameprofile1.getProperties().get("textures"), (Object)null);
-
-                    if (property == null)
+                    executor.execute(new Runnable()
                     {
-                        gameprofile1 = MinecraftServer.getServer().getMinecraftSessionService().fillProfileProperties(gameprofile1, true);
-                    }
-
-                    return gameprofile1;
+                        @Override
+                        public void run()
+                        {
+                            final GameProfile profile = skinCache.getUnchecked(input.getName().toLowerCase());
+                            MinecraftServer.getServer().processQueue.add(new Runnable()
+                            {
+                                @Override
+                                public void run()
+                                {
+                                    if (profile == null)
+                                    {
+                                        callback.apply(gameprofile);
+                                    }
+                                    else
+                                    {
+                                        callback.apply(profile);
+                                    }
+                                }
+                            });
+                        }
+                    });
                 }
             }
         }
         else
         {
-            return input;
+            callback.apply(input);
         }
     }
 
     public int getSkullType()
     {
         return this.skullType;
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getSkullRotation()
+    public void setSkullRotation(int rotation)
     {
-        return this.skullRotation;
+        this.skullRotation = rotation;
     }
 
-    public void setSkullRotation(int rotation)
+    // CraftBukkit start - add method
+    public int getRotation()
     {
-        this.skullRotation = rotation;
+        return this.skullRotation;
     }
+    // CraftBukkit end
 }
