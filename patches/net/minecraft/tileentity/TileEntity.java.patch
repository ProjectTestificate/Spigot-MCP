--- decompiled\net\minecraft\tileentity\TileEntity.java
+++ src\main\java\net\minecraft\tileentity\TileEntity.java
@@ -1,43 +1,99 @@
 package net.minecraft.tileentity;
 
-import com.google.common.collect.Maps;
 import java.util.Map;
 import java.util.concurrent.Callable;
+
 import net.minecraft.block.Block;
+import net.minecraft.block.BlockHopper;
 import net.minecraft.block.BlockJukebox;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.init.Blocks;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.network.Packet;
 import net.minecraft.util.BlockPos;
+import net.minecraft.util.EnumFacing;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.SpigotTimings;
+import org.bukkit.inventory.InventoryHolder;
+import org.spigotmc.CustomTimingsHandler;
 
+import com.google.common.collect.Maps;
+
 public abstract class TileEntity
 {
+
+    public CustomTimingsHandler tickTimer = SpigotTimings.getTileEntityTimings(this); // Spigot
     private static final Logger logger = LogManager.getLogger();
     private static Map nameToClassMap = Maps.newHashMap();
     private static Map classToNameMap = Maps.newHashMap();
-    protected World worldObj;
-    protected BlockPos pos;
+    public World worldObj; // SpigotMCP -- Make public as Bukkit asumes that it is in the same package
+    public BlockPos pos; // SpigotMCP -- Make public as Bukkit asumes that it is in the same package
     protected boolean tileEntityInvalid;
     private int blockMetadata;
     protected Block blockType;
     private static final String __OBFID = "CL_00000340";
 
+
+    // Spigot start
+    // Helper method for scheduleTicks. If the hopper at x0, y0, z0 is pointed
+    // at this tile entity, then make it active.
+    private void scheduleTick(BlockPos blockposition)
+    {
+        TileEntity tileEntity = this.worldObj.getTileEntity(blockposition);
+
+        if (tileEntity instanceof TileEntityHopper && tileEntity.worldObj != null)
+        {
+            // i is the metadeta assoiated with the direction the hopper faces.
+            EnumFacing dir = BlockHopper.getFacing(tileEntity.getBlockMetadata());
+
+            // Facing class provides arrays for direction offset.
+            if (tileEntity.pos.offset(dir).equals(pos))
+            {
+                ((TileEntityHopper)tileEntity).makeTick();
+            }
+        }
+    }
+
+    // Called from update when the contents have changed, so hoppers need updates.
+    // Check all 6 faces.
+    public void scheduleTicks()
+    {
+        if (this.worldObj != null && this.worldObj.spigotConfig.altHopperTicking)
+        {
+            // Check the top
+            this.scheduleTick(pos.up());
+
+            // Check the sides
+            for (int i = 2; i < 6; i++)
+            {
+                this.scheduleTick(pos.offset(EnumFacing.getFront(i)));
+            }
+
+            // Check the bottom.
+            TileEntity tileEntity = this.worldObj.getTileEntity(pos.down());
+
+            if (tileEntity instanceof TileEntityHopper && tileEntity.worldObj != null)
+            {
+                ((TileEntityHopper)tileEntity).makeTick();
+            }
+        }
+    }
+    // Spigot end
+
     public TileEntity()
     {
         this.pos = BlockPos.ORIGIN;
         this.blockMetadata = -1;
     }
 
-    private static void addMapping(Class cl, String id)
+    public static void addMapping(Class cl, String id)
     {
         if (nameToClassMap.containsKey(id))
         {
             throw new IllegalArgumentException("Duplicate id: " + id);
         }
@@ -136,28 +192,27 @@
 
             if (this.getBlockType() != Blocks.air)
             {
                 this.worldObj.updateComparatorOutputLevel(this.pos, this.getBlockType());
             }
+
+            // Spigot start - Called when the contents have changed, so hoppers around this
+            // tile need updating.
+            this.scheduleTicks();
+            // Spigot end
         }
     }
 
-    @SideOnly(Side.CLIENT)
+    // SpigotMCP NOTE -- Is really client sided but, fml needs it
     public double getDistanceSq(double x, double y, double z)
     {
         double d3 = (double)this.pos.getX() + 0.5D - x;
         double d4 = (double)this.pos.getY() + 0.5D - y;
         double d5 = (double)this.pos.getZ() + 0.5D - z;
         return d3 * d3 + d4 * d4 + d5 * d5;
     }
 
-    @SideOnly(Side.CLIENT)
-    public double getMaxRenderDistanceSquared()
-    {
-        return 4096.0D;
-    }
-
     public BlockPos getPos()
     {
         return this.pos;
     }
 
@@ -282,6 +337,27 @@
         addMapping(TileEntityHopper.class, "Hopper");
         addMapping(TileEntityComparator.class, "Comparator");
         addMapping(TileEntityFlowerPot.class, "FlowerPot");
         addMapping(TileEntityBanner.class, "Banner");
     }
+
+    // CraftBukkit start - add method
+    public InventoryHolder getOwner()
+    {
+        // Spigot start
+        org.bukkit.block.Block block = worldObj.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+
+        if (block == null)
+        {
+            org.bukkit.Bukkit.getLogger().log(java.util.logging.Level.WARNING, "No block for owner at %s %d %d %d", new Object[] {worldObj.getWorld(), pos.getX(), pos.getY(), pos.getZ()});
+            return null;
+        }
+
+        // Spigot end
+        BlockState state = block.getState();
+
+        if (state instanceof InventoryHolder) return (InventoryHolder)state;
+
+        return null;
+    }
+    // CraftBukkit end
 }
