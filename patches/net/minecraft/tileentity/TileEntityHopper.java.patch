--- decompiled\net\minecraft\tileentity\TileEntityHopper.java
+++ src\main\java\net\minecraft\tileentity\TileEntityHopper.java
@@ -1,37 +1,127 @@
 package net.minecraft.tileentity;
 
+import java.util.ArrayList;
 import java.util.List;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockChest;
 import net.minecraft.block.BlockHopper;
 import net.minecraft.command.IEntitySelector;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.item.EntityItem;
+import net.minecraft.entity.item.EntityMinecartHopper;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.InventoryPlayer;
 import net.minecraft.inventory.Container;
 import net.minecraft.inventory.ContainerHopper;
 import net.minecraft.inventory.IInventory;
 import net.minecraft.inventory.ISidedInventory;
+import net.minecraft.inventory.InventoryLargeChest;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.server.gui.IUpdatePlayerListBox;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
 
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.inventory.InventoryMoveItemEvent;
+import org.bukkit.event.inventory.InventoryPickupItemEvent;
+import org.bukkit.inventory.Inventory;
+
 public class TileEntityHopper extends TileEntityLockable implements IHopper, IUpdatePlayerListBox
 {
+
     private ItemStack[] inventory = new ItemStack[5];
     private String customName;
     private int transferCooldown = -1;
     private static final String __OBFID = "CL_00000359";
 
+    // Spigot start
+    private long nextTick = -1; // Next tick this hopper will be ticked.
+    private long lastTick = -1; // Last tick this hopper was polled.
+
+    // If this hopper is not cooling down, assaign a visible tick for next time.
+    public void makeTick()
+    {
+        if (!this.isOnTransferCooldown())
+        {
+            this.setTransferCooldown(0);
+        }
+    }
+
+    // Contents changed, so make this hopper active.
+    public void scheduleHopperTick()
+    {
+        if (this.worldObj != null && this.worldObj.spigotConfig.altHopperTicking)
+        {
+            this.makeTick();
+        }
+    }
+
+    // Called after this hopper is assaigned a world or when altHopperTicking is turned
+    // on from reload.
+    public void convertToScheduling()
+    {
+        // j is the cooldown in ticks
+        this.setTransferCooldown(this.transferCooldown);
+    }
+
+    // Called when alt hopper ticking is turned off from the reload command
+    public void convertToPolling()
+    {
+        long cooldownDiff;
+
+        if (this.lastTick == this.worldObj.getTotalWorldTime())
+        {
+            cooldownDiff = this.nextTick - this.worldObj.getTotalWorldTime();
+        }
+        else
+        {
+            cooldownDiff = this.nextTick - this.worldObj.getTotalWorldTime() + 1;
+        }
+
+        this.setTransferCooldown((int)Math.max(0, Math.min(cooldownDiff, Integer.MAX_VALUE)));
+    }
+    // Spigot end
+
+    // CraftBukkit start - add fields and methods
+    public List<CraftHumanEntity> transaction = new ArrayList<CraftHumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    public ItemStack[] getContents()
+    {
+        return this.inventory;
+    }
+
+    public void onOpen(CraftHumanEntity who)
+    {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who)
+    {
+        transaction.remove(who);
+    }
+
+    public java.util.List getViewers()
+    {
+        return transaction;
+    }
+
+    public void setMaxStackSize(int size)
+    {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
     public void readFromNBT(NBTTagCompound compound)
     {
         super.readFromNBT(compound);
         NBTTagList nbttaglist = compound.getTagList("Items", 10);
         this.inventory = new ItemStack[this.getSizeInventory()];
@@ -70,21 +160,46 @@
                 nbttaglist.appendTag(nbttagcompound1);
             }
         }
 
         compound.setTag("Items", nbttaglist);
-        compound.setInteger("TransferCooldown", this.transferCooldown);
 
+        // Spigot start - Need to write the correct cooldown to disk. We convert from long to int on saving.
+        if (this.worldObj != null && this.worldObj.spigotConfig.altHopperTicking)
+        {
+            long cooldownDiff;
+
+            if (this.lastTick == this.worldObj.getTotalWorldTime())
+            {
+                cooldownDiff = this.nextTick - this.worldObj.getTotalWorldTime();
+            }
+            else
+            {
+                cooldownDiff = this.nextTick - this.worldObj.getTotalWorldTime() + 1;
+            }
+
+            compound.setInteger("TransferCooldown", (int)Math.max(0, Math.min(cooldownDiff, Integer.MAX_VALUE)));
+        }
+        else
+        {
+            // g is the cooldown in ticks.
+            compound.setInteger("TransferCooldown", this.transferCooldown);
+        }
+
+        // Spigot end
         if (this.hasCustomName())
         {
             compound.setString("CustomName", this.customName);
         }
     }
 
     public void markDirty()
     {
         super.markDirty();
+        // Spigot start - The contents have changed, so make this hopper active.
+        this.scheduleHopperTick();
+        // Spigot end
     }
 
     public int getSizeInventory()
     {
         return this.inventory.length;
@@ -164,38 +279,58 @@
         this.customName = customNameIn;
     }
 
     public int getInventoryStackLimit()
     {
-        return 64;
+        return maxStack; // CraftBukkit
     }
 
     public boolean isUseableByPlayer(EntityPlayer player)
     {
         return this.worldObj.getTileEntity(this.pos) != this ? false : player.getDistanceSq((double)this.pos.getX() + 0.5D, (double)this.pos.getY() + 0.5D, (double)this.pos.getZ() + 0.5D) <= 64.0D;
     }
 
-    public void openInventory(EntityPlayer player) {}
+    public void openInventory(EntityPlayer player)
+    {
+    }
 
-    public void closeInventory(EntityPlayer player) {}
+    public void closeInventory(EntityPlayer player)
+    {
+    }
 
     public boolean isItemValidForSlot(int index, ItemStack stack)
     {
         return true;
     }
 
     public void update()
     {
         if (this.worldObj != null && !this.worldObj.isRemote)
         {
-            --this.transferCooldown;
+            // Spigot start
+            if (this.worldObj.spigotConfig.altHopperTicking)
+            {
+                this.lastTick = this.worldObj.getTotalWorldTime();
 
-            if (!this.isOnTransferCooldown())
+                if (this.nextTick == this.worldObj.getTotalWorldTime())
+                {
+                    // Method that does the pushing and pulling.
+                    this.func_145887_i();
+                }
+            }
+            else
             {
-                this.setTransferCooldown(0);
-                this.func_145887_i();
+                --this.transferCooldown;
+
+                if (!this.isOnTransferCooldown())
+                {
+                    this.setTransferCooldown(0);
+                    this.func_145887_i();
+                }
             }
+
+            // Spigot end
         }
     }
 
     public boolean func_145887_i()
     {
@@ -215,16 +350,23 @@
                     flag = func_145891_a(this) || flag;
                 }
 
                 if (flag)
                 {
-                    this.setTransferCooldown(8);
+                    this.setTransferCooldown(worldObj.spigotConfig.hopperTransfer); // Spigot
                     this.markDirty();
                     return true;
                 }
             }
 
+            // Spigot start
+            if (!worldObj.spigotConfig.altHopperTicking && !this.isOnTransferCooldown())
+            {
+                this.setTransferCooldown(worldObj.spigotConfig.hopperCheck);
+            }
+
+            // Spigot end
             return false;
         }
         else
         {
             return false;
@@ -288,18 +430,54 @@
                 for (int i = 0; i < this.getSizeInventory(); ++i)
                 {
                     if (this.getStackInSlot(i) != null)
                     {
                         ItemStack itemstack = this.getStackInSlot(i).copy();
-                        ItemStack itemstack1 = func_174918_a(iinventory, this.decrStackSize(i, 1), enumfacing);
+                        // ItemStack itemstack1 = func_174918_a(iinventory, this.decrStackSize(i, 1), enumfacing);
+                        // CraftBukkit start - Call event when pushing items into other inventories
+                        CraftItemStack oitemstack = CraftItemStack.asCraftMirror(this.decrStackSize(i, worldObj.spigotConfig.hopperAmount)); // Spigot
+                        Inventory destinationInventory;
 
+                        // Have to special case large chests as they work oddly
+                        if (iinventory instanceof InventoryLargeChest)
+                        {
+                            destinationInventory = new CraftInventoryDoubleChest((InventoryLargeChest)iinventory);
+                        }
+                        else
+                        {
+                            destinationInventory = iinventory.getOwner().getInventory();
+                        }
+
+                        InventoryMoveItemEvent event = new InventoryMoveItemEvent(this.getOwner().getInventory(), oitemstack.clone(), destinationInventory, true);
+                        this.getWorld().getServer().getPluginManager().callEvent(event);
+
+                        if (event.isCancelled())
+                        {
+                            this.setInventorySlotContents(i, itemstack);
+                            this.setTransferCooldown(worldObj.spigotConfig.hopperTransfer); // Spigot
+                            return false;
+                        }
+
+                        int origCount = event.getItem().getAmount(); // Spigot
+                        ItemStack itemstack1 = func_174918_a(iinventory, CraftItemStack.asNMSCopy(event.getItem()), enumfacing);
+
                         if (itemstack1 == null || itemstack1.stackSize == 0)
                         {
-                            iinventory.markDirty();
+                            if (event.getItem().equals(oitemstack))
+                            {
+                                iinventory.markDirty();
+                            }
+                            else
+                            {
+                                this.setInventorySlotContents(i, itemstack);
+                            }
+
+                            // CraftBukkit end
                             return true;
                         }
 
+                        itemstack.stackSize -= origCount - itemstack1.stackSize; // Spigot
                         this.setInventorySlotContents(i, itemstack);
                     }
                 }
 
                 return false;
@@ -423,26 +601,71 @@
         }
 
         return false;
     }
 
-    private static boolean func_174915_a(IHopper p_174915_0_, IInventory p_174915_1_, int p_174915_2_, EnumFacing p_174915_3_)
+    private static boolean func_174915_a(IHopper hopper, IInventory inventoryIn, int i, EnumFacing direction)   // SpigotMCP -- Use sensible names
     {
-        ItemStack itemstack = p_174915_1_.getStackInSlot(p_174915_2_);
+        ItemStack itemstack = inventoryIn.getStackInSlot(i);
 
-        if (itemstack != null && func_174921_b(p_174915_1_, itemstack, p_174915_2_, p_174915_3_))
+        if (itemstack != null && func_174921_b(inventoryIn, itemstack, i, direction))
         {
             ItemStack itemstack1 = itemstack.copy();
-            ItemStack itemstack2 = func_174918_a(p_174915_0_, p_174915_1_.decrStackSize(p_174915_2_, 1), (EnumFacing)null);
+            // CraftBukkit start - Call event on collection of items from inventories into the hopper
+            // ItemStack itemstack2 = func_174918_a(hopper, inventoryIn.decrStackSize(i, 1), (EnumFacing) null);
+            CraftItemStack oitemstack = CraftItemStack.asCraftMirror(inventoryIn.decrStackSize(i, hopper.getWorld().spigotConfig.hopperAmount)); // Spigot
+            Inventory sourceInventory;
 
+            // Have to special case large chests as they work oddly
+            if (inventoryIn instanceof InventoryLargeChest)
+            {
+                sourceInventory = new CraftInventoryDoubleChest((InventoryLargeChest)inventoryIn);
+            }
+            else
+            {
+                sourceInventory = inventoryIn.getOwner().getInventory();
+            }
+
+            InventoryMoveItemEvent event = new InventoryMoveItemEvent(sourceInventory, oitemstack.clone(), hopper.getOwner().getInventory(), false);
+            hopper.getWorld().getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
+            {
+                inventoryIn.setInventorySlotContents(i, itemstack1);
+
+                if (hopper instanceof TileEntityHopper)
+                {
+                    ((TileEntityHopper)hopper).setTransferCooldown(hopper.getWorld().spigotConfig.hopperTransfer); // Spigot
+                }
+                else if (hopper instanceof EntityMinecartHopper)
+                {
+                    ((EntityMinecartHopper)hopper).setDisplayTileOffset(hopper.getWorld().spigotConfig.hopperTransfer / 2); // Spigot
+                }
+
+                return false;
+            }
+
+            int origCount = event.getItem().getAmount(); // Spigot
+            ItemStack itemstack2 = func_174918_a(hopper, CraftItemStack.asNMSCopy(event.getItem()), null);
+
             if (itemstack2 == null || itemstack2.stackSize == 0)
             {
-                p_174915_1_.markDirty();
+                if (event.getItem().equals(oitemstack))
+                {
+                    inventoryIn.markDirty();
+                }
+                else
+                {
+                    inventoryIn.setInventorySlotContents(i, itemstack1);
+                }
+
+                // CraftBukkit end
                 return true;
             }
 
-            p_174915_1_.setInventorySlotContents(p_174915_2_, itemstack1);
+            itemstack1.stackSize -= origCount - itemstack2.stackSize; // Spigot
+            inventoryIn.setInventorySlotContents(i, itemstack1);
         }
 
         return false;
     }
 
@@ -454,10 +677,20 @@
         {
             return false;
         }
         else
         {
+            // CraftBukkit start
+            InventoryPickupItemEvent event = new InventoryPickupItemEvent(p_145898_0_.getOwner().getInventory(), (org.bukkit.entity.Item)p_145898_1_.getBukkitEntity());
+            p_145898_1_.worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
+            {
+                return false;
+            }
+
+            // CraftBukkit end
             ItemStack itemstack = p_145898_1_.getEntityItem().copy();
             ItemStack itemstack1 = func_174918_a(p_145898_0_, itemstack, (EnumFacing)null);
 
             if (itemstack1 != null && itemstack1.stackSize != 0)
             {
@@ -542,11 +775,11 @@
                 {
                     TileEntityHopper tileentityhopper = (TileEntityHopper)p_174916_0_;
 
                     if (tileentityhopper.mayTransfer())
                     {
-                        tileentityhopper.setTransferCooldown(8);
+                        tileentityhopper.setTransferCooldown(tileentityhopper.worldObj.spigotConfig.hopperTransfer); // Spigot
                     }
 
                     p_174916_0_.markDirty();
                 }
 
@@ -579,10 +812,13 @@
         Object object = null;
         int i = MathHelper.floor_double(p_145893_1_);
         int j = MathHelper.floor_double(p_145893_3_);
         int k = MathHelper.floor_double(p_145893_5_);
         BlockPos blockpos = new BlockPos(i, j, k);
+
+        if (!worldIn.isBlockLoaded(blockpos)) return null; // Spigot
+
         TileEntity tileentity = worldIn.getTileEntity(new BlockPos(i, j, k));
 
         if (tileentity instanceof IInventory)
         {
             object = (IInventory)tileentity;
@@ -629,18 +865,58 @@
     public double getZPos()
     {
         return (double)this.pos.getZ();
     }
 
-    public void setTransferCooldown(int ticks)
+    public void setTransferCooldown(int i)   // SpigotMCP - use cb param names
     {
-        this.transferCooldown = ticks;
+        // Spigot start - i is the delay for which this hopper will be ticked next.
+        // i of 1 or below implies a tick next tick.
+        if (this.worldObj != null && this.worldObj.spigotConfig.altHopperTicking)
+        {
+            if (i <= 0)
+            {
+                i = 1;
+            }
+
+            if (this.lastTick == this.worldObj.getTotalWorldTime())
+            {
+                this.nextTick = this.worldObj.getTotalWorldTime() + i;
+            }
+            else
+            {
+                this.nextTick = this.worldObj.getTotalWorldTime() + i - 1;
+            }
+        }
+        else
+        {
+            this.transferCooldown = i;
+        }
+
+        // Spigot end
     }
 
     public boolean isOnTransferCooldown()
     {
-        return this.transferCooldown > 0;
+        // Spigot start - Return whether this hopper is cooling down.
+        if (this.worldObj != null && this.worldObj.spigotConfig.altHopperTicking)
+        {
+            if (this.lastTick == this.worldObj.getTotalWorldTime())
+            {
+                return this.nextTick > this.worldObj.getTotalWorldTime();
+            }
+            else
+            {
+                return this.nextTick >= this.worldObj.getTotalWorldTime();
+            }
+        }
+        else
+        {
+            return this.transferCooldown > 0;
+        }
+
+        // Spigot end
     }
 
     public boolean mayTransfer()
     {
         return this.transferCooldown <= 1;
@@ -659,11 +935,13 @@
     public int getField(int id)
     {
         return 0;
     }
 
-    public void setField(int id, int value) {}
+    public void setField(int id, int value)
+    {
+    }
 
     public int getFieldCount()
     {
         return 0;
     }
