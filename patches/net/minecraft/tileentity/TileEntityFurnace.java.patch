---a/net/minecraft/tileentity/TileEntityFurnace.java
+++b/net/minecraft/tileentity/TileEntityFurnace.java
@@ -1,5 +1,8 @@
 package net.minecraft.tileentity;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockFurnace;
 import net.minecraft.block.material.Material;
@@ -9,7 +9,6 @@
 import net.minecraft.init.Items;
 import net.minecraft.inventory.Container;
 import net.minecraft.inventory.ContainerFurnace;
-import net.minecraft.inventory.IInventory;
 import net.minecraft.inventory.ISidedInventory;
 import net.minecraft.inventory.SlotFurnaceFuel;
 import net.minecraft.item.Item;
@@ -21,123 +21,132 @@
 import net.minecraft.item.crafting.FurnaceRecipes;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.gui.IUpdatePlayerListBox;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.MathHelper;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class TileEntityFurnace extends TileEntityLockable implements IUpdatePlayerListBox, ISidedInventory
-{
-    private static final int[] slotsTop = new int[] {0};
-    private static final int[] slotsBottom = new int[] {2, 1};
-    private static final int[] slotsSides = new int[] {1};
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.inventory.FurnaceBurnEvent;
+import org.bukkit.event.inventory.FurnaceSmeltEvent;
+
+public class TileEntityFurnace extends TileEntityLockable implements IUpdatePlayerListBox, ISidedInventory {
+
+    private static final int[] slotsTop = new int[]{0};
+    private static final int[] slotsBottom = new int[]{2, 1};
+    private static final int[] slotsSides = new int[]{1};
     private ItemStack[] furnaceItemStacks = new ItemStack[3];
-    private int furnaceBurnTime;
+    public int furnaceBurnTime; // SpigotMCP -- Apply access transformation
     private int currentItemBurnTime;
-    private int cookTime;
+    public int cookTime; // SpigotMCP -- Apply access transformation
     private int totalCookTime;
     private String furnaceCustomName;
     private static final String __OBFID = "CL_00000357";
 
-    public int getSizeInventory()
-    {
+    // CraftBukkit start - add fields and methods
+    private int lastTick = MinecraftServer.currentTick;
+    private int maxStack = MAX_STACK;
+    public List<CraftHumanEntity> transaction = new ArrayList<CraftHumanEntity>();
+
+    public ItemStack[] getContents() {
+        return this.furnaceItemStacks;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List getViewers() {
+        return transaction;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
+    public int getSizeInventory() {
         return this.furnaceItemStacks.length;
     }
 
-    public ItemStack getStackInSlot(int index)
-    {
+    public ItemStack getStackInSlot(int index) {
         return this.furnaceItemStacks[index];
     }
 
-    public ItemStack decrStackSize(int index, int count)
-    {
-        if (this.furnaceItemStacks[index] != null)
-        {
+    public ItemStack decrStackSize(int index, int count) {
+        if (this.furnaceItemStacks[index] != null) {
             ItemStack itemstack;
 
-            if (this.furnaceItemStacks[index].stackSize <= count)
-            {
+            if (this.furnaceItemStacks[index].stackSize <= count) {
                 itemstack = this.furnaceItemStacks[index];
                 this.furnaceItemStacks[index] = null;
                 return itemstack;
-            }
-            else
-            {
+            } else {
                 itemstack = this.furnaceItemStacks[index].splitStack(count);
 
-                if (this.furnaceItemStacks[index].stackSize == 0)
-                {
+                if (this.furnaceItemStacks[index].stackSize == 0) {
                     this.furnaceItemStacks[index] = null;
                 }
 
                 return itemstack;
             }
-        }
-        else
-        {
+        } else {
             return null;
         }
     }
 
-    public ItemStack getStackInSlotOnClosing(int index)
-    {
-        if (this.furnaceItemStacks[index] != null)
-        {
+    public ItemStack getStackInSlotOnClosing(int index) {
+        if (this.furnaceItemStacks[index] != null) {
             ItemStack itemstack = this.furnaceItemStacks[index];
             this.furnaceItemStacks[index] = null;
             return itemstack;
-        }
-        else
-        {
+        } else {
             return null;
         }
     }
 
-    public void setInventorySlotContents(int index, ItemStack stack)
-    {
+    public void setInventorySlotContents(int index, ItemStack stack) {
         boolean flag = stack != null && stack.isItemEqual(this.furnaceItemStacks[index]) && ItemStack.areItemStackTagsEqual(stack, this.furnaceItemStacks[index]);
         this.furnaceItemStacks[index] = stack;
 
-        if (stack != null && stack.stackSize > this.getInventoryStackLimit())
-        {
+        if (stack != null && stack.stackSize > this.getInventoryStackLimit()) {
             stack.stackSize = this.getInventoryStackLimit();
         }
 
-        if (index == 0 && !flag)
-        {
+        if (index == 0 && !flag) {
             this.totalCookTime = this.func_174904_a(stack);
             this.cookTime = 0;
             this.markDirty();
         }
     }
 
-    public String getName()
-    {
+    public String getName() {
         return this.hasCustomName() ? this.furnaceCustomName : "container.furnace";
     }
 
-    public boolean hasCustomName()
-    {
+    public boolean hasCustomName() {
         return this.furnaceCustomName != null && this.furnaceCustomName.length() > 0;
     }
 
-    public void setCustomInventoryName(String p_145951_1_)
-    {
+    public void setCustomInventoryName(String p_145951_1_) {
         this.furnaceCustomName = p_145951_1_;
     }
 
-    public void readFromNBT(NBTTagCompound compound)
-    {
+    public void readFromNBT(NBTTagCompound compound) {
         super.readFromNBT(compound);
         NBTTagList nbttaglist = compound.getTagList("Items", 10);
         this.furnaceItemStacks = new ItemStack[this.getSizeInventory()];
 
-        for (int i = 0; i < nbttaglist.tagCount(); ++i)
-        {
+        for (int i = 0; i < nbttaglist.tagCount(); ++i) {
             NBTTagCompound nbttagcompound1 = nbttaglist.getCompoundTagAt(i);
             byte b0 = nbttagcompound1.getByte("Slot");
 
-            if (b0 >= 0 && b0 < this.furnaceItemStacks.length)
-            {
+            if (b0 >= 0 && b0 < this.furnaceItemStacks.length) {
                 this.furnaceItemStacks[b0] = ItemStack.loadItemStackFromNBT(nbttagcompound1);
             }
         }
@@ -149,27 +149,22 @@
         this.totalCookTime = compound.getShort("CookTimeTotal");
         this.currentItemBurnTime = getItemBurnTime(this.furnaceItemStacks[1]);
 
-        if (compound.hasKey("CustomName", 8))
-        {
+        if (compound.hasKey("CustomName", 8)) {
             this.furnaceCustomName = compound.getString("CustomName");
         }
     }
 
-    public void writeToNBT(NBTTagCompound compound)
-    {
+    public void writeToNBT(NBTTagCompound compound) {
         super.writeToNBT(compound);
-        compound.setShort("BurnTime", (short)this.furnaceBurnTime);
-        compound.setShort("CookTime", (short)this.cookTime);
-        compound.setShort("CookTimeTotal", (short)this.totalCookTime);
+        compound.setShort("BurnTime", (short) this.furnaceBurnTime);
+        compound.setShort("CookTime", (short) this.cookTime);
+        compound.setShort("CookTimeTotal", (short) this.totalCookTime);
         NBTTagList nbttaglist = new NBTTagList();
 
-        for (int i = 0; i < this.furnaceItemStacks.length; ++i)
-        {
-            if (this.furnaceItemStacks[i] != null)
-            {
+        for (int i = 0; i < this.furnaceItemStacks.length; ++i) {
+            if (this.furnaceItemStacks[i] != null) {
                 NBTTagCompound nbttagcompound1 = new NBTTagCompound();
-                nbttagcompound1.setByte("Slot", (byte)i);
+                nbttagcompound1.setByte("Slot", (byte) i);
                 this.furnaceItemStacks[i].writeToNBT(nbttagcompound1);
                 nbttaglist.appendTag(nbttagcompound1);
             }
@@ -176,63 +176,72 @@
 
         compound.setTag("Items", nbttaglist);
 
-        if (this.hasCustomName())
-        {
+        if (this.hasCustomName()) {
             compound.setString("CustomName", this.furnaceCustomName);
         }
     }
 
-    public int getInventoryStackLimit()
-    {
-        return 64;
+    public int getInventoryStackLimit() {
+        return maxStack; // CraftBukkit
     }
 
-    public boolean isBurning()
-    {
+    public boolean isBurning() {
         return this.furnaceBurnTime > 0;
     }
 
-    @SideOnly(Side.CLIENT)
-    public static boolean isBurning(IInventory p_174903_0_)
-    {
-        return p_174903_0_.getField(0) > 0;
-    }
-
-    public void update()
-    {
+    public void update() {
         boolean flag = this.isBurning();
         boolean flag1 = false;
 
-        if (this.isBurning())
-        {
-            --this.furnaceBurnTime;
+        // CraftBukkit start - Use wall time instead of ticks for cooking
+        int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+        this.lastTick = MinecraftServer.currentTick;
+
+        // CraftBukkit - moved from below
+        if (this.isBurning() && this.canSmelt()) {
+            this.cookTime += elapsedTicks;
+            if (this.cookTime >= this.totalCookTime) {
+                this.cookTime = 0;
+                this.totalCookTime = this.func_174904_a(this.furnaceItemStacks[0]);
+                this.smeltItem();
+                flag1 = true;
+            }
+        } else {
+            this.cookTime = 0;
         }
+        // CraftBukkit end
 
-        if (!this.worldObj.isRemote)
-        {
-            if (!this.isBurning() && (this.furnaceItemStacks[1] == null || this.furnaceItemStacks[0] == null))
-            {
-                if (!this.isBurning() && this.cookTime > 0)
-                {
+        if (this.isBurning()) {
+            this.furnaceBurnTime -= elapsedTicks; // CraftBukkit - use elapsedTicks in place of constant
+        }
+
+        if (!this.worldObj.isRemote) {
+            if (!this.isBurning() && (this.furnaceItemStacks[1] == null || this.furnaceItemStacks[0] == null)) {
+                if (!this.isBurning() && this.cookTime > 0) {
                     this.cookTime = MathHelper.clamp_int(this.cookTime - 2, 0, this.totalCookTime);
                 }
-            }
-            else
-            {
-                if (!this.isBurning() && this.canSmelt())
-                {
-                    this.currentItemBurnTime = this.furnaceBurnTime = getItemBurnTime(this.furnaceItemStacks[1]);
+            } else {
+                // CraftBukkit start - Handle multiple elapsed ticks
+                if (this.furnaceBurnTime <= 0 && this.canSmelt()) { // CraftBukkit - == to <=
+                    CraftItemStack fuel = CraftItemStack.asCraftMirror(this.furnaceItemStacks[1]);
 
-                    if (this.isBurning())
-                    {
+                    FurnaceBurnEvent furnaceBurnEvent = new FurnaceBurnEvent(this.worldObj.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), fuel, getItemBurnTime(this.furnaceItemStacks[1]));
+                    this.worldObj.getServer().getPluginManager().callEvent(furnaceBurnEvent);
+
+                    if (furnaceBurnEvent.isCancelled()) {
+                        return;
+                    }
+
+                    this.currentItemBurnTime = furnaceBurnEvent.getBurnTime();
+                    this.furnaceBurnTime += this.currentItemBurnTime;
+                    if (this.furnaceBurnTime > 0 && furnaceBurnEvent.isBurning()) {
+                        // CraftBukkit end
                         flag1 = true;
 
-                        if (this.furnaceItemStacks[1] != null)
-                        {
+                        if (this.furnaceItemStacks[1] != null) {
                             --this.furnaceItemStacks[1].stackSize;
 
-                            if (this.furnaceItemStacks[1].stackSize == 0)
-                            {
+                            if (this.furnaceItemStacks[1].stackSize == 0) {
                                 Item item = this.furnaceItemStacks[1].getItem().getContainerItem();
                                 this.furnaceItemStacks[1] = item != null ? new ItemStack(item) : null;
                             }
@@ -240,155 +240,156 @@
                     }
                 }
 
-                if (this.isBurning() && this.canSmelt())
-                {
+                // CraftBukkit start - Moved up
+                /*
+                if (this.isBurning() && this.canSmelt()) {
                     ++this.cookTime;
 
-                    if (this.cookTime == this.totalCookTime)
-                    {
+                    if (this.cookTime == this.totalCookTime) {
                         this.cookTime = 0;
                         this.totalCookTime = this.func_174904_a(this.furnaceItemStacks[0]);
                         this.smeltItem();
                         flag1 = true;
                     }
-                }
-                else
-                {
+                } else {
                     this.cookTime = 0;
                 }
+                */
             }
 
-            if (flag != this.isBurning())
-            {
+            if (flag != this.isBurning()) {
                 flag1 = true;
                 BlockFurnace.setState(this.isBurning(), this.worldObj, this.pos);
             }
         }
 
-        if (flag1)
-        {
+        if (flag1) {
             this.markDirty();
         }
     }
 
-    public int func_174904_a(ItemStack p_174904_1_)
-    {
+    public int func_174904_a(ItemStack p_174904_1_) {
         return 200;
     }
 
-    private boolean canSmelt()
-    {
-        if (this.furnaceItemStacks[0] == null)
-        {
+    private boolean canSmelt() {
+        if (this.furnaceItemStacks[0] == null) {
             return false;
-        }
-        else
-        {
+        } else {
             ItemStack itemstack = FurnaceRecipes.instance().getSmeltingResult(this.furnaceItemStacks[0]);
-            return itemstack == null ? false : (this.furnaceItemStacks[2] == null ? true : (!this.furnaceItemStacks[2].isItemEqual(itemstack) ? false : (this.furnaceItemStacks[2].stackSize < this.getInventoryStackLimit() && this.furnaceItemStacks[2].stackSize < this.furnaceItemStacks[2].getMaxStackSize() ? true : this.furnaceItemStacks[2].stackSize < itemstack.getMaxStackSize())));
+            // CraftBukkit - consider resultant count instead of current count
+            return itemstack == null ? false : (this.furnaceItemStacks[2] == null ? true : (!this.furnaceItemStacks[2].isItemEqual(itemstack) ? false : (this.furnaceItemStacks[2].stackSize + itemstack.stackSize <= this.getInventoryStackLimit() && this.furnaceItemStacks[2].stackSize < this.furnaceItemStacks[2].getMaxStackSize() ? true : this.furnaceItemStacks[2].stackSize + itemstack.stackSize <= itemstack.getMaxStackSize())));
         }
     }
 
-    public void smeltItem()
-    {
-        if (this.canSmelt())
-        {
+    public void smeltItem() {
+        if (this.canSmelt()) {
             ItemStack itemstack = FurnaceRecipes.instance().getSmeltingResult(this.furnaceItemStacks[0]);
 
-            if (this.furnaceItemStacks[2] == null)
-            {
-                this.furnaceItemStacks[2] = itemstack.copy();
+            // CraftBukkit start - fire FurnaceSmeltEvent
+            CraftItemStack source = CraftItemStack.asCraftMirror(this.furnaceItemStacks[0]);
+            org.bukkit.inventory.ItemStack result = CraftItemStack.asCraftMirror(this.furnaceItemStacks[0]);
+
+            FurnaceSmeltEvent furnaceSmeltEvent = new FurnaceSmeltEvent(this.worldObj.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), source, result);
+            this.worldObj.getServer().getPluginManager().callEvent(furnaceSmeltEvent);
+
+            if (furnaceSmeltEvent.isCancelled()) {
+                return;
             }
-            else if (this.furnaceItemStacks[2].getItem() == itemstack.getItem())
-            {
+
+            result = furnaceSmeltEvent.getResult();
+            itemstack = CraftItemStack.asNMSCopy(result);
+
+            if (itemstack != null) {
+                if (this.furnaceItemStacks[2] == null) {
+                    this.furnaceItemStacks[2] = itemstack;
+                } else if (CraftItemStack.asCraftMirror(this.furnaceItemStacks[2]).isSimilar(result)) {
+                    this.furnaceItemStacks[2].stackSize += itemstack.stackSize;
+                } else {
+                    return;
+                }
+            }
+
+            /*
+            if (this.furnaceItemStacks[2] == null) {
+                this.furnaceItemStacks[2] = itemstack.copy();
+            } else if (this.furnaceItemStacks[2].getItem() == itemstack.getItem()) {
                 ++this.furnaceItemStacks[2].stackSize;
             }
+            */
+            // CraftBukkit end
 
-            if (this.furnaceItemStacks[0].getItem() == Item.getItemFromBlock(Blocks.sponge) && this.furnaceItemStacks[0].getMetadata() == 1 && this.furnaceItemStacks[1] != null && this.furnaceItemStacks[1].getItem() == Items.bucket)
-            {
+            if (this.furnaceItemStacks[0].getItem() == Item.getItemFromBlock(Blocks.sponge) && this.furnaceItemStacks[0].getMetadata() == 1 && this.furnaceItemStacks[1] != null && this.furnaceItemStacks[1].getItem() == Items.bucket) {
                 this.furnaceItemStacks[1] = new ItemStack(Items.water_bucket);
             }
 
             --this.furnaceItemStacks[0].stackSize;
 
-            if (this.furnaceItemStacks[0].stackSize <= 0)
-            {
+            if (this.furnaceItemStacks[0].stackSize <= 0) {
                 this.furnaceItemStacks[0] = null;
             }
         }
     }
 
-    public static int getItemBurnTime(ItemStack p_145952_0_)
-    {
-        if (p_145952_0_ == null)
-        {
+    public static int getItemBurnTime(ItemStack p_145952_0_) {
+        if (p_145952_0_ == null) {
             return 0;
-        }
-        else
-        {
+        } else {
             Item item = p_145952_0_.getItem();
 
-            if (item instanceof ItemBlock && Block.getBlockFromItem(item) != Blocks.air)
-            {
+            if (item instanceof ItemBlock && Block.getBlockFromItem(item) != Blocks.air) {
                 Block block = Block.getBlockFromItem(item);
 
-                if (block == Blocks.wooden_slab)
-                {
+                if (block == Blocks.wooden_slab) {
                     return 150;
                 }
 
-                if (block.getMaterial() == Material.wood)
-                {
+                if (block.getMaterial() == Material.wood) {
                     return 300;
                 }
 
-                if (block == Blocks.coal_block)
-                {
+                if (block == Blocks.coal_block) {
                     return 16000;
                 }
             }
 
-            return item instanceof ItemTool && ((ItemTool)item).getToolMaterialName().equals("WOOD") ? 200 : (item instanceof ItemSword && ((ItemSword)item).getToolMaterialName().equals("WOOD") ? 200 : (item instanceof ItemHoe && ((ItemHoe)item).getMaterialName().equals("WOOD") ? 200 : (item == Items.stick ? 100 : (item == Items.coal ? 1600 : (item == Items.lava_bucket ? 20000 : (item == Item.getItemFromBlock(Blocks.sapling) ? 100 : (item == Items.blaze_rod ? 2400 : 0)))))));
+            return item instanceof ItemTool && ((ItemTool) item).getToolMaterialName().equals("WOOD") ? 200 : (item instanceof ItemSword && ((ItemSword) item).getToolMaterialName().equals("WOOD") ? 200 : (item instanceof ItemHoe && ((ItemHoe) item).getMaterialName().equals("WOOD") ? 200 : (item == Items.stick ? 100 : (item == Items.coal ? 1600 : (item == Items.lava_bucket ? 20000 : (item == Item.getItemFromBlock(Blocks.sapling) ? 100 : (item == Items.blaze_rod ? 2400 : 0)))))));
         }
     }
 
-    public static boolean isItemFuel(ItemStack p_145954_0_)
-    {
+    public static boolean isItemFuel(ItemStack p_145954_0_) {
         return getItemBurnTime(p_145954_0_) > 0;
     }
 
-    public boolean isUseableByPlayer(EntityPlayer player)
-    {
-        return this.worldObj.getTileEntity(this.pos) != this ? false : player.getDistanceSq((double)this.pos.getX() + 0.5D, (double)this.pos.getY() + 0.5D, (double)this.pos.getZ() + 0.5D) <= 64.0D;
+    public boolean isUseableByPlayer(EntityPlayer player) {
+        return this.worldObj.getTileEntity(this.pos) != this ? false : player.getDistanceSq((double) this.pos.getX() + 0.5D, (double) this.pos.getY() + 0.5D, (double) this.pos.getZ() + 0.5D) <= 64.0D;
     }
 
-    public void openInventory(EntityPlayer player) {}
+    public void openInventory(EntityPlayer player) {
+    }
 
-    public void closeInventory(EntityPlayer player) {}
+    public void closeInventory(EntityPlayer player) {
+    }
 
-    public boolean isItemValidForSlot(int index, ItemStack stack)
-    {
+    public boolean isItemValidForSlot(int index, ItemStack stack) {
         return index == 2 ? false : (index != 1 ? true : isItemFuel(stack) || SlotFurnaceFuel.isBucket(stack));
     }
 
-    public int[] getSlotsForFace(EnumFacing side)
-    {
+    public int[] getSlotsForFace(EnumFacing side) {
         return side == EnumFacing.DOWN ? slotsBottom : (side == EnumFacing.UP ? slotsTop : slotsSides);
     }
 
-    public boolean canInsertItem(int index, ItemStack itemStackIn, EnumFacing direction)
-    {
+    public boolean canInsertItem(int index, ItemStack itemStackIn, EnumFacing direction) {
         return this.isItemValidForSlot(index, itemStackIn);
     }
 
-    public boolean canExtractItem(int index, ItemStack stack, EnumFacing direction)
-    {
-        if (direction == EnumFacing.DOWN && index == 1)
-        {
+    public boolean canExtractItem(int index, ItemStack stack, EnumFacing direction) {
+        if (direction == EnumFacing.DOWN && index == 1) {
             Item item = stack.getItem();
 
-            if (item != Items.water_bucket && item != Items.bucket)
-            {
+            if (item != Items.water_bucket && item != Items.bucket) {
                 return false;
             }
         }
@@ -396,18 +396,15 @@
         return true;
     }
 
-    public String getGuiID()
-    {
+    public String getGuiID() {
         return "minecraft:furnace";
     }
 
-    public Container createContainer(InventoryPlayer playerInventory, EntityPlayer playerIn)
-    {
+    public Container createContainer(InventoryPlayer playerInventory, EntityPlayer playerIn) {
         return new ContainerFurnace(playerInventory, this);
     }
 
-    public int getField(int id)
-    {
-        switch (id)
-        {
+    public int getField(int id) {
+        switch (id) {
             case 0:
                 return this.furnaceBurnTime;
             case 1:
@@ -423,10 +423,8 @@
         }
     }
 
-    public void setField(int id, int value)
-    {
-        switch (id)
-        {
+    public void setField(int id, int value) {
+        switch (id) {
             case 0:
                 this.furnaceBurnTime = value;
                 break;
@@ -441,17 +441,13 @@
         }
     }
 
-    public int getFieldCount()
-    {
+    public int getFieldCount() {
         return 4;
     }
 
-    public void clear()
-    {
-        for (int i = 0; i < this.furnaceItemStacks.length; ++i)
-        {
+    public void clear() {
+        for (int i = 0; i < this.furnaceItemStacks.length; ++i) {
             this.furnaceItemStacks[i] = null;
         }
     }
-}
+}
