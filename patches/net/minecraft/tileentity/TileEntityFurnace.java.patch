--- decompiled\net\minecraft\tileentity\TileEntityFurnace.java
+++ src\main\java\net\minecraft\tileentity\TileEntityFurnace.java
@@ -1,17 +1,19 @@
 package net.minecraft.tileentity;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockFurnace;
 import net.minecraft.block.material.Material;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.InventoryPlayer;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.Items;
 import net.minecraft.inventory.Container;
 import net.minecraft.inventory.ContainerFurnace;
-import net.minecraft.inventory.IInventory;
 import net.minecraft.inventory.ISidedInventory;
 import net.minecraft.inventory.SlotFurnaceFuel;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemBlock;
 import net.minecraft.item.ItemHoe;
@@ -19,29 +21,65 @@
 import net.minecraft.item.ItemSword;
 import net.minecraft.item.ItemTool;
 import net.minecraft.item.crafting.FurnaceRecipes;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.gui.IUpdatePlayerListBox;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.MathHelper;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.inventory.FurnaceBurnEvent;
+import org.bukkit.event.inventory.FurnaceSmeltEvent;
+
 public class TileEntityFurnace extends TileEntityLockable implements IUpdatePlayerListBox, ISidedInventory
 {
+
     private static final int[] slotsTop = new int[] {0};
     private static final int[] slotsBottom = new int[] {2, 1};
     private static final int[] slotsSides = new int[] {1};
     private ItemStack[] furnaceItemStacks = new ItemStack[3];
-    private int furnaceBurnTime;
+    public int furnaceBurnTime; // SpigotMCP -- Apply access transformation
     private int currentItemBurnTime;
-    private int cookTime;
+    public int cookTime; // SpigotMCP -- Apply access transformation
     private int totalCookTime;
     private String furnaceCustomName;
     private static final String __OBFID = "CL_00000357";
 
+    // CraftBukkit start - add fields and methods
+    private int lastTick = MinecraftServer.currentTick;
+    private int maxStack = MAX_STACK;
+    public List<CraftHumanEntity> transaction = new ArrayList<CraftHumanEntity>();
+
+    public ItemStack[] getContents()
+    {
+        return this.furnaceItemStacks;
+    }
+
+    public void onOpen(CraftHumanEntity who)
+    {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who)
+    {
+        transaction.remove(who);
+    }
+
+    public List getViewers()
+    {
+        return transaction;
+    }
+
+    public void setMaxStackSize(int size)
+    {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
     public int getSizeInventory()
     {
         return this.furnaceItemStacks.length;
     }
 
@@ -182,32 +220,49 @@
         }
     }
 
     public int getInventoryStackLimit()
     {
-        return 64;
+        return maxStack; // CraftBukkit
     }
 
     public boolean isBurning()
     {
         return this.furnaceBurnTime > 0;
     }
 
-    @SideOnly(Side.CLIENT)
-    public static boolean isBurning(IInventory p_174903_0_)
-    {
-        return p_174903_0_.getField(0) > 0;
-    }
-
     public void update()
     {
         boolean flag = this.isBurning();
         boolean flag1 = false;
+        // CraftBukkit start - Use wall time instead of ticks for cooking
+        int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+        this.lastTick = MinecraftServer.currentTick;
 
+        // CraftBukkit - moved from below
+        if (this.isBurning() && this.canSmelt())
+        {
+            this.cookTime += elapsedTicks;
+
+            if (this.cookTime >= this.totalCookTime)
+            {
+                this.cookTime = 0;
+                this.totalCookTime = this.func_174904_a(this.furnaceItemStacks[0]);
+                this.smeltItem();
+                flag1 = true;
+            }
+        }
+        else
+        {
+            this.cookTime = 0;
+        }
+
+        // CraftBukkit end
+
         if (this.isBurning())
         {
-            --this.furnaceBurnTime;
+            this.furnaceBurnTime -= elapsedTicks; // CraftBukkit - use elapsedTicks in place of constant
         }
 
         if (!this.worldObj.isRemote)
         {
             if (!this.isBurning() && (this.furnaceItemStacks[1] == null || this.furnaceItemStacks[0] == null))
@@ -217,16 +272,28 @@
                     this.cookTime = MathHelper.clamp_int(this.cookTime - 2, 0, this.totalCookTime);
                 }
             }
             else
             {
-                if (!this.isBurning() && this.canSmelt())
+                // CraftBukkit start - Handle multiple elapsed ticks
+                if (this.furnaceBurnTime <= 0 && this.canSmelt())   // CraftBukkit - == to <=
                 {
-                    this.currentItemBurnTime = this.furnaceBurnTime = getItemBurnTime(this.furnaceItemStacks[1]);
+                    CraftItemStack fuel = CraftItemStack.asCraftMirror(this.furnaceItemStacks[1]);
+                    FurnaceBurnEvent furnaceBurnEvent = new FurnaceBurnEvent(this.worldObj.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), fuel, getItemBurnTime(this.furnaceItemStacks[1]));
+                    this.worldObj.getServer().getPluginManager().callEvent(furnaceBurnEvent);
 
-                    if (this.isBurning())
+                    if (furnaceBurnEvent.isCancelled())
                     {
+                        return;
+                    }
+
+                    this.currentItemBurnTime = furnaceBurnEvent.getBurnTime();
+                    this.furnaceBurnTime += this.currentItemBurnTime;
+
+                    if (this.furnaceBurnTime > 0 && furnaceBurnEvent.isBurning())
+                    {
+                        // CraftBukkit end
                         flag1 = true;
 
                         if (this.furnaceItemStacks[1] != null)
                         {
                             --this.furnaceItemStacks[1].stackSize;
@@ -238,26 +305,25 @@
                             }
                         }
                     }
                 }
 
-                if (this.isBurning() && this.canSmelt())
-                {
+                // CraftBukkit start - Moved up
+                /*
+                if (this.isBurning() && this.canSmelt()) {
                     ++this.cookTime;
 
-                    if (this.cookTime == this.totalCookTime)
-                    {
+                    if (this.cookTime == this.totalCookTime) {
                         this.cookTime = 0;
                         this.totalCookTime = this.func_174904_a(this.furnaceItemStacks[0]);
                         this.smeltItem();
                         flag1 = true;
                     }
-                }
-                else
-                {
+                } else {
                     this.cookTime = 0;
                 }
+                */
             }
 
             if (flag != this.isBurning())
             {
                 flag1 = true;
@@ -283,28 +349,58 @@
             return false;
         }
         else
         {
             ItemStack itemstack = FurnaceRecipes.instance().getSmeltingResult(this.furnaceItemStacks[0]);
-            return itemstack == null ? false : (this.furnaceItemStacks[2] == null ? true : (!this.furnaceItemStacks[2].isItemEqual(itemstack) ? false : (this.furnaceItemStacks[2].stackSize < this.getInventoryStackLimit() && this.furnaceItemStacks[2].stackSize < this.furnaceItemStacks[2].getMaxStackSize() ? true : this.furnaceItemStacks[2].stackSize < itemstack.getMaxStackSize())));
+            // CraftBukkit - consider resultant count instead of current count
+            return itemstack == null ? false : (this.furnaceItemStacks[2] == null ? true : (!this.furnaceItemStacks[2].isItemEqual(itemstack) ? false : (this.furnaceItemStacks[2].stackSize + itemstack.stackSize <= this.getInventoryStackLimit() && this.furnaceItemStacks[2].stackSize < this.furnaceItemStacks[2].getMaxStackSize() ? true : this.furnaceItemStacks[2].stackSize + itemstack.stackSize <= itemstack.getMaxStackSize())));
         }
     }
 
     public void smeltItem()
     {
         if (this.canSmelt())
         {
             ItemStack itemstack = FurnaceRecipes.instance().getSmeltingResult(this.furnaceItemStacks[0]);
+            // CraftBukkit start - fire FurnaceSmeltEvent
+            CraftItemStack source = CraftItemStack.asCraftMirror(this.furnaceItemStacks[0]);
+            org.bukkit.inventory.ItemStack result = CraftItemStack.asCraftMirror(this.furnaceItemStacks[0]);
+            FurnaceSmeltEvent furnaceSmeltEvent = new FurnaceSmeltEvent(this.worldObj.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), source, result);
+            this.worldObj.getServer().getPluginManager().callEvent(furnaceSmeltEvent);
 
-            if (this.furnaceItemStacks[2] == null)
+            if (furnaceSmeltEvent.isCancelled())
             {
-                this.furnaceItemStacks[2] = itemstack.copy();
+                return;
             }
-            else if (this.furnaceItemStacks[2].getItem() == itemstack.getItem())
+
+            result = furnaceSmeltEvent.getResult();
+            itemstack = CraftItemStack.asNMSCopy(result);
+
+            if (itemstack != null)
             {
+                if (this.furnaceItemStacks[2] == null)
+                {
+                    this.furnaceItemStacks[2] = itemstack;
+                }
+                else if (CraftItemStack.asCraftMirror(this.furnaceItemStacks[2]).isSimilar(result))
+                {
+                    this.furnaceItemStacks[2].stackSize += itemstack.stackSize;
+                }
+                else
+                {
+                    return;
+                }
+            }
+
+            /*
+            if (this.furnaceItemStacks[2] == null) {
+                this.furnaceItemStacks[2] = itemstack.copy();
+            } else if (this.furnaceItemStacks[2].getItem() == itemstack.getItem()) {
                 ++this.furnaceItemStacks[2].stackSize;
             }
+            */
+            // CraftBukkit end
 
             if (this.furnaceItemStacks[0].getItem() == Item.getItemFromBlock(Blocks.sponge) && this.furnaceItemStacks[0].getMetadata() == 1 && this.furnaceItemStacks[1] != null && this.furnaceItemStacks[1].getItem() == Items.bucket)
             {
                 this.furnaceItemStacks[1] = new ItemStack(Items.water_bucket);
             }
@@ -360,13 +456,17 @@
     public boolean isUseableByPlayer(EntityPlayer player)
     {
         return this.worldObj.getTileEntity(this.pos) != this ? false : player.getDistanceSq((double)this.pos.getX() + 0.5D, (double)this.pos.getY() + 0.5D, (double)this.pos.getZ() + 0.5D) <= 64.0D;
     }
 
-    public void openInventory(EntityPlayer player) {}
+    public void openInventory(EntityPlayer player)
+    {
+    }
 
-    public void closeInventory(EntityPlayer player) {}
+    public void closeInventory(EntityPlayer player)
+    {
+    }
 
     public boolean isItemValidForSlot(int index, ItemStack stack)
     {
         return index == 2 ? false : (index != 1 ? true : isItemFuel(stack) || SlotFurnaceFuel.isBucket(stack));
     }
